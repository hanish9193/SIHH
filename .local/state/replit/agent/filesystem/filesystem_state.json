{"file_contents":{"sih10-1/pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"flask>=3.1.2\",\n    \"flask-cors>=6.0.1\",\n    \"google-generativeai>=0.8.5\",\n    \"gunicorn>=23.0.0\",\n    \"openai>=1.107.1\",\n    \"pillow>=11.3.0\",\n    \"psycopg2-binary>=2.9.10\",\n    \"python-dotenv>=1.1.1\",\n    \"requests>=2.32.5\",\n    \"sqlalchemy>=2.0.43\",\n]\n","size_bytes":401},"sih10-1/replit.md":{"content":"# KisanMitra - Agricultural Support Mobile Application\n\n## Overview\nKisanMitra (meaning \"Farmer's Friend\") is a comprehensive mobile-first agricultural support application designed specifically for farmers in India. The application provides AI-powered plant disease diagnosis, agricultural marketplace functionality, weather monitoring, soil health tracking, cultivation guides, and expert advisory services. Built as a hybrid mobile app targeting rural farmers with varying connectivity conditions, KisanMitra combines modern web technologies with native mobile capabilities to deliver a seamless farming assistance experience.\n\n## User Preferences\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18.3.1 with TypeScript for type safety and modern development practices\n- **Build System**: Vite 5.4.19 configured for mobile-first development with hot module replacement and proxy configuration for backend API integration\n- **UI Framework**: shadcn/ui components built on Radix UI primitives providing accessible, headless components with Tailwind CSS for styling\n- **Routing**: React Router DOM 6.30.1 with comprehensive route handling for all application pages including nested routes and protected routes\n- **State Management**: TanStack React Query 5.83.0 for server state management, caching, and optimistic updates\n- **Form Handling**: React Hook Form with Zod validation for type-safe form management and input validation\n\n### Mobile Development Strategy  \n- **Hybrid Approach**: Capacitor 7.4.3 for cross-platform mobile deployment targeting iOS and Android platforms\n- **Progressive Web App**: Offline-first design with service workers for handling rural connectivity challenges and poor network conditions\n- **Native Capabilities**: Camera access for plant diagnosis, GPS for location services, push notifications for alerts, haptic feedback for user interactions, splash screen configuration, and keyboard management\n- **Responsive Design**: Mobile-first CSS with safe area handling for various device sizes and Android-optimized design system\n- **Performance**: Optimized for low-end devices with efficient bundle splitting, lazy loading, and minimal memory footprint\n\n### Backend Architecture\n- **API Server**: Flask-based Python backend with CORS configuration for handling plant diagnosis and chat functionality\n- **Database Integration**: Drizzle ORM with Neon PostgreSQL for production data persistence with comprehensive schema definitions for users, listings, diagnoses, and advisory records\n- **AI Integration**: Multiple AI services including Hugging Face API for plant disease detection and Google Gemini for intelligent chat assistance\n- **Image Processing**: PIL (Python Imaging Library) for image manipulation and analysis in the diagnosis pipeline\n\n### Data Management Architecture\n- **Local Storage Strategy**: Comprehensive localStorage implementation for offline functionality including user data persistence, cart state management, order history, and notification storage\n- **User Authentication**: Complete signup/login flow with automatic authentication persistence and user profile management using phone-based authentication\n- **Cart Management**: Reactive cart service with real-time updates, persistence across sessions, and comprehensive order management\n- **Weather Integration**: OpenWeatherMap API integration for real-time weather data, forecasts, and agricultural alerts\n- **Location Services**: GPS-based location detection with fallback to manual state/district selection for regional customization\n\n### Component Architecture\n- **Atomic Design Pattern**: Reusable UI components following design system principles with structured component hierarchy in `/src/components/ui/`\n- **Page Components**: Feature-specific route components with clear separation of concerns for each major feature area\n- **Custom Hooks**: Shared stateful logic for common operations like authentication, data fetching, location services, and mobile responsiveness detection\n- **Utility Functions**: Helper functions for cart management, weather integration, data persistence, form validation, and UI utilities\n\n### Core Features Implementation\n- **Plant Diagnosis**: AI-powered disease detection with camera integration, confidence scoring, and comprehensive treatment recommendations\n- **Agricultural Marketplace**: Complete e-commerce functionality with product catalog, cart management, checkout process, and order tracking\n- **Weather Monitoring**: Real-time weather data integration with forecasts, agricultural alerts, and location-based weather information\n- **Soil Health Tracking**: Soil test management with parameter tracking, recommendations storage, and guidance integration\n- **Cultivation Guides**: Step-by-step crop cultivation guides with bookmark functionality and detailed agricultural practices\n- **Fertilizer Guidance**: Personalized fertilizer recommendations with application timing, quantity calculations, and tracking capabilities\n- **Market Prices**: Real-time market price tracking with location-based data and price trend analysis\n- **Profile Management**: Comprehensive user profiles with statistics tracking, achievements system, and activity monitoring\n- **Advisory System**: Expert guidance storage and retrieval with categorized agricultural advice\n- **Chatbot Integration**: AI-powered farming assistant with multilingual support and contextual agricultural advice\n\n## External Dependencies\n\n### Core Development Stack\n- **React Ecosystem**: React 18.3.1, React Router DOM 6.30.1, React Hook Form with Zod validation\n- **UI Component Library**: Radix UI primitives (@radix-ui/*) for accessible, headless components\n- **Build Tooling**: Vite 5.4.19 with TypeScript support and ESLint configuration\n- **Styling**: Tailwind CSS with PostCSS for utility-first styling approach and custom agricultural color palette\n\n### Mobile Development\n- **Capacitor**: 7.4.3 for hybrid app development with native iOS and Android support\n- **Native Plugins**: @capacitor/app, @capacitor/camera, @capacitor/geolocation, @capacitor/push-notifications, @capacitor/status-bar, @capacitor/splash-screen, @capacitor/keyboard, @capacitor/haptics\n\n### Backend Services\n- **Flask**: 3.1.2+ for Python backend API with Flask-CORS for cross-origin support\n- **Database**: Neon PostgreSQL with Drizzle ORM for type-safe database operations\n- **AI Services**: Hugging Face API for plant disease detection, Google Gemini for intelligent chat responses\n- **Image Processing**: Pillow (PIL) 11.3.0+ for image manipulation and analysis\n\n### Third-Party APIs\n- **Weather Service**: OpenWeatherMap API for real-time weather data and forecasts\n- **Location Services**: Browser Geolocation API with fallback to manual location selection\n- **Maps Integration**: Google Places API for nearby shop location services\n- **Payment Integration**: UPI and digital payment gateway support for marketplace transactions\n\n### Development Tools\n- **TypeScript**: For type safety and enhanced developer experience\n- **ESLint**: Code linting and style enforcement\n- **PostCSS**: CSS processing and optimization\n- **Gunicorn**: Production WSGI server for Python backend deployment","size_bytes":7263},"sih10-1/sih8/sih7/pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"flask>=3.1.2\",\n    \"flask-cors>=6.0.1\",\n    \"openai>=1.107.1\",\n    \"pillow>=11.3.0\",\n    \"requests>=2.32.5\",\n]\n","size_bytes":258},"sih10-1/sih8/sih7/replit.md":{"content":"# KisanMitra - Agricultural Support Mobile Application\n\n## Overview\nKisanMitra (meaning \"Farmer's Friend\") is a comprehensive mobile-first agricultural support application designed specifically for farmers in India. The application provides AI-powered plant disease diagnosis, agricultural marketplace functionality, weather monitoring, soil health tracking, cultivation guides, fertilizer guidance, and market price information. Built as a Progressive Web App with native mobile capabilities, it addresses the unique challenges faced by Indian farmers including offline functionality for rural connectivity and localized agricultural content.\n\n## User Preferences\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18.3.1 with TypeScript for type safety and modern development practices\n- **Build System**: Vite 5.4.19 configured for mobile-first development with hot module replacement and proxy configuration for backend API integration\n- **UI Framework**: shadcn/ui components built on Radix UI primitives providing accessible, headless components with Tailwind CSS for styling\n- **Routing**: React Router DOM 6.30.1 with comprehensive route handling for all application pages including nested routes and protected routes\n- **State Management**: TanStack React Query 5.83.0 for server state management, caching, and optimistic updates\n- **Form Handling**: React Hook Form with Zod validation for type-safe form management and input validation\n\n### Mobile Development Strategy  \n- **Hybrid Approach**: Capacitor 7.4.3 for cross-platform mobile deployment targeting iOS and Android platforms\n- **Progressive Web App**: Offline-first design with service workers for handling rural connectivity challenges and poor network conditions\n- **Native Capabilities**: Camera access for plant diagnosis, GPS for location services, push notifications for alerts, haptic feedback for user interactions, splash screen configuration, and keyboard management\n- **Responsive Design**: Mobile-first CSS with safe area handling for various device sizes and Android-optimized design system\n- **Performance**: Optimized for low-end devices with efficient bundle splitting, lazy loading, and minimal memory footprint\n\n### Data Management Architecture\n- **Local Storage Strategy**: Comprehensive localStorage implementation for offline functionality including user data persistence, cart state management, order history, and notification storage\n- **User Authentication**: Complete signup/login flow with automatic authentication persistence and user profile management using phone-based authentication\n- **Cart Management**: Reactive cart service with real-time updates, persistence across sessions, and comprehensive order management\n- **Database Integration**: Drizzle ORM with Neon PostgreSQL for production data persistence with proper schema definitions for users, listings, diagnoses, and advisory records\n- **Weather Integration**: OpenWeatherMap API integration for real-time weather data, forecasts, and agricultural alerts\n- **AI Integration**: Hugging Face API for plant disease diagnosis with image processing capabilities and confidence scoring\n\n### Component Architecture\n- **Atomic Design Pattern**: Reusable UI components following design system principles with structured component hierarchy in `/src/components/ui/`\n- **Page Components**: Feature-specific route components with clear separation of concerns for each major feature area\n- **Custom Hooks**: Shared stateful logic for common operations like authentication, data fetching, location services, and mobile responsiveness detection\n- **Utility Functions**: Helper functions for cart management, weather integration, data persistence, form validation, and UI utilities\n\n### Core Features Implementation\n- **Plant Diagnosis**: AI-powered disease detection with camera integration, confidence scoring, and comprehensive treatment recommendations\n- **Agricultural Marketplace**: Complete e-commerce functionality with product catalog, cart management, checkout process, and order tracking\n- **Weather Monitoring**: Real-time weather data integration with forecasts, agricultural alerts, and location-based weather information\n- **Soil Health Tracking**: Soil test management with parameter tracking, recommendations storage, and guidance integration\n- **Cultivation Guides**: Step-by-step crop cultivation guides with bookmark functionality and detailed agricultural practices\n- **Fertilizer Guidance**: Personalized fertilizer recommendations with application timing, quantity calculations, and tracking capabilities\n- **Market Prices**: Real-time market price tracking with location-based data and price trend analysis\n- **Profile Management**: Comprehensive user profiles with statistics tracking, achievements system, and activity monitoring\n\n## External Dependencies\n\n### Core Development Stack\n- **React Ecosystem**: React 18.3.1, React Router DOM 6.30.1, React Hook Form with Zod validation for form management\n- **UI Component Library**: Radix UI primitives (@radix-ui/*) for accessible, headless components including dialogs, dropdowns, and form controls\n- **Build Tooling**: Vite 5.4.19 with TypeScript support, ESLint configuration, and development server optimization\n- **Styling Framework**: Tailwind CSS with PostCSS for utility-first styling approach and custom agricultural color palette\n\n### Mobile Development\n- **Capacitor Framework**: @capacitor/core 7.4.3 for hybrid app development with native platform integrations\n- **Native Plugins**: @capacitor/app, @capacitor/haptics, @capacitor/keyboard, @capacitor/splash-screen, @capacitor/status-bar for native functionality\n- **Camera Integration**: Capacitor Camera plugin for plant image capture and analysis\n\n### Backend and Database\n- **Database**: Neon PostgreSQL with @neondatabase/serverless for serverless database operations\n- **ORM**: Drizzle ORM with drizzle-kit for type-safe database operations and schema management\n- **WebSocket**: ws package for real-time communication capabilities\n\n### External APIs and Services\n- **Weather Service**: OpenWeatherMap API for real-time weather data and agricultural forecasts\n- **AI/ML Service**: Hugging Face Inference API for plant disease diagnosis and image analysis\n- **Location Services**: Browser Geolocation API with fallback location detection mechanisms\n\n### Development and Deployment\n- **TypeScript**: Full TypeScript support with strict type checking and custom type definitions\n- **Linting**: ESLint with TypeScript support and React-specific rules\n- **Package Management**: npm with lock file for dependency version control\n- **Deployment**: Configured for Replit autoscale deployment with static file serving","size_bytes":6775},"sih10-1/sih8/sih7/sih6/replit.md":{"content":"# KisanMitra - Agricultural Support Mobile Application\n\n## Overview\nKisanMitra (meaning \"Farmer's Friend\") is a comprehensive mobile-first agricultural support application designed specifically for farmers in India. The application provides AI-powered plant disease diagnosis, agricultural marketplace functionality, weather monitoring, soil health tracking, and personalized farming guidance. Built as a hybrid mobile application using Capacitor, it serves as a complete digital farming companion offering offline-first functionality for rural connectivity challenges.\n\n## User Preferences\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18.3.1 with TypeScript for type safety and modern development practices\n- **Build System**: Vite 5.4.19 configured for mobile-first development with hot module replacement and proxy configuration\n- **UI Framework**: shadcn/ui components built on Radix UI primitives with comprehensive component library\n- **Styling**: Tailwind CSS with custom agricultural color palette, mobile-optimized spacing, and CSS variables for theming\n- **Routing**: React Router DOM 6.30.1 with comprehensive route handling for all application pages\n- **State Management**: TanStack React Query 5.83.0 for server state management and caching\n- **Form Handling**: React Hook Form with Zod validation for type-safe form management\n\n### Mobile Development Strategy  \n- **Hybrid Approach**: Capacitor 7.4.3 for cross-platform mobile deployment targeting iOS and Android\n- **Progressive Web App**: Offline-first design with service workers for rural connectivity challenges\n- **Native Capabilities**: Camera access for plant diagnosis, GPS for location services, push notifications, haptic feedback, splash screen, and keyboard management\n- **Responsive Design**: Mobile-first CSS with safe area handling and Android-optimized design system\n- **Performance**: Optimized for low-end devices with efficient bundle splitting and lazy loading\n\n### Data Management Architecture\n- **Local Storage Strategy**: Comprehensive localStorage implementation for offline functionality including user data, cart state, orders, and notifications\n- **User Authentication**: Complete signup/login flow with automatic authentication persistence and user profile management\n- **Cart Management**: Reactive cart service with real-time updates, persistence, and order management\n- **Database Integration**: Drizzle ORM with Neon PostgreSQL for production data persistence with proper schema definitions\n- **Weather Integration**: OpenWeatherMap API integration for real-time weather data and forecasts\n- **AI Integration**: Hugging Face API for plant disease diagnosis with image processing capabilities\n\n### Component Architecture\n- **Atomic Design Pattern**: Reusable UI components following design system principles in structured component hierarchy\n- **Page Components**: Feature-specific route components with clear separation of concerns for each major feature\n- **Custom Hooks**: Shared stateful logic for common operations like authentication, data fetching, and mobile responsiveness\n- **Utility Functions**: Helper functions for cart management, weather integration, data persistence, and UI utilities\n\n### Core Features Implementation\n- **Plant Diagnosis**: AI-powered disease detection with camera integration and treatment recommendations\n- **Agricultural Marketplace**: Complete e-commerce functionality with cart, checkout, and order management\n- **Weather Monitoring**: Real-time weather data with forecasts and agricultural alerts\n- **Soil Health Tracking**: Soil test management with recommendations and guidance storage\n- **Cultivation Guides**: Step-by-step crop cultivation guides with bookmark functionality\n- **Fertilizer Guidance**: Personalized fertilizer recommendations with application tracking\n- **Market Prices**: Real-time market price tracking with location-based data\n- **Profile Management**: User profiles with statistics, achievements, and activity tracking\n\n## External Dependencies\n\n### Core Development Stack\n- **React Ecosystem**: React 18.3.1, React Router DOM 6.30.1, React Hook Form with Zod validation\n- **UI Component Library**: Complete Radix UI component suite (@radix-ui/*) for accessible, headless components\n- **Build and Development**: Vite 5.4.19 with TypeScript support, ESLint configuration, and development server optimization\n- **Styling Framework**: Tailwind CSS with PostCSS for utility-first styling approach and responsive design\n\n### Mobile and Native Integration\n- **Capacitor Platform**: Full Capacitor 7.4.3 ecosystem including Core, Android, iOS, CLI for hybrid app development\n- **Native Plugins**: App lifecycle management, Camera access, Haptics feedback, Keyboard handling, Splash screen, Status bar control\n- **Performance Optimization**: TanStack React Query for efficient data fetching and caching strategies\n\n### Data and Backend Services\n- **Database Stack**: Drizzle ORM with Drizzle Kit, Neon Database serverless PostgreSQL for scalable data persistence\n- **External APIs**: OpenWeatherMap API for weather data, Hugging Face API for AI-powered plant diagnosis\n- **Development Tools**: WebSocket support for real-time features, TypeScript configuration for type safety","size_bytes":5315},"sih10-1/sih8/sih7/sih6/sih5/pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = []\n\n[[tool.uv.index]]\nexplicit = true\nname = \"pytorch-cpu\"\nurl = \"https://download.pytorch.org/whl/cpu\"\n\n[tool.uv.sources]\nAA-module = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nABlooper = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nAnalysisG = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nAutoRAG = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nBERTeam = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nBxTorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nByaldi = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nCALM-Pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nCOPEX-high-rate-compression-quality-metrics = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nCityLearn = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nCoCa-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nCoLT5-attention = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nComfyUI-EasyNodes = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nCrawl4AI = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nDALL-E = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nDI-toolkit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nDatasetRising = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nDeepCache = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nDeepMatter = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nDraugr = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nESRNN = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nEn-transformer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nExpoSeq = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nFLAML = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nFSRS-Optimizer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nGANDLF = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nGQLAlchemy = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nGhostScan = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nGraKeL = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nHEBO = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nIOPaint = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nISLP = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nInvokeAI = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nJAEN = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nKapoorLabs-Lightning = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nLightAutoML = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nLingerGRN = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nMMEdu = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nMRzeroCore = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nModeva = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nNeuralFoil = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nNiMARE = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nNinjaTools = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nOpenHosta = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nOpenNMT-py = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nPOT = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nPVNet = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nPaLM-rlhf-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nPepperPepper = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nPiML = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nPoutyne = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nQNCP = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nRAGatouille = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nRareGO = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nRealtimeSTT = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nRelevanceAI-Workflows-Core = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nResemblyzer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nScandEval = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nSimba-UW-tf-dev = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nSwissArmyTransformer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nTPOT = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nTTS = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nTorchCRF = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nTotalSegmentator = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nUtilsRL = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nWhisperSpeech = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nXAISuite = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\na-unet = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\na5dev = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naccelerate = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naccelerated-scan = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naccern-xyme = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nachatbot = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nacids-rave = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nactorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nacvl-utils = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nadabelief-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nadam-atan2-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nadan-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nadapters = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nadmin-torch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nadtoolbox = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nadversarial-robustness-toolbox = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naeiou = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naeon = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nafricanwhisper = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nag-llama-api = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nagentdojo = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nagilerl = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nai-edge-torch-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nai-parrot = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nai-python = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nai-transform = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nai2-olmo = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nai2-olmo-core = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nai2-tango = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naicmder = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naider-chat = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naider-chat-x = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naif360 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naihwkit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naimodelshare = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nairllm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nairtestProject = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nairunner = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naisak = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naislib = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naisquared = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naistore = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naithree = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nakasha-terminal = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nalibi = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nalibi-detect = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nalignn = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nall-clip = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nallennlp = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nallennlp-models = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nallennlp-pvt-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nallophant = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nallosaurus = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naloy = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nalpaca-eval = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nalphafold2-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nalphafold3-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nalphamed-federated = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nalphawave = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\namazon-braket-pennylane-plugin = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\namazon-photos = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nanemoi-graphs = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nanemoi-models = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nanomalib = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\napache-beam = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\napache-tvm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naperturedb = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naphrodite-engine = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naqlm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\narcAGI2024 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\narchisound = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nargbind = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\narize = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\narm-pytorch-utilities = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\narray-api-compat = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\narus = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nassert-llm-tools = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nasteroid = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nasteroid-filterbanks = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nastra-llm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nastrovision = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\natomate2 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nattacut = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naudio-diffusion-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naudio-encoders-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naudio-separator = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naudiocraft = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naudiolm-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nauralis = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nauraloss = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nauto-gptq = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nautoawq = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nautoawq-kernels = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\n\"autogluon.multimodal\" = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\n\"autogluon.tabular\" = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\n\"autogluon.timeseries\" = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nautotrain-advanced = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\navdeepfake1m = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naws-fortuna = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nax-platform = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nazureml-automl-dnn-vision = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nazureml-contrib-automl-dnn-forecasting = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nazureml-evaluate-mlflow = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nazureml-metrics = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nazureml-train-automl = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nb2bTools = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbackpack-for-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbalrog-nle = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbatch-face = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbatchalign = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbatchgeneratorsv2 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbatchtensor = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbbrl = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbenchpots = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbent = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbert-score = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbertopic = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbertviz = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbestOf = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbetty-ml = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbig-sleep = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbigdl-core-cpp = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbigdl-core-npu = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbigdl-llm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbigdl-nano = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\n\"bioimageio.core\" = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbitfount = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbitsandbytes = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbittensor = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbittensor-cli = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nblackboxopt = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nblanc = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nblindai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbm25-pt = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nboltz = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbotorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nboxmot = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbrainchain = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbraindecode = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbrevitas = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbriton = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbrowsergym-visualwebarena = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbuzz-captions = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbyotrack = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbyzerllm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nc4v-py = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncalflops = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncame-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncamel-ai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncamel-tools = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncannai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncaptum = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncarte-ai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncarvekit-colab = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncatalyst = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncausalml = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncausalnex = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncausy = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncbrkit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncca-zoo = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncdp-backend = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncellacdc = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncellfinder = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncellpose = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncellxgene-census = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nchattts = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nchemprop = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nchgnet = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nchitra = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncircuitsvis = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncjm-yolox-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nclarinpl-embeddings = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nclass-resolver = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nclassifier-free-guidance-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nclassiq = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nclassy-core = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nclean-fid = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncleanvision = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nclip-anytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nclip-benchmark = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nclip-by-openai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nclip-interrogator = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nclip-retrieval = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncltk = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nclu = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nclusterops = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncnocr = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncnstd = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncoba = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncofi = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncolbert-ai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncolpali-engine = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncompel = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncomposabl-ray = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncomposabl-ray-dev = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncomposabl-train = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncomposabl-train-dev = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncomposer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncompressai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncompressed-tensors = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncompressed-tensors-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nconcrete-python = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nconfit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nconformer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncontextualSpellCheck = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncontinual-inference = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncontrolnet-aux = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nconvokit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncoola = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncoqui-tts = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncoqui-tts-trainer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncraft-text-detector = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncreme = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncrocodile = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncrowd-kit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncryoSPHERE = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncsle-common = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncsle-system-identification = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nctgan = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncurated-transformers = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncut-cross-entropy = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncvat-sdk = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncybertask = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nd3rlpy = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndalle-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndalle2-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndanila-lib = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndanling = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndarts = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndarwin-py = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndata-gradients = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndatachain = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndataclass-array = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndataeval = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndatarobot-drum = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndatarobotx = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndatasets = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndatumaro = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndctorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndeep-utils = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndeepchecks = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndeepchem = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndeepctr-torch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndeepecho = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndeepepochs = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndeepforest = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndeeplabcut = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndeepmd-kit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndeepmultilingualpunctuation = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndeepparse = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndeeprobust = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndeepsparse = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndeepsparse-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndeepspeed = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndenoising-diffusion-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndescript-audio-codec = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndescript-audiotools = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndetecto = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndetoxify = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndgenerate = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndghs-imgutils = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndgl = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndialogy = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndice-ml = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndiffgram = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndiffq = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndiffusers = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndistilabel = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndistrifuser = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndnikit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndocarray = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndoclayout-yolo = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndocling-ibm-models = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndocquery = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndomino-code-assist = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndreamsim = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndropblock = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndruida = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndvclive = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ne2-tts-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ne2cnn = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ne3nn = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\neasyocr = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nebtorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\necallisto-ng = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nedsnlp = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\neffdet = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\neinx = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\neir-dl = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\neis1600 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\neland = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nema-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nembedchain = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nenformer-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nentmax = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nesm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nespaloma-charge = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nespnet = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\netils = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\netna = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nevadb = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nevalscope = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nevaluate = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nexllamav2 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nextractable = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nface-alignment = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfacenet-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfacexlib = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfair-esm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfairseq = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfairseq2 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfairseq2n = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfaker-file = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfarm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfast-bert = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfast-pytorch-kmeans = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfastai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfastcore = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfastestimator-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfasttreeshap = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfedml = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfelupe = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfemr = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfft-conv-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfickling = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfireworks-ai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nflair = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nflashrag-dev = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nflax = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nflexgen = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nflgo = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nflopth = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nflowcept = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nflytekitplugins-kfpytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nflytekitplugins-onnxpytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfmbench = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfocal-frequency-loss = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfoldedtensor = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfractal-tasks-core = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfreegenius = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfreqtrade = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfschat = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfunasr = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfunctorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfunlbm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfunsor = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngalore-torch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngarak = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngarf = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngateloop-transformer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngeffnet = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngenutility = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngfpgan = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngigagan-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngin-config = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nglasflow = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngliner = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngluonts = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngmft = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngoogle-cloud-aiplatform = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngpforecaster = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngpt3discord = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngpytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngrad-cam = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngraph-weather = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngraphistry = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngravitorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngretel-synthetics = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngsplat = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nguardrails-ai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nguidance = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngymnasium = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhanlp = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhappytransformer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhbutils = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nheavyball = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhezar = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhf-deepali = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhf-doc-builder = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhigher = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhjxdl = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhkkang-utils = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhordelib = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhpsv2 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhuggingface-hub = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhummingbird-ml = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhvae-backbone = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhya = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhypothesis-torch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nibm-metrics-plugin = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nibm-watson-machine-learning = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nibm-watsonx-ai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nicetk = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nicevision = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\niden = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nidvpackage = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\niglovikov-helper-functions = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nimagededup = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nimagen-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nimaginAIry = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nimg2vec-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nincendio = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ninference = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ninference-gpu = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ninfinity-emb = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ninfo-nce-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ninfoapps-mlops-sdk = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ninstructlab = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ninstructlab-dolomite = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ninstructlab-eval = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ninstructlab-sdg = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ninstructlab-training = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ninvisible-watermark = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\niobm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nipex-llm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\niree-turbine = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nirisml = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nirisml-tasks-azure-openai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nirisml-tasks-torchvision = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nirisml-tasks-training = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nitem-matching = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nivadomed = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\njaqpotpy = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\njina = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\njudo = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\njunky = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nk-diffusion = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nk1lib = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nk2 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkappadata = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkappamodules = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkarbonn = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkats = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkbnf = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkedro-datasets = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkeybert = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkeytotext = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkhoj = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkiui = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkonfuzio-sdk = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkornia = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkornia-moons = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkraken = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkwarray = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkwimage = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlabml-nn = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlagent = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlaion-clap = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlale = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlama-cleaner = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlancedb = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlangcheck = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlangkit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlangroid = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlangtest = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlayoutparser = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nldp = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nleafmap = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nleap-ie = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nleibniz = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nleptonai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nletmedoit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlhotse = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlib310 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlibpecos = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlibrec-auto = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlibretranslate = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nliger-kernel = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nliger-kernel-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlightning = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlightning-bolts = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlightning-fabric = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlightning-habana = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlightning-lite = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlightrag = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlightweight-gan = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlightwood = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlinear-attention-transformer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlinear-operator = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlinformer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlinformer-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nliom-toolkit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlion-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlit-nlp = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlitdata = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlitelama = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlitgpt = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nllama-index-embeddings-adapter = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nllama-index-embeddings-clip = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nllama-index-embeddings-instructor = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nllama-index-llms-huggingface = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nllama-index-postprocessor-colbert-rerank = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nllm-blender = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nllm-foundry = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nllm-guard = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nllm-rs = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nllm2vec = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nllmcompressor = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nllmlingua = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nllmvm-cli = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlm-eval = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlmdeploy = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlmms-eval = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlocal-attention = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlovely-tensors = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlpips = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlycoris-lora = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmace-torch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmagic-pdf = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmagicsoup = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmagvit2-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmaite = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmanga-ocr = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmanifest-ml = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmanipulation = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmarker-pdf = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmatgl = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmed-imagetools = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmedaka = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmedcat = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmedmnist = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmegablocks = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmegatron-energon = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmemos = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmeshgpt-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmetatensor-torch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmflux = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmia-vgg = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmiditok = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nminari = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nminicons = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nml2rt = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmlagents = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmlbench-core = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmlcroissant = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmlpfile = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmlx = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmlx-whisper = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmmaction2 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmmengine = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmmengine-lite = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmmocr = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmmpose = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmmsegmentation = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmodeci-mdf = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmodel2vec = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmodelscope = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmodelspec = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmonai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmonai-weekly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmonotonic-alignment-search = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmonty = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmosaicml = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmosaicml-streaming = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmoshi = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmteb = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmtmtrain = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmulti-quantization = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmyhand = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnGPT-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnaeural-core = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnapari = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnapatrackmater = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnara-wpe = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnatten = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnbeats-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnebulae = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnemo-toolkit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nneptune = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nneptune-client = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnerfacc = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnerfstudio = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnessai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnetcal = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nneural-rag = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nneuralforecast = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nneuralnets = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nneuralprophet = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nneuspell = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnevergrad = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnexfort = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnimblephysics = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnirtorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnkululeko = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnlp = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnlptooltest = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnnAudio = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnnodely = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnnsight = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnnunetv2 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnoisereduce = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnonebot-plugin-nailongremove = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnowcasting-dataloader = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnowcasting-forecast = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnshtrainer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnuwa-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnvflare = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnvidia-modelopt = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nocf-datapipes = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nocnn = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nogb = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nohmeow-blurr = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nolive-ai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nomlt = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nommlx = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nonediff = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nonediffx = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nonnx2pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nonnx2torch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nopacus = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nopen-clip-torch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nopen-flamingo = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nopen-interpreter = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nopenbb-terminal-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nopenmim = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nopenparse = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nopenunmix = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nopenvino-dev = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nopenvino-tokenizers = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nopenvino-xai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nopenwakeword = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nopt-einsum-fx = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\noptimum = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\noptimum-habana = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\noptimum-intel = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\noptimum-neuron = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\noptimum-quanto = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\noptree = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\noptuna = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\noptuna-dashboard = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\noptuna-integration = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\noracle-ads = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\norbit-ml = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\notx = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\noutetts = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\noutlines = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\noutlines-core = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npaddlenlp = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npai-easycv = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npandasai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npanns-inference = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npatchwork-cli = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npeft = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npegasuspy = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npelutils = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npenn = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nperforatedai-freemium = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nperformer-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npetastorm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npfio = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npgmpy = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nphenolrs = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nphobos = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npi-zero-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npinecone-text = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npiq = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npix2tex = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npix2text = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npnnx = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npolicyengine-us-data = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npolyfuzz = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npomegranate = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npositional-encodings = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nprefigure = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nproduct-key-memory = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nptflops = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nptwt = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npulser-core = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npunctuators = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npy2ls = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npyabsa = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\n\"pyannote.audio\" = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npyawd = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npyclarity = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npycox = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npyfemtet = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npyg-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npygrinder = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npyhealth = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npyhf = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npyiqa = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npykeen = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npykeops = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npylance = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npylineaGT = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npymanopt = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npymde = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npypots = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npyqlib = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npyqtorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npyro-ppl = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npysentimiento = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npyserini = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npysr = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npythainlp = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npython-doctr = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-fid = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-forecasting = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-ignite = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-kinematics = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-lightning = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-lightning-bolts = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-metric-learning = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-model-summary = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-msssim = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-pfn-extras = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-pretrained-bert = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-ranger = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-seed = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-tabnet = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-tabular = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-toolbelt = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-transformers = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-transformers-pvt-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-triton-rocm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-warmup = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-wavelets = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch_optimizer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch_revgrad = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorchcv = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorchltr2 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npyvene = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npyvespa = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nqianfan = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nqibo = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nqiskit-machine-learning = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nqtorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nquanto = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nquick-anomaly-detector = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrastervision = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrastervision-pytorch-backend = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrastervision-pytorch-learner = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nray-lightning = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrclip = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrealesrgan = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrecbole = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrecommenders = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nredcat = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nreformer-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nregex-sampler = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nreplay-rec = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrerankers = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nresearch-framework = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nresemble-enhance = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nresnest = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrf-clip = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrf-groundingdino = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrfconv = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrich-logger = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nring-attention-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrltrade-test = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrotary-embedding-torch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrsp-ml = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrust-circuit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ns2fft = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ns3prl = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ns3torchconnector = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsaferx = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsafetensors = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsagemaker-huggingface-inference-toolkit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsagemaker-ssh-helper = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsalesforce-lavis = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsalesforce-merlion = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsamv2 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nscib = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nscib-metrics = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nscvi-tools = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsdmetrics = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsecretflow = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsegment-anything-hq = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsegment-anything-py = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsegmentation-models-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nself-rewarding-lm-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsemantic-kernel = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsemantic-router = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsenselab = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsent2vec = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsentence-transformers = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsequence-model-train = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nserotiny = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsevenn = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsglang = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nshap = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsilero-api-server = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsilero-vad = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsilicondiff-npu = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsimclr = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsimple-lama-inpainting = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsinabs = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsixdrepnet = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nskforecast = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nskorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nskrl = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nskt = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsktime = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsktmls = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nslangtorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsmartnoise-synth = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsmashed = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsmplx = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsmqtk-descriptors = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsmqtk-detection = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsnntorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsnorkel = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsnowflake-ml-python = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nso-vits-svc-fork = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsonusai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsony-custom-layers = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsotopia = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspacr = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspacy-curated-transformers = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspacy-experimental = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspacy-huggingface-pipelines = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspacy-llm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspacy-transformers = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspan-marker = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspandrel = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspandrel-extra-arches = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsparrow-python = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspatialdata = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspeechbrain = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspeechtokenizer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspikeinterface = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspikingjelly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspotiflow = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspotpython = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspotriver = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsquirrel-core = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nstable-baselines3 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nstable-diffusion-sdkit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nstable-ts = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nstanford-stk = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nstanfordnlp = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nstanza = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nstartorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nstreamtasks = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nstruct-eqtable = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nstylegan2-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsupar = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsuper-gradients = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsuper-image = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsuperlinked = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsupervisely = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsurya-ocr = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsvdiff-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nswarm-models = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nswarmauri = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nswarms-memory = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nswebench = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsyft = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsympytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsyne-tune = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsynthcity = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nt5 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntab-transformer-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntabpfn = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntaming-transformers = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntaming-transformers-rom1504 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntaskwiz = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntbparse = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntecton = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntensor-parallel = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntensorcircuit-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntensordict = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntensordict-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntensorizer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntensorrt-llm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntexify = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntext2text = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntextattack = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntfkit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nthepipe-api = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nthinc = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nthingsvision = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nthirdai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nthop = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntianshou = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntidy3d = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntimesfm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntimm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntipo-kgen = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntmnt = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntoad = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntomesd = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntop2vec = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-audiomentations = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-dct = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-delaunay = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-directml = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-ema = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-encoding = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-fidelity = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-geometric = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-geopooling = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-harmonics = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-kmeans = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-lr-finder = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-max-mem = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-npu = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-optimi = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-optimizer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-ort = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-pitch-shift = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-ppr = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-pruning = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-snippets = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-stoi = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-struct = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-tensorrt = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchani = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchattacks = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchaudio = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchbiggraph = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchcam = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchcde = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchcfm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchcrepe = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchdata = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchdatasets-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchdiffeq = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchdyn = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchestra = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorcheval = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorcheval-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchextractor = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchfcpe = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchfun = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchfunc-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchgeo = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchgeometry = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchio = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchjpeg = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchlayers-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchmeta = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchmetrics = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchmocks = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchpack = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchpippy = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchpq = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchprofile = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchquantlib = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchrec = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchrec-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchrec-nightly-cpu = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchrl = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchrl-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchscale = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchsde = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchseg = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchserve = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchserve-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchsnapshot-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchsr = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchstain = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchsummaryX = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchtext = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchtnt = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchtnt-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchtyping = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchutil = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchvinecopulib = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchvision = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchviz = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchx = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchx-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchxrayvision = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntotalspineseg = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntracebloc-package-dev = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntrainer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntransformer-engine = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntransformer-lens = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntransformer-smaller-training-vocab = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntransformers = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntransformers-domain-adaptation = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntransfusion-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntransparent-background = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntreescope = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntrolo = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntsai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntslearn = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nttspod = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntxtai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntyro = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nu8darts = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nuhg = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nuitestrunner-syberos = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nultimate-rvc = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nultralytics = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nultralytics-thop = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nunav = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nunbabel-comet = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nunderthesea = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nunfoldNd = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nunimernet = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nunitorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nunitxt = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nunsloth = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nunsloth-zoo = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nunstructured = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nunstructured-inference = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nutilsd = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nv-diffusion-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvIQA = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvectice = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvector-quantize-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvectorhub-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nversatile-audio-upscaler = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvertexai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvesin = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvgg-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvideo-representations-extractor = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nviser = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvision-datasets = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvisionmetrics = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvisu3d = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvit-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nviturka-nn = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvllm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvllm-flash-attn = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvocos = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvollseg = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvtorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nwavmark = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nwdoc = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nwhisper-live = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nwhisper-timestamped = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nwhisperx = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nwilds = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nwordllama = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nworker-automate-hub = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nwxbtool = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nx-clip = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nx-transformers = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nxaitk_saliency = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nxformers = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nxgrammar = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nxinference = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nxtts-api-server = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nyolo-poser = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nyolov5 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nyolov7-package = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nyta-general-utils = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nzensvi = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nzetascale = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nzuko = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\n","size_bytes":90523},"sih10-1/sih8/sih7/sih6/sih5/replit.md":{"content":"# KisanMitra - Agricultural Support Mobile Application\n\n## Overview\nKisanMitra (meaning \"Farmer's Friend\") is a comprehensive mobile-first agricultural support application designed specifically for farmers in India. The application provides AI-powered plant disease diagnosis, agricultural marketplace functionality, weather information, soil health monitoring, cultivation guides, and fertilizer guidance. Built as a progressive web app with native mobile capabilities, it addresses the unique challenges faced by farmers including rural connectivity issues and the need for offline functionality.\n\n## User Preferences\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18.3.1 with TypeScript for type safety and modern development practices\n- **Build System**: Vite 5.4.19 configured for mobile-first development with hot module replacement\n- **UI Framework**: shadcn/ui components built on Radix UI primitives with Tailwind CSS for consistent styling\n- **Routing**: React Router DOM 6.30.1 for client-side navigation with comprehensive route handling\n- **State Management**: TanStack React Query 5.83.0 for server state management and caching\n- **Form Handling**: React Hook Form with Zod validation for type-safe form management\n\n### Mobile Development Strategy\n- **Hybrid Approach**: Capacitor 7.4.3 for cross-platform mobile deployment (iOS/Android) with native integrations\n- **Progressive Web App**: Offline-first design with service workers for rural connectivity challenges\n- **Native Capabilities**: Camera access for plant diagnosis, GPS for location services, push notifications, haptic feedback\n- **Responsive Design**: Mobile-first CSS with safe area handling and Android-optimized design system\n- **Performance**: Optimized for low-end devices with efficient bundle splitting and lazy loading\n\n### Component Architecture\n- **Atomic Design Pattern**: Reusable UI components following design system principles in `/src/components/ui/`\n- **Page Components**: Feature-specific route components with clear separation of concerns in `/src/pages/`\n- **Custom Hooks**: Shared stateful logic for common operations like authentication and data fetching in `/src/hooks/`\n- **Utility Functions**: Helper functions for cart management, weather integration, and data persistence in `/src/lib/`\n\n### Data Management\n- **Local Storage Strategy**: Comprehensive localStorage implementation for offline functionality\n- **User Authentication**: Complete signup/login flow with automatic authentication persistence\n- **Cart Management**: Reactive cart service with real-time updates and persistence (`/src/lib/cart.ts`)\n- **Notification System**: Local notification management with categorization and persistence\n- **Cultivation Data**: Saved cultivation guides, fertilizer guidance, and soil test results\n- **Treatment Tracking**: Active treatment monitoring with progress tracking\n\n### Styling and Design System\n- **CSS Framework**: Tailwind CSS with custom agricultural color palette and mobile-optimized spacing\n- **Component Styling**: CSS variables for consistent theming with agricultural-focused design tokens\n- **Typography**: Inter font family optimized for mobile readability\n- **Animation System**: Custom animations for enhanced user experience including splash screen and loading states\n- **Mobile Optimization**: Touch-friendly interfaces with proper spacing and gesture support\n\n## External Dependencies\n\n### Core Development Stack\n- **React Ecosystem**: React 18.3.1, React Router DOM 6.30.1, React Hook Form with validation\n- **UI Component Library**: Radix UI primitives (@radix-ui/*) for accessible, headless components\n- **Build Tooling**: Vite 5.4.19 with TypeScript support and ESLint configuration\n- **Styling**: Tailwind CSS with PostCSS for utility-first styling approach\n\n### Mobile Development\n- **Capacitor Platform**: @capacitor/core 7.4.3 for hybrid app development\n- **Native Plugins**: App lifecycle, haptics, keyboard management, splash screen, and status bar control\n- **Platform Builds**: @capacitor/android and @capacitor/ios for platform-specific deployments\n\n### State and Data Management\n- **Query Management**: @tanstack/react-query 5.83.0 for server state management\n- **Form Validation**: @hookform/resolvers with Zod for type-safe form validation\n- **Utility Libraries**: class-variance-authority, clsx, tailwind-merge for styling utilities\n\n### Weather Integration\n- **Weather Service**: Custom weather service (`/src/lib/weather.ts`) with OpenWeatherMap API integration\n- **Location Services**: Browser geolocation API with fallback support\n- **Real-time Data**: Current weather conditions, 7-day forecasts, and agricultural alerts\n\n### Development and Build Tools\n- **TypeScript**: Strict type checking disabled for faster development with configurable strictness\n- **ESLint**: Code quality and consistency with React-specific rules\n- **PostCSS**: CSS processing with Tailwind CSS and Autoprefixer","size_bytes":5021},"sih10-1/sih8/sih7/sih6/sih5/kisanj/replit.md":{"content":"# KisanMitra - Agricultural Support Mobile Application\n\n## Overview\nKisanMitra (meaning \"Farmer's Friend\") is a comprehensive mobile-first agricultural support application designed specifically for farmers in India. The application provides AI-powered plant disease diagnosis, weather monitoring, soil health tracking, marketplace functionality, and cultivation guidance. Built as a Progressive Web App with native mobile capabilities, KisanMitra serves as a complete digital farming assistant that works effectively in rural areas with limited connectivity.\n\n## User Preferences\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18.3.1 with TypeScript for type safety and modern development practices\n- **Build System**: Vite 5.4.19 configured for mobile-first development with hot module replacement\n- **UI Framework**: shadcn/ui components built on Radix UI primitives with Tailwind CSS for consistent styling\n- **Routing**: React Router DOM 6.30.1 for client-side navigation with comprehensive route handling\n- **State Management**: TanStack React Query 5.83.0 for server state management and caching\n- **Form Handling**: React Hook Form with Zod validation for type-safe form management\n\n### Mobile Development Strategy\n- **Hybrid Approach**: Capacitor 7.4.3 for cross-platform mobile deployment (iOS/Android) with native integrations\n- **Progressive Web App**: Offline-first design with service workers for rural connectivity challenges\n- **Native Capabilities**: Camera access for plant diagnosis, GPS for location services, push notifications, haptic feedback\n- **Responsive Design**: Mobile-first CSS with safe area handling and Android-optimized design system\n- **Performance**: Optimized for low-end devices with efficient bundle splitting and lazy loading\n\n### Component Architecture\n- **Atomic Design Pattern**: Reusable UI components following design system principles\n- **Page Components**: Feature-specific route components with clear separation of concerns\n- **Custom Hooks**: Shared stateful logic for common operations like authentication and data fetching\n- **Utility Functions**: Helper functions for cart management, weather integration, and data persistence\n\n### Data Management\n- **Local Storage Strategy**: Comprehensive localStorage implementation for offline functionality\n- **User Authentication**: Complete signup/login flow with automatic authentication persistence\n- **Cart Management**: Reactive cart service with real-time updates and persistence\n- **Notification System**: Local notification management with categorization and persistence\n- **Cultivation Data**: Saved cultivation guides, fertilizer guidance, and soil test results\n- **Treatment Tracking**: Active treatment monitoring with progress tracking\n\n### Styling and Design System\n- **CSS Framework**: Tailwind CSS with custom agricultural color palette and mobile-optimized spacing\n- **Component Styling**: CSS variables for consistent theming with agricultural-focused design tokens\n- **Typography**: Inter font family optimized for mobile readability\n- **Animation System**: Custom animations for enhanced user experience\n- **Mobile Optimization**: Touch-friendly interfaces with proper spacing and gesture support\n\n## External Dependencies\n\n### Core Development Stack\n- **React Ecosystem**: React 18.3.1, React Router DOM 6.30.1, React Hook Form with validation\n- **UI Component Library**: Radix UI primitives (@radix-ui/*) for accessible, headless components\n- **Build Tooling**: Vite 5.4.19 with TypeScript support and ESLint configuration\n- **Styling**: Tailwind CSS with PostCSS for utility-first styling approach\n\n### Mobile Platform Integration\n- **Capacitor Core**: Cross-platform native runtime for web apps with native device access\n- **Native Plugins**: App lifecycle management, haptic feedback, keyboard handling, splash screen, status bar\n- **Platform Optimization**: Android and iOS specific configurations for deployment\n\n### Weather Services\n- **OpenWeatherMap API**: Real-time weather data and forecasting integration\n- **Location Services**: GPS-based location detection for localized weather information\n- **Weather Data Management**: Custom weather service with caching and offline fallback\n\n### State Management and Utilities\n- **TanStack React Query**: Server state management with caching, background updates, and optimistic updates\n- **Class Variance Authority**: Type-safe component variant management\n- **clsx & tailwind-merge**: Utility for conditional CSS class composition\n- **Date Handling**: Date-fns for date manipulation and formatting","size_bytes":4647},"sih10-1/sih8/sih7/sih6/sih5/server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/replit.md":{"content":"# KisanMitra - Cultivation Guides Mobile Application\n\n## Overview\nKisanMitra (meaning \"Farmer's Friend\") is a comprehensive mobile-first agricultural support application designed specifically for farmers. The application provides AI-powered plant disease diagnosis, cultivation guides, market access, soil health monitoring, weather information, and agricultural advisory services. Built as a hybrid mobile app using modern web technologies, it serves as a complete digital farming companion with offline capabilities for rural areas.\n\n## User Preferences\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18.3.1 with TypeScript for type safety and modern development practices\n- **Build System**: Vite 5.4.19 configured for mobile-first development with hot module replacement\n- **UI Framework**: shadcn/ui components built on Radix UI primitives with Tailwind CSS for consistent styling\n- **Routing**: React Router DOM 6.30.1 for client-side navigation with comprehensive route handling\n- **State Management**: TanStack React Query 5.83.0 for server state management and caching\n- **Form Handling**: React Hook Form with Zod validation for type-safe form management\n\n### Mobile Development Strategy\n- **Hybrid Approach**: Capacitor 7.4.3 for cross-platform mobile deployment (iOS/Android) with native integrations\n- **Progressive Web App**: Offline-first design with service workers for rural connectivity challenges\n- **Native Capabilities**: Camera access for plant diagnosis, GPS for location services, push notifications, haptic feedback\n- **Responsive Design**: Mobile-first CSS with safe area handling and Android-optimized design system\n- **Performance**: Optimized for low-end devices with efficient bundle splitting and lazy loading\n\n### Component Architecture\n- **Atomic Design Pattern**: Reusable UI components following design system principles\n- **Page Components**: Feature-specific route components with clear separation of concerns\n- **Custom Hooks**: Shared stateful logic for common operations like authentication and data fetching\n- **Utility Functions**: Helper functions for cart management, weather integration, and data persistence\n\n### Data Management\n- **Local Storage Strategy**: Comprehensive localStorage implementation for offline functionality\n- **User Authentication**: Complete signup/login flow with automatic authentication persistence\n- **Cart Management**: Reactive cart service with real-time updates and persistence\n- **Notification System**: Local notification management with categorization and persistence\n- **Cultivation Data**: Saved cultivation guides, fertilizer guidance, and soil test results\n- **Treatment Tracking**: Active treatment monitoring with progress tracking\n\n### Styling and Design System\n- **CSS Framework**: Tailwind CSS with custom agricultural color palette and mobile-optimized spacing\n- **Component Styling**: CSS variables for consistent theming with agricultural-focused design tokens\n- **Typography**: Inter font family optimized for mobile readability\n- **Animation System**: Custom animations for enhanced user experience\n- **Mobile Optimization**: Touch-friendly interfaces with proper spacing and gesture support\n\n## External Dependencies\n\n### Core Development Stack\n- **React Ecosystem**: React 18.3.1, React Router DOM 6.30.1, React Hook Form with validation\n- **UI Component Library**: Complete Radix UI suite (@radix-ui/*) for accessible, headless components\n- **Build and Development**: Vite 5.4.19 with TypeScript support and ESLint configuration\n- **Styling Framework**: Tailwind CSS with PostCSS for utility-first styling\n\n### Mobile Platform Integration\n- **Capacitor Platform**: Complete Capacitor 7.4.3 suite including iOS and Android platforms\n- **Device APIs**: Camera (@capacitor/camera), haptic feedback, keyboard management, splash screen\n- **Native Features**: Status bar customization, app lifecycle management\n\n### Weather and Location Services\n- **Weather Integration**: OpenWeatherMap API integration for real-time weather data\n- **Geolocation**: Browser geolocation API with fallback to default locations\n- **Location Services**: GPS-based features for nearby shop discovery and location-specific content\n\n### State and Data Management\n- **Query Management**: TanStack React Query for efficient data fetching and caching\n- **Form Validation**: Zod schema validation for type-safe form handling\n- **Local Persistence**: Browser localStorage for offline data storage and user preferences\n\n### Development and Quality Tools\n- **Code Quality**: ESLint with TypeScript support and React-specific rules\n- **Type Safety**: Full TypeScript implementation with strict type checking\n- **Build Optimization**: Vite-based build system with code splitting and optimization","size_bytes":4837},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/replit.md":{"content":"# KisanMitra - Agricultural Support Application\n\n## Overview\nKisanMitra is a comprehensive mobile-first agricultural support application designed for farmers in India. The name \"KisanMitra\" translates to \"Farmer's Friend\" and serves as an AI-powered digital assistant for modern farming needs. The application provides plant disease diagnosis through computer vision, marketplace functionality for buying/selling agricultural products, weather monitoring, soil health analysis, and personalized farming guidance. Built as a progressive web app with native mobile capabilities through Capacitor, it targets rural and semi-urban farmers with localized content and multi-language support.\n\n## User Preferences\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18.3.1 with TypeScript for type safety and modern development practices\n- **Build System**: Vite 5.4.19 configured for mobile-first development with hot module replacement\n- **UI Framework**: shadcn/ui components built on Radix UI primitives with Tailwind CSS for consistent styling\n- **Routing**: React Router DOM 6.30.1 for client-side navigation\n- **State Management**: TanStack React Query 5.83.0 for server state and caching\n\n### Mobile Development Strategy\n- **Hybrid Approach**: Capacitor 7.4.3 for cross-platform mobile deployment (iOS/Android)\n- **Progressive Web App**: Offline-first design with service workers for rural connectivity\n- **Native Integration**: Camera access, GPS, push notifications, and device-specific optimizations\n- **Responsive Design**: Mobile-first CSS with safe area handling for various device sizes\n\n### Component Architecture\n- **Atomic Design**: Reusable UI components in `/src/components/ui/` following design system principles\n- **Page Components**: Route-specific components in `/src/pages/` with clear separation of concerns\n- **Custom Hooks**: React hooks in `/src/hooks/` for shared stateful logic\n- **Utility Functions**: Helper functions in `/src/lib/` for common operations\n\n### Data Management\n- **Authentication System**: Complete signup/login flow with automatic authentication after registration\n- **User Data Storage**: Comprehensive user profiles stored in localStorage with persistent login state\n- **Local Storage**: Browser localStorage for offline data persistence, user preferences, and notifications\n- **Cart Management**: Custom cart service (`/src/lib/cart.ts`) with reactive state updates\n- **Weather Integration**: Custom weather service (`/src/lib/weather.ts`) with real OpenWeatherMap API integration\n- **Notification System**: Persistent notification management with clear/mark-all-read functionality\n\n### Styling and Theming\n- **CSS Framework**: Tailwind CSS with custom agricultural color palette and mobile-optimized spacing\n- **Component Styling**: CSS variables for consistent theming across light/dark modes\n- **Typography**: Inter font family with optimized font weights for mobile readability\n\n## External Dependencies\n\n### Core Development Stack\n- **React Ecosystem**: React 18.3.1, React Router DOM 6.30.1, React Hook Form with Zod validation\n- **UI Component Library**: Radix UI primitives (@radix-ui/*) for accessible, headless components\n- **Build Tooling**: Vite 5.4.19 with TypeScript support and ESLint configuration\n- **Styling**: Tailwind CSS with PostCSS for utility-first styling approach\n\n### Mobile and Native Capabilities\n- **Capacitor Core**: @capacitor/core 7.4.3 for hybrid app functionality\n- **Platform Plugins**: @capacitor/android, @capacitor/ios for platform-specific builds\n- **Device APIs**: Camera, geolocation, push notifications, status bar, splash screen management\n\n### State Management and Data Fetching\n- **TanStack React Query**: Server state management, caching, and synchronization\n- **Form Management**: React Hook Form with Hookform Resolvers for validation\n- **Data Validation**: Zod schema validation for type-safe form handling\n\n### Third-Party Integrations\n- **Weather API**: OpenWeatherMap API integration for real-time weather data\n- **Image Processing**: Browser-native Canvas API for image capture and manipulation\n- **Geolocation**: Browser Geolocation API with Capacitor native fallbacks\n- **Storage**: Browser localStorage with potential for future cloud storage integration\n\n### Development and Deployment\n- **Development Server**: Vite dev server configured for Replit environment (port 5000, all hosts allowed)\n- **TypeScript**: Full TypeScript support with relaxed linting for rapid prototyping\n- **Linting**: ESLint with TypeScript rules and React-specific configurations\n- **Build Output**: Static site generation optimized for CDN deployment and mobile performance\n- **Production Deployment**: Configured for autoscale deployment with build optimization\n- **Android Deployment**: Capacitor-ready configuration for Play Store publication\n\n### Future Scalability Considerations\n- **API Ready**: Architecture supports easy migration to REST/GraphQL APIs\n- **Database Integration**: Structured for future Drizzle ORM integration with PostgreSQL\n- **Authentication**: Prepared for OAuth or JWT-based authentication systems\n- **Internationalization**: Multi-language support framework already implemented","size_bytes":5267},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/replit.md":{"content":"# Kisan - Agricultural Support App\n\n## Overview\nKisan is a comprehensive agricultural support application built with React, TypeScript, and Vite. The name \"Kisan\" means \"farmer\" in several South Asian languages, reflecting its purpose as a digital platform for farmers and agricultural professionals.\n\n## Project Structure\nThis is a React + TypeScript application using:\n- **Framework**: React 18.3.1 with TypeScript\n- **Build Tool**: Vite 5.4.19\n- **UI Library**: Radix UI components with Tailwind CSS\n- **Routing**: React Router DOM 6.30.1\n- **State Management**: TanStack Query (React Query) 5.83.0\n- **Mobile**: Capacitor 7.4.3 for iOS/Android builds\n\n## Key Features\n- Plant disease diagnosis with camera capture\n- Weather information and forecasts  \n- Market prices and agricultural advisory\n- Shop for agricultural products and treatments\n- Soil health monitoring\n- Fertilizer guidance\n- User profiles and order management\n- Multi-language support\n\n## Development Setup\n- Server runs on port 5000 (configured for Replit environment)\n- Vite dev server configured with `host: \"0.0.0.0\"` and `allowedHosts: true`\n- HMR (Hot Module Reload) enabled for development\n\n## Architecture\n- **Pages**: Individual route components in `/src/pages/`\n- **Components**: Reusable UI components in `/src/components/`\n- **Assets**: Images and media files in `/src/assets/`\n- **Utilities**: Helper functions in `/src/lib/`\n- **Hooks**: Custom React hooks in `/src/hooks/`\n\n## Current State (September 6, 2025)\n- ✅ Dependencies installed successfully\n- ✅ Vite development server running on port 5000\n- ✅ React Router configured with comprehensive routing\n- ✅ UI components from Radix UI integrated\n- ✅ Deployment configured for Replit autoscale\n- ✅ Project ready for development and testing\n\n## Deployment\nConfigured for Replit autoscale deployment:\n- Build command: `npm run build`\n- Serves static files on port 5000 in production\n- Optimized for stateless web application deployment","size_bytes":1981},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/start.sh":{"content":"#!/bin/bash\ncd /home/runner/workspace/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan\n\necho \"Starting backend server on port 8000...\"\npython server/plant_diagnosis_api.py &\nBACKEND_PID=$!\n\necho \"Waiting for backend to initialize...\"\nsleep 3\n\necho \"Starting frontend development server on port 5000...\"\nnpm run dev &\nFRONTEND_PID=$!\n\necho \"Both servers are starting...\"\necho \"Backend PID: $BACKEND_PID\"\necho \"Frontend PID: $FRONTEND_PID\"\n\n# Wait for both processes\nwait $BACKEND_PID\nwait $FRONTEND_PID","size_bytes":509},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n\tdarkMode: [\"class\"],\n\tcontent: [\n\t\t\"./pages/**/*.{ts,tsx}\",\n\t\t\"./components/**/*.{ts,tsx}\",\n\t\t\"./app/**/*.{ts,tsx}\",\n\t\t\"./src/**/*.{ts,tsx}\",\n\t],\n\tprefix: \"\",\n\ttheme: {\n\t\tcontainer: {\n\t\t\tcenter: true,\n\t\t\tpadding: '1rem',\n\t\t\tscreens: {\n\t\t\t\t'sm': '640px',\n\t\t\t\t'md': '768px',\n\t\t\t\t'lg': '1024px',\n\t\t\t\t'xl': '1280px',\n\t\t\t\t'2xl': '1400px'\n\t\t\t}\n\t\t},\n\t\textend: {\n\t\t\tfontFamily: {\n\t\t\t\t'inter': ['Inter', 'sans-serif'],\n\t\t\t\t'sans': ['Inter', 'system-ui', 'sans-serif'],\n\t\t\t},\n\t\t\tcolors: {\n\t\t\t\tborder: 'hsl(var(--border))',\n\t\t\t\tinput: 'hsl(var(--input))',\n\t\t\t\tring: 'hsl(var(--ring))',\n\t\t\t\tbackground: 'hsl(var(--background))',\n\t\t\t\tforeground: 'hsl(var(--foreground))',\n\t\t\t\tprimary: {\n\t\t\t\t\tDEFAULT: 'hsl(var(--primary))',\n\t\t\t\t\tforeground: 'hsl(var(--primary-foreground))'\n\t\t\t\t},\n\t\t\t\tsecondary: {\n\t\t\t\t\tDEFAULT: 'hsl(var(--secondary))',\n\t\t\t\t\tforeground: 'hsl(var(--secondary-foreground))'\n\t\t\t\t},\n\t\t\t\tdestructive: {\n\t\t\t\t\tDEFAULT: 'hsl(var(--destructive))',\n\t\t\t\t\tforeground: 'hsl(var(--destructive-foreground))'\n\t\t\t\t},\n\t\t\t\tmuted: {\n\t\t\t\t\tDEFAULT: 'hsl(var(--muted))',\n\t\t\t\t\tforeground: 'hsl(var(--muted-foreground))'\n\t\t\t\t},\n\t\t\t\taccent: {\n\t\t\t\t\tDEFAULT: 'hsl(var(--accent))',\n\t\t\t\t\tforeground: 'hsl(var(--accent-foreground))'\n\t\t\t\t},\n\t\t\t\tpopover: {\n\t\t\t\t\tDEFAULT: 'hsl(var(--popover))',\n\t\t\t\t\tforeground: 'hsl(var(--popover-foreground))'\n\t\t\t\t},\n\t\t\t\tcard: {\n\t\t\t\t\tDEFAULT: 'hsl(var(--card))',\n\t\t\t\t\tforeground: 'hsl(var(--card-foreground))'\n\t\t\t\t},\n\t\t\t\t// Agricultural color system\n\t\t\t\t'agri-primary': 'hsl(var(--primary-green))',\n\t\t\t\t'agri-secondary': 'hsl(var(--secondary-green))',\n\t\t\t\t'agri-accent': 'hsl(var(--accent-green))',\n\t\t\t\t'agri-light': 'hsl(var(--light-green))',\n\t\t\t\t'agri-success': 'hsl(var(--success-green))',\n\t\t\t\t'agri-warning': 'hsl(var(--warning-orange))',\n\t\t\t\t'agri-danger': 'hsl(var(--danger-red))',\n\t\t\t\t'agri-info': 'hsl(var(--info-blue))',\n\t\t\t\t'agri-light-blue': 'hsl(var(--light-blue))',\n\t\t\t\t'agri-purple': 'hsl(var(--purple))',\n\t\t\t\t'agri-light-purple': 'hsl(var(--light-purple))',\n\t\t\t\t'agri-cream': 'hsl(var(--cream))',\n\t\t\t\t'agri-light-cream': 'hsl(var(--light-cream))',\n\t\t\t\t'agri-gray': 'hsl(var(--gray))',\n\t\t\t\t'agri-light-gray': 'hsl(var(--light-gray))',\n\t\t\t\t'text-primary': 'hsl(var(--text-primary))',\n\t\t\t\t'text-secondary': 'hsl(var(--text-secondary))',\n\t\t\t},\n\t\t\tborderRadius: {\n\t\t\t\tlg: 'var(--radius)',\n\t\t\t\tmd: 'calc(var(--radius) - 2px)',\n\t\t\t\tsm: 'calc(var(--radius) - 4px)'\n\t\t\t},\n\t\t\tkeyframes: {\n\t\t\t\t'accordion-down': {\n\t\t\t\t\tfrom: {\n\t\t\t\t\t\theight: '0'\n\t\t\t\t\t},\n\t\t\t\t\tto: {\n\t\t\t\t\t\theight: 'var(--radix-accordion-content-height)'\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'accordion-up': {\n\t\t\t\t\tfrom: {\n\t\t\t\t\t\theight: 'var(--radix-accordion-content-height)'\n\t\t\t\t\t},\n\t\t\t\t\tto: {\n\t\t\t\t\t\theight: '0'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tanimation: {\n\t\t\t\t'accordion-down': 'accordion-down 0.2s ease-out',\n\t\t\t\t'accordion-up': 'accordion-up 0.2s ease-out'\n\t\t\t}\n\t\t}\n\t},\n\tplugins: [require(\"tailwindcss-animate\")],\n} satisfies Config;\n","size_bytes":2944},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react-swc\";\nimport path from \"node:path\";\nimport { componentTagger } from \"lovable-tagger\";\n\n// https://vitejs.dev/config/\nexport default defineConfig(({ mode }: { mode: string }) => ({\n  server: {\n    host: \"0.0.0.0\",\n    port: 5000,\n    strictPort: true,\n    allowedHosts: true as true,\n    hmr: {\n      clientPort: 443,\n      port: 5000\n    },\n    proxy: {\n      '/api': {\n        target: 'http://127.0.0.1:8000',\n        changeOrigin: true,\n        rewrite: (path: string) => path.replace(/^\\/api/, ''),\n      },\n    },\n  },\n  define: {\n    global: 'globalThis',\n    'process.env': {\n      VITE_API_BASE_URL: JSON.stringify(process.env.VITE_API_BASE_URL || '/api')\n    }\n  },\n  plugins: [\n    react(),\n    mode === 'development' &&\n    componentTagger(),\n  ].filter(Boolean),\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"./src\"),\n    },\n  },\n}));\n","size_bytes":939},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/App.css":{"content":"#root {\n  max-width: 1280px;\n  margin: 0 auto;\n  padding: 2rem;\n  text-align: center;\n}\n\n.logo {\n  height: 6em;\n  padding: 1.5em;\n  will-change: filter;\n  transition: filter 300ms;\n}\n.logo:hover {\n  filter: drop-shadow(0 0 2em #646cffaa);\n}\n.logo.react:hover {\n  filter: drop-shadow(0 0 2em #61dafbaa);\n}\n\n@keyframes logo-spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n@media (prefers-reduced-motion: no-preference) {\n  a:nth-of-type(2) .logo {\n    animation: logo-spin infinite 20s linear;\n  }\n}\n\n.card {\n  padding: 2em;\n}\n\n.read-the-docs {\n  color: #888;\n}\n","size_bytes":606},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/App.tsx":{"content":"import { Toaster } from \"@/components/ui/toaster\";\nimport { Toaster as Sonner } from \"@/components/ui/sonner\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport { useEffect } from \"react\";\nimport { StatusBar, Style } from '@capacitor/status-bar';\nimport { SplashScreen } from '@capacitor/splash-screen';\nimport { Keyboard } from '@capacitor/keyboard';\nimport { App as CapacitorApp } from '@capacitor/app';\nimport { Capacitor } from '@capacitor/core';\nimport Landing from \"./pages/Landing\";\nimport Splash from \"./pages/Splash\";\nimport Onboarding from \"./pages/Onboarding\";\nimport Signup from \"./pages/Signup\";\nimport Login from \"./pages/Login\";\nimport Home from \"./pages/Home\";\nimport Diagnose from \"./pages/Diagnose\";\nimport CameraCapture from \"./pages/CameraCapture\";\nimport AnalyzePlant from \"./pages/AnalyzePlant\";\nimport DiagnoseResults from \"./pages/DiagnoseResults\";\nimport Shop from \"./pages/Shop\";\nimport Orders from \"./pages/Orders\";\nimport Profile from \"./pages/Profile\";\nimport ProfileEdit from \"./pages/ProfileEdit\";\nimport Treatments from \"./pages/Treatments\";\nimport Guides from \"./pages/Guides\";\nimport NearbyShops from \"./pages/NearbyShops\";\nimport SellProduce from \"./pages/SellProduce\";\nimport Cart from \"./pages/Cart\";\nimport Checkout from \"./pages/Checkout\";\nimport OrderSuccess from \"./pages/OrderSuccess\";\nimport SoilHealth from \"./pages/SoilHealth\";\nimport Weather from \"./pages/Weather\";\nimport FertilizerGuide from \"./pages/FertilizerGuide\";\nimport Advisory from \"./pages/Advisory\";\nimport MarketPrices from \"./pages/MarketPrices\";\nimport MarketDetails from \"./pages/MarketDetails\";\nimport MyFertilizerGuidance from \"./pages/MyFertilizerGuidance\";\nimport CropGuideDetail from \"./pages/CropGuideDetail\";\nimport MySavedCultivationGuides from \"./pages/MySavedCultivationGuides\";\nimport Mitra from \"./pages/Mitra\";\nimport NotFound from \"./pages/NotFound\";\n\nconst queryClient = new QueryClient();\n\nconst App = () => {\n  useEffect(() => {\n    const initializeApp = async () => {\n      if (Capacitor.isNativePlatform()) {\n        // Configure status bar for Android\n        await StatusBar.setStyle({ style: Style.Default });\n        await StatusBar.setBackgroundColor({ color: '#22c55e' });\n        \n        // Hide splash screen after app loads\n        await SplashScreen.hide();\n        \n        // Configure keyboard behavior\n        Keyboard.setAccessoryBarVisible({ isVisible: false });\n        \n        // Handle app state changes\n        CapacitorApp.addListener('appStateChange', ({ isActive }) => {\n          console.log('App state changed. Is active:', isActive);\n        });\n        \n        // Handle back button on Android\n        CapacitorApp.addListener('backButton', ({ canGoBack }) => {\n          if (!canGoBack) {\n            CapacitorApp.exitApp();\n          } else {\n            window.history.back();\n          }\n        });\n      }\n    };\n    \n    initializeApp();\n  }, []);\n  \n  return (\n  <QueryClientProvider client={queryClient}>\n    <TooltipProvider>\n      <Toaster />\n      <Sonner />\n      <BrowserRouter>\n        <Routes>\n          <Route path=\"/\" element={<Landing />} />\n          <Route path=\"/splash\" element={<Splash />} />\n          <Route path=\"/onboarding\" element={<Onboarding />} />\n          <Route path=\"/signup\" element={<Signup />} />\n          <Route path=\"/login\" element={<Login />} />\n          <Route path=\"/home\" element={<Home />} />\n          <Route path=\"/diagnose\" element={<Diagnose />} />\n          <Route path=\"/diagnose/capture\" element={<CameraCapture />} />\n          <Route path=\"/diagnose/analyze\" element={<AnalyzePlant />} />\n          <Route path=\"/diagnose/results\" element={<DiagnoseResults />} />\n          <Route path=\"/shop\" element={<Shop />} />\n          <Route path=\"/orders\" element={<Orders />} />\n          <Route path=\"/profile\" element={<Profile />} />\n          <Route path=\"/profile/edit\" element={<ProfileEdit />} />\n          <Route path=\"/treatments\" element={<Treatments />} />\n          <Route path=\"/guides\" element={<Guides />} />\n          <Route path=\"/guides/:cropId\" element={<CropGuideDetail />} />\n          <Route path=\"/my-saved-cultivation-guides\" element={<MySavedCultivationGuides />} />\n          <Route path=\"/shops\" element={<NearbyShops />} />\n          <Route path=\"/sell\" element={<SellProduce />} />\n          <Route path=\"/sell/new\" element={<SellProduce />} />\n          <Route path=\"/cart\" element={<Cart />} />\n          <Route path=\"/checkout\" element={<Checkout />} />\n          <Route path=\"/order-success\" element={<OrderSuccess />} />\n          <Route path=\"/soil-health\" element={<SoilHealth />} />\n          <Route path=\"/weather\" element={<Weather />} />\n          <Route path=\"/fertilizer-guide\" element={<FertilizerGuide />} />\n          <Route path=\"/advisory\" element={<Advisory />} />\n          <Route path=\"/market-prices\" element={<MarketPrices />} />\n          <Route path=\"/market-details/:marketId\" element={<MarketDetails />} />\n          <Route path=\"/my-fertilizer-guidance\" element={<MyFertilizerGuidance />} />\n          <Route path=\"/mitra\" element={<Mitra />} />\n          {/* ADD ALL CUSTOM ROUTES ABOVE THE CATCH-ALL \"*\" ROUTE */}\n          <Route path=\"*\" element={<NotFound />} />\n        </Routes>\n      </BrowserRouter>\n    </TooltipProvider>\n  </QueryClientProvider>\n  );\n};\n\nexport default App;\n","size_bytes":5511},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* KisanMitra Agricultural App - Android Mobile Optimized Design System */\n\n/* Android Safe Areas & Mobile Viewport */\n@supports (padding: max(0px)) {\n  .safe-area-top { padding-top: max(20px, env(safe-area-inset-top)); }\n  .safe-area-bottom { padding-bottom: max(20px, env(safe-area-inset-bottom)); }\n  .safe-area-left { padding-left: max(0px, env(safe-area-inset-left)); }\n  .safe-area-right { padding-right: max(0px, env(safe-area-inset-right)); }\n}\n\n/* Prevent overscroll bounce for better native feel */\nhtml {\n  overscroll-behavior: none;\n  -webkit-overflow-scrolling: touch;\n}\n\nbody {\n  overscroll-behavior: none;\n  -webkit-user-select: none;\n  user-select: none;\n}\n\n@layer base {\n  :root {\n    /* Agricultural Color Palette */\n    --primary-green: 158 64% 52%; /* #10B981 */\n    --secondary-green: 160 84% 39%; /* #059669 */\n    --accent-green: 157 69% 38%; /* #047857 */\n    --light-green: 155 100% 97%; /* #ECFDF5 */\n    --success-green: 142 71% 45%; /* #22C55E */\n    \n    /* Functional Colors */\n    --warning-orange: 38 92% 50%; /* #F59E0B */\n    --danger-red: 0 84% 60%; /* #EF4444 */\n    --info-blue: 217 91% 60%; /* #3B82F6 */\n    --light-blue: 214 100% 97%; /* #DBEAFE */\n    --purple: 262 83% 58%; /* #8B5CF6 */\n    --light-purple: 250 100% 97%; /* #EDE9FE */\n    \n    /* Neutral Colors */\n    --text-primary: 220 14% 96%; /* #F8FAFC */\n    --text-secondary: 215 25% 27%; /* #374151 */\n    --gray: 215 20% 65%; /* #9CA3AF */\n    --light-gray: 210 40% 96%; /* #F1F5F9 */\n    --cream: 43 74% 91%; /* #FAF7F0 */\n    --light-cream: 45 100% 97%; /* #FEF7ED */\n    \n    /* Gradients */\n    --gradient-primary: linear-gradient(135deg, hsl(var(--primary-green)), hsl(var(--secondary-green)));\n    --gradient-hero: linear-gradient(135deg, hsl(var(--primary-green)), hsl(var(--accent-green)));\n    --gradient-splash: linear-gradient(180deg, hsl(var(--primary-green)), hsl(var(--accent-green)));\n    --gradient-mesh: linear-gradient(135deg, hsl(var(--primary-green)), hsl(var(--secondary-green)), hsl(var(--success-green)));\n    --gradient-glass: linear-gradient(135deg, hsla(var(--primary-green), 0.1), hsla(var(--secondary-green), 0.1));\n    \n    /* Shadows */\n    --shadow-soft: 0 1px 3px 0 hsla(var(--text-secondary), 0.1), 0 1px 2px 0 hsla(var(--text-secondary), 0.06);\n    --shadow-medium: 0 4px 6px -1px hsla(var(--text-secondary), 0.1), 0 2px 4px -1px hsla(var(--text-secondary), 0.06);\n    --shadow-large: 0 10px 15px -3px hsla(var(--text-secondary), 0.1), 0 4px 6px -2px hsla(var(--text-secondary), 0.05);\n    --shadow-glow: 0 0 20px hsla(var(--primary-green), 0.3);\n    --shadow-inner: inset 0 2px 4px 0 hsla(var(--text-secondary), 0.06);\n    \n    /* Animations - Android Material Motion */\n    --transition-fast: all 0.15s cubic-bezier(0.4, 0.0, 0.2, 1);\n    --transition-smooth: all 0.3s cubic-bezier(0.4, 0.0, 0.2, 1);\n    --transition-spring: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);\n    --transition-bounce: all 0.6s cubic-bezier(0.68, -0.55, 0.265, 1.55);\n    \n    /* Spacing System */\n    --space-xs: 0.25rem; /* 4px */\n    --space-sm: 0.5rem;  /* 8px */\n    --space-md: 1rem;    /* 16px */\n    --space-lg: 1.5rem;  /* 24px */\n    --space-xl: 2rem;    /* 32px */\n    --space-2xl: 3rem;   /* 48px */\n    \n    /* Border Radius */\n    --radius-sm: 0.375rem; /* 6px */\n    --radius-md: 0.75rem;  /* 12px */\n    --radius-lg: 1rem;     /* 16px */\n    --radius-xl: 1.25rem;  /* 20px */\n    --radius-full: 9999px;\n    \n    /* Standard design tokens */\n    --background: var(--text-primary);\n    --foreground: var(--text-secondary);\n    --card: var(--text-primary);\n    --card-foreground: var(--text-secondary);\n    --popover: var(--text-primary);\n    --popover-foreground: var(--text-secondary);\n    --primary: var(--primary-green);\n    --primary-foreground: var(--text-primary);\n    --secondary: var(--light-gray);\n    --secondary-foreground: var(--text-secondary);\n    --muted: var(--light-gray);\n    --muted-foreground: var(--gray);\n    --accent: var(--light-green);\n    --accent-foreground: var(--text-secondary);\n    --destructive: var(--danger-red);\n    --destructive-foreground: var(--text-primary);\n    --border: 214.3 31.8% 91.4%;\n    --input: 214.3 31.8% 91.4%;\n    --ring: var(--primary-green);\n    --radius: var(--radius-md);\n  }\n\n  .dark {\n    --background: 222.2 84% 4.9%;\n    --foreground: 210 40% 98%;\n\n    --card: 222.2 84% 4.9%;\n    --card-foreground: 210 40% 98%;\n\n    --popover: 222.2 84% 4.9%;\n    --popover-foreground: 210 40% 98%;\n\n    --primary: 210 40% 98%;\n    --primary-foreground: 222.2 47.4% 11.2%;\n\n    --secondary: 217.2 32.6% 17.5%;\n    --secondary-foreground: 210 40% 98%;\n\n    --muted: 217.2 32.6% 17.5%;\n    --muted-foreground: 215 20.2% 65.1%;\n\n    --accent: 217.2 32.6% 17.5%;\n    --accent-foreground: 210 40% 98%;\n\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 210 40% 98%;\n\n    --border: 217.2 32.6% 17.5%;\n    --input: 217.2 32.6% 17.5%;\n    --ring: 212.7 26.8% 83.9%;\n    --sidebar-background: 240 5.9% 10%;\n    --sidebar-foreground: 240 4.8% 95.9%;\n    --sidebar-primary: 224.3 76.3% 48%;\n    --sidebar-primary-foreground: 0 0% 100%;\n    --sidebar-accent: 240 3.7% 15.9%;\n    --sidebar-accent-foreground: 240 4.8% 95.9%;\n    --sidebar-border: 240 3.7% 15.9%;\n    --sidebar-ring: 217.2 91.2% 59.8%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground font-inter;\n    font-family: 'Inter', -apple-system, BlinkMacSystemFont, system-ui, sans-serif;\n  }\n}\n\n@layer components {\n  /* Agricultural App Components */\n  .glass-card {\n    @apply backdrop-blur-lg bg-white/80 border border-white/20 shadow-lg;\n  }\n  \n  .gradient-primary {\n    background: var(--gradient-primary);\n  }\n  \n  .gradient-hero {\n    background: var(--gradient-hero);\n  }\n  \n  .gradient-splash {\n    background: var(--gradient-splash);\n  }\n  \n  .gradient-mesh {\n    background: var(--gradient-mesh);\n  }\n  \n  .gradient-glass {\n    background: var(--gradient-glass);\n  }\n  \n  .shadow-glow {\n    box-shadow: var(--shadow-glow);\n  }\n  \n  .shadow-soft {\n    box-shadow: var(--shadow-soft);\n  }\n  \n  .shadow-medium {\n    box-shadow: var(--shadow-medium);\n  }\n  \n  .shadow-large {\n    box-shadow: var(--shadow-large);\n  }\n  \n  .transition-smooth {\n    transition: var(--transition-smooth);\n  }\n  \n  .transition-spring {\n    transition: var(--transition-spring);\n  }\n  \n  /* Button Variants */\n  .btn-primary {\n    @apply bg-primary hover:bg-primary/90 text-primary-foreground font-semibold py-4 px-6 rounded-xl transition-all duration-300 transform hover:scale-105 active:scale-95 shadow-md hover:shadow-lg;\n  }\n  \n  .btn-secondary {\n    @apply bg-white border-2 border-primary text-primary hover:bg-primary hover:text-white font-semibold py-4 px-6 rounded-xl transition-all duration-300 transform hover:scale-105 active:scale-95;\n  }\n  \n  .btn-glass {\n    @apply glass-card text-primary hover:bg-white/90 font-semibold py-4 px-6 rounded-xl transition-all duration-300 transform hover:scale-105 active:scale-95;\n  }\n  \n  /* Agricultural Theme Components */\n  .plant-card {\n    @apply bg-white rounded-2xl p-6 shadow-medium hover:shadow-large transition-all duration-300 border border-gray-100 hover:border-primary/20;\n  }\n  \n  .weather-card {\n    @apply bg-gradient-to-br from-blue-50 to-blue-100 rounded-2xl p-6 shadow-medium border border-blue-200;\n  }\n  \n  .tip-card {\n    @apply bg-gradient-to-r from-yellow-50 to-orange-50 rounded-2xl p-6 shadow-medium border-l-4 border-yellow-400;\n  }\n  \n  .diagnosis-card {\n    @apply bg-white rounded-2xl p-6 shadow-large border border-gray-100;\n  }\n  \n  /* Floating Animation */\n  .float-animation {\n    animation: float 3s ease-in-out infinite;\n  }\n  \n  .pulse-glow {\n    animation: pulse-glow 2s ease-in-out infinite;\n  }\n  \n  .grow-animation {\n    animation: grow 2s ease-out forwards;\n  }\n  \n  /* Android Mobile Optimizations */\n  .mobile-container {\n    @apply w-full max-w-full min-h-screen bg-background relative overflow-hidden;\n    -webkit-tap-highlight-color: transparent;\n    -webkit-overflow-scrolling: touch;\n    overscroll-behavior: none;\n  }\n  \n  .mobile-header {\n    @apply flex items-center justify-between p-4 bg-white/95 backdrop-blur-md shadow-soft sticky top-0 z-50;\n    padding-top: max(16px, env(safe-area-inset-top));\n  }\n  \n  .mobile-content {\n    @apply px-4 pb-24;\n    -webkit-overflow-scrolling: touch;\n    padding-bottom: max(96px, calc(env(safe-area-inset-bottom) + 96px));\n  }\n  \n  .mobile-bottom-nav {\n    @apply fixed bottom-0 left-0 right-0 w-full bg-white/95 backdrop-blur-md border-t border-gray-200 shadow-large z-50;\n    padding-bottom: max(0px, env(safe-area-inset-bottom));\n  }\n\n  /* Android Button Animations */\n  .android-ripple {\n    @apply relative overflow-hidden;\n    -webkit-tap-highlight-color: transparent;\n    transition: all 0.2s cubic-bezier(0.4, 0.0, 0.2, 1);\n  }\n\n  .android-ripple:active {\n    transform: scale(0.96);\n  }\n\n  /* Android Card Style */\n  .android-card {\n    @apply bg-white rounded-2xl shadow-sm border border-gray-100;\n    transition: all 0.3s cubic-bezier(0.4, 0.0, 0.2, 1);\n  }\n\n  .android-card:active {\n    transform: scale(0.98);\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.12);\n  }\n\n  /* Touch Targets */\n  .touch-friendly {\n    min-height: 48px;\n    min-width: 48px;\n    @apply flex items-center justify-center;\n  }\n  \n  /* Agriculture Color Utilities */\n  .text-agri-primary { color: hsl(var(--primary-green)); }\n  .text-agri-secondary { color: hsl(var(--secondary-green)); }\n  .text-agri-accent { color: hsl(var(--accent-green)); }\n  .text-agri-success { color: hsl(var(--success-green)); }\n  .text-agri-warning { color: hsl(var(--warning-orange)); }\n  .text-agri-danger { color: hsl(var(--danger-red)); }\n  .text-agri-info { color: hsl(var(--info-blue)); }\n  .text-agri-purple { color: hsl(var(--purple)); }\n  \n  .bg-agri-primary { background-color: hsl(var(--primary-green)); }\n  .bg-agri-secondary { background-color: hsl(var(--secondary-green)); }\n  .bg-agri-accent { background-color: hsl(var(--accent-green)); }\n  .bg-agri-light { background-color: hsl(var(--light-green)); }\n  .bg-agri-success { background-color: hsl(var(--success-green)); }\n  .bg-agri-warning { background-color: hsl(var(--warning-orange)); }\n  .bg-agri-danger { background-color: hsl(var(--danger-red)); }\n  .bg-agri-info { background-color: hsl(var(--info-blue)); }\n  .bg-agri-light-blue { background-color: hsl(var(--light-blue)); }\n  .bg-agri-purple { background-color: hsl(var(--purple)); }\n  .bg-agri-light-purple { background-color: hsl(var(--light-purple)); }\n  .bg-agri-cream { background-color: hsl(var(--cream)); }\n  .bg-agri-light-cream { background-color: hsl(var(--light-cream)); }\n}\n\n@layer utilities {\n  /* Keyframe Animations */\n  @keyframes float {\n    0%, 100% {\n      transform: translateY(0px);\n    }\n    50% {\n      transform: translateY(-10px);\n    }\n  }\n  \n  @keyframes pulse-glow {\n    0%, 100% {\n      box-shadow: 0 0 5px hsla(var(--primary-green), 0.5);\n    }\n    50% {\n      box-shadow: 0 0 20px hsla(var(--primary-green), 0.8);\n    }\n  }\n  \n  @keyframes grow {\n    0% {\n      transform: scale(0) rotate(-180deg);\n      opacity: 0;\n    }\n    100% {\n      transform: scale(1) rotate(0deg);\n      opacity: 1;\n    }\n  }\n  \n  @keyframes slideUp {\n    0% {\n      transform: translateY(100%);\n      opacity: 0;\n    }\n    100% {\n      transform: translateY(0);\n      opacity: 1;\n    }\n  }\n  \n  @keyframes fadeIn {\n    0% {\n      opacity: 0;\n      transform: translateY(20px);\n    }\n    100% {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n  \n  @keyframes typing {\n    0% { width: 0; }\n    100% { width: 100%; }\n  }\n  \n  @keyframes shimmer {\n    0% {\n      background-position: -200% 0;\n    }\n    100% {\n      background-position: 200% 0;\n    }\n  }\n  \n  .animate-slide-up {\n    animation: slideUp 0.5s ease-out;\n  }\n  \n  .animate-fade-in {\n    animation: fadeIn 0.6s ease-out;\n  }\n  \n  .animate-typing {\n    animation: typing 2s steps(20, end);\n  }\n  \n  .animate-shimmer {\n    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);\n    background-size: 200% 100%;\n    animation: shimmer 1.5s infinite;\n  }\n}","size_bytes":12337},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/main.tsx":{"content":"import { createRoot } from 'react-dom/client'\nimport App from './App.tsx'\nimport './index.css'\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":158},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/vite-env.d.ts":{"content":"/// <reference types=\"vite/client\" />\n","size_bytes":38},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/components/AuthButton.tsx":{"content":"import React, { ReactNode } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Loader2 } from 'lucide-react';\n\ninterface AuthButtonProps {\n  children: ReactNode;\n  loading?: boolean;\n  loadingText?: string;\n  disabled?: boolean;\n  onClick?: () => void;\n  type?: 'button' | 'submit';\n  variant?: 'primary' | 'secondary' | 'outline';\n  size?: 'sm' | 'md' | 'lg';\n  className?: string;\n  icon?: ReactNode;\n}\n\nconst AuthButton: React.FC<AuthButtonProps> = ({\n  children,\n  loading = false,\n  loadingText = 'Loading...',\n  disabled = false,\n  onClick,\n  type = 'button',\n  variant = 'primary',\n  size = 'lg',\n  className = '',\n  icon\n}) => {\n  const getVariantClasses = () => {\n    switch (variant) {\n      case 'primary':\n        return 'bg-agri-primary hover:bg-agri-secondary text-white shadow-large';\n      case 'secondary':\n        return 'bg-agri-secondary hover:bg-agri-primary text-white shadow-large';\n      case 'outline':\n        return 'border-2 border-agri-primary text-agri-primary hover:bg-agri-primary hover:text-white shadow-md';\n      default:\n        return 'bg-agri-primary hover:bg-agri-secondary text-white shadow-large';\n    }\n  };\n\n  const getSizeClasses = () => {\n    switch (size) {\n      case 'sm':\n        return 'h-12 text-base px-6';\n      case 'md':\n        return 'h-16 text-lg px-8';\n      case 'lg':\n        return 'h-20 text-2xl px-8';\n      default:\n        return 'h-20 text-2xl px-8';\n    }\n  };\n\n  const isDisabled = disabled || loading;\n\n  return (\n    <Button\n      type={type}\n      onClick={onClick}\n      disabled={isDisabled}\n      className={`\n        w-full font-bold rounded-2xl transition-all duration-200\n        disabled:opacity-50 disabled:cursor-not-allowed\n        active:scale-95 transform\n        ${getVariantClasses()}\n        ${getSizeClasses()}\n        ${className}\n      `}\n    >\n      {loading ? (\n        <div className=\"flex items-center justify-center space-x-3\">\n          <Loader2 className=\"w-6 h-6 animate-spin\" />\n          <span>{loadingText}</span>\n        </div>\n      ) : (\n        <div className=\"flex items-center justify-center space-x-3\">\n          {icon && <span className=\"w-8 h-8 flex items-center justify-center\">{icon}</span>}\n          <span>{children}</span>\n        </div>\n      )}\n    </Button>\n  );\n};\n\nexport default AuthButton;","size_bytes":2332},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/components/CustomInput.tsx":{"content":"import React, { ReactNode } from 'react';\nimport { Input } from '@/components/ui/input';\nimport { AlertCircle, CheckCircle } from 'lucide-react';\n\ninterface CustomInputProps {\n  label: string;\n  icon: ReactNode;\n  value: string;\n  onChange: (value: string) => void;\n  placeholder: string;\n  type?: 'text' | 'tel' | 'email';\n  validation?: {\n    isValid: boolean;\n    message: string;\n  };\n  prefix?: string;\n  maxLength?: number;\n  className?: string;\n  inputClassName?: string;\n  disabled?: boolean;\n  required?: boolean;\n}\n\nconst CustomInput: React.FC<CustomInputProps> = ({\n  label,\n  icon,\n  value,\n  onChange,\n  placeholder,\n  type = 'text',\n  validation,\n  prefix,\n  maxLength,\n  className = '',\n  inputClassName = '',\n  disabled = false,\n  required = false\n}) => {\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    let newValue = e.target.value;\n    \n    // Apply specific formatting based on type\n    if (type === 'tel') {\n      newValue = newValue.replace(/\\D/g, '');\n    } else if (type === 'text' && label.toLowerCase().includes('name')) {\n      // Only allow alphabets and spaces for name fields\n      newValue = newValue.replace(/[^A-Za-z\\s]/g, '');\n    }\n    \n    onChange(newValue);\n  };\n\n  const getValidationStyle = () => {\n    if (!validation || value.length === 0) {\n      return 'border-agri-primary/30 focus:border-agri-primary';\n    }\n    \n    return validation.isValid \n      ? 'border-green-400 focus:border-green-500' \n      : 'border-red-400 focus:border-red-500';\n  };\n\n  const showValidationIcon = validation && value.length > 0;\n\n  return (\n    <div className={`space-y-2 ${className}`}>\n      {/* Label */}\n      <label className=\"text-lg font-bold text-agri-primary flex items-center\">\n        {icon}\n        <span className=\"ml-3\">{label}</span>\n        {required && <span className=\"text-red-500 ml-1\">*</span>}\n      </label>\n\n      {/* Input Container */}\n      <div className=\"relative\">\n        {/* Prefix */}\n        {prefix && (\n          <div className=\"absolute left-4 top-1/2 transform -translate-y-1/2 bg-agri-light rounded-lg px-3 py-2\">\n            <span className=\"text-agri-primary font-bold text-lg\">{prefix}</span>\n          </div>\n        )}\n\n        {/* Input Field */}\n        <Input\n          type={type}\n          placeholder={placeholder}\n          value={value}\n          onChange={handleChange}\n          maxLength={maxLength}\n          disabled={disabled}\n          className={`\n            ${prefix ? 'pl-24' : 'pl-4'} \n            ${showValidationIcon ? 'pr-16' : 'pr-4'}\n            h-16 text-xl rounded-2xl border-2 \n            ${getValidationStyle()}\n            bg-agri-light/30 font-semibold\n            disabled:opacity-50 disabled:cursor-not-allowed\n            ${type === 'tel' ? 'text-center tracking-wider font-bold' : ''}\n            ${inputClassName}\n          `}\n        />\n\n        {/* Validation Icon */}\n        {showValidationIcon && (\n          <div className=\"absolute right-4 top-1/2 transform -translate-y-1/2\">\n            {validation.isValid ? (\n              <CheckCircle className=\"w-6 h-6 text-green-600\" />\n            ) : (\n              <AlertCircle className=\"w-6 h-6 text-red-600\" />\n            )}\n          </div>\n        )}\n      </div>\n\n      {/* Validation Message */}\n      {validation && validation.message && value.length > 0 && (\n        <div className={`text-sm px-3 py-2 rounded-lg ${\n          validation.isValid \n            ? 'text-green-700 bg-green-50' \n            : 'text-red-700 bg-red-50'\n        }`}>\n          {validation.message}\n        </div>\n      )}\n\n      {/* Character count for limited inputs */}\n      {maxLength && value.length > 0 && (\n        <div className=\"text-sm text-agri-gray text-right\">\n          {value.length}/{maxLength}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default CustomInput;","size_bytes":3852},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/components/LanguageSwitcher.tsx":{"content":"import { useState } from 'react';\n\nconst languages = [\n  { code: 'en', name: 'English', flag: '🇬🇧', short: 'EN' },\n  { code: 'hi', name: 'हिंदी', flag: '🇮🇳', short: 'हिं' },\n];\n\nconst LanguageSwitcher = () => {\n  const [selectedLanguage, setSelectedLanguage] = useState('en');\n\n  return (\n    <div className=\"flex items-center bg-white/90 backdrop-blur-sm rounded-full p-1 shadow-sm border border-green-100\">\n      {languages.map((lang) => {\n        const isSelected = selectedLanguage === lang.code;\n        return (\n          <button\n            key={lang.code}\n            onClick={() => setSelectedLanguage(lang.code)}\n            className={`\n              px-3 py-1.5 rounded-full text-sm font-medium transition-all duration-200 ease-in-out flex items-center space-x-1\n              ${\n                isSelected\n                  ? 'bg-green-500 text-white shadow-sm transform scale-105'\n                  : 'text-green-600 hover:bg-green-50'\n              }\n            `}\n          >\n            <span className=\"text-xs\">{lang.flag}</span>\n            <span className=\"text-xs font-semibold\">{lang.short}</span>\n          </button>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default LanguageSwitcher;","size_bytes":1243},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/components/LocationPermissionModal.tsx":{"content":"import React from 'react';\nimport { MapPin, Shield, Navigation, AlertCircle } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\n\ninterface LocationPermissionModalProps {\n  isOpen: boolean;\n  onRequestPermission: () => void;\n  onSkip: () => void;\n  permissionStatus: 'granted' | 'denied' | 'prompt' | 'unsupported';\n}\n\nconst LocationPermissionModal: React.FC<LocationPermissionModalProps> = ({\n  isOpen,\n  onRequestPermission,\n  onSkip,\n  permissionStatus\n}) => {\n  const getModalContent = () => {\n    switch (permissionStatus) {\n      case 'denied':\n        return {\n          icon: <AlertCircle className=\"w-16 h-16 text-amber-500 mx-auto mb-4\" />,\n          title: \"Location Access Blocked\",\n          description: \"Location access has been denied. To auto-fill your location, please:\",\n          instructions: [\n            \"Click the location icon in your browser's address bar\",\n            \"Select 'Allow' for location access\",\n            \"Refresh this page and try again\"\n          ],\n          buttonText: \"Manual Entry Instead\",\n          buttonAction: onSkip\n        };\n      \n      case 'unsupported':\n        return {\n          icon: <MapPin className=\"w-16 h-16 text-gray-500 mx-auto mb-4\" />,\n          title: \"Location Not Supported\",\n          description: \"Your device doesn't support automatic location detection.\",\n          instructions: [\n            \"You can manually select your state and district\",\n            \"This won't affect your farming experience\"\n          ],\n          buttonText: \"Continue Manually\",\n          buttonAction: onSkip\n        };\n      \n      default:\n        return {\n          icon: <Navigation className=\"w-16 h-16 text-agri-primary mx-auto mb-4\" />,\n          title: \"Help Us Serve You Better\",\n          description: \"KisanMitra would like to access your location to:\",\n          instructions: [\n            \"🌾 Auto-fill your state and district\",\n            \"🌤️ Provide local weather information\",\n            \"📍 Show nearby farming services\",\n            \"💰 Display regional market prices\"\n          ],\n          buttonText: \"Allow Location Access\",\n          buttonAction: onRequestPermission\n        };\n    }\n  };\n\n  const { icon, title, description, instructions, buttonText, buttonAction } = getModalContent();\n\n  return (\n    <Dialog open={isOpen}>\n      <DialogContent className=\"max-w-sm mx-auto bg-white rounded-3xl p-6 border-2 border-agri-primary/20\">\n        <DialogHeader className=\"text-center\">\n          {icon}\n          <DialogTitle className=\"text-2xl font-bold text-agri-primary mb-2\">\n            {title}\n          </DialogTitle>\n          <DialogDescription className=\"text-agri-gray text-base mb-4\">\n            {description}\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          <div className=\"bg-agri-light/30 rounded-2xl p-4\">\n            <ul className=\"space-y-2\">\n              {instructions.map((instruction, index) => (\n                <li key={index} className=\"flex items-start text-agri-gray text-sm\">\n                  <span className=\"inline-block w-2 h-2 rounded-full bg-agri-primary mr-3 mt-2 flex-shrink-0\" />\n                  <span>{instruction}</span>\n                </li>\n              ))}\n            </ul>\n          </div>\n\n          <div className=\"flex flex-col space-y-3\">\n            <Button\n              onClick={buttonAction}\n              className=\"w-full h-14 bg-agri-primary hover:bg-agri-secondary text-white font-bold text-lg rounded-2xl\"\n            >\n              {buttonText}\n            </Button>\n            \n            {permissionStatus === 'prompt' && (\n              <Button\n                onClick={onSkip}\n                variant=\"outline\"\n                className=\"w-full h-12 border-2 border-agri-primary/30 text-agri-primary font-semibold rounded-2xl hover:bg-agri-light/50\"\n              >\n                Enter Manually\n              </Button>\n            )}\n          </div>\n\n          {permissionStatus === 'prompt' && (\n            <div className=\"flex items-center justify-center text-center pt-2\">\n              <Shield className=\"w-4 h-4 text-agri-primary mr-2\" />\n              <p className=\"text-xs text-agri-gray\">\n                Your location data is secure and stays on your device\n              </p>\n            </div>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default LocationPermissionModal;","size_bytes":4578},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/components/LocationPicker.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { MapPin, Navigation, RefreshCw, AlertCircle, CheckCircle } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport useLocation from '@/hooks/useLocation';\nimport LocationPermissionModal from './LocationPermissionModal';\n\ninterface LocationPickerProps {\n  state: string;\n  district: string;\n  onStateChange: (value: string) => void;\n  onDistrictChange: (value: string) => void;\n  className?: string;\n}\n\nconst indianStates = [\n  \"Andhra Pradesh\", \"Arunachal Pradesh\", \"Assam\", \"Bihar\", \"Chhattisgarh\", \n  \"Goa\", \"Gujarat\", \"Haryana\", \"Himachal Pradesh\", \"Jharkhand\", \"Karnataka\", \n  \"Kerala\", \"Madhya Pradesh\", \"Maharashtra\", \"Manipur\", \"Meghalaya\", \"Mizoram\", \n  \"Nagaland\", \"Odisha\", \"Punjab\", \"Rajasthan\", \"Sikkim\", \"Tamil Nadu\", \n  \"Telangana\", \"Tripura\", \"Uttar Pradesh\", \"Uttarakhand\", \"West Bengal\",\n  \"Delhi\", \"Puducherry\", \"Chandigarh\", \"Dadra and Nagar Haveli\", \"Daman and Diu\",\n  \"Lakshadweep\", \"Ladakh\", \"Jammu and Kashmir\"\n];\n\nconst LocationPicker: React.FC<LocationPickerProps> = ({\n  state,\n  district,\n  onStateChange,\n  onDistrictChange,\n  className = \"\"\n}) => {\n  const {\n    loading,\n    data,\n    error,\n    permissionStatus,\n    getCurrentLocation,\n    retryLocation,\n    getAccuracyLevel,\n    hasValidLocation,\n    stateDistrictMapping\n  } = useLocation();\n\n  const [showPermissionModal, setShowPermissionModal] = useState(false);\n  const [useManualEntry, setUseManualEntry] = useState(false);\n  const [autoLocationAttempted, setAutoLocationAttempted] = useState(false);\n  const [isSignupFlow, setIsSignupFlow] = useState(false);\n\n  // Auto-detect location on component mount (for signup flow)\n  useEffect(() => {\n    // Check if this is likely a signup flow (no existing state/district values)\n    const isLikelySignup = !state && !district;\n    setIsSignupFlow(isLikelySignup);\n    \n    // Auto-attempt location detection for signup flow if not already attempted\n    if (isLikelySignup && !autoLocationAttempted && permissionStatus !== 'denied' && !useManualEntry) {\n      console.log('Auto-attempting location detection for signup...');\n      setAutoLocationAttempted(true);\n      getCurrentLocation().catch(() => {\n        console.log('Auto location detection failed, user can try manually');\n      });\n    }\n  }, []);\n\n  // Auto-fill when location data is available (fixed to prevent infinite loop)\n  useEffect(() => {\n    if (data?.state && data?.district && !useManualEntry) {\n      // Only update if values are different to prevent infinite loops\n      if (state !== data.state) {\n        onStateChange(data.state);\n      }\n      if (district !== data.district) {\n        onDistrictChange(data.district);\n      }\n    }\n    // Exclude handler functions from dependencies to prevent infinite loops\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data?.state, data?.district, useManualEntry, state, district]);\n\n  const handleLocationRequest = async () => {\n    setShowPermissionModal(false);\n    setAutoLocationAttempted(true);\n    \n    try {\n      await getCurrentLocation();\n    } catch (error) {\n      console.error('Location request failed:', error);\n    }\n  };\n\n  const handleSkipLocation = () => {\n    setShowPermissionModal(false);\n    setUseManualEntry(true);\n  };\n\n  const handleUseCurrentLocation = () => {\n    if (permissionStatus === 'prompt' || permissionStatus === 'denied') {\n      setShowPermissionModal(true);\n    } else {\n      getCurrentLocation();\n    }\n  };\n\n  const getAccuracyIndicator = () => {\n    if (!data) return null;\n    \n    // Simple accuracy determination based on available data\n    const accuracy = data.accuracy || (data.state && data.district ? 'high' : 'medium');\n    const colors = {\n      high: 'text-green-600',\n      medium: 'text-yellow-600',\n      low: 'text-orange-600'\n    };\n\n    return (\n      <div className=\"flex items-center space-x-2 text-sm\">\n        <div className={`w-2 h-2 rounded-full ${\n          accuracy === 'high' ? 'bg-green-500' : \n          accuracy === 'medium' ? 'bg-yellow-500' : 'bg-orange-500'\n        }`} />\n        <span className={`text-xs ${colors[accuracy] || colors['low']}`}>\n          {accuracy === 'high' ? 'High accuracy' : \n           accuracy === 'medium' ? 'Medium accuracy' : 'Low accuracy'}\n        </span>\n      </div>\n    );\n  };\n\n  return (\n    <div className={`space-y-4 ${className}`}>\n      {/* Location Detection Section */}\n      {!useManualEntry && (\n        <div className=\"bg-agri-light/30 rounded-2xl p-4 border border-agri-primary/20\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <div className=\"flex items-center space-x-2\">\n              <Navigation className=\"w-5 h-5 text-agri-primary\" />\n              <span className=\"font-semibold text-agri-primary\">Auto Location</span>\n            </div>\n            \n            {hasValidLocation && (\n              <CheckCircle className=\"w-5 h-5 text-green-600\" />\n            )}\n          </div>\n\n          {loading && (\n            <div className=\"flex items-center space-x-3 py-2\">\n              <RefreshCw className=\"w-4 h-4 text-agri-primary animate-spin\" />\n              <span className=\"text-sm text-agri-gray\">Detecting your location...</span>\n            </div>\n          )}\n\n          {error && (\n            <div className=\"flex items-start space-x-2 py-2 text-sm text-red-600\">\n              <AlertCircle className=\"w-4 h-4 mt-0.5 flex-shrink-0\" />\n              <span>{error}</span>\n            </div>\n          )}\n\n          {hasValidLocation && data && (\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-agri-gray\">Detected Location:</span>\n                {getAccuracyIndicator()}\n              </div>\n              <div className=\"text-sm font-medium text-agri-primary\">\n                📍 {data.district}, {data.state}\n              </div>\n            </div>\n          )}\n\n          <div className=\"flex space-x-2 mt-3\">\n            <Button\n              type=\"button\"\n              onClick={handleUseCurrentLocation}\n              disabled={loading}\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"flex-1 h-10 border-agri-primary/50 text-agri-primary hover:bg-agri-primary hover:text-white rounded-xl\"\n            >\n              <Navigation className=\"w-4 h-4 mr-2\" />\n              {loading ? 'Locating...' : 'Use Current Location'}\n            </Button>\n\n            {hasValidLocation && (\n              <Button\n                type=\"button\"\n                onClick={retryLocation}\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"h-10 border-agri-primary/50 text-agri-primary hover:bg-agri-primary hover:text-white rounded-xl px-3\"\n              >\n                <RefreshCw className=\"w-4 h-4\" />\n              </Button>\n            )}\n\n            <Button\n              type=\"button\"\n              onClick={() => setUseManualEntry(true)}\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"h-10 border-agri-primary/50 text-agri-primary hover:bg-agri-primary hover:text-white rounded-xl px-3\"\n            >\n              Manual\n            </Button>\n          </div>\n        </div>\n      )}\n\n      {/* Manual Entry Section */}\n      {(useManualEntry || (!hasValidLocation && autoLocationAttempted)) && (\n        <>\n          {/* State Field */}\n          <div className=\"space-y-2\">\n            <label className=\"text-lg font-bold text-agri-primary flex items-center\">\n              <MapPin className=\"w-6 h-6 mr-3\" />\n              State\n              {!useManualEntry && <span className=\"text-sm font-normal text-agri-gray ml-2\">(Manual Entry)</span>}\n            </label>\n            <Select onValueChange={onStateChange} value={state}>\n              <SelectTrigger className=\"h-16 text-xl rounded-2xl border-2 border-agri-primary/30 focus:border-agri-primary bg-agri-light/30 font-semibold\">\n                <SelectValue placeholder=\"Select your state\" />\n              </SelectTrigger>\n              <SelectContent className=\"bg-white border border-agri-primary/20 shadow-large rounded-lg max-h-48\">\n                {indianStates.map((stateName) => (\n                  <SelectItem \n                    key={stateName} \n                    value={stateName}\n                    className=\"text-lg py-3 px-4 hover:bg-agri-light\"\n                  >\n                    {stateName}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* District Field */}\n          <div className=\"space-y-2\">\n            <label className=\"text-lg font-bold text-agri-primary flex items-center\">\n              <MapPin className=\"w-6 h-6 mr-3\" />\n              District\n            </label>\n            <Input\n              type=\"text\"\n              placeholder=\"Enter your district name\"\n              value={district}\n              onChange={(e) => onDistrictChange(e.target.value)}\n              className=\"h-16 text-xl rounded-2xl border-2 border-agri-primary/30 focus:border-agri-primary bg-agri-light/30 font-semibold\"\n            />\n            \n            {/* District suggestions if state is selected */}\n            {state && stateDistrictMapping[state] && (\n              <div className=\"mt-2\">\n                <p className=\"text-sm text-agri-gray mb-2\">Popular districts in {state}:</p>\n                <div className=\"flex flex-wrap gap-2\">\n                  {stateDistrictMapping[state].slice(0, 4).map((dist) => (\n                    <button\n                      key={dist}\n                      type=\"button\"\n                      onClick={() => onDistrictChange(dist)}\n                      className=\"px-3 py-1 text-sm bg-agri-light text-agri-primary rounded-lg hover:bg-agri-primary hover:text-white transition-colors\"\n                    >\n                      {dist}\n                    </button>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n\n          {useManualEntry && (\n            <Button\n              type=\"button\"\n              onClick={() => {\n                setUseManualEntry(false);\n                setAutoLocationAttempted(false);\n                handleUseCurrentLocation();\n              }}\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"w-full h-10 border-agri-primary/50 text-agri-primary hover:bg-agri-primary hover:text-white rounded-xl\"\n            >\n              <Navigation className=\"w-4 h-4 mr-2\" />\n              Try Auto Location Again\n            </Button>\n          )}\n        </>\n      )}\n\n      <LocationPermissionModal\n        isOpen={showPermissionModal}\n        onRequestPermission={handleLocationRequest}\n        onSkip={handleSkipLocation}\n        permissionStatus={permissionStatus}\n      />\n    </div>\n  );\n};\n\nexport default LocationPicker;","size_bytes":11139},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/components/NotificationPanel.tsx":{"content":"\nimport { useState, useEffect } from 'react';\nimport { X, Bell, Package, TrendingUp, AlertCircle, CheckCircle, Clock, MessageCircle, Trash2, CheckCheck } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\n\ninterface NotificationPanelProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst NotificationPanel = ({ isOpen, onClose }: NotificationPanelProps) => {\n  const [notifications, setNotifications] = useState([\n    {\n      id: 1,\n      type: 'market_request',\n      title: 'Market Request Accepted!',\n      message: 'FreshMart has accepted your tomatoes order for ₹800',\n      time: '2 minutes ago',\n      icon: CheckCircle,\n      iconColor: 'text-green-600',\n      bgColor: 'bg-green-50',\n      unread: true\n    },\n    {\n      id: 2,\n      type: 'price_alert',\n      title: 'Price Alert',\n      message: 'Tomato prices increased by ₹3/kg in your area',\n      time: '1 hour ago',\n      icon: TrendingUp,\n      iconColor: 'text-blue-600',\n      bgColor: 'bg-blue-50',\n      unread: true\n    },\n    {\n      id: 3,\n      type: 'treatment_reminder',\n      title: 'Treatment Reminder',\n      message: 'Time to apply fungicide to your wheat crop',\n      time: '3 hours ago',\n      icon: AlertCircle,\n      iconColor: 'text-orange-600',\n      bgColor: 'bg-orange-50',\n      unread: true\n    },\n    {\n      id: 4,\n      type: 'order_delivered',\n      title: 'Order Delivered',\n      message: 'Your fertilizer order has been delivered successfully',\n      time: 'Yesterday',\n      icon: Package,\n      iconColor: 'text-green-600',\n      bgColor: 'bg-green-50',\n      unread: false\n    },\n    {\n      id: 5,\n      type: 'buyer_inquiry',\n      title: 'New Buyer Inquiry',\n      message: 'Someone is interested in your green chilies listing',\n      time: '2 days ago',\n      icon: MessageCircle,\n      iconColor: 'text-purple-600',\n      bgColor: 'bg-purple-50',\n      unread: false\n    },\n    {\n      id: 6,\n      type: 'weather_alert',\n      title: 'Weather Alert',\n      message: 'Heavy rain expected tomorrow. Protect your crops',\n      time: '2 days ago',\n      icon: AlertCircle,\n      iconColor: 'text-red-600',\n      bgColor: 'bg-red-50',\n      unread: false\n    }\n  ]);\n\n  // Load notifications from localStorage\n  useEffect(() => {\n    const savedNotifications = localStorage.getItem('kisanmitra_notifications');\n    if (savedNotifications) {\n      setNotifications(JSON.parse(savedNotifications));\n    }\n  }, []);\n\n  // Save notifications to localStorage whenever they change\n  useEffect(() => {\n    localStorage.setItem('kisanmitra_notifications', JSON.stringify(notifications));\n  }, [notifications]);\n\n  const handleMarkAllRead = () => {\n    setNotifications(prev => \n      prev.map(notif => ({ ...notif, unread: false }))\n    );\n  };\n\n  const handleClearAll = () => {\n    setNotifications([]);\n    localStorage.removeItem('kisanmitra_notifications');\n  };\n\n  if (!isOpen) return null;\n\n  const unreadCount = notifications.filter(n => n.unread).length;\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 z-50 flex justify-end\">\n      <div className=\"bg-white w-full max-w-sm h-full overflow-hidden shadow-xl animate-slide-in-right\">\n        {/* Header */}\n        <div className=\"bg-gradient-to-r from-green-500 to-green-600 p-4 text-white\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              <Bell className=\"w-6 h-6\" />\n              <h2 className=\"text-xl font-bold\">Notifications</h2>\n              {unreadCount > 0 && (\n                <Badge className=\"bg-red-500 text-white\">\n                  {unreadCount}\n                </Badge>\n              )}\n            </div>\n            <button\n              onClick={onClose}\n              className=\"p-1 rounded-full hover:bg-white/20 transition-colors\"\n            >\n              <X className=\"w-6 h-6\" />\n            </button>\n          </div>\n        </div>\n\n        {/* Notifications List */}\n        <div className=\"flex-1 overflow-y-auto max-h-[calc(100vh-200px)]\">\n          <div className=\"p-4 space-y-4 pb-20\">\n            {notifications.map((notification) => (\n              <div\n                key={notification.id}\n                className={`p-4 rounded-xl border transition-all hover:shadow-md ${\n                  notification.unread \n                    ? 'border-green-200 bg-green-50/50' \n                    : 'border-gray-200 bg-white'\n                }`}\n              >\n                <div className=\"flex items-start space-x-3\">\n                  <div className={`w-10 h-10 ${notification.bgColor} rounded-full flex items-center justify-center flex-shrink-0`}>\n                    <notification.icon className={`w-5 h-5 ${notification.iconColor}`} />\n                  </div>\n                  \n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-start justify-between\">\n                      <h4 className=\"font-semibold text-gray-900 text-sm\">\n                        {notification.title}\n                      </h4>\n                      {notification.unread && (\n                        <div className=\"w-2 h-2 bg-green-500 rounded-full flex-shrink-0 mt-1\"></div>\n                      )}\n                    </div>\n                    \n                    <p className=\"text-sm text-gray-600 mt-1 leading-relaxed\">\n                      {notification.message}\n                    </p>\n                    \n                    <div className=\"flex items-center space-x-1 mt-2\">\n                      <Clock className=\"w-3 h-3 text-gray-400\" />\n                      <span className=\"text-xs text-gray-400\">{notification.time}</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Footer Actions */}\n        <div className=\"border-t border-gray-200 p-4 space-y-2\">\n          <div className=\"flex space-x-2\">\n            <Button \n              variant=\"outline\" \n              className=\"flex-1 text-sm\"\n              onClick={handleMarkAllRead}\n            >\n              <CheckCheck className=\"w-4 h-4 mr-2\" />\n              Mark All Read\n            </Button>\n            <Button \n              variant=\"outline\" \n              className=\"flex-1 text-sm text-red-600 border-red-200 hover:bg-red-50\"\n              onClick={handleClearAll}\n            >\n              <Trash2 className=\"w-4 h-4 mr-2\" />\n              Clear All\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NotificationPanel;\n","size_bytes":6657},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/components/PINInput.tsx":{"content":"import React, { useState } from 'react';\nimport { Eye, EyeOff, Lock } from 'lucide-react';\nimport { Input } from '@/components/ui/input';\n\ninterface PINInputProps {\n  value: string;\n  onChange: (value: string) => void;\n  placeholder?: string;\n  label?: string;\n  showStrengthIndicator?: boolean;\n  className?: string;\n}\n\nconst PINInput: React.FC<PINInputProps> = ({\n  value,\n  onChange,\n  placeholder = \"Enter PIN\",\n  label = \"4-Digit PIN\",\n  showStrengthIndicator = false,\n  className = \"\"\n}) => {\n  const [showPin, setShowPin] = useState(false);\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = e.target.value.replace(/\\D/g, '').slice(0, 4);\n    onChange(newValue);\n  };\n\n  const getPinStrength = (): 'weak' | 'medium' | 'strong' => {\n    if (value.length < 4) return 'weak';\n    \n    const hasRepeating = /(.)\\1{2,}/.test(value);\n    const isSequential = /^(0123|1234|2345|3456|4567|5678|6789|9876|8765|7654|6543|5432|4321|3210)/.test(value);\n    const isCommon = ['1111', '2222', '3333', '4444', '5555', '6666', '7777', '8888', '9999', '0000', '1234', '4321'].includes(value);\n    \n    if (hasRepeating || isSequential || isCommon) return 'weak';\n    \n    const uniqueDigits = new Set(value.split('')).size;\n    return uniqueDigits >= 3 ? 'strong' : 'medium';\n  };\n\n  const getStrengthColor = () => {\n    const strength = getPinStrength();\n    switch (strength) {\n      case 'weak': return 'text-red-500 bg-red-100';\n      case 'medium': return 'text-yellow-600 bg-yellow-100';\n      case 'strong': return 'text-green-600 bg-green-100';\n    }\n  };\n\n  const getStrengthText = () => {\n    const strength = getPinStrength();\n    switch (strength) {\n      case 'weak': return 'Weak PIN';\n      case 'medium': return 'Medium PIN';\n      case 'strong': return 'Strong PIN';\n    }\n  };\n\n  return (\n    <div className={`space-y-3 ${className}`}>\n      {/* Label */}\n      <label className=\"text-lg font-bold text-agri-primary flex items-center\">\n        <Lock className=\"w-6 h-6 mr-3\" />\n        {label}\n      </label>\n\n      {/* PIN Input */}\n      <div className=\"relative\">\n        <Input\n          type={showPin ? \"text\" : \"password\"}\n          placeholder={placeholder}\n          value={value}\n          onChange={handleChange}\n          maxLength={4}\n          className=\"pr-16 h-16 text-2xl rounded-2xl border-2 border-agri-primary/30 focus:border-agri-primary bg-agri-light/30 font-bold text-center tracking-[0.8em] placeholder:tracking-normal placeholder:text-base\"\n        />\n        \n        {/* Show/Hide Button */}\n        <button\n          type=\"button\"\n          onClick={() => setShowPin(!showPin)}\n          className=\"absolute right-4 top-1/2 transform -translate-y-1/2 p-2 rounded-xl hover:bg-agri-light transition-colors\"\n        >\n          {showPin ? (\n            <EyeOff className=\"w-6 h-6 text-agri-primary\" />\n          ) : (\n            <Eye className=\"w-6 h-6 text-agri-primary\" />\n          )}\n        </button>\n      </div>\n\n      {/* PIN Dots Indicator */}\n      <div className=\"flex justify-center space-x-4 mt-4\">\n        {[...Array(4)].map((_, i) => (\n          <div\n            key={i}\n            className={`w-4 h-4 rounded-full transition-all duration-300 ${\n              i < value.length \n                ? 'bg-agri-primary scale-125 shadow-md' \n                : 'bg-agri-light'\n            }`}\n          />\n        ))}\n      </div>\n\n      {/* PIN Strength Indicator */}\n      {showStrengthIndicator && value.length > 0 && (\n        <div className=\"mt-3\">\n          <div className={`inline-flex items-center px-3 py-2 rounded-xl text-sm font-medium ${getStrengthColor()}`}>\n            <div className={`w-2 h-2 rounded-full mr-2 ${\n              getPinStrength() === 'weak' ? 'bg-red-500' :\n              getPinStrength() === 'medium' ? 'bg-yellow-500' : 'bg-green-500'\n            }`} />\n            {getStrengthText()}\n          </div>\n          \n          {/* Strength Tips */}\n          {value.length === 4 && getPinStrength() === 'weak' && (\n            <div className=\"mt-2 text-sm text-red-600 bg-red-50 p-3 rounded-xl\">\n              💡 <strong>Tip:</strong> Avoid repeating digits (1111), sequences (1234), or common patterns\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* PIN Requirements */}\n      {value.length > 0 && value.length < 4 && (\n        <div className=\"text-sm text-agri-gray\">\n          PIN must be exactly 4 digits ({value.length}/4)\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default PINInput;","size_bytes":4528},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/hooks/useLocation.ts":{"content":"import { useState, useEffect } from 'react';\n\ninterface LocationData {\n  latitude: number;\n  longitude: number;\n  state: string;\n  district: string;\n  accuracy: number;\n}\n\ninterface LocationState {\n  loading: boolean;\n  data: LocationData | null;\n  error: string | null;\n  permissionStatus: 'granted' | 'denied' | 'prompt' | 'unsupported';\n}\n\n// Indian states and districts mapping for reverse geocoding fallback\nconst stateDistrictMapping: Record<string, string[]> = {\n  \"Maharashtra\": [\"Mumbai\", \"Pune\", \"Nagpur\", \"Nashik\", \"Aurangabad\", \"Solapur\"],\n  \"Karnataka\": [\"Bangalore\", \"Mysore\", \"Hubli\", \"Mangalore\", \"Belgaum\", \"Gulbarga\"],\n  \"Tamil Nadu\": [\"Chennai\", \"Coimbatore\", \"Madurai\", \"Tiruchirappalli\", \"Salem\", \"Tirunelveli\"],\n  \"Gujarat\": [\"Ahmedabad\", \"Surat\", \"Vadodara\", \"Rajkot\", \"Bhavnagar\", \"Jamnagar\"],\n  \"Punjab\": [\"Ludhiana\", \"Amritsar\", \"Jalandhar\", \"Patiala\", \"Bathinda\", \"Mohali\"],\n  \"Uttar Pradesh\": [\"Lucknow\", \"Kanpur\", \"Agra\", \"Varanasi\", \"Allahabad\", \"Meerut\"],\n  \"West Bengal\": [\"Kolkata\", \"Howrah\", \"Durgapur\", \"Asansol\", \"Siliguri\", \"Malda\"],\n  \"Rajasthan\": [\"Jaipur\", \"Jodhpur\", \"Kota\", \"Bikaner\", \"Udaipur\", \"Ajmer\"],\n  \"Madhya Pradesh\": [\"Bhopal\", \"Indore\", \"Gwalior\", \"Jabalpur\", \"Ujjain\", \"Sagar\"],\n  \"Haryana\": [\"Gurugram\", \"Faridabad\", \"Panipat\", \"Ambala\", \"Yamunanagar\", \"Rohtak\"]\n};\n\nconst useLocation = () => {\n  const [locationState, setLocationState] = useState<LocationState>({\n    loading: false,\n    data: null,\n    error: null,\n    permissionStatus: 'prompt'\n  });\n\n  const checkPermissionStatus = async (): Promise<'granted' | 'denied' | 'prompt' | 'unsupported'> => {\n    if (!navigator.geolocation) {\n      return 'unsupported';\n    }\n\n    try {\n      const permission = await navigator.permissions.query({ name: 'geolocation' });\n      return permission.state as 'granted' | 'denied' | 'prompt';\n    } catch {\n      return 'prompt';\n    }\n  };\n\n  const reverseGeocode = async (lat: number, lon: number): Promise<{ state: string; district: string }> => {\n    try {\n      // Using a free geocoding service (OpenStreetMap Nominatim)\n      const response = await fetch(\n        `https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lon}&addressdetails=1&accept-language=en`\n      );\n      \n      if (!response.ok) {\n        throw new Error('Geocoding failed');\n      }\n\n      const data = await response.json();\n      const address = data.address;\n      \n      let state = address.state || address.province || '';\n      let district = address.city || address.town || address.village || address.suburb || '';\n\n      // Fallback: Try to match with Indian states if exact match not found\n      if (!state || !Object.keys(stateDistrictMapping).includes(state)) {\n        // Simple matching logic for Indian context\n        const stateName = Object.keys(stateDistrictMapping).find(s => \n          state.toLowerCase().includes(s.toLowerCase()) || \n          s.toLowerCase().includes(state.toLowerCase())\n        );\n        if (stateName) {\n          state = stateName;\n        }\n      }\n\n      return { \n        state: state || 'Unknown State', \n        district: district || 'Unknown District' \n      };\n    } catch (error) {\n      console.error('Reverse geocoding failed:', error);\n      return { state: 'Unknown State', district: 'Unknown District' };\n    }\n  };\n\n  const getCurrentLocation = async (): Promise<void> => {\n    setLocationState(prev => ({ ...prev, loading: true, error: null }));\n\n    try {\n      const permissionStatus = await checkPermissionStatus();\n      setLocationState(prev => ({ ...prev, permissionStatus }));\n\n      if (permissionStatus === 'denied') {\n        throw new Error('Location access denied. Please enable location services and try again.');\n      }\n\n      if (permissionStatus === 'unsupported') {\n        throw new Error('Location services are not supported by your device.');\n      }\n\n      return new Promise((resolve, reject) => {\n        const options: PositionOptions = {\n          enableHighAccuracy: true,\n          timeout: 15000,\n          maximumAge: 300000 // 5 minutes cache\n        };\n\n        navigator.geolocation.getCurrentPosition(\n          async (position) => {\n            try {\n              const { latitude, longitude, accuracy } = position.coords;\n              const { state, district } = await reverseGeocode(latitude, longitude);\n\n              const locationData: LocationData = {\n                latitude,\n                longitude,\n                state,\n                district,\n                accuracy\n              };\n\n              setLocationState(prev => ({\n                ...prev,\n                loading: false,\n                data: locationData,\n                error: null,\n                permissionStatus: 'granted'\n              }));\n\n              // Cache the location data\n              localStorage.setItem('kisanmitra_location', JSON.stringify({\n                ...locationData,\n                timestamp: Date.now()\n              }));\n\n              resolve();\n            } catch (error) {\n              const errorMessage = error instanceof Error ? error.message : 'Failed to get location details';\n              setLocationState(prev => ({\n                ...prev,\n                loading: false,\n                error: errorMessage\n              }));\n              reject(new Error(errorMessage));\n            }\n          },\n          (error) => {\n            let errorMessage = 'Unable to retrieve your location. ';\n            \n            switch (error.code) {\n              case error.PERMISSION_DENIED:\n                errorMessage += 'Location access denied.';\n                setLocationState(prev => ({ ...prev, permissionStatus: 'denied' }));\n                break;\n              case error.POSITION_UNAVAILABLE:\n                errorMessage += 'Location information unavailable.';\n                break;\n              case error.TIMEOUT:\n                errorMessage += 'Location request timed out.';\n                break;\n              default:\n                errorMessage += 'An unknown error occurred.';\n                break;\n            }\n\n            setLocationState(prev => ({\n              ...prev,\n              loading: false,\n              error: errorMessage\n            }));\n            reject(new Error(errorMessage));\n          },\n          options\n        );\n      });\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Location access failed';\n      setLocationState(prev => ({\n        ...prev,\n        loading: false,\n        error: errorMessage\n      }));\n    }\n  };\n\n  const loadCachedLocation = (): boolean => {\n    try {\n      const cached = localStorage.getItem('kisanmitra_location');\n      if (cached) {\n        const { timestamp, ...locationData } = JSON.parse(cached);\n        const now = Date.now();\n        const fiveMinutes = 5 * 60 * 1000;\n\n        if (now - timestamp < fiveMinutes) {\n          setLocationState(prev => ({\n            ...prev,\n            data: locationData,\n            permissionStatus: 'granted'\n          }));\n          return true;\n        }\n      }\n    } catch (error) {\n      console.error('Failed to load cached location:', error);\n    }\n    return false;\n  };\n\n  const clearLocation = () => {\n    setLocationState({\n      loading: false,\n      data: null,\n      error: null,\n      permissionStatus: 'prompt'\n    });\n    localStorage.removeItem('kisanmitra_location');\n  };\n\n  const retryLocation = () => {\n    getCurrentLocation();\n  };\n\n  const getAccuracyLevel = (accuracy: number): 'high' | 'medium' | 'low' => {\n    if (accuracy <= 100) return 'high';\n    if (accuracy <= 1000) return 'medium';\n    return 'low';\n  };\n\n  useEffect(() => {\n    // Try to load cached location on mount\n    loadCachedLocation();\n  }, []);\n\n  return {\n    ...locationState,\n    getCurrentLocation,\n    retryLocation,\n    clearLocation,\n    getAccuracyLevel: locationState.data ? getAccuracyLevel(locationState.data.accuracy) : null,\n    hasValidLocation: !!locationState.data && !locationState.error,\n    stateDistrictMapping\n  };\n};\n\nexport default useLocation;","size_bytes":8110},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/lib/cart.ts":{"content":"// Cart state management using localStorage\nexport interface CartItem {\n  id: string;\n  name: string;\n  brand: string;\n  price: number;\n  originalPrice: number;\n  quantity: number;\n  size: string;\n  category: string;\n  features: string[];\n  inStock: boolean;\n}\n\nexport interface Order {\n  id: string;\n  status: 'processing' | 'shipped' | 'delivered' | 'cancelled';\n  items: CartItem[];\n  subtotal: number;\n  discount: number;\n  deliveryFee: number;\n  total: number;\n  orderDate: string;\n  estimatedDelivery?: string;\n  deliveryDate?: string;\n  address: string;\n  paymentMethod: string;\n}\n\nclass CartManager {\n  private static instance: CartManager;\n  private cartKey = 'hariyali_mitra_cart';\n  private ordersKey = 'hariyali_mitra_orders';\n\n  static getInstance(): CartManager {\n    if (!CartManager.instance) {\n      CartManager.instance = new CartManager();\n    }\n    return CartManager.instance;\n  }\n\n  // Cart operations\n  getCart(): CartItem[] {\n    try {\n      const cart = localStorage.getItem(this.cartKey);\n      return cart ? JSON.parse(cart) : [];\n    } catch {\n      return [];\n    }\n  }\n\n  addToCart(product: any): void {\n    const cart = this.getCart();\n    const existingItem = cart.find(item => item.id === product.id);\n\n    if (existingItem) {\n      existingItem.quantity += 1;\n    } else {\n      const cartItem: CartItem = {\n        id: product.id,\n        name: product.name,\n        brand: product.brand,\n        price: product.price,\n        originalPrice: product.originalPrice,\n        quantity: 1,\n        size: product.size,\n        category: product.category,\n        features: product.features,\n        inStock: product.inStock\n      };\n      cart.push(cartItem);\n    }\n\n    localStorage.setItem(this.cartKey, JSON.stringify(cart));\n    this.notifyCartChange();\n  }\n\n  removeFromCart(productId: string): void {\n    const cart = this.getCart();\n    const existingItem = cart.find(item => item.id === productId);\n\n    if (existingItem && existingItem.quantity > 1) {\n      existingItem.quantity -= 1;\n    } else {\n      const index = cart.findIndex(item => item.id === productId);\n      if (index > -1) {\n        cart.splice(index, 1);\n      }\n    }\n\n    localStorage.setItem(this.cartKey, JSON.stringify(cart));\n    this.notifyCartChange();\n  }\n\n  updateQuantity(productId: string, quantity: number): void {\n    if (quantity <= 0) {\n      this.deleteItem(productId);\n      return;\n    }\n\n    const cart = this.getCart();\n    const existingItem = cart.find(item => item.id === productId);\n\n    if (existingItem) {\n      existingItem.quantity = quantity;\n      localStorage.setItem(this.cartKey, JSON.stringify(cart));\n      this.notifyCartChange();\n    }\n  }\n\n  deleteItem(productId: string): void {\n    const cart = this.getCart();\n    const filteredCart = cart.filter(item => item.id !== productId);\n    localStorage.setItem(this.cartKey, JSON.stringify(filteredCart));\n    this.notifyCartChange();\n  }\n\n  clearCart(): void {\n    localStorage.removeItem(this.cartKey);\n    this.notifyCartChange();\n  }\n\n  getCartCount(): number {\n    return this.getCart().reduce((total, item) => total + item.quantity, 0);\n  }\n\n  getCartTotal(): number {\n    return this.getCart().reduce((total, item) => total + (item.price * item.quantity), 0);\n  }\n\n  getCartSubtotal(): number {\n    return this.getCart().reduce((total, item) => total + (item.price * item.quantity), 0);\n  }\n\n  getCartSavings(): number {\n    return this.getCart().reduce((total, item) => total + ((item.originalPrice - item.price) * item.quantity), 0);\n  }\n\n  // Order operations\n  getOrders(): Order[] {\n    try {\n      const orders = localStorage.getItem(this.ordersKey);\n      return orders ? JSON.parse(orders) : [];\n    } catch {\n      return [];\n    }\n  }\n\n  createOrder(orderData: {\n    address: string;\n    paymentMethod: string;\n    discount?: number;\n  }): Order {\n    const cart = this.getCart();\n    if (cart.length === 0) {\n      throw new Error('Cart is empty');\n    }\n\n    const subtotal = this.getCartSubtotal();\n    const discount = orderData.discount || 0;\n    const deliveryFee = subtotal >= 500 ? 0 : 40;\n    const total = subtotal - discount + deliveryFee;\n\n    const orderId = 'ORD' + Date.now();\n    const orderDate = new Date().toISOString();\n    const estimatedDelivery = new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(); // Tomorrow\n\n    const order: Order = {\n      id: orderId,\n      status: 'processing',\n      items: [...cart],\n      subtotal,\n      discount,\n      deliveryFee,\n      total,\n      orderDate,\n      estimatedDelivery,\n      address: orderData.address,\n      paymentMethod: orderData.paymentMethod\n    };\n\n    const orders = this.getOrders();\n    orders.unshift(order); // Add to beginning\n    localStorage.setItem(this.ordersKey, JSON.stringify(orders));\n\n    // Clear cart after successful order\n    this.clearCart();\n\n    return order;\n  }\n\n  updateOrderStatus(orderId: string, status: Order['status']): void {\n    const orders = this.getOrders();\n    const order = orders.find(o => o.id === orderId);\n    \n    if (order) {\n      order.status = status;\n      if (status === 'delivered') {\n        order.deliveryDate = new Date().toISOString();\n      }\n      localStorage.setItem(this.ordersKey, JSON.stringify(orders));\n    }\n  }\n\n  // Event system for cart changes\n  private notifyCartChange(): void {\n    window.dispatchEvent(new CustomEvent('cartChanged'));\n  }\n\n  // Subscribe to cart changes\n  onCartChange(callback: () => void): () => void {\n    const handler = () => callback();\n    window.addEventListener('cartChanged', handler);\n    \n    // Return unsubscribe function\n    return () => window.removeEventListener('cartChanged', handler);\n  }\n}\n\nexport const cartManager = CartManager.getInstance();","size_bytes":5744},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/lib/dataService.ts":{"content":"// Real Database Service for KisanMitra App\n// This provides real data persistence and user-specific statistics\n\nexport interface User {\n  id: string;\n  name: string;\n  phone: string;\n  location: string;\n  state: string;\n  avatar?: string;\n  joinedDate: string;\n  createdAt: string;\n}\n\nexport interface Listing {\n  id: string;\n  userId: string;\n  crop: string;\n  quantity: string;\n  pricePerKg: number;\n  market: string;\n  transport: string;\n  views: number;\n  inquiries: number;\n  totalPrice: number;\n  status: 'active' | 'sold' | 'expired';\n  postedDate: string;\n  createdAt: string;\n  soldDate?: string;\n  soldPrice?: number;\n  buyer?: string;\n}\n\nexport interface DiagnosisRecord {\n  id: string;\n  userId: string;\n  cropName: string;\n  diagnosis: string;\n  confidence: number;\n  treatment: string;\n  date: string;\n  createdAt: string;\n}\n\nexport interface AdvisoryRecord {\n  id: string;\n  userId: string;\n  title: string;\n  content: string;\n  category: string;\n  savedDate: string;\n  createdAt: string;\n}\n\nexport interface UserActivity {\n  id: string;\n  userId: string;\n  action: string;\n  data: any;\n  timestamp: string;\n}\n\nexport interface UserStats {\n  totalEarnings: number;\n  activeListings: number;\n  successfulSales: number;\n  totalViews: number;\n  avgRating: number;\n  diagnosisCount: number;\n  advisorySaved: number;\n  level: string;\n  joinedDate: string;\n}\n\nclass DataService {\n  private storagePrefix = 'kisanmitra_';\n\n  // User Management\n  getCurrentUser(): User | null {\n    try {\n      const userData = localStorage.getItem(`${this.storagePrefix}user`);\n      return userData ? JSON.parse(userData) : null;\n    } catch (error) {\n      console.error('Error loading user data:', error);\n      return null;\n    }\n  }\n\n  saveUser(user: User): void {\n    try {\n      localStorage.setItem(`${this.storagePrefix}user`, JSON.stringify(user));\n    } catch (error) {\n      console.error('Error saving user data:', error);\n    }\n  }\n\n  // Listings Management\n  getUserListings(userId: string): Listing[] {\n    try {\n      const listingsKey = `${this.storagePrefix}listings_${userId}`;\n      const stored = localStorage.getItem(listingsKey);\n      return stored ? JSON.parse(stored) : [];\n    } catch (error) {\n      console.error('Error loading listings:', error);\n      return [];\n    }\n  }\n\n  saveUserListings(userId: string, listings: Listing[]): void {\n    try {\n      const listingsKey = `${this.storagePrefix}listings_${userId}`;\n      localStorage.setItem(listingsKey, JSON.stringify(listings));\n      \n      // Also save to global listings for search functionality\n      this.updateGlobalListings();\n    } catch (error) {\n      console.error('Error saving listings:', error);\n    }\n  }\n\n  addListing(listing: Listing): void {\n    try {\n      const currentListings = this.getUserListings(listing.userId);\n      currentListings.push(listing);\n      this.saveUserListings(listing.userId, currentListings);\n      \n      // Track activity\n      this.trackUserActivity(listing.userId, 'listing_created', listing);\n    } catch (error) {\n      console.error('Error adding listing:', error);\n    }\n  }\n\n  markListingAsSold(userId: string, listingId: string, soldPrice: number, buyer: string): void {\n    try {\n      const listings = this.getUserListings(userId);\n      const listing = listings.find(l => l.id === listingId);\n      \n      if (listing) {\n        listing.status = 'sold';\n        listing.soldDate = new Date().toISOString();\n        listing.soldPrice = soldPrice;\n        listing.buyer = buyer;\n        \n        this.saveUserListings(userId, listings);\n        this.trackUserActivity(userId, 'listing_sold', { listingId, soldPrice, buyer });\n      }\n    } catch (error) {\n      console.error('Error marking listing as sold:', error);\n    }\n  }\n\n  // Diagnosis Management\n  getUserDiagnoses(userId: string): DiagnosisRecord[] {\n    try {\n      const diagnosesKey = `${this.storagePrefix}diagnoses_${userId}`;\n      const stored = localStorage.getItem(diagnosesKey);\n      return stored ? JSON.parse(stored) : [];\n    } catch (error) {\n      console.error('Error loading diagnoses:', error);\n      return [];\n    }\n  }\n\n  addDiagnosis(diagnosis: DiagnosisRecord): void {\n    try {\n      const currentDiagnoses = this.getUserDiagnoses(diagnosis.userId);\n      currentDiagnoses.push(diagnosis);\n      \n      const diagnosesKey = `${this.storagePrefix}diagnoses_${diagnosis.userId}`;\n      localStorage.setItem(diagnosesKey, JSON.stringify(currentDiagnoses));\n      \n      this.trackUserActivity(diagnosis.userId, 'diagnosis_created', diagnosis);\n    } catch (error) {\n      console.error('Error adding diagnosis:', error);\n    }\n  }\n\n  // Advisory Management\n  getUserAdvisories(userId: string): AdvisoryRecord[] {\n    try {\n      const advisoriesKey = `${this.storagePrefix}advisories_${userId}`;\n      const stored = localStorage.getItem(advisoriesKey);\n      return stored ? JSON.parse(stored) : [];\n    } catch (error) {\n      console.error('Error loading advisories:', error);\n      return [];\n    }\n  }\n\n  saveAdvisory(advisory: AdvisoryRecord): void {\n    try {\n      const currentAdvisories = this.getUserAdvisories(advisory.userId);\n      currentAdvisories.push(advisory);\n      \n      const advisoriesKey = `${this.storagePrefix}advisories_${advisory.userId}`;\n      localStorage.setItem(advisoriesKey, JSON.stringify(currentAdvisories));\n      \n      this.trackUserActivity(advisory.userId, 'advisory_saved', advisory);\n    } catch (error) {\n      console.error('Error saving advisory:', error);\n    }\n  }\n\n  // Activity Tracking\n  trackUserActivity(userId: string, action: string, data: any): void {\n    try {\n      const activity: UserActivity = {\n        id: `activity_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        userId,\n        action,\n        data,\n        timestamp: new Date().toISOString()\n      };\n\n      const activitiesKey = `${this.storagePrefix}activities_${userId}`;\n      const currentActivities = JSON.parse(localStorage.getItem(activitiesKey) || '[]');\n      currentActivities.push(activity);\n      \n      // Keep only last 100 activities to prevent storage bloat\n      if (currentActivities.length > 100) {\n        currentActivities.splice(0, currentActivities.length - 100);\n      }\n      \n      localStorage.setItem(activitiesKey, JSON.stringify(currentActivities));\n    } catch (error) {\n      console.error('Error tracking activity:', error);\n    }\n  }\n\n  // Real Statistics Calculation\n  calculateUserStats(userId: string): UserStats {\n    try {\n      const listings = this.getUserListings(userId);\n      const diagnoses = this.getUserDiagnoses(userId);\n      const advisories = this.getUserAdvisories(userId);\n      const user = this.getCurrentUser();\n\n      const activeListings = listings.filter(l => l.status === 'active');\n      const soldListings = listings.filter(l => l.status === 'sold');\n      \n      const totalEarnings = soldListings.reduce((sum, listing) => sum + (listing.soldPrice || 0), 0);\n      const totalViews = listings.reduce((sum, listing) => sum + listing.views, 0);\n      const successfulSales = soldListings.length;\n\n      // Calculate level based on activity\n      let level = 'New Farmer';\n      if (successfulSales >= 50 && totalEarnings >= 100000) {\n        level = 'Expert Farmer';\n      } else if (successfulSales >= 20 && totalEarnings >= 50000) {\n        level = 'Advanced Farmer';\n      } else if (successfulSales >= 5 && totalEarnings >= 10000) {\n        level = 'Experienced Farmer';\n      } else if (successfulSales >= 1) {\n        level = 'Active Farmer';\n      }\n\n      // Calculate average rating (simulate based on successful sales)\n      let avgRating = 4.0;\n      if (successfulSales > 10) avgRating = 4.8;\n      else if (successfulSales > 5) avgRating = 4.5;\n      else if (successfulSales > 0) avgRating = 4.2;\n\n      return {\n        totalEarnings,\n        activeListings: activeListings.length,\n        successfulSales,\n        totalViews,\n        avgRating,\n        diagnosisCount: diagnoses.length,\n        advisorySaved: advisories.length,\n        level,\n        joinedDate: user?.joinedDate || new Date().toISOString()\n      };\n    } catch (error) {\n      console.error('Error calculating user stats:', error);\n      return {\n        totalEarnings: 0,\n        activeListings: 0,\n        successfulSales: 0,\n        totalViews: 0,\n        avgRating: 4.0,\n        diagnosisCount: 0,\n        advisorySaved: 0,\n        level: 'New Farmer',\n        joinedDate: new Date().toISOString()\n      };\n    }\n  }\n\n  // Increment listing views\n  incrementListingViews(userId: string, listingId: string): void {\n    try {\n      const listings = this.getUserListings(userId);\n      const listing = listings.find(l => l.id === listingId);\n      \n      if (listing) {\n        listing.views += 1;\n        this.saveUserListings(userId, listings);\n      }\n    } catch (error) {\n      console.error('Error incrementing views:', error);\n    }\n  }\n\n  // Increment listing inquiries\n  incrementListingInquiries(userId: string, listingId: string): void {\n    try {\n      const listings = this.getUserListings(userId);\n      const listing = listings.find(l => l.id === listingId);\n      \n      if (listing) {\n        listing.inquiries += 1;\n        this.saveUserListings(userId, listings);\n      }\n    } catch (error) {\n      console.error('Error incrementing inquiries:', error);\n    }\n  }\n\n  // Global listings for search (combine all users)\n  private updateGlobalListings(): void {\n    try {\n      // This would typically be handled by a backend\n      // For now, we'll keep user-specific storage\n    } catch (error) {\n      console.error('Error updating global listings:', error);\n    }\n  }\n\n  // Clear all user data (for testing)\n  clearUserData(userId: string): void {\n    try {\n      localStorage.removeItem(`${this.storagePrefix}listings_${userId}`);\n      localStorage.removeItem(`${this.storagePrefix}diagnoses_${userId}`);\n      localStorage.removeItem(`${this.storagePrefix}advisories_${userId}`);\n      localStorage.removeItem(`${this.storagePrefix}activities_${userId}`);\n    } catch (error) {\n      console.error('Error clearing user data:', error);\n    }\n  }\n\n  // Get user activity log\n  getUserActivities(userId: string): UserActivity[] {\n    try {\n      const activitiesKey = `${this.storagePrefix}activities_${userId}`;\n      const stored = localStorage.getItem(activitiesKey);\n      return stored ? JSON.parse(stored) : [];\n    } catch (error) {\n      console.error('Error loading activities:', error);\n      return [];\n    }\n  }\n}\n\n// Export singleton instance\nexport const dataService = new DataService();\nexport default dataService;","size_bytes":10653},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/lib/places.ts":{"content":"// Places service for finding nearby fertilizer shops using real location data\n\nexport interface FertilizerShop {\n  id: string;\n  name: string;\n  address: string;\n  latitude: number;\n  longitude: number;\n  distance: number;\n  rating?: number;\n  reviews?: number;\n  phone?: string;\n  isOpen?: boolean;\n  openingHours?: string[];\n  website?: string;\n  placeId?: string;\n}\n\nclass PlacesService {\n  private apiKey: string;\n  private phoneNumbers = [\n    '+919876543210', '+918765432109', '+917654321098', \n    '+916543210987', '+915432109876', '+919123456789',\n    '+918234567890', '+917345678901', '+916456789012'\n  ];\n\n  constructor() {\n    // Get API key from environment variables (browser only)\n    this.apiKey = import.meta.env.VITE_GOOGLE_PLACES_API_KEY || '';\n    \n    if (!this.apiKey) {\n      console.log('Using fertilizer shop data with real data priority.');\n    }\n  }\n  \n  // Get phone number from the array\n  private getPhoneNumber(index: number): string {\n    return this.phoneNumbers[index % this.phoneNumbers.length];\n  }\n\n  // Calculate distance between two coordinates using Haversine formula\n  private calculateDistance(lat1: number, lon1: number, lat2: number, lon2: number): number {\n    const R = 6371; // Earth's radius in kilometers\n    const dLat = (lat2 - lat1) * Math.PI / 180;\n    const dLon = (lon2 - lon1) * Math.PI / 180;\n    const a = \n      Math.sin(dLat/2) * Math.sin(dLat/2) +\n      Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * \n      Math.sin(dLon/2) * Math.sin(dLon/2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n    return R * c;\n  }\n\n  // Find nearby fertilizer shops - try real data first, then dummy data\n  async findNearbyFertilizerShops(lat: number, lon: number, radius: number = 15000): Promise<FertilizerShop[]> {\n    try {\n      console.log('Searching for real fertilizer shops near:', lat, lon);\n      \n      // First try to get real shops from OpenStreetMap\n      const realShops = await this.searchRealFertilizerShops(lat, lon, radius);\n      \n      // If we found real shops, return them\n      if (realShops.length > 0) {\n        console.log(`Found ${realShops.length} real fertilizer shops`);\n        return realShops.slice(0, 5); // Return exactly 5 shops as requested\n      }\n      \n      // No real shops found - show exactly 5 dummy shops instead of empty list\n      console.log('No real shops found, showing exactly 5 dummy fertilizer shops');\n      return this.generateLocationBasedShops(lat, lon);\n      \n    } catch (error) {\n      console.error('Error finding nearby fertilizer shops:', error);\n      // On error, also show exactly 5 dummy shops instead of empty list\n      return this.generateLocationBasedShops(lat, lon);\n    }\n  }\n\n  // Search for real fertilizer shops using OpenStreetMap Overpass API\n  private async searchRealFertilizerShops(lat: number, lon: number, radius: number): Promise<FertilizerShop[]> {\n    try {\n      // Search for various types of agricultural and fertilizer shops\n      const overpassQuery = `\n        [out:json][timeout:25];\n        (\n          node[\"shop\"=\"agrarian\"](around:${radius},${lat},${lon});\n          node[\"shop\"=\"farm\"](around:${radius},${lat},${lon});\n          node[\"shop\"=\"garden_centre\"](around:${radius},${lat},${lon});\n          node[\"name\"~\"fertilizer\",i](around:${radius},${lat},${lon});\n          node[\"name\"~\"agro\",i](around:${radius},${lat},${lon});\n          node[\"name\"~\"krishi\",i](around:${radius},${lat},${lon});\n          way[\"shop\"=\"agrarian\"](around:${radius},${lat},${lon});\n          way[\"shop\"=\"farm\"](around:${radius},${lat},${lon});\n          way[\"shop\"=\"garden_centre\"](around:${radius},${lat},${lon});\n          way[\"name\"~\"fertilizer\",i](around:${radius},${lat},${lon});\n          way[\"name\"~\"agro\",i](around:${radius},${lat},${lon});\n          way[\"name\"~\"krishi\",i](around:${radius},${lat},${lon});\n        );\n        out center meta;\n      `;\n      \n      const response = await fetch('https://overpass-api.de/api/interpreter', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: `data=${encodeURIComponent(overpassQuery)}`\n      });\n      \n      if (!response.ok) {\n        console.warn('Overpass API request failed:', response.status);\n        return [];\n      }\n      \n      const data = await response.json();\n      \n      if (!data.elements || data.elements.length === 0) {\n        console.log('No real fertilizer shops found in OpenStreetMap data');\n        return [];\n      }\n      \n      // Process the results\n      const shops: FertilizerShop[] = data.elements.map((element: any, index: number) => {\n        const shopLat = element.lat || element.center?.lat || lat;\n        const shopLon = element.lon || element.center?.lon || lon;\n        const distance = this.calculateDistance(lat, lon, shopLat, shopLon);\n        \n        // Get real opening hours from OpenStreetMap data\n        const realOpeningHours = this.parseRealOpeningHours(element.tags?.opening_hours);\n        const openStatus = this.calculateRealOpenStatus(element.tags?.opening_hours);\n        \n        return {\n          id: `real_shop_${element.id || index}`,\n          name: element.tags?.name || `Fertilizer Shop ${index + 1}`,\n          address: this.formatAddress(element.tags, shopLat, shopLon),\n          latitude: shopLat,\n          longitude: shopLon,\n          distance: distance,\n          rating: 3.8 + Math.random() * 1.4, // 3.8-5.2 rating\n          reviews: Math.floor(Math.random() * 200) + 50,\n          phone: this.getPhoneNumber(index),\n          isOpen: openStatus.hasRealHours ? openStatus.isOpen : this.calculateOpenStatus(),\n          openingHours: realOpeningHours.length > 0 ? realOpeningHours : this.generateBusinessHours()\n        };\n      });\n      \n      // Sort by distance and return up to 100 shops\n      return shops\n        .sort((a, b) => a.distance - b.distance)\n        .slice(0, 100);\n        \n    } catch (error) {\n      console.error('Error searching real fertilizer shops:', error);\n      return [];\n    }\n  }\n\n  // Generate location-based dummy shops when real data isn't available\n  private generateLocationBasedShops(lat: number, lon: number): FertilizerShop[] {\n    const baseShops = [\n      {\n        name: 'Kisan Agro Center',\n        address: 'Main Market Road, Agricultural Supply Store',\n        phone: '+919876543210',\n        distance: 1.2,\n        rating: 4.5,\n        reviews: 156\n      },\n      {\n        name: 'Green Valley Fertilizers', \n        address: 'Agricultural Market, Fertilizer Supplier',\n        phone: '+918765432109',\n        distance: 2.3,\n        rating: 4.3,\n        reviews: 203\n      },\n      {\n        name: 'FarmGrow Supplies',\n        address: 'Near Bus Stand, Agricultural Inputs',\n        phone: '+917654321098',\n        distance: 3.1,\n        rating: 4.1,\n        reviews: 89\n      },\n      {\n        name: 'Krishi Upkaran Bhandar',\n        address: 'Civil Lines, Farm Equipment & Fertilizers',\n        phone: '+916543210987',\n        distance: 4.2,\n        rating: 4.4,\n        reviews: 124\n      },\n      {\n        name: 'Modern Agro Store',\n        address: 'Railway Road, Fertilizer & Seed Store',\n        phone: '+915432109876',\n        distance: 4.8,\n        rating: 4.2,\n        reviews: 167\n      }\n    ];\n\n    return baseShops.map((shop, index) => {\n      // Create realistic coordinates near user location\n      const offsetLat = (Math.random() - 0.5) * 0.02; // ~1km radius\n      const offsetLon = (Math.random() - 0.5) * 0.02;\n      \n      return {\n        id: `shop_${index + 1}`,\n        name: shop.name,\n        address: shop.address,\n        latitude: lat + offsetLat,\n        longitude: lon + offsetLon,\n        distance: shop.distance,\n        rating: shop.rating,\n        reviews: shop.reviews,\n        phone: shop.phone,\n        isOpen: this.calculateOpenStatus(),\n        openingHours: this.generateBusinessHours()\n      };\n    });\n  }\n\n  // Format address from OpenStreetMap tags\n  private formatAddress(tags: any, lat: number, lon: number): string {\n    if (tags?.['addr:full']) return tags['addr:full'];\n    \n    const parts = [];\n    if (tags?.['addr:house_number']) parts.push(tags['addr:house_number']);\n    if (tags?.['addr:street']) parts.push(tags['addr:street']);\n    if (tags?.['addr:suburb']) parts.push(tags['addr:suburb']);\n    if (tags?.['addr:city']) parts.push(tags['addr:city']);\n    if (tags?.['addr:state']) parts.push(tags['addr:state']);\n    \n    if (parts.length > 0) {\n      return parts.join(', ');\n    }\n    \n    // Fallback to coordinates-based address\n    return `Agricultural Store, ${lat.toFixed(4)}°N ${lon.toFixed(4)}°E`;\n  }\n\n  // Calculate if shop is currently open\n  private calculateOpenStatus(): boolean {\n    const now = new Date();\n    const hour = now.getHours();\n    const day = now.getDay(); // 0 = Sunday, 6 = Saturday\n    \n    // Most agricultural shops are closed on Sundays\n    if (day === 0) return Math.random() > 0.8;\n    \n    // During business hours (7 AM - 8 PM), most shops are open\n    if (hour >= 7 && hour <= 20) {\n      return Math.random() > 0.2; // 80% chance of being open\n    }\n    \n    // Outside business hours, most shops are closed\n    return Math.random() > 0.9; // 10% chance of being open\n  }\n\n  // Parse real opening hours from OpenStreetMap data\n  private parseRealOpeningHours(openingHours?: string): string[] {\n    if (!openingHours) {\n      return [];\n    }\n    \n    try {\n      // Handle common OpenStreetMap opening_hours formats\n      if (openingHours.includes(';')) {\n        return openingHours.split(';').map(h => h.trim()).filter(h => h.length > 0);\n      }\n      \n      if (openingHours.includes(',')) {\n        return openingHours.split(',').map(h => h.trim()).filter(h => h.length > 0);\n      }\n      \n      // Single line format like \"Mo-Sa 07:00-20:00; Su 09:00-18:00\"\n      const formatted = this.formatOSMOpeningHours(openingHours);\n      return formatted.length > 0 ? formatted : [openingHours];\n      \n    } catch (error) {\n      console.warn('Error parsing opening hours:', openingHours, error);\n      return [openingHours]; // Return as-is if parsing fails\n    }\n  }\n  \n  // Format OSM opening hours to readable format\n  private formatOSMOpeningHours(hours: string): string[] {\n    if (!hours) return [];\n    \n    try {\n      // Convert common OSM formats to readable format\n      let formatted = hours\n        .replace(/Mo-Su/g, 'Daily')\n        .replace(/Mo-Sa/g, 'Mon-Sat')\n        .replace(/Mo-Fr/g, 'Mon-Fri')\n        .replace(/Sa-Su/g, 'Sat-Sun')\n        .replace(/Mo/g, 'Mon')\n        .replace(/Tu/g, 'Tue')\n        .replace(/We/g, 'Wed')\n        .replace(/Th/g, 'Thu')\n        .replace(/Fr/g, 'Fri')\n        .replace(/Sa/g, 'Sat')\n        .replace(/Su/g, 'Sun');\n      \n      // Convert 24-hour format to 12-hour format\n      formatted = formatted.replace(/(\\d{2}):(\\d{2})/g, (match, hour, minute) => {\n        const h = parseInt(hour);\n        const ampm = h >= 12 ? 'PM' : 'AM';\n        const displayHour = h === 0 ? 12 : h > 12 ? h - 12 : h;\n        return `${displayHour}:${minute} ${ampm}`;\n      });\n      \n      // Split by semicolon and clean up\n      const parts = formatted.split(';').map(part => part.trim()).filter(part => part.length > 0);\n      \n      return parts.length > 0 ? parts : [formatted];\n      \n    } catch (error) {\n      return [hours];\n    }\n  }\n  \n  // Calculate real open/close status from OSM opening hours\n  private calculateRealOpenStatus(openingHours?: string): { isOpen: boolean; hasRealHours: boolean } {\n    if (!openingHours) {\n      // Fallback to time-based estimation when no real hours available\n      return {\n        isOpen: this.calculateOpenStatus(),\n        hasRealHours: false\n      };\n    }\n    \n    try {\n      const now = new Date();\n      const currentDay = now.getDay(); // 0 = Sunday, 1 = Monday, etc.\n      const currentHour = now.getHours();\n      const currentMinute = now.getMinutes();\n      const currentTimeMinutes = currentHour * 60 + currentMinute;\n      \n      // Parse basic OSM opening hours patterns\n      const dayNames = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'];\n      const currentDayName = dayNames[currentDay];\n      \n      // Check if shop is generally open today\n      const todayPattern = new RegExp(`${currentDayName}[^;]*?([0-9]{2}:[0-9]{2})-([0-9]{2}:[0-9]{2})`);\n      const allDaysPattern = /(Mo-Su|Mo-Sa|daily)[^;]*?([0-9]{2}:[0-9]{2})-([0-9]{2}:[0-9]{2})/i;\n      \n      let match = openingHours.match(todayPattern);\n      if (!match && (currentDay >= 1 && currentDay <= 6)) { // Mon-Sat\n        match = openingHours.match(allDaysPattern);\n      }\n      \n      if (match) {\n        const openTime = match[match.length - 2]; // Second to last group\n        const closeTime = match[match.length - 1]; // Last group\n        \n        const [openHour, openMin] = openTime.split(':').map(Number);\n        const [closeHour, closeMin] = closeTime.split(':').map(Number);\n        \n        const openTimeMinutes = openHour * 60 + openMin;\n        const closeTimeMinutes = closeHour * 60 + closeMin;\n        \n        const isOpen = currentTimeMinutes >= openTimeMinutes && currentTimeMinutes <= closeTimeMinutes;\n        \n        return {\n          isOpen,\n          hasRealHours: true\n        };\n      }\n      \n      // If can't parse, use fallback but mark as no real hours\n      return {\n        isOpen: this.calculateOpenStatus(),\n        hasRealHours: false\n      };\n      \n    } catch (error) {\n      console.warn('Error calculating open status from:', openingHours, error);\n      return {\n        isOpen: this.calculateOpenStatus(),\n        hasRealHours: false\n      };\n    }\n  }\n  \n  // Generate realistic business hours for fallback only\n  private generateBusinessHours(): string[] {\n    const schedules = [\n      ['Mon-Sat: 7:00 AM - 8:00 PM', 'Sun: 9:00 AM - 6:00 PM'],\n      ['Mon-Sat: 6:30 AM - 7:30 PM', 'Sun: Closed'],\n      ['Mon-Fri: 8:00 AM - 7:00 PM', 'Sat: 8:00 AM - 8:00 PM', 'Sun: 10:00 AM - 5:00 PM'],\n      ['Daily: 7:00 AM - 8:30 PM'],\n      ['Mon-Sat: 7:30 AM - 8:00 PM', 'Sun: 9:00 AM - 7:00 PM']\n    ];\n    \n    return schedules[Math.floor(Math.random() * schedules.length)];\n  }\n\n  // Get shop details including phone number and hours\n  async getShopDetails(placeId: string): Promise<Partial<FertilizerShop>> {\n    try {\n      // Return empty object for consistent interface\n      return {};\n    } catch (error) {\n      console.error('Error fetching shop details:', error);\n      return {};\n    }\n  }\n\n  // Search for specific fertilizer types or agricultural products\n  async searchFertilizerProducts(lat: number, lon: number, productQuery: string): Promise<FertilizerShop[]> {\n    try {\n      // Use real data first, then fallback to dummy\n      const realShops = await this.searchRealFertilizerShops(lat, lon, 15000);\n      if (realShops.length > 0) {\n        return realShops.slice(0, 5);\n      }\n      return this.generateLocationBasedShops(lat, lon);\n    } catch (error) {\n      console.error('Error searching for fertilizer products:', error);\n      return this.generateLocationBasedShops(lat, lon);\n    }\n  }\n}\n\n// Export singleton instance\nexport const placesService = new PlacesService();\nexport default placesService;","size_bytes":15265},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/lib/realDataService.ts":{"content":"// Real Database Service for KisanMitra App - Client-side wrapper\n// Note: This would typically communicate with a backend API\n// For now, we'll enhance the localStorage approach to simulate real database behavior\n\nexport interface User {\n  id: number;\n  name: string;\n  phone: string;\n  location: string;\n  state: string;\n  avatar?: string;\n  joinedDate: string;\n  createdAt: string;\n}\n\nexport interface Listing {\n  id: number;\n  userId: number;\n  crop: string;\n  quantity: string;\n  pricePerKg: number;\n  market: string;\n  transport: string;\n  views: number;\n  inquiries: number;\n  totalPrice: number;\n  status: 'active' | 'sold' | 'expired';\n  postedDate: string;\n  soldDate?: string;\n  soldPrice?: number;\n  buyer?: string;\n  createdAt: string;\n}\n\nexport interface Diagnosis {\n  id: number;\n  userId: number;\n  cropName: string;\n  diagnosis: string;\n  confidence: number;\n  treatment: string;\n  date: string;\n  createdAt: string;\n}\n\nexport interface AdvisoryRecord {\n  id: number;\n  userId: number;\n  title: string;\n  content: string;\n  category: string;\n  savedDate: string;\n  createdAt: string;\n}\n\nexport interface UserStats {\n  totalEarnings: number;\n  activeListings: number;\n  successfulSales: number;\n  totalViews: number;\n  avgRating: number;\n  diagnosisCount: number;\n  advisorySaved: number;\n  level: string;\n  joinedDate: string;\n}\n\nclass RealDataService {\n  private currentUserId: number | null = null;\n  private storagePrefix = 'kisanmitra_v2_';\n  \n  constructor() {\n    this.initializeUser();\n  }\n\n  private initializeUser() {\n    const savedUserId = localStorage.getItem('kisanmitra_user_id');\n    if (savedUserId) {\n      this.currentUserId = parseInt(savedUserId, 10);\n    }\n  }\n\n  private generateId(): number {\n    return Date.now() + Math.floor(Math.random() * 1000);\n  }\n\n  async getCurrentUser(): Promise<User | null> {\n    if (!this.currentUserId) return null;\n    \n    const users = JSON.parse(localStorage.getItem(`${this.storagePrefix}users`) || '[]');\n    return users.find((u: User) => u.id === this.currentUserId) || null;\n  }\n\n  async loginOrCreateUser(phone: string, name: string, location: string, state: string): Promise<User> {\n    const users = JSON.parse(localStorage.getItem(`${this.storagePrefix}users`) || '[]');\n    \n    // Try to find existing user\n    let user = users.find((u: User) => u.phone === phone);\n    \n    if (!user) {\n      // Create new user\n      user = {\n        id: this.generateId(),\n        name,\n        phone,\n        location,\n        state,\n        joinedDate: new Date().toISOString(),\n        createdAt: new Date().toISOString()\n      };\n      users.push(user);\n      localStorage.setItem(`${this.storagePrefix}users`, JSON.stringify(users));\n    }\n\n    this.currentUserId = user.id;\n    localStorage.setItem('kisanmitra_user_id', user.id.toString());\n    localStorage.setItem('kisanmitra_user', JSON.stringify(user));\n\n    return user;\n  }\n\n  async getUserListings(): Promise<Listing[]> {\n    if (!this.currentUserId) return [];\n    \n    const listings = JSON.parse(localStorage.getItem(`${this.storagePrefix}listings`) || '[]');\n    return listings.filter((l: Listing) => l.userId === this.currentUserId);\n  }\n\n  async createListing(listingData: any): Promise<Listing | null> {\n    if (!this.currentUserId) return null;\n\n    const listings = JSON.parse(localStorage.getItem(`${this.storagePrefix}listings`) || '[]');\n    \n    const listing: Listing = {\n      id: this.generateId(),\n      userId: this.currentUserId,\n      crop: listingData.crop,\n      quantity: listingData.quantity,\n      pricePerKg: listingData.pricePerKg,\n      market: listingData.market,\n      transport: listingData.transport,\n      totalPrice: listingData.totalPrice,\n      postedDate: listingData.postedDate,\n      status: 'active',\n      views: 0,\n      inquiries: 0,\n      createdAt: new Date().toISOString()\n    };\n\n    listings.push(listing);\n    localStorage.setItem(`${this.storagePrefix}listings`, JSON.stringify(listings));\n    \n    await this.trackUserActivity('listing_created', { listingId: listing.id, crop: listing.crop });\n    return listing;\n  }\n\n  async markListingAsSold(listingId: number, soldPrice: number, buyer: string): Promise<Listing | null> {\n    const listings = JSON.parse(localStorage.getItem(`${this.storagePrefix}listings`) || '[]');\n    const listing = listings.find((l: Listing) => l.id === listingId);\n    \n    if (listing) {\n      listing.status = 'sold';\n      listing.soldDate = new Date().toISOString();\n      listing.soldPrice = soldPrice;\n      listing.buyer = buyer;\n      \n      localStorage.setItem(`${this.storagePrefix}listings`, JSON.stringify(listings));\n      await this.trackUserActivity('listing_sold', { listingId, soldPrice, buyer });\n    }\n    \n    return listing;\n  }\n\n  async getUserDiagnoses(): Promise<Diagnosis[]> {\n    if (!this.currentUserId) return [];\n    \n    const diagnoses = JSON.parse(localStorage.getItem(`${this.storagePrefix}diagnoses`) || '[]');\n    return diagnoses.filter((d: Diagnosis) => d.userId === this.currentUserId);\n  }\n\n  async createDiagnosis(diagnosisData: any): Promise<Diagnosis | null> {\n    if (!this.currentUserId) return null;\n\n    const diagnoses = JSON.parse(localStorage.getItem(`${this.storagePrefix}diagnoses`) || '[]');\n    \n    const diagnosis: Diagnosis = {\n      id: this.generateId(),\n      userId: this.currentUserId,\n      cropName: diagnosisData.cropName,\n      diagnosis: diagnosisData.diagnosis,\n      confidence: diagnosisData.confidence,\n      treatment: diagnosisData.treatment,\n      date: new Date().toISOString(),\n      createdAt: new Date().toISOString()\n    };\n\n    diagnoses.push(diagnosis);\n    localStorage.setItem(`${this.storagePrefix}diagnoses`, JSON.stringify(diagnoses));\n    \n    await this.trackUserActivity('diagnosis_created', { diagnosisId: diagnosis.id, crop: diagnosis.cropName });\n    return diagnosis;\n  }\n\n  async getUserAdvisories(): Promise<AdvisoryRecord[]> {\n    if (!this.currentUserId) return [];\n    \n    const advisories = JSON.parse(localStorage.getItem(`${this.storagePrefix}advisories`) || '[]');\n    return advisories.filter((a: AdvisoryRecord) => a.userId === this.currentUserId);\n  }\n\n  async saveAdvisory(advisoryData: any): Promise<AdvisoryRecord | null> {\n    if (!this.currentUserId) return null;\n\n    const advisories = JSON.parse(localStorage.getItem(`${this.storagePrefix}advisories`) || '[]');\n    \n    const advisory: AdvisoryRecord = {\n      id: this.generateId(),\n      userId: this.currentUserId,\n      title: advisoryData.title,\n      content: advisoryData.content,\n      category: advisoryData.category,\n      savedDate: new Date().toISOString(),\n      createdAt: new Date().toISOString()\n    };\n\n    advisories.push(advisory);\n    localStorage.setItem(`${this.storagePrefix}advisories`, JSON.stringify(advisories));\n    \n    await this.trackUserActivity('advisory_saved', { advisoryId: advisory.id, title: advisory.title });\n    return advisory;\n  }\n\n  async trackUserActivity(action: string, data: any): Promise<void> {\n    if (!this.currentUserId) return;\n\n    const activities = JSON.parse(localStorage.getItem(`${this.storagePrefix}activities`) || '[]');\n    \n    const activity = {\n      id: this.generateId(),\n      userId: this.currentUserId,\n      action,\n      data,\n      timestamp: new Date().toISOString()\n    };\n\n    activities.push(activity);\n    \n    // Keep only last 100 activities\n    if (activities.length > 100) {\n      activities.splice(0, activities.length - 100);\n    }\n    \n    localStorage.setItem(`${this.storagePrefix}activities`, JSON.stringify(activities));\n  }\n\n  async calculateUserStats(): Promise<UserStats> {\n    if (!this.currentUserId) {\n      return {\n        totalEarnings: 0,\n        activeListings: 0,\n        successfulSales: 0,\n        totalViews: 0,\n        avgRating: 4.0,\n        diagnosisCount: 0,\n        advisorySaved: 0,\n        level: 'New Farmer',\n        joinedDate: new Date().toISOString()\n      };\n    }\n\n    const [listings, diagnoses, advisories, user] = await Promise.all([\n      this.getUserListings(),\n      this.getUserDiagnoses(),\n      this.getUserAdvisories(),\n      this.getCurrentUser()\n    ]);\n\n    const activeListings = listings.filter(l => l.status === 'active');\n    const soldListings = listings.filter(l => l.status === 'sold');\n    \n    const totalEarnings = soldListings.reduce((sum, listing) => sum + (listing.soldPrice || 0), 0);\n    const totalViews = listings.reduce((sum, listing) => sum + listing.views, 0);\n    const successfulSales = soldListings.length;\n\n    // Calculate level based on activity\n    let level = 'New Farmer';\n    if (successfulSales >= 50 && totalEarnings >= 100000) {\n      level = 'Expert Farmer';\n    } else if (successfulSales >= 20 && totalEarnings >= 50000) {\n      level = 'Advanced Farmer';\n    } else if (successfulSales >= 5 && totalEarnings >= 10000) {\n      level = 'Experienced Farmer';\n    } else if (successfulSales >= 1) {\n      level = 'Active Farmer';\n    }\n\n    // Calculate average rating\n    let avgRating = 4.0;\n    if (successfulSales > 10) avgRating = 4.8;\n    else if (successfulSales > 5) avgRating = 4.5;\n    else if (successfulSales > 0) avgRating = 4.2;\n\n    return {\n      totalEarnings,\n      activeListings: activeListings.length,\n      successfulSales,\n      totalViews,\n      avgRating,\n      diagnosisCount: diagnoses.length,\n      advisorySaved: advisories.length,\n      level,\n      joinedDate: user?.joinedDate || new Date().toISOString()\n    };\n  }\n\n  async addSampleData(): Promise<void> {\n    if (!this.currentUserId) throw new Error('User not logged in');\n\n    // Create sample listings\n    const sampleListings = [\n      {\n        crop: '🍅 Tomato',\n        quantity: '100 kg',\n        pricePerKg: 25,\n        market: 'Azadpur Mandi',\n        transport: 'Yes',\n        totalPrice: 2500,\n        postedDate: '2 days ago',\n      },\n      {\n        crop: '🌾 Wheat',\n        quantity: '50 kg',\n        pricePerKg: 22,\n        market: 'Ghazipur Mandi',\n        transport: 'No',\n        totalPrice: 1100,\n        postedDate: '1 day ago',\n      }\n    ];\n\n    for (const listingData of sampleListings) {\n      const listing = await this.createListing(listingData);\n      if (listing && listingData.crop.includes('Tomato')) {\n        // Mark tomato as sold for demo\n        await this.markListingAsSold(listing.id, 2500, 'Delhi Wholesaler');\n      }\n    }\n\n    // Create sample diagnosis\n    await this.createDiagnosis({\n      cropName: 'Tomato',\n      diagnosis: 'Early Blight',\n      confidence: 85,\n      treatment: 'Apply copper fungicide spray',\n    });\n\n    // Create sample advisory\n    await this.saveAdvisory({\n      title: 'Optimal Irrigation for Tomatoes',\n      content: 'Water tomatoes deeply but less frequently to encourage deep root growth.',\n      category: 'Irrigation',\n    });\n  }\n\n  logout(): void {\n    this.currentUserId = null;\n    localStorage.removeItem('kisanmitra_user_id');\n    localStorage.removeItem('kisanmitra_user');\n    localStorage.removeItem('kisanmitra_auth_token');\n    localStorage.removeItem('kisanmitra_notifications');\n  }\n}\n\nexport const realDataService = new RealDataService();\nexport default realDataService;","size_bytes":11198},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/lib/weather.ts":{"content":"// Weather service for fetching real weather data from OpenWeatherMap API\n\nexport interface WeatherData {\n  location: string;\n  temperature: number;\n  description: string;\n  humidity: number;\n  windSpeed: number;\n  icon: string;\n  feelsLike: number;\n  pressure: number;\n  visibility: number;\n  uvIndex: number;\n  sunrise: number;\n  sunset: number;\n}\n\nexport interface DailyForecast {\n  date: string;\n  dayName: string;\n  temperature: {\n    max: number;\n    min: number;\n  };\n  description: string;\n  icon: string;\n  humidity: number;\n  windSpeed: number;\n  precipitation: number;\n}\n\nexport interface WeatherAlert {\n  title: string;\n  description: string;\n  severity: 'minor' | 'moderate' | 'severe' | 'extreme';\n  type: string;\n}\n\nclass WeatherService {\n  private apiKey: string;\n  private baseUrl = 'https://api.openweathermap.org/data/2.5';\n\n  constructor() {\n    // Get API key from environment variables\n    this.apiKey = import.meta.env.VITE_OPENWEATHERMAP_API_KEY || process.env.OPENWEATHERMAP_API_KEY || '';\n    \n    if (!this.apiKey) {\n      console.warn('OpenWeatherMap API key not found. Weather functionality will not work properly.');\n    }\n  }\n\n  // Get API key - will be initialized in constructor\n  private getApiKey(): string {\n    if (!this.apiKey) {\n      throw new Error('OpenWeatherMap API key not configured');\n    }\n    return this.apiKey;\n  }\n\n  // Get current weather by coordinates\n  async getCurrentWeather(lat: number, lon: number): Promise<WeatherData> {\n    try {\n      const apiKey = this.getApiKey();\n      const response = await fetch(\n        `${this.baseUrl}/weather?lat=${lat}&lon=${lon}&appid=${apiKey}&units=metric`\n      );\n      \n      if (!response.ok) {\n        throw new Error(`Weather API error: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      \n      return {\n        location: `${data.name}, ${data.sys.country}`,\n        temperature: Math.round(data.main.temp),\n        description: data.weather[0].description,\n        humidity: data.main.humidity,\n        windSpeed: data.wind.speed,\n        icon: data.weather[0].icon,\n        feelsLike: Math.round(data.main.feels_like),\n        pressure: data.main.pressure,\n        visibility: data.visibility / 1000, // Convert to km\n        uvIndex: 0, // Will be fetched from UV API if needed\n        sunrise: data.sys.sunrise,\n        sunset: data.sys.sunset\n      };\n    } catch (error) {\n      console.error('Error fetching current weather:', error);\n      throw error;\n    }\n  }\n\n  // Get 7-day forecast\n  async getForecast(lat: number, lon: number): Promise<DailyForecast[]> {\n    try {\n      const apiKey = this.getApiKey();\n      const response = await fetch(\n        `${this.baseUrl}/forecast?lat=${lat}&lon=${lon}&appid=${apiKey}&units=metric`\n      );\n      \n      if (!response.ok) {\n        throw new Error(`Forecast API error: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      \n      // Group by day and take one forecast per day\n      const dailyForecasts: DailyForecast[] = [];\n      const processedDates = new Set();\n      \n      data.list.forEach((item: any) => {\n        const date = new Date(item.dt * 1000);\n        const dateString = date.toISOString().split('T')[0];\n        \n        if (!processedDates.has(dateString) && dailyForecasts.length < 7) {\n          const dayName = date.toLocaleDateString('en-US', { weekday: 'short' });\n          \n          dailyForecasts.push({\n            date: dateString,\n            dayName,\n            temperature: {\n              max: Math.round(item.main.temp_max),\n              min: Math.round(item.main.temp_min)\n            },\n            description: item.weather[0].description,\n            icon: item.weather[0].icon,\n            humidity: item.main.humidity,\n            windSpeed: item.wind.speed,\n            precipitation: item.rain ? item.rain['3h'] || 0 : 0\n          });\n          \n          processedDates.add(dateString);\n        }\n      });\n      \n      return dailyForecasts;\n    } catch (error) {\n      console.error('Error fetching forecast:', error);\n      throw error;\n    }\n  }\n\n  // Get weather by city name\n  async getWeatherByCity(city: string): Promise<WeatherData> {\n    try {\n      const apiKey = this.getApiKey();\n      const response = await fetch(\n        `${this.baseUrl}/weather?q=${encodeURIComponent(city)}&appid=${apiKey}&units=metric`\n      );\n      \n      if (!response.ok) {\n        throw new Error(`Weather API error: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      \n      return {\n        location: `${data.name}, ${data.sys.country}`,\n        temperature: Math.round(data.main.temp),\n        description: data.weather[0].description,\n        humidity: data.main.humidity,\n        windSpeed: data.wind.speed,\n        icon: data.weather[0].icon,\n        feelsLike: Math.round(data.main.feels_like),\n        pressure: data.main.pressure,\n        visibility: data.visibility / 1000,\n        uvIndex: 0,\n        sunrise: data.sys.sunrise,\n        sunset: data.sys.sunset\n      };\n    } catch (error) {\n      console.error('Error fetching weather by city:', error);\n      throw error;\n    }\n  }\n\n  // Get current location using browser's geolocation API\n  async getCurrentLocation(): Promise<{ lat: number; lon: number }> {\n    return new Promise((resolve, reject) => {\n      if (!navigator.geolocation) {\n        reject(new Error('Geolocation not supported'));\n        return;\n      }\n\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          resolve({\n            lat: position.coords.latitude,\n            lon: position.coords.longitude\n          });\n        },\n        (error) => {\n          reject(error);\n        },\n        {\n          enableHighAccuracy: true,\n          timeout: 10000,\n          maximumAge: 300000 // 5 minutes\n        }\n      );\n    });\n  }\n\n  // Get weather icon URL\n  getWeatherIconUrl(icon: string): string {\n    return `https://openweathermap.org/img/wn/${icon}@2x.png`;\n  }\n\n  // Get weather alerts (if available)\n  async getWeatherAlerts(lat: number, lon: number): Promise<WeatherAlert[]> {\n    try {\n      const apiKey = this.getApiKey();\n      // Using One Call API for alerts (requires different endpoint)\n      const response = await fetch(\n        `https://api.openweathermap.org/data/3.0/onecall?lat=${lat}&lon=${lon}&appid=${apiKey}&units=metric`\n      );\n      \n      if (!response.ok) {\n        return []; // No alerts or API issue\n      }\n      \n      const data = await response.json();\n      \n      if (!data.alerts) {\n        return [];\n      }\n      \n      return data.alerts.map((alert: any) => ({\n        title: alert.event,\n        description: alert.description,\n        severity: alert.severity || 'moderate',\n        type: alert.tags?.[0] || 'general'\n      }));\n    } catch (error) {\n      console.error('Error fetching weather alerts:', error);\n      return [];\n    }\n  }\n\n  // Generate farming advice based on weather\n  generateFarmingAdvice(weather: WeatherData): string {\n    const { temperature, humidity, description } = weather;\n    \n    if (description.includes('rain')) {\n      return 'Rain expected - avoid spraying chemicals and consider indoor farm work.';\n    }\n    \n    if (temperature > 35) {\n      return 'High temperature - increase irrigation and provide shade for crops.';\n    }\n    \n    if (temperature < 5) {\n      return 'Cold weather - protect sensitive crops and check livestock shelter.';\n    }\n    \n    if (humidity > 80) {\n      return 'High humidity - monitor crops for fungal diseases and improve ventilation.';\n    }\n    \n    if (humidity < 30) {\n      return 'Low humidity - increase watering frequency and consider mulching.';\n    }\n    \n    return 'Good weather conditions for farming activities. Plan your field work accordingly.';\n  }\n}\n\nexport const weatherService = new WeatherService();","size_bytes":7897},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/pages/Advisory.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { \n  BookOpen,\n  Bookmark,\n  ChevronRight,\n  Calendar,\n  CheckCircle,\n  Clock,\n  Droplets,\n  Beaker,\n  Leaf,\n  Star,\n  TrendingUp,\n  Package,\n  ArrowLeft,\n  Cloud,\n  Sun,\n  CloudRain,\n  Thermometer\n} from 'lucide-react';\nimport { useNavigate } from 'react-router-dom';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\n\nconst Advisory = () => {\n  const navigate = useNavigate();\n  const [savedGuidance, setSavedGuidance] = useState<string[]>([]);\n  const [savedCultivationGuides, setSavedCultivationGuides] = useState<string[]>([]);\n  const [appliedGuidance, setAppliedGuidance] = useState<string[]>(() => {\n    const applied = localStorage.getItem('kisanmitra_applied_guidance');\n    return applied ? JSON.parse(applied) : [];\n  });\n\n  // Load saved guides\n  useEffect(() => {\n    const savedFertilizer = localStorage.getItem('kisanmitra_saved_fertilizer_guides');\n    setSavedGuidance(savedFertilizer ? JSON.parse(savedFertilizer) : []);\n    \n    const savedCultivation = localStorage.getItem('kisanmitra_saved_cultivation_guides');\n    setSavedCultivationGuides(savedCultivation ? JSON.parse(savedCultivation) : []);\n  }, []);\n\n  const cropData = {\n    'tomato': {\n      name: 'Tomato',\n      image: '🍅',\n      season: 'Kharif/Rabi',\n      fertilizers: [\n        { name: 'NPK (10:26:26)', quantity: '200 kg/acre', timing: 'At planting' },\n        { name: 'Urea (46% N)', quantity: '50 kg/acre', timing: '20 days after transplant' },\n        { name: 'Calcium Nitrate', quantity: '25 kg/acre', timing: 'Flowering stage' }\n      ]\n    },\n    'wheat': {\n      name: 'Wheat',\n      image: '🌾',\n      season: 'Rabi',\n      fertilizers: [\n        { name: 'DAP (18:46:0)', quantity: '150 kg/acre', timing: 'At sowing' },\n        { name: 'Urea (46% N)', quantity: '65 kg/acre', timing: '1st irrigation (21 days)' },\n        { name: 'Urea (46% N)', quantity: '65 kg/acre', timing: '2nd irrigation (45 days)' }\n      ]\n    },\n    'rice': {\n      name: 'Rice',\n      image: '🌾',\n      season: 'Kharif',\n      fertilizers: [\n        { name: 'NPK (12:32:16)', quantity: '125 kg/acre', timing: 'Before transplanting' },\n        { name: 'Urea (46% N)', quantity: '45 kg/acre', timing: '15 days after transplant' },\n        { name: 'Urea (46% N)', quantity: '45 kg/acre', timing: 'At panicle initiation' }\n      ]\n    },\n    'cotton': {\n      name: 'Cotton',\n      image: '☁️',\n      season: 'Kharif',\n      fertilizers: [\n        { name: 'NPK (17:17:17)', quantity: '100 kg/acre', timing: 'At sowing' },\n        { name: 'Urea (46% N)', quantity: '60 kg/acre', timing: '30-35 days after sowing' },\n        { name: 'MOP (60% K2O)', quantity: '35 kg/acre', timing: 'At flowering' }\n      ]\n    },\n    'maize': {\n      name: 'Maize',\n      image: '🌽',\n      season: 'Kharif/Rabi',\n      fertilizers: [\n        { name: 'NPK (12:32:16)', quantity: '125 kg/acre', timing: 'At sowing' },\n        { name: 'Urea (46% N)', quantity: '65 kg/acre', timing: '25-30 days after sowing' },\n        { name: 'Urea (46% N)', quantity: '65 kg/acre', timing: 'Pre-tasseling stage' }\n      ]\n    }\n  };\n\n  const toggleAppliedStatus = (cropId: string) => {\n    const updatedApplied = appliedGuidance.includes(cropId)\n      ? appliedGuidance.filter(id => id !== cropId)\n      : [...appliedGuidance, cropId];\n    \n    setAppliedGuidance(updatedApplied);\n    localStorage.setItem('kisanmitra_applied_guidance', JSON.stringify(updatedApplied));\n  };\n\n  const savedCrops = savedGuidance.map(id => ({\n    id,\n    ...cropData[id as keyof typeof cropData]\n  })).filter(crop => crop.name); // Filter out any invalid entries\n\n  const cultivationGuideData = {\n    tomato: { name: 'Tomato', image: '🍅', summary: 'Variety selection + seed treatment; drip irrigation best practices' },\n    wheat: { name: 'Wheat', image: '🌾', summary: 'Six-stage irrigation; fertilizer application timing' },\n    maize: { name: 'Maize', image: '🌽', summary: 'Land preparation + raised beds; trio fertilizer schedule' }\n  };\n\n  const savedCultivationCrops = savedCultivationGuides.map(id => ({\n    id,\n    ...cultivationGuideData[id as keyof typeof cultivationGuideData]\n  })).filter(crop => crop.name);\n\n  const removeCultivationGuide = (guideId: string) => {\n    const updated = savedCultivationGuides.filter(id => id !== guideId);\n    setSavedCultivationGuides(updated);\n    localStorage.setItem('kisanmitra_saved_cultivation_guides', JSON.stringify(updated));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-blue-50\">\n      {/* Header */}\n      <div className=\"bg-gradient-to-r from-green-600 to-emerald-600 px-4 py-4 shadow-lg\">\n        <div className=\"flex items-center justify-between\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => navigate('/home')}\n            className=\"text-white hover:bg-white/20 rounded-full p-3\"\n          >\n            <ArrowLeft className=\"w-5 h-5\" />\n          </Button>\n          \n          <h1 className=\"text-xl font-bold text-white flex items-center\">\n            <BookOpen className=\"w-6 h-6 mr-2\" />\n            Advisory\n          </h1>\n          \n          <div className=\"w-12\" />\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"px-6 py-8 space-y-8\">\n        {/* Weather Report Card */}\n        <Card \n          className=\"bg-white rounded-3xl shadow-lg border border-gray-100 overflow-hidden cursor-pointer hover:shadow-xl transition-shadow duration-200\"\n          onClick={() => navigate('/weather')}\n        >\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"p-3 bg-sky-100 rounded-xl\">\n                <Sun className=\"w-6 h-6 text-sky-600\" />\n              </div>\n              <div className=\"flex-1\">\n                <h3 className=\"font-bold text-gray-900 text-lg\">Weather Report</h3>\n                <p className=\"text-gray-500 text-sm\">7-day forecast and farming advice</p>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"text-xs bg-sky-100 text-sky-700 px-2 py-1 rounded-full font-medium flex items-center space-x-1\">\n                  <Thermometer className=\"w-3 h-3\" />\n                  <span>Live</span>\n                </div>\n                <ChevronRight className=\"w-5 h-5 text-gray-400\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Saved Cultivation Guides Card */}\n        <Card \n          className=\"bg-white rounded-3xl shadow-lg border border-gray-100 overflow-hidden cursor-pointer hover:shadow-xl transition-shadow duration-200\"\n          onClick={() => navigate('/my-saved-cultivation-guides')}\n        >\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"p-3 bg-emerald-100 rounded-xl\">\n                <BookOpen className=\"w-6 h-6 text-emerald-600\" />\n              </div>\n              <div className=\"flex-1\">\n                <h3 className=\"font-bold text-gray-900 text-lg\">Saved Cultivation Guides</h3>\n                <p className=\"text-gray-500 text-sm\">\n                  {savedCultivationCrops.length > 0 \n                    ? `${savedCultivationCrops.length} saved guide${savedCultivationCrops.length !== 1 ? 's' : ''} • View all saved guides`\n                    : 'Save cultivation guides to see them here'\n                  }\n                </p>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                {savedCultivationCrops.length > 0 && (\n                  <div className=\"text-xs bg-emerald-100 text-emerald-700 px-2 py-1 rounded-full font-medium\">\n                    {savedCultivationCrops.length}\n                  </div>\n                )}\n                <ChevronRight className=\"w-5 h-5 text-gray-400\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* My Fertilizer Guidance Card - Always clickable like Market Prices */}\n        <Card \n          className=\"bg-white rounded-3xl shadow-lg border border-gray-100 overflow-hidden cursor-pointer hover:shadow-xl transition-shadow duration-200\"\n          onClick={() => navigate('/my-fertilizer-guidance')}\n        >\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"p-3 bg-green-100 rounded-xl\">\n                <Beaker className=\"w-6 h-6 text-green-600\" />\n              </div>\n              <div className=\"flex-1\">\n                <h3 className=\"font-bold text-gray-900 text-lg\">My Fertilizer Guidance</h3>\n                <p className=\"text-gray-500 text-sm\">\n                  {savedCrops.length > 0 \n                    ? `${savedCrops.length} saved crop${savedCrops.length !== 1 ? 's' : ''} • ${appliedGuidance.length} applied`\n                    : 'Save fertilizer guidance to see them here'\n                  }\n                </p>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                {savedCrops.length > 0 && (\n                  <div className=\"text-xs bg-green-100 text-green-700 px-2 py-1 rounded-full font-medium\">\n                    {savedCrops.length}\n                  </div>\n                )}\n                <ChevronRight className=\"w-5 h-5 text-gray-400\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Market Prices Card */}\n        <Card \n          className=\"bg-white rounded-3xl shadow-lg border border-gray-100 overflow-hidden cursor-pointer hover:shadow-xl transition-shadow duration-200\"\n          onClick={() => navigate('/market-prices')}\n        >\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"p-3 bg-blue-100 rounded-xl\">\n                <TrendingUp className=\"w-6 h-6 text-blue-600\" />\n              </div>\n              <div className=\"flex-1\">\n                <h3 className=\"font-bold text-gray-900 text-lg\">Market Prices</h3>\n                <p className=\"text-gray-500 text-sm\">Today's mandi rates and trends</p>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"text-xs bg-green-100 text-green-700 px-2 py-1 rounded-full font-medium\">\n                  Live\n                </div>\n                <ChevronRight className=\"w-5 h-5 text-gray-400\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Sell Crops Card */}\n        <Card \n          className=\"bg-white rounded-3xl shadow-lg border border-gray-100 overflow-hidden cursor-pointer hover:shadow-xl transition-shadow duration-200\"\n          onClick={() => navigate('/sell')}\n        >\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"p-3 bg-green-100 rounded-xl\">\n                <Package className=\"w-6 h-6 text-green-600\" />\n              </div>\n              <div className=\"flex-1\">\n                <h3 className=\"font-bold text-gray-900 text-lg\">Sell Crops</h3>\n                <p className=\"text-gray-500 text-sm\">List your produce for sale</p>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"text-xs bg-orange-100 text-orange-700 px-2 py-1 rounded-full font-medium\">\n                  Sell Now\n                </div>\n                <ChevronRight className=\"w-5 h-5 text-gray-400\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n      </div>\n    </div>\n  );\n};\n\nexport default Advisory;","size_bytes":11833},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/pages/AnalyzePlant.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { \n  ArrowLeft, \n  Brain, \n  CheckCircle,\n  Sparkles,\n  Target,\n  Zap,\n  Eye,\n  Scan\n} from 'lucide-react';\nimport { Progress } from '@/components/ui/progress';\n\nconst AnalyzePlant = () => {\n  const navigate = useNavigate();\n  const [analysisProgress, setAnalysisProgress] = useState(0);\n  const [currentStage, setCurrentStage] = useState(0);\n  const [plantImage, setPlantImage] = useState<string | null>(null);\n\n  const analysisStages = [\n    { name: 'Scanning Image', icon: Scan, progress: 20 },\n    { name: 'Detecting Plant Features', icon: Eye, progress: 40 },\n    { name: 'Identifying Patterns', icon: Target, progress: 60 },\n    { name: 'Analyzing Health Issues', icon: Brain, progress: 80 },\n    { name: 'Generating Report', icon: Zap, progress: 100 }\n  ];\n\n  useEffect(() => {\n    // Get the captured image\n    const image = localStorage.getItem('plant_image');\n    setPlantImage(image);\n\n    if (!image) {\n      navigate('/diagnose/capture');\n      return;\n    }\n\n    const analyzeImage = async () => {\n      try {\n        // Animate through stages while making API call\n        let progress = 0;\n        let stageIndex = 0;\n        \n        const interval = setInterval(() => {\n          progress += Math.random() * 2 + 0.5; // Slower progress for real API call\n          \n          if (progress >= analysisStages[stageIndex]?.progress) {\n            setCurrentStage(stageIndex + 1);\n            stageIndex++;\n          }\n          \n          setAnalysisProgress(Math.min(progress, 85)); // Stop at 85% until API responds\n        }, 150);\n\n        // Call the plant diagnosis API using Vite proxy\n        console.log('Calling API at: /api/diagnose');\n        const response = await fetch('/api/diagnose', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          mode: 'cors',\n          body: JSON.stringify({\n            base64_image: image\n          })\n        });\n\n        // Check if response is empty or malformed\n        let data;\n        const responseText = await response.text();\n        \n        try {\n          data = JSON.parse(responseText);\n        } catch (parseError) {\n          console.error('Failed to parse response:', responseText);\n          throw new Error('Invalid response from server');\n        }\n        \n        // Clear the interval and complete progress\n        clearInterval(interval);\n        setAnalysisProgress(100);\n        setCurrentStage(analysisStages.length);\n\n        if (data.success && data.result) {\n          // Extract disease information from API response\n          const disease = data.result.disease || 'Unknown Disease';\n          const confidence = data.result.confidence || 0;\n          \n          // Display disease name with health status\n          const isHealthy = data.result.is_healthy || disease === 'Healthy Plant';\n          const status = data.result.status || (isHealthy ? 'healthy' : 'not_healthy');\n          \n          // Better mapping based on disease name\n          let affectedArea = 'Plant tissue';\n          if (disease.toLowerCase().includes('leaf') || \n              disease.toLowerCase().includes('blight') ||\n              disease.toLowerCase().includes('spot')) {\n            affectedArea = 'Leaves and stems';\n          } else if (disease.toLowerCase().includes('fruit') ||\n                     disease.toLowerCase().includes('berry')) {\n            affectedArea = 'Fruits';\n          } else if (disease.toLowerCase().includes('root') ||\n                     disease.toLowerCase().includes('rot')) {\n            affectedArea = 'Roots and base';\n          } else if (isHealthy) {\n            affectedArea = 'No issues detected';\n          }\n          \n          const results = {\n            disease: disease, // Will show actual disease name\n            confidence: 100, // Always 100% as requested\n            affectedArea: affectedArea,\n            stage: isHealthy ? 'Plant is healthy' : 'Needs attention',\n            severity: isHealthy ? 'low' : 'medium',\n            status: status,\n            isHealthy: isHealthy,\n            detectedDate: new Date().toISOString(),\n            allPredictions: data.result.all_predictions || []\n          };\n          \n          localStorage.setItem('diagnosis_results', JSON.stringify(results));\n          \n          setTimeout(() => {\n            navigate('/diagnose/results');\n          }, 1000);\n        } else {\n          // Handle API error\n          clearInterval(interval);\n          console.error('Analysis failed:', data.error);\n          \n          // Store error result with more specific error handling\n          const results = {\n            disease: 'Analysis Failed',\n            confidence: 0,\n            affectedArea: 'Unable to determine',\n            stage: 'Unknown', \n            severity: 'low',\n            detectedDate: new Date().toISOString(),\n            error: data.error || 'Unable to connect to AI service'\n          };\n          localStorage.setItem('diagnosis_results', JSON.stringify(results));\n          navigate('/diagnose/results');\n        }\n      } catch (error) {\n        console.error('Network error:', error);\n        \n        // Handle network error - provide helpful error message\n        const results = {\n          disease: 'Connection Failed',\n          confidence: 0,\n          affectedArea: 'Unable to determine',\n          stage: 'Analysis incomplete',\n          severity: 'low',\n          detectedDate: new Date().toISOString(),\n          error: 'Network connection failed. Please check your internet connection and try again.'\n        };\n        localStorage.setItem('diagnosis_results', JSON.stringify(results));\n        \n        setAnalysisProgress(100);\n        setCurrentStage(analysisStages.length);\n        \n        setTimeout(() => {\n          navigate('/diagnose/results');\n        }, 1000);\n      }\n    };\n\n    analyzeImage();\n  }, [navigate]);\n\n  return (\n    <div className=\"mobile-container\">\n      {/* Header */}\n      <div className=\"mobile-header bg-agri-cream\">\n        <div className=\"flex items-center space-x-3\">\n          <button \n            onClick={() => navigate('/diagnose')}\n            className=\"p-2 hover:bg-agri-light rounded-full transition-colors\"\n          >\n            <ArrowLeft className=\"w-6 h-6 text-agri-accent\" />\n          </button>\n          <h1 className=\"text-xl font-bold text-agri-accent\">AI Analysis</h1>\n        </div>\n      </div>\n\n      <div className=\"mobile-content flex flex-col items-center justify-center min-h-[60vh] space-y-8 pt-4\">\n        {/* Image Preview with Analysis Effect */}\n        <div className=\"relative\">\n          <div className=\"w-48 h-36 bg-gray-100 rounded-2xl overflow-hidden shadow-medium\">\n            {plantImage ? (\n              <img \n                src={plantImage} \n                alt=\"Plant being analyzed\" \n                className=\"w-full h-full object-cover\"\n              />\n            ) : (\n              <div className=\"w-full h-full bg-gradient-to-br from-green-100 to-green-200 flex items-center justify-center\">\n                <Sparkles className=\"w-12 h-12 text-agri-primary\" />\n              </div>\n            )}\n          </div>\n          \n          {/* Scanning Animation Overlay */}\n          <div className=\"absolute inset-0 pointer-events-none\">\n            <div className=\"absolute inset-2 border-2 border-agri-primary/30 rounded-xl\" />\n            <div \n              className=\"absolute left-2 right-2 h-0.5 bg-gradient-to-r from-transparent via-agri-primary to-transparent animate-pulse\"\n              style={{ \n                top: `${20 + (analysisProgress * 0.6)}%`,\n                transition: 'top 0.3s ease-out'\n              }}\n            />\n          </div>\n          \n          {/* AI Processing Indicator */}\n          <div className=\"absolute -top-2 -right-2 w-8 h-8 bg-agri-primary rounded-full flex items-center justify-center shadow-glow\">\n            <Brain className=\"w-4 h-4 text-white animate-pulse\" />\n          </div>\n        </div>\n\n        {/* Analysis Progress */}\n        <div className=\"text-center w-full max-w-xs\">\n          <div className=\"relative mb-6\">\n            <div className=\"w-24 h-24 mx-auto mb-6 relative\">\n              <div className=\"w-24 h-24 border-4 border-agri-light rounded-full flex items-center justify-center\">\n                <div className=\"relative\">\n                  <Sparkles className=\"w-10 h-10 text-agri-primary animate-pulse\" />\n                  <div className=\"absolute inset-0 animate-spin\">\n                    <div className=\"w-10 h-10 border-2 border-transparent border-t-agri-primary rounded-full\" />\n                  </div>\n                </div>\n              </div>\n              <div className=\"absolute inset-0 border-4 border-agri-primary border-t-transparent rounded-full animate-spin\" \n                   style={{ animationDuration: '2s' }} />\n            </div>\n            \n            <h2 className=\"text-2xl font-bold text-agri-accent mb-2\">\n              AI Analyzing Your Plant...\n            </h2>\n            <p className=\"text-agri-gray mb-6\">\n              Our advanced AI is examining your plant for any health issues\n            </p>\n            \n            {/* Enhanced Progress Bar */}\n            <div className=\"space-y-4\">\n              <div className=\"relative\">\n                <Progress value={analysisProgress} className=\"w-full h-4\" />\n                <div className=\"absolute inset-0 bg-gradient-to-r from-green-400 via-blue-500 to-purple-600 opacity-20 rounded-full animate-pulse\" />\n              </div>\n              <div className=\"text-3xl font-bold text-green-600 animate-bounce\">\n                {Math.round(analysisProgress)}%\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Analysis Stages */}\n        <div className=\"w-full max-w-xs space-y-3\">\n          {analysisStages.map((stage, index) => {\n            const StageIcon = stage.icon;\n            const isCompleted = currentStage > index;\n            const isCurrent = currentStage === index;\n            \n            return (\n              <div key={index} className={`flex items-center space-x-3 p-3 rounded-xl transition-all duration-300 ${\n                isCompleted ? 'bg-agri-light' : \n                isCurrent ? 'bg-agri-primary/10 border border-agri-primary/20' : \n                'bg-gray-50'\n              }`}>\n                <div className={`w-8 h-8 rounded-full flex items-center justify-center transition-all duration-300 ${\n                  isCompleted ? 'bg-agri-success' : \n                  isCurrent ? 'bg-agri-primary animate-pulse' : \n                  'bg-gray-300'\n                }`}>\n                  {isCompleted ? (\n                    <CheckCircle className=\"w-5 h-5 text-white\" />\n                  ) : (\n                    <StageIcon className={`w-4 h-4 ${\n                      isCurrent ? 'text-white' : 'text-gray-500'\n                    }`} />\n                  )}\n                </div>\n                <span className={`text-sm font-medium transition-colors duration-300 ${\n                  isCompleted ? 'text-agri-success' : \n                  isCurrent ? 'text-agri-primary' : \n                  'text-gray-500'\n                }`}>\n                  {stage.name}\n                  {isCurrent && <span className=\"ml-2 animate-pulse\">...</span>}\n                  {isCompleted && <span className=\"ml-2\">✓</span>}\n                </span>\n              </div>\n            );\n          })}\n        </div>\n\n        {/* Processing Info */}\n        <div className=\"bg-blue-50 rounded-xl p-4 w-full max-w-xs border border-blue-200\">\n          <div className=\"text-center\">\n            <p className=\"text-sm text-blue-800\">\n              <strong>Processing Power:</strong> 15 TB agricultural database\n            </p>\n            <p className=\"text-xs text-blue-600 mt-1\">\n              Analyzing against 10,000+ plant disease patterns\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AnalyzePlant;","size_bytes":12141},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/pages/CameraCapture.tsx":{"content":"import { useState, useRef, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { \n  Camera, \n  Upload, \n  ArrowLeft, \n  RefreshCw,\n  Check,\n  X,\n  Sparkles\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { toast } from '@/components/ui/use-toast';\n\nconst CameraCapture = () => {\n  const navigate = useNavigate();\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const [stream, setStream] = useState<MediaStream | null>(null);\n  const [capturedImage, setCapturedImage] = useState<string | null>(null);\n  const [isCamera, setIsCamera] = useState(true);\n\n  const startCamera = useCallback(async () => {\n    try {\n      const mediaStream = await navigator.mediaDevices.getUserMedia({\n        video: { facingMode: 'environment' }\n      });\n      setStream(mediaStream);\n      if (videoRef.current) {\n        videoRef.current.srcObject = mediaStream;\n      }\n    } catch (error) {\n      console.error('Error accessing camera:', error);\n      toast({\n        title: \"Camera Error\",\n        description: \"Unable to access camera. Please check permissions.\",\n        variant: \"destructive\"\n      });\n    }\n  }, []);\n\n  const stopCamera = useCallback(() => {\n    if (stream) {\n      stream.getTracks().forEach(track => track.stop());\n      setStream(null);\n    }\n  }, [stream]);\n\n  const capturePhoto = useCallback(() => {\n    if (videoRef.current && canvasRef.current) {\n      const canvas = canvasRef.current;\n      const video = videoRef.current;\n      const context = canvas.getContext('2d');\n      \n      if (context) {\n        canvas.width = video.videoWidth;\n        canvas.height = video.videoHeight;\n        context.drawImage(video, 0, 0);\n        \n        const imageDataUrl = canvas.toDataURL('image/jpeg', 0.8);\n        setCapturedImage(imageDataUrl);\n        stopCamera();\n      }\n    }\n  }, [stopCamera]);\n\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setCapturedImage(e.target?.result as string);\n        setIsCamera(false);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const proceedWithAnalysis = () => {\n    if (capturedImage) {\n      // Store image in localStorage for the diagnosis process\n      localStorage.setItem('plant_image', capturedImage);\n      navigate('/diagnose/analyze');\n    }\n  };\n\n  const retakePhoto = () => {\n    setCapturedImage(null);\n    if (isCamera) {\n      startCamera();\n    }\n  };\n\n  // Start camera when component mounts\n  useState(() => {\n    if (isCamera) {\n      startCamera();\n    }\n  });\n\n  return (\n    <div className=\"mobile-container\">\n      {/* Header */}\n      <div className=\"mobile-header bg-agri-cream\">\n        <div className=\"flex items-center space-x-3\">\n          <button \n            onClick={() => {\n              stopCamera();\n              navigate('/diagnose');\n            }}\n            className=\"p-2 hover:bg-agri-light rounded-full transition-colors\"\n          >\n            <ArrowLeft className=\"w-6 h-6 text-agri-accent\" />\n          </button>\n          <h1 className=\"text-xl font-bold text-agri-accent\">\n            {capturedImage ? 'Review Image' : 'Capture Plant Image'}\n          </h1>\n        </div>\n      </div>\n\n      <div className=\"mobile-content space-y-6 pt-4\">\n        {!capturedImage ? (\n          <>\n            {/* Camera View */}\n            <div className=\"relative bg-black rounded-2xl overflow-hidden aspect-[4/3]\">\n              {isCamera ? (\n                <video\n                  ref={videoRef}\n                  autoPlay\n                  playsInline\n                  className=\"w-full h-full object-cover\"\n                />\n              ) : (\n                <div className=\"w-full h-full flex items-center justify-center bg-agri-light\">\n                  <Upload className=\"w-16 h-16 text-agri-primary\" />\n                </div>\n              )}\n              \n              {/* Camera Overlay */}\n              <div className=\"absolute inset-0 pointer-events-none\">\n                <div className=\"absolute inset-6 border-2 border-white/50 rounded-2xl\" />\n                <div className=\"absolute top-4 left-4 bg-black/20 rounded-full px-3 py-1\">\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"w-2 h-2 bg-red-500 rounded-full animate-pulse\" />\n                    <span className=\"text-white text-sm\">Live</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Controls */}\n            <div className=\"space-y-4\">\n              {/* Capture Methods */}\n              <div className=\"flex space-x-4\">\n                <Button\n                  onClick={() => {\n                    setIsCamera(true);\n                    startCamera();\n                  }}\n                  variant={isCamera ? \"default\" : \"outline\"}\n                  className=\"flex-1\"\n                >\n                  <Camera className=\"w-4 h-4 mr-2\" />\n                  Camera\n                </Button>\n                <Button\n                  onClick={() => {\n                    setIsCamera(false);\n                    stopCamera();\n                    fileInputRef.current?.click();\n                  }}\n                  variant={!isCamera ? \"default\" : \"outline\"}\n                  className=\"flex-1\"\n                >\n                  <Upload className=\"w-4 h-4 mr-2\" />\n                  Gallery\n                </Button>\n              </div>\n\n              {/* Capture Button */}\n              {isCamera && stream && (\n                <div className=\"flex justify-center\">\n                  <button\n                    onClick={capturePhoto}\n                    className=\"w-20 h-20 bg-white border-4 border-agri-primary rounded-full flex items-center justify-center shadow-lg transform transition-transform active:scale-95\"\n                  >\n                    <div className=\"w-16 h-16 bg-agri-primary rounded-full flex items-center justify-center\">\n                      <Camera className=\"w-8 h-8 text-white\" />\n                    </div>\n                  </button>\n                </div>\n              )}\n            </div>\n\n            {/* Hidden file input */}\n            <input\n              ref={fileInputRef}\n              type=\"file\"\n              accept=\"image/*\"\n              onChange={handleFileUpload}\n              className=\"hidden\"\n            />\n          </>\n        ) : (\n          <>\n            {/* Captured Image Preview */}\n            <div className=\"space-y-4\">\n              <div className=\"relative rounded-2xl overflow-hidden\">\n                <img\n                  src={capturedImage}\n                  alt=\"Captured plant\"\n                  className=\"w-full aspect-[4/3] object-cover\"\n                />\n                <div className=\"absolute top-4 right-4 bg-agri-success rounded-full p-2\">\n                  <Check className=\"w-5 h-5 text-white\" />\n                </div>\n              </div>\n\n              {/* Image Quality Check */}\n              <div className=\"bg-agri-light rounded-xl p-4\">\n                <div className=\"flex items-center space-x-3 mb-3\">\n                  <Sparkles className=\"w-5 h-5 text-agri-primary\" />\n                  <span className=\"font-semibold text-agri-accent\">Image Quality Check</span>\n                </div>\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-agri-gray\">Clarity</span>\n                    <span className=\"text-sm font-medium text-agri-success\">Good ✓</span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-agri-gray\">Lighting</span>\n                    <span className=\"text-sm font-medium text-agri-success\">Good ✓</span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-agri-gray\">Plant Focus</span>\n                    <span className=\"text-sm font-medium text-agri-success\">Good ✓</span>\n                  </div>\n                </div>\n              </div>\n\n              {/* Action Buttons */}\n              <div className=\"flex space-x-4\">\n                <Button\n                  onClick={retakePhoto}\n                  variant=\"outline\"\n                  className=\"flex-1\"\n                >\n                  <RefreshCw className=\"w-4 h-4 mr-2\" />\n                  Retake\n                </Button>\n                <Button\n                  onClick={proceedWithAnalysis}\n                  className=\"flex-1 bg-agri-primary hover:bg-agri-secondary\"\n                >\n                  <Sparkles className=\"w-4 h-4 mr-2\" />\n                  Analyze\n                </Button>\n              </div>\n            </div>\n          </>\n        )}\n\n        {/* Tips */}\n        <div className=\"bg-yellow-50 rounded-xl p-4 border border-yellow-200\">\n          <h3 className=\"font-semibold text-yellow-800 mb-2\">📸 Best Photo Tips:</h3>\n          <ul className=\"space-y-1 text-sm text-yellow-700\">\n            <li>• Focus on affected leaves or areas</li>\n            <li>• Ensure good natural lighting</li>\n            <li>• Keep image clear and close-up</li>\n            <li>• Avoid shadows and reflections</li>\n          </ul>\n        </div>\n      </div>\n\n      <canvas ref={canvasRef} className=\"hidden\" />\n    </div>\n  );\n};\n\nexport default CameraCapture;","size_bytes":9725},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/pages/Cart.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { \n  ArrowLeft, \n  Plus, \n  Minus, \n  Trash2,\n  Tag,\n  Truck,\n  ShoppingBag,\n  Shield\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { cartManager, CartItem } from '@/lib/cart';\n\nconst Cart = () => {\n  const navigate = useNavigate();\n  const [promoCode, setPromoCode] = useState('');\n  const [appliedPromo, setAppliedPromo] = useState('');\n  \n  const [cartItems, setCartItems] = useState<CartItem[]>([]);\n\n  useEffect(() => {\n    loadCart();\n    const unsubscribe = cartManager.onCartChange(() => {\n      loadCart();\n    });\n    return unsubscribe;\n  }, []);\n\n  const loadCart = () => {\n    setCartItems(cartManager.getCart());\n  };\n\n  const updateQuantity = (id: string, newQuantity: number) => {\n    cartManager.updateQuantity(id, newQuantity);\n  };\n\n  const removeItem = (id: string) => {\n    cartManager.deleteItem(id);\n  };\n\n  const applyPromoCode = () => {\n    if (promoCode === 'FARMER10') {\n      setAppliedPromo(promoCode);\n      setPromoCode('');\n    }\n  };\n\n  const subtotal = cartManager.getCartSubtotal();\n  const savings = cartManager.getCartSavings();\n  const discount = appliedPromo ? Math.round(subtotal * 0.1) : 0;\n  const deliveryFee = subtotal >= 500 ? 0 : 40;\n  const total = subtotal - discount + deliveryFee;\n\n  if (cartItems.length === 0) {\n    return (\n      <div className=\"mobile-container bg-background\">\n        <div className=\"mobile-header\">\n          <div className=\"flex items-center space-x-3\">\n            <button onClick={() => navigate('/shop')}>\n              <ArrowLeft className=\"w-6 h-6 text-gray-700\" />\n            </button>\n            <h1 className=\"text-xl font-bold text-text-secondary\">Cart</h1>\n          </div>\n        </div>\n\n        <div className=\"mobile-content flex flex-col items-center justify-center min-h-[60vh]\">\n          <ShoppingBag className=\"w-24 h-24 text-gray-300 mb-6\" />\n          <h2 className=\"text-xl font-bold text-gray-900 mb-2\">Your cart is empty</h2>\n          <p className=\"text-gray-500 mb-8 text-center\">Add some products to get started</p>\n          <Button \n            onClick={() => navigate('/shop')}\n            className=\"bg-green-600 hover:bg-green-700 text-white px-8 py-3\"\n          >\n            Continue Shopping\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"mobile-container bg-background\">\n      {/* Header */}\n      <div className=\"mobile-header\">\n        <div className=\"flex items-center space-x-3\">\n          <button onClick={() => navigate('/shop')}>\n            <ArrowLeft className=\"w-6 h-6 text-gray-700\" />\n          </button>\n          <h1 className=\"text-xl font-bold text-text-secondary\">Cart ({cartItems.length})</h1>\n        </div>\n      </div>\n\n      <div className=\"mobile-content space-y-6 pt-4\">\n        {/* Delivery Info */}\n        <div className=\"bg-green-50 border border-green-200 rounded-2xl p-4\">\n          <div className=\"flex items-center space-x-3\">\n            <Truck className=\"w-5 h-5 text-green-600\" />\n            <div>\n              <p className=\"font-semibold text-green-800\">\n                {deliveryFee === 0 ? 'Free Delivery!' : `₹${40 - (subtotal/500*40)} more for free delivery`}\n              </p>\n              <p className=\"text-sm text-green-600\">\n                {deliveryFee === 0 ? 'Your order qualifies for free delivery' : 'Add more items to get free delivery'}\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Cart Items */}\n        <div className=\"space-y-4\">\n          {cartItems.map((item) => (\n            <div key={item.id} className=\"bg-white rounded-2xl p-4 shadow-sm border border-gray-100\">\n              <div className=\"flex space-x-4\">\n                <div className=\"w-20 h-20 bg-gray-100 rounded-xl flex items-center justify-center\">\n                  <ShoppingBag className=\"w-8 h-8 text-green-600\" />\n                </div>\n                \n                <div className=\"flex-1\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-semibold text-gray-900 text-sm\">{item.name}</h3>\n                      <p className=\"text-xs text-gray-500 mt-1\">{item.brand} • {item.size}</p>\n                      \n                      <div className=\"flex items-center space-x-2 mt-2\">\n                        <span className=\"text-lg font-bold text-gray-900\">₹{item.price}</span>\n                        <span className=\"text-sm text-gray-400 line-through\">₹{item.originalPrice}</span>\n                        <Badge className=\"bg-green-100 text-green-800 text-xs\">\n                          Save ₹{item.originalPrice - item.price}\n                        </Badge>\n                      </div>\n                    </div>\n                    \n                    <button \n                      onClick={() => removeItem(item.id)}\n                      className=\"p-2 text-gray-400 hover:text-red-500\"\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </button>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between mt-4\">\n                    <div className=\"flex items-center space-x-3\">\n                      <button\n                        onClick={() => updateQuantity(item.id, item.quantity - 1)}\n                        className=\"w-8 h-8 bg-gray-100 rounded-lg flex items-center justify-center\"\n                      >\n                        <Minus className=\"w-4 h-4 text-gray-600\" />\n                      </button>\n                      <span className=\"font-semibold text-gray-900 min-w-[20px] text-center\">\n                        {item.quantity}\n                      </span>\n                      <button\n                        onClick={() => updateQuantity(item.id, item.quantity + 1)}\n                        className=\"w-8 h-8 bg-green-600 rounded-lg flex items-center justify-center\"\n                      >\n                        <Plus className=\"w-4 h-4 text-white\" />\n                      </button>\n                    </div>\n                    \n                    <div className=\"text-right\">\n                      <p className=\"font-bold text-gray-900\">₹{item.price * item.quantity}</p>\n                      {item.quantity > 1 && (\n                        <p className=\"text-xs text-gray-500\">₹{item.price} each</p>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {/* Promo Code */}\n        <div className=\"bg-white rounded-2xl p-4 shadow-sm border border-gray-100\">\n          <div className=\"flex items-center space-x-2 mb-3\">\n            <Tag className=\"w-5 h-5 text-green-600\" />\n            <h3 className=\"font-semibold text-gray-900\">Promo Code</h3>\n          </div>\n          \n          {appliedPromo ? (\n            <div className=\"flex items-center justify-between p-3 bg-green-50 rounded-xl\">\n              <div className=\"flex items-center space-x-2\">\n                <Badge className=\"bg-green-600 text-white\">{appliedPromo}</Badge>\n                <span className=\"text-sm text-green-700\">10% discount applied</span>\n              </div>\n              <button \n                onClick={() => setAppliedPromo('')}\n                className=\"text-sm text-green-600 hover:text-green-800\"\n              >\n                Remove\n              </button>\n            </div>\n          ) : (\n            <div className=\"flex space-x-2\">\n              <Input\n                placeholder=\"Enter promo code\"\n                value={promoCode}\n                onChange={(e) => setPromoCode(e.target.value)}\n                className=\"flex-1\"\n              />\n              <Button \n                onClick={applyPromoCode}\n                variant=\"outline\"\n                className=\"border-green-600 text-green-600\"\n              >\n                Apply\n              </Button>\n            </div>\n          )}\n        </div>\n\n        {/* Order Summary */}\n        <div className=\"bg-white rounded-2xl p-6 shadow-sm border border-gray-100\">\n          <h3 className=\"font-semibold text-gray-900 mb-4\">Order Summary</h3>\n          \n          <div className=\"space-y-3\">\n            <div className=\"flex justify-between\">\n              <span className=\"text-gray-600\">Subtotal ({cartItems.reduce((sum, item) => sum + item.quantity, 0)} items)</span>\n              <span className=\"font-medium\">₹{subtotal}</span>\n            </div>\n            \n            {savings > 0 && (\n              <div className=\"flex justify-between text-green-600\">\n                <span>You saved</span>\n                <span className=\"font-medium\">-₹{savings}</span>\n              </div>\n            )}\n            \n            {discount > 0 && (\n              <div className=\"flex justify-between text-green-600\">\n                <span>Promo discount</span>\n                <span className=\"font-medium\">-₹{discount}</span>\n              </div>\n            )}\n            \n            <div className=\"flex justify-between\">\n              <span className=\"text-gray-600\">Delivery fee</span>\n              <span className={`font-medium ${deliveryFee === 0 ? 'text-green-600' : ''}`}>\n                {deliveryFee === 0 ? 'FREE' : `₹${deliveryFee}`}\n              </span>\n            </div>\n            \n            <div className=\"border-t pt-3\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-lg font-bold text-gray-900\">Total</span>\n                <span className=\"text-xl font-bold text-green-600\">₹{total}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Security Badge */}\n        <div className=\"flex items-center justify-center space-x-2 text-gray-500\">\n          <Shield className=\"w-4 h-4\" />\n          <span className=\"text-sm\">100% Secure Checkout</span>\n        </div>\n      </div>\n\n      {/* Checkout Button */}\n      <div className=\"fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 p-4\">\n        <Button \n          onClick={() => {\n            // Pass cart data to checkout\n            navigate('/checkout', { \n              state: { \n                cartItems,\n                subtotal,\n                savings,\n                discount,\n                deliveryFee,\n                total,\n                appliedPromo\n              }\n            })\n          }}\n          className=\"w-full bg-green-600 hover:bg-green-700 text-white py-4 rounded-xl text-lg font-semibold\"\n        >\n          Proceed to Checkout • ₹{total}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default Cart;","size_bytes":10946},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/pages/Checkout.tsx":{"content":"import { useState } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { \n  ArrowLeft, \n  MapPin, \n  Edit3,\n  CreditCard,\n  Smartphone,\n  Banknote,\n  CheckCircle,\n  Clock,\n  Shield,\n  Truck,\n  User,\n  Phone\n} from 'lucide-react';\nimport { cartManager } from '@/lib/cart';\n\nconst Checkout = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [selectedAddress, setSelectedAddress] = useState('home');\n  const [selectedPayment, setSelectedPayment] = useState('upi');\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  // Get cart data from location state or cart manager\n  const cartData = location.state || {};\n  const cartItems = cartData.cartItems || cartManager.getCart();\n  const subtotal = cartData.subtotal || cartManager.getCartSubtotal();\n  const discount = cartData.discount || 0;\n  const deliveryFee = cartData.deliveryFee || (subtotal >= 500 ? 0 : 40);\n  const total = cartData.total || (subtotal - discount + deliveryFee);\n\n  const addresses = [\n    {\n      id: 'home',\n      type: 'Home',\n      name: 'Ramu Ji',\n      address: 'Village Rampur, Dist. Hardoi, UP 241001',\n      phone: '+91 98765 43210'\n    },\n    {\n      id: 'farm',\n      type: 'Farm',\n      name: 'Ramu Ji',\n      address: 'Plot No. 45, Sector 12, Village Rampur, UP 241001',\n      phone: '+91 98765 43210'\n    }\n  ];\n\n  const paymentMethods = [\n    {\n      id: 'upi',\n      name: 'UPI Payment',\n      description: 'Pay using PhonePe, Google Pay, Paytm',\n      icon: Smartphone,\n      recommended: true,\n      discount: 5\n    },\n    {\n      id: 'card',\n      name: 'Credit/Debit Card',\n      description: 'Visa, Mastercard, RuPay',\n      icon: CreditCard,\n      recommended: false,\n      discount: 0\n    },\n    {\n      id: 'cod',\n      name: 'Cash on Delivery',\n      description: 'Pay when you receive',\n      icon: Banknote,\n      recommended: false,\n      discount: 0\n    }\n  ];\n\n  const orderSummary = {\n    items: cartItems.map(item => ({\n      name: item.name,\n      quantity: item.quantity,\n      price: item.price * item.quantity,\n      image: item.category\n    })),\n    subtotal,\n    discount,\n    delivery: deliveryFee,\n    total\n  };\n\n  const handlePlaceOrder = async () => {\n    setIsProcessing(true);\n    \n    try {\n      // Simulate payment processing\n      await new Promise(resolve => setTimeout(resolve, 3000));\n      \n      // Get selected address\n      const address = addresses.find(addr => addr.id === selectedAddress);\n      const addressString = `${address?.name}, ${address?.address}`;\n      \n      // Create order\n      const order = cartManager.createOrder({\n        address: addressString,\n        paymentMethod: selectedPayment,\n        discount\n      });\n      \n      // Navigate to order success page\n      navigate('/order-success', { \n        state: { \n          orderId: order.id,\n          order,\n          selectedAddress: address\n        } \n      });\n    } catch (error) {\n      alert('Failed to place order. Please try again.');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"sticky top-0 z-40 bg-white shadow-sm border-b border-gray-100\">\n        <div className=\"flex items-center justify-between px-4 py-4\">\n          <div className=\"flex items-center space-x-3\">\n            <button \n              onClick={() => navigate('/cart')}\n              className=\"p-2 -ml-2 hover:bg-gray-100 rounded-full transition-colors\"\n            >\n              <ArrowLeft className=\"w-6 h-6 text-gray-700\" />\n            </button>\n            <h1 className=\"text-xl font-bold text-gray-900\">Checkout</h1>\n          </div>\n          <div className=\"flex items-center space-x-2 bg-green-50 px-3 py-1 rounded-full\">\n            <Shield className=\"w-4 h-4 text-green-600\" />\n            <span className=\"text-sm font-medium text-green-800\">Secure</span>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"px-4 py-6 space-y-6 pb-32\">\n        {/* Order Summary - Compact */}\n        <div className=\"bg-white rounded-2xl p-6 shadow-sm border border-gray-100\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"font-bold text-gray-900 flex items-center space-x-2\">\n              <CheckCircle className=\"w-5 h-5 text-green-600\" />\n              <span>Order Summary</span>\n            </h3>\n            <span className=\"text-sm text-gray-500\">{orderSummary.items.length} items</span>\n          </div>\n          \n          <div className=\"space-y-3 mb-4\">\n            {orderSummary.items.map((item, index) => (\n              <div key={index} className=\"flex items-center space-x-3 py-2 border-b border-gray-50 last:border-0\">\n                <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                  <span className=\"text-lg font-bold text-green-600\">{item.quantity}</span>\n                </div>\n                <div className=\"flex-1\">\n                  <p className=\"font-medium text-gray-900 text-sm\">{item.name}</p>\n                  <p className=\"text-sm text-gray-500\">₹{item.price}</p>\n                </div>\n              </div>\n            ))}\n          </div>\n          \n          <div className=\"border-t border-gray-100 pt-4 space-y-2\">\n            <div className=\"flex justify-between text-sm\">\n              <span className=\"text-gray-600\">Subtotal</span>\n              <span className=\"font-medium\">₹{orderSummary.subtotal}</span>\n            </div>\n            <div className=\"flex justify-between text-sm text-green-600\">\n              <span>Discount</span>\n              <span className=\"font-medium\">-₹{orderSummary.discount}</span>\n            </div>\n            <div className=\"flex justify-between text-sm\">\n              <span className=\"text-gray-600\">Delivery</span>\n              <span className=\"font-medium text-green-600\">FREE</span>\n            </div>\n            <div className=\"flex justify-between items-center pt-2 border-t border-gray-100\">\n              <span className=\"text-lg font-bold text-gray-900\">Total</span>\n              <span className=\"text-2xl font-bold text-green-600\">₹{orderSummary.total}</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Delivery Address */}\n        <div className=\"bg-white rounded-2xl p-6 shadow-sm border border-gray-100\">\n          <div className=\"flex items-center justify-between mb-5\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-green-100 rounded-full flex items-center justify-center\">\n                <MapPin className=\"w-5 h-5 text-green-600\" />\n              </div>\n              <h3 className=\"font-bold text-gray-900\">Delivery Address</h3>\n            </div>\n            <button className=\"text-green-600 hover:text-green-700 p-2 hover:bg-green-50 rounded-lg transition-colors\">\n              <Edit3 className=\"w-4 h-4\" />\n            </button>\n          </div>\n\n          <div className=\"space-y-3\">\n            {addresses.map((address) => (\n              <div key={address.id} className={`border-2 rounded-xl p-4 cursor-pointer transition-all ${\n                selectedAddress === address.id \n                  ? 'border-green-500 bg-green-50' \n                  : 'border-gray-200 hover:border-gray-300'\n              }`} onClick={() => setSelectedAddress(address.id)}>\n                <div className=\"flex items-start space-x-3\">\n                  <div className={`w-5 h-5 rounded-full border-2 mt-1 ${\n                    selectedAddress === address.id \n                      ? 'border-green-500 bg-green-500' \n                      : 'border-gray-300'\n                  }`}>\n                    {selectedAddress === address.id && (\n                      <div className=\"w-full h-full rounded-full bg-white scale-50\"></div>\n                    )}\n                  </div>\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-2 mb-2\">\n                      <User className=\"w-4 h-4 text-gray-600\" />\n                      <span className=\"font-semibold text-gray-900\">{address.name}</span>\n                      <span className=\"text-xs bg-green-100 text-green-800 px-2 py-1 rounded-full font-medium\">\n                        {address.type}\n                      </span>\n                    </div>\n                    <p className=\"text-gray-600 text-sm mb-2\">{address.address}</p>\n                    <div className=\"flex items-center space-x-1\">\n                      <Phone className=\"w-3 h-3 text-gray-500\" />\n                      <span className=\"text-sm text-gray-500\">{address.phone}</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n\n          <button className=\"w-full mt-4 p-4 border-2 border-dashed border-green-300 rounded-xl text-green-600 font-semibold hover:border-green-400 hover:bg-green-50 transition-colors\">\n            + Add New Address\n          </button>\n        </div>\n\n        {/* Delivery Time */}\n        <div className=\"bg-gradient-to-r from-green-50 to-blue-50 rounded-2xl p-6 border border-green-100\">\n          <div className=\"flex items-center space-x-3 mb-4\">\n            <div className=\"w-10 h-10 bg-green-100 rounded-full flex items-center justify-center\">\n              <Truck className=\"w-5 h-5 text-green-600\" />\n            </div>\n            <h3 className=\"font-bold text-gray-900\">Delivery Information</h3>\n          </div>\n          \n          <div className=\"bg-white rounded-xl p-4 border border-green-200\">\n            <div className=\"flex items-center space-x-3\">\n              <CheckCircle className=\"w-6 h-6 text-green-600\" />\n              <div>\n                <p className=\"font-semibold text-green-800\">Expected Delivery</p>\n                <p className=\"text-green-600 text-sm\">Tomorrow by 6:00 PM</p>\n                <p className=\"text-xs text-gray-500 mt-1\">Free delivery on orders above ₹500</p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Payment Method */}\n        <div className=\"bg-white rounded-2xl p-6 shadow-sm border border-gray-100\">\n          <div className=\"flex items-center space-x-3 mb-5\">\n            <div className=\"w-10 h-10 bg-green-100 rounded-full flex items-center justify-center\">\n              <CreditCard className=\"w-5 h-5 text-green-600\" />\n            </div>\n            <h3 className=\"font-bold text-gray-900\">Payment Method</h3>\n          </div>\n\n          <div className=\"space-y-3\">\n            {paymentMethods.map((method) => (\n              <div \n                key={method.id} \n                className={`border-2 rounded-xl p-4 cursor-pointer transition-all ${\n                  selectedPayment === method.id \n                    ? 'border-green-500 bg-green-50' \n                    : 'border-gray-200 hover:border-gray-300'\n                }`}\n                onClick={() => setSelectedPayment(method.id)}\n              >\n                <div className=\"flex items-center space-x-4\">\n                  <div className={`w-5 h-5 rounded-full border-2 ${\n                    selectedPayment === method.id \n                      ? 'border-green-500 bg-green-500' \n                      : 'border-gray-300'\n                  }`}>\n                    {selectedPayment === method.id && (\n                      <div className=\"w-full h-full rounded-full bg-white scale-50\"></div>\n                    )}\n                  </div>\n                  <div className={`w-10 h-10 rounded-full flex items-center justify-center ${\n                    selectedPayment === method.id ? 'bg-green-100' : 'bg-gray-100'\n                  }`}>\n                    <method.icon className={`w-5 h-5 ${\n                      selectedPayment === method.id ? 'text-green-600' : 'text-gray-600'\n                    }`} />\n                  </div>\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-2\">\n                      <span className=\"font-semibold text-gray-900\">{method.name}</span>\n                      {method.recommended && (\n                        <span className=\"text-xs bg-orange-100 text-orange-800 px-2 py-1 rounded-full font-medium\">\n                          Recommended\n                        </span>\n                      )}\n                      {method.discount > 0 && (\n                        <span className=\"text-xs bg-green-100 text-green-800 px-2 py-1 rounded-full font-medium\">\n                          {method.discount}% Off\n                        </span>\n                      )}\n                    </div>\n                    <p className=\"text-sm text-gray-600 mt-1\">{method.description}</p>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Security Info */}\n        <div className=\"bg-gradient-to-r from-green-50 to-blue-50 rounded-2xl p-5 border border-green-100\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-green-100 rounded-full flex items-center justify-center\">\n              <Shield className=\"w-5 h-5 text-green-600\" />\n            </div>\n            <div>\n              <p className=\"font-semibold text-green-800\">100% Secure Payment</p>\n              <p className=\"text-sm text-green-600\">Your payment information is protected with 256-bit SSL encryption</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Place Order Button */}\n      <div className=\"fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 p-4 shadow-lg\">\n        <button \n          onClick={handlePlaceOrder}\n          disabled={isProcessing}\n          className=\"w-full bg-green-600 hover:bg-green-700 text-white py-4 rounded-2xl text-lg font-bold disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 shadow-lg\"\n        >\n          {isProcessing ? (\n            <div className=\"flex items-center justify-center space-x-2\">\n              <Clock className=\"w-5 h-5 animate-spin\" />\n              <span>Processing Payment...</span>\n            </div>\n          ) : (\n            <div className=\"flex items-center justify-between px-4\">\n              <span>Place Order</span>\n              <span className=\"bg-white bg-opacity-20 px-3 py-1 rounded-lg\">₹{orderSummary.total}</span>\n            </div>\n          )}\n        </button>\n        <p className=\"text-center text-xs text-gray-500 mt-2\">\n          By placing this order, you agree to our Terms & Conditions\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default Checkout;","size_bytes":14703},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/pages/CropGuideDetail.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { \n  ArrowLeft, \n  Bookmark,\n  BookmarkCheck,\n  ChevronDown,\n  ChevronUp,\n  Sprout,\n  Droplets,\n  Sun,\n  Scissors,\n  Beaker,\n  Shield,\n  Heart,\n  Leaf,\n  CheckCircle\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from '@/components/ui/collapsible';\n\nconst CropGuideDetail = () => {\n  const navigate = useNavigate();\n  const { cropId } = useParams();\n  const [savedGuides, setSavedGuides] = useState<string[]>([]);\n  const [expandedSections, setExpandedSections] = useState<string[]>([]);\n\n  // Load saved guides from localStorage\n  useEffect(() => {\n    const saved = localStorage.getItem('kisanmitra_saved_cultivation_guides');\n    setSavedGuides(saved ? JSON.parse(saved) : []);\n  }, []);\n\n  const toggleSaveGuide = (guideId: string) => {\n    const updatedSaved = savedGuides.includes(guideId)\n      ? savedGuides.filter(id => id !== guideId)\n      : [...savedGuides, guideId];\n    \n    setSavedGuides(updatedSaved);\n    localStorage.setItem('kisanmitra_saved_cultivation_guides', JSON.stringify(updatedSaved));\n  };\n\n  const toggleSection = (sectionId: string) => {\n    setExpandedSections(prev => \n      prev.includes(sectionId) \n        ? prev.filter(id => id !== sectionId)\n        : [...prev, sectionId]\n    );\n  };\n\n  const cropData = {\n    tomato: {\n      name: 'Tomato',\n      image: '🍅',\n      description: 'Complete step-by-step guide for growing healthy tomatoes',\n      sections: [\n        {\n          id: 'variety-seed',\n          title: 'Variety & Seed Treatment',\n          icon: Sprout,\n          points: [\n            'Choose disease-resistant varieties like Indeterminate or Determinate types',\n            'Treat seeds with fungicide (Thiram 2g/kg) before sowing',\n            'Soak seeds in warm water for 6-8 hours for better germination'\n          ],\n          illustration: '🌱'\n        },\n        {\n          id: 'land-prep',\n          title: 'Land Preparation & Sowing',\n          icon: Sun,\n          points: [\n            'Prepare well-drained beds with 15-20cm height',\n            'Mix organic compost (5-10 tons/hectare) in soil',\n            'Maintain spacing of 60cm x 45cm between plants'\n          ],\n          illustration: '🚜'\n        },\n        {\n          id: 'fertilization',\n          title: 'Fertilization & Nutrient Management',\n          icon: Beaker,\n          points: [\n            'Apply NPK (19:19:19) at 400kg/hectare as basal dose',\n            'First top dressing with Urea (50kg/hectare) after 20 days',\n            'Apply Calcium Nitrate during flowering to prevent blossom end rot'\n          ],\n          illustration: '⚗️'\n        },\n        {\n          id: 'irrigation',\n          title: 'Irrigation Schedule',\n          icon: Droplets,\n          points: [\n            'Install drip irrigation system for water efficiency',\n            'Water daily for first 2 weeks, then alternate days',\n            'Maintain soil moisture at 70-80% field capacity'\n          ],\n          illustration: '💧'\n        },\n        {\n          id: 'support-control',\n          title: 'Support/Weed/Disease Control',\n          icon: Shield,\n          points: [\n            'Install bamboo stakes or trellis system for plant support',\n            'Manual weeding or use herbicides like Pendimethalin',\n            'Apply Copper Oxychloride for early blight prevention'\n          ],\n          illustration: '🛡️'\n        }\n      ]\n    },\n    wheat: {\n      name: 'Wheat',\n      image: '🌾',\n      description: 'Comprehensive guide for wheat cultivation and management',\n      sections: [\n        {\n          id: 'variety-seed',\n          title: 'Variety & Seed Treatment',\n          icon: Sprout,\n          points: [\n            'Select high-yielding varieties like HD-2967, PBW-343, or DBW-88',\n            'Treat seeds with fungicide (Vitavax 2.5g/kg) against seed-borne diseases',\n            'Use certified seeds with 90%+ germination rate'\n          ],\n          illustration: '🌱'\n        },\n        {\n          id: 'land-prep',\n          title: 'Land Preparation & Sowing',\n          icon: Sun,\n          points: [\n            'Deep plowing followed by 2-3 cross harrowing for fine tilth',\n            'Maintain seed rate of 100-125 kg/hectare for irrigated conditions',\n            'Sow at 2-3cm depth with row spacing of 20-22.5cm'\n          ],\n          illustration: '🚜'\n        },\n        {\n          id: 'fertilization',\n          title: 'Fertilization & Nutrient Management',\n          icon: Beaker,\n          points: [\n            'Apply DAP (150kg/hectare) and MOP (50kg/hectare) at sowing',\n            'First Urea application (65kg/hectare) at 21 days (Crown Root stage)',\n            'Second Urea application (65kg/hectare) at 45 days (Tillering stage)'\n          ],\n          illustration: '⚗️'\n        },\n        {\n          id: 'irrigation',\n          title: 'Six-Stage Irrigation Schedule',\n          icon: Droplets,\n          points: [\n            'Crown Root stage (20-25 days) - First irrigation',\n            'Tillering stage (40-45 days) - Second irrigation',\n            'Jointing stage (60-65 days) - Third irrigation',\n            'Flowering stage (80-85 days) - Fourth irrigation',\n            'Milk stage (100-105 days) - Fifth irrigation',\n            'Dough stage (115-120 days) - Sixth irrigation'\n          ],\n          illustration: '💧'\n        },\n        {\n          id: 'weed-control',\n          title: 'Weed & Disease Control',\n          icon: Shield,\n          points: [\n            'Use pre-emergence herbicide Pendimethalin @ 1kg/hectare',\n            'Post-emergence application of 2,4-D for broad-leaf weeds',\n            'Monitor for Yellow Rust and apply Propiconazole if needed'\n          ],\n          illustration: '🛡️'\n        }\n      ]\n    },\n    maize: {\n      name: 'Maize',\n      image: '🌽',\n      description: 'Step-by-step maize cultivation guide for optimal yield',\n      sections: [\n        {\n          id: 'land-prep',\n          title: 'Land Preparation & Raised Beds',\n          icon: Sun,\n          points: [\n            'Prepare field with deep plowing (20-25cm) followed by harrowing',\n            'Create raised beds of 3-4 meter width with proper drainage',\n            'Apply farmyard manure (10-15 tons/hectare) during land preparation'\n          ],\n          illustration: '🚜'\n        },\n        {\n          id: 'seed-treatment',\n          title: 'Seed Rate & Treatment',\n          icon: Beaker,\n          points: [\n            'Use 20-25 kg/hectare seed rate for optimal plant population',\n            'Treat seeds with fungicide (Thiram @ 2g/kg) and insecticide',\n            'Select high-yielding hybrids suitable for local climate conditions'\n          ],\n          illustration: '🌱'\n        },\n        {\n          id: 'spacing',\n          title: 'Spacing & Plant Management',\n          icon: Sprout,\n          points: [\n            'Maintain row-to-row spacing of 60cm and plant-to-plant 20cm',\n            'Sow 2-3 seeds per hill and thin to single healthy plant',\n            'Ensure plant population of 75,000-80,000 plants/hectare'\n          ],\n          illustration: '📏'\n        },\n        {\n          id: 'fertilizer',\n          title: 'Trio Fertilizer Schedule',\n          icon: Heart,\n          points: [\n            'Basal dose: NPK (120:60:40 kg/hectare) at sowing',\n            'First top dressing: Urea (65kg/hectare) at 25-30 days',\n            'Second top dressing: Urea (65kg/hectare) at knee-high stage (45-50 days)'\n          ],\n          illustration: '⚗️'\n        },\n        {\n          id: 'monitoring',\n          title: 'Growth Monitoring & Care',\n          icon: Leaf,\n          points: [\n            'Regular monitoring for stem borer and apply appropriate insecticides',\n            'Earthing up operation at 30-35 days for better root development',\n            'Maintain adequate soil moisture throughout vegetative growth'\n          ],\n          illustration: '👀'\n        }\n      ]\n    }\n  };\n\n  const currentCrop = cropData[cropId as keyof typeof cropData];\n\n  if (!currentCrop) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-emerald-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-bold text-gray-700 mb-4\">Guide Not Found</h2>\n          <Button onClick={() => navigate('/guides')} className=\"bg-green-600 hover:bg-green-700\">\n            Back to Guides\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const isSaved = savedGuides.includes(cropId!);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-emerald-50\">\n      {/* Header */}\n      <div className=\"bg-gradient-to-r from-green-600 to-emerald-600 px-4 py-4 shadow-lg sticky top-0 z-10\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <button onClick={() => navigate('/guides')} className=\"text-white hover:bg-white/20 rounded-full p-2\">\n              <ArrowLeft className=\"w-6 h-6\" />\n            </button>\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"text-3xl\">{currentCrop.image}</div>\n              <div>\n                <h1 className=\"text-xl font-bold text-white\">{currentCrop.name}</h1>\n                <p className=\"text-green-100 text-sm\">{currentCrop.description}</p>\n              </div>\n            </div>\n          </div>\n          <button\n            onClick={() => toggleSaveGuide(cropId!)}\n            className={`p-2 rounded-lg transition-colors ${\n              isSaved\n                ? 'bg-white/20 text-white'\n                : 'bg-white/10 text-white hover:bg-white/20'\n            }`}\n          >\n            {isSaved ? (\n              <BookmarkCheck className=\"w-6 h-6\" />\n            ) : (\n              <Bookmark className=\"w-6 h-6\" />\n            )}\n          </button>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"px-4 py-6 space-y-4\">\n        {currentCrop.sections.map((section, index) => (\n          <Card key={section.id} className=\"bg-white shadow-lg border border-green-100 overflow-hidden\">\n            <Collapsible\n              open={expandedSections.includes(section.id)}\n              onOpenChange={() => toggleSection(section.id)}\n            >\n              <CollapsibleTrigger asChild>\n                <CardHeader className=\"cursor-pointer hover:bg-green-50 transition-colors\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"p-3 bg-green-100 rounded-lg\">\n                        <section.icon className=\"w-6 h-6 text-green-600\" />\n                      </div>\n                      <div>\n                        <CardTitle className=\"text-lg font-bold text-gray-900\">{section.title}</CardTitle>\n                        <p className=\"text-sm text-gray-500\">Step {index + 1} of {currentCrop.sections.length}</p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"text-2xl\">{section.illustration}</div>\n                      {expandedSections.includes(section.id) ? (\n                        <ChevronUp className=\"w-5 h-5 text-gray-400\" />\n                      ) : (\n                        <ChevronDown className=\"w-5 h-5 text-gray-400\" />\n                      )}\n                    </div>\n                  </div>\n                </CardHeader>\n              </CollapsibleTrigger>\n              <CollapsibleContent>\n                <CardContent className=\"pt-0\">\n                  <div className=\"space-y-3\">\n                    {section.points.map((point, pointIndex) => (\n                      <div key={pointIndex} className=\"flex items-start space-x-3 p-3 bg-green-50 rounded-lg\">\n                        <CheckCircle className=\"w-5 h-5 text-green-600 mt-0.5 flex-shrink-0\" />\n                        <p className=\"text-gray-700 text-sm leading-relaxed\">{point}</p>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </CollapsibleContent>\n            </Collapsible>\n          </Card>\n        ))}\n\n        {/* Save Guide Button */}\n        <div className=\"sticky bottom-4 pt-4\">\n          <Button \n            onClick={() => toggleSaveGuide(cropId!)}\n            className={`w-full py-4 rounded-xl shadow-lg transition-all ${\n              isSaved\n                ? 'bg-green-100 text-green-700 border-2 border-green-600 hover:bg-green-50'\n                : 'bg-green-600 text-white hover:bg-green-700'\n            }`}\n          >\n            {isSaved ? (\n              <>\n                <BookmarkCheck className=\"w-5 h-5 mr-2\" />\n                Saved to My Guides\n              </>\n            ) : (\n              <>\n                <Bookmark className=\"w-5 h-5 mr-2\" />\n                Save This Guide\n              </>\n            )}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CropGuideDetail;","size_bytes":13419},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/pages/Diagnose.tsx":{"content":"import { useState, useRef, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { \n  Camera, \n  Upload, \n  Mic,\n  ChevronDown,\n  ChevronUp,\n  Sun,\n  Eye,\n  Shield,\n  Sparkles,\n  Globe,\n  Check,\n  Leaf,\n  ArrowLeft,\n  Volume2\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\n\nconst PlantDiagnosis = () => {\n  const navigate = useNavigate();\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [currentLanguage, setCurrentLanguage] = useState('English');\n  const [isListening, setIsListening] = useState(false);\n  const fileInputRef = useRef(null);\n  const cameraInputRef = useRef(null);\n\n  const languages = ['English', 'हिंदी', 'தமிழ்', 'తెలుగు', 'বাংলা'];\n\n  const handleImageUpload = (event) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setSelectedImage(e.target?.result);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const toggleVoiceAssist = () => {\n    setIsListening(!isListening);\n    // Voice assistance logic would go here\n  };\n\n  const startDiagnosis = () => {\n    if (selectedImage) {\n      console.log('Starting diagnosis...');\n      // Store the selected image for analysis\n      localStorage.setItem('plant_image', selectedImage);\n      // Navigate to analysis page\n      navigate('/diagnose/analyze');\n    }\n  };\n\n  const tips = [\n    {\n      icon: <Sun className=\"w-5 h-5 text-yellow-500\" />,\n      title: \"Good Lighting\",\n      description: \"Take photos in natural daylight\"\n    },\n    {\n      icon: <Eye className=\"w-5 h-5 text-blue-500\" />,\n      title: \"Focus on Affected Area\",\n      description: \"Zoom in on diseased or damaged parts\"\n    },\n    {\n      icon: <Shield className=\"w-5 h-5 text-green-500\" />,\n      title: \"Avoid Shadows\",\n      description: \"Keep the plant well-lit and clear\"\n    },\n    {\n      icon: <Sparkles className=\"w-5 h-5 text-purple-500\" />,\n      title: \"Clear & Sharp\",\n      description: \"Ensure the image is not blurry\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-blue-50\">\n      {/* Header */}\n      <div className=\"bg-gradient-to-r from-green-600 to-emerald-600 px-4 py-4 shadow-lg\">\n        <div className=\"flex items-center justify-between\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => navigate(-1)}\n            className=\"text-white hover:bg-white/20 rounded-full p-3\"\n          >\n            <ArrowLeft className=\"w-5 h-5\" />\n          </Button>\n          \n          <div className=\"flex items-center space-x-3\">\n            <h1 className=\"text-xl font-bold text-white flex items-center\">\n              <Leaf className=\"w-6 h-6 mr-2\" />\n              Plant Diagnosis\n            </h1>\n            <button\n              onClick={toggleVoiceAssist}\n              className={`p-2 rounded-lg transition-all duration-200 ${\n                isListening \n                  ? 'bg-white/30 text-white animate-pulse' \n                  : 'bg-white/20 text-white hover:bg-white/30'\n              }`}\n            >\n              <Volume2 className=\"w-5 h-5\" />\n            </button>\n          </div>\n          \n          <div className=\"w-12\" />\n        </div>\n      </div>\n\n      <div className=\"px-4 py-6 space-y-6\">\n        {/* Main Action Card */}\n        <div className=\"bg-white rounded-3xl shadow-xl p-8 border border-gray-100\">\n          <div className=\"text-center mb-8\">\n            <div className=\"inline-flex items-center justify-center w-20 h-20 bg-gradient-to-br from-green-100 to-green-200 rounded-2xl mb-6\">\n              <Camera className=\"w-10 h-10 text-green-600\" />\n            </div>\n            <h2 className=\"text-2xl font-bold text-gray-900 mb-3\">\n              Capture Plant Image\n            </h2>\n            <p className=\"text-gray-600 text-base leading-relaxed\">\n              Take a clear photo or upload from your gallery\n            </p>\n          </div>\n\n          {selectedImage && (\n            <div className=\"mb-8\">\n              <div className=\"relative rounded-2xl overflow-hidden bg-gray-100 border-4 border-green-200\">\n                <img\n                  src={selectedImage}\n                  alt=\"Selected plant\"\n                  className=\"w-full h-64 object-cover\"\n                />\n                <div className=\"absolute top-4 right-4 bg-green-500 rounded-xl p-2\">\n                  <Check className=\"w-5 h-5 text-white\" />\n                </div>\n              </div>\n              <p className=\"text-center text-base text-green-600 mt-4 font-bold\">\n                ✓ Image ready for diagnosis\n              </p>\n            </div>\n          )}\n\n          <div className=\"grid grid-cols-1 gap-6\">\n            {/* Take Photo Button */}\n            <button\n              onClick={() => cameraInputRef.current?.click()}\n              className=\"flex items-center justify-center space-x-4 bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white p-6 rounded-2xl transition-all duration-300 shadow-lg hover:shadow-xl transform hover:scale-[1.02]\"\n            >\n              <Camera className=\"w-7 h-7\" />\n              <span className=\"font-bold text-xl\">Take a Photo</span>\n            </button>\n\n            {/* Upload from Gallery Button */}\n            <button\n              onClick={() => fileInputRef.current?.click()}\n              className=\"flex items-center justify-center space-x-4 bg-white border-3 border-green-500 text-green-600 hover:bg-green-50 p-6 rounded-2xl transition-all duration-300 shadow-md hover:shadow-lg transform hover:scale-[1.02]\"\n            >\n              <Upload className=\"w-7 h-7\" />\n              <span className=\"font-bold text-xl\">Upload from Gallery</span>\n            </button>\n          </div>\n\n          {/* Hidden file inputs */}\n          <input\n            ref={fileInputRef}\n            type=\"file\"\n            accept=\"image/*\"\n            onChange={handleImageUpload}\n            className=\"hidden\"\n          />\n          <input\n            ref={cameraInputRef}\n            type=\"file\"\n            accept=\"image/*\"\n            capture=\"environment\"\n            onChange={handleImageUpload}\n            className=\"hidden\"\n          />\n        </div>\n\n        {/* Photography Tips Card */}\n        <div className=\"bg-white rounded-3xl shadow-xl border border-gray-100 overflow-hidden\">\n          <button\n            onClick={() => setIsExpanded(!isExpanded)}\n            className=\"w-full px-8 py-6 flex items-center justify-between bg-gradient-to-r from-blue-50 to-purple-50 hover:from-blue-100 hover:to-purple-100 transition-colors duration-200\"\n          >\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"p-3 bg-white rounded-xl shadow-sm\">\n                <Sparkles className=\"w-6 h-6 text-blue-600\" />\n              </div>\n              <div className=\"text-left\">\n                <h3 className=\"font-bold text-gray-900 text-lg\">Photography Tips</h3>\n                <p className=\"text-base text-gray-600\">Get better diagnosis results</p>\n              </div>\n            </div>\n            {isExpanded ? (\n              <ChevronUp className=\"w-6 h-6 text-gray-500\" />\n            ) : (\n              <ChevronDown className=\"w-6 h-6 text-gray-500\" />\n            )}\n          </button>\n\n          {isExpanded && (\n            <div className=\"px-8 py-6 space-y-6 bg-gray-50\">\n              {tips.map((tip, index) => (\n                <div key={index} className=\"flex items-start space-x-4\">\n                  <div className=\"mt-1\">\n                    {tip.icon}\n                  </div>\n                  <div>\n                    <h4 className=\"font-bold text-gray-900 text-base\">\n                      {tip.title}\n                    </h4>\n                    <p className=\"text-gray-600 text-sm mt-2 leading-relaxed\">\n                      {tip.description}\n                    </p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n\n      </div>\n\n      {/* Fixed Bottom Button */}\n      <div className=\"fixed bottom-0 left-0 right-0 bg-white border-t-2 border-gray-200 p-6 shadow-2xl\">\n        <button\n          onClick={startDiagnosis}\n          disabled={!selectedImage}\n          className={`w-full py-5 rounded-2xl font-bold text-xl transition-all duration-300 ${\n            selectedImage\n              ? 'bg-gradient-to-r from-green-500 to-blue-500 hover:from-green-600 hover:to-blue-600 text-white shadow-xl hover:shadow-2xl transform hover:scale-[1.02]'\n              : 'bg-gray-300 text-gray-500 cursor-not-allowed'\n          }`}\n        >\n          {selectedImage ? (\n            <div className=\"flex items-center justify-center space-x-3\">\n              <Sparkles className=\"w-6 h-6\" />\n              <span>Start Diagnosis</span>\n            </div>\n          ) : (\n            'Select an Image First'\n          )}\n        </button>\n      </div>\n\n      {/* Voice Assistant Feedback */}\n      {isListening && (\n        <div className=\"fixed top-20 left-4 right-4 bg-blue-600 text-white p-4 rounded-xl shadow-lg z-50\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-3 h-3 bg-white rounded-full animate-pulse\"></div>\n            <span className=\"font-medium\">Listening... Speak your question</span>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default PlantDiagnosis;","size_bytes":9600},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/pages/DiagnoseResults.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { \n  ArrowLeft, \n  CheckCircle,\n  AlertTriangle,\n  Clock,\n  Target,\n  TrendingUp,\n  Store,\n  MapPin,\n  Plus,\n  Leaf,\n  Calendar,\n  Award,\n  ShoppingCart\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Progress } from '@/components/ui/progress';\nimport { toast } from '@/components/ui/use-toast';\n\ninterface DiagnosisResult {\n  disease: string;\n  confidence: number;\n  affectedArea: string;\n  stage: string;\n  severity: 'low' | 'medium' | 'high';\n  detectedDate: string;\n  status?: string;\n  isHealthy?: boolean;\n}\n\nconst DiagnoseResults = () => {\n  const navigate = useNavigate();\n  const [results, setResults] = useState<DiagnosisResult | null>(null);\n  const [plantImage, setPlantImage] = useState<string | null>(null);\n\n  useEffect(() => {\n    const savedResults = localStorage.getItem('diagnosis_results');\n    const savedImage = localStorage.getItem('plant_image');\n    \n    if (savedResults) {\n      setResults(JSON.parse(savedResults));\n    }\n    if (savedImage) {\n      setPlantImage(savedImage);\n    }\n  }, []);\n\n  const addToActiveTreatments = () => {\n    if (results) {\n      const treatment = {\n        id: Date.now().toString(),\n        disease: results.disease,\n        startDate: new Date().toISOString(),\n        status: 'active',\n        progress: 0,\n        nextAction: 'Remove affected parts and apply copper fungicide',\n        image: plantImage,\n        severity: results.severity,\n        confidence: results.confidence,\n        steps: [\n          { step: 1, title: 'Remove Affected Parts', completed: false, dueDate: new Date().toISOString() },\n          { step: 2, title: 'Apply Copper Fungicide', completed: false, dueDate: new Date(Date.now() + 24*60*60*1000).toISOString() },\n          { step: 3, title: 'Improve Air Circulation', completed: false, dueDate: new Date(Date.now() + 2*24*60*60*1000).toISOString() },\n          { step: 4, title: 'Monitor Progress', completed: false, dueDate: new Date(Date.now() + 7*24*60*60*1000).toISOString() }\n        ]\n      };\n      \n      const existingTreatments = JSON.parse(localStorage.getItem('active_treatments') || '[]');\n      existingTreatments.push(treatment);\n      localStorage.setItem('active_treatments', JSON.stringify(existingTreatments));\n      \n      toast({\n        title: \"✅ Treatment Saved!\",\n        description: \"Added to your active treatments with step-by-step guidance.\"\n      });\n      \n      // Navigate to treatments after a brief delay\n      setTimeout(() => {\n        navigate('/treatments');\n      }, 1500);\n    }\n  };\n\n  const handleFertilizerRecommendation = (fertilizerName: string) => {\n    // Store fertilizer search query and navigate to shop\n    localStorage.setItem('fertilizer_search', fertilizerName);\n    navigate('/shop?search=' + encodeURIComponent(fertilizerName));\n  };\n\n  if (!results) {\n    return (\n      <div className=\"mobile-container\">\n        <div className=\"mobile-content flex items-center justify-center min-h-[50vh]\">\n          <div className=\"text-center\">\n            <AlertTriangle className=\"w-16 h-16 text-agri-warning mx-auto mb-4\" />\n            <h2 className=\"text-xl font-bold text-agri-accent mb-2\">No Results Found</h2>\n            <p className=\"text-agri-gray mb-4\">Please diagnose a plant first.</p>\n            <Button onClick={() => navigate('/diagnose')}>\n              Start Diagnosis\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case 'low': return 'text-green-600 bg-green-100';\n      case 'medium': return 'text-yellow-600 bg-yellow-100';\n      case 'high': return 'text-red-600 bg-red-100';\n      default: return 'text-gray-600 bg-gray-100';\n    }\n  };\n\n  const recommendedFertilizers = [\n    { name: 'Copper Fungicide Spray', price: '₹450', inStock: true },\n    { name: 'Blight Control Solution', price: '₹320', inStock: true },\n    { name: 'Organic Plant Immunity Booster', price: '₹280', inStock: false }\n  ];\n\n  return (\n    <div className=\"mobile-container\">\n      {/* Header */}\n      <div className=\"mobile-header bg-agri-cream\">\n        <div className=\"flex items-center space-x-3\">\n          <button \n            onClick={() => navigate('/diagnose')}\n            className=\"p-2 hover:bg-agri-light rounded-full transition-colors\"\n          >\n            <ArrowLeft className=\"w-6 h-6 text-agri-accent\" />\n          </button>\n          <h1 className=\"text-xl font-bold text-agri-accent\">Diagnosis Results</h1>\n        </div>\n      </div>\n\n      <div className=\"mobile-content space-y-6 pt-4\">\n        {/* Success Header */}\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 bg-agri-success/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <CheckCircle className=\"w-8 h-8 text-agri-success animate-bounce\" />\n          </div>\n          <h1 className=\"text-2xl font-bold text-agri-accent mb-2\">Diagnosis Complete</h1>\n          <p className=\"text-agri-gray\">\n            Analyzed on {new Date(results.detectedDate).toLocaleDateString()}\n          </p>\n        </div>\n\n        {/* Plant Image */}\n        {plantImage && (\n          <div className=\"relative rounded-3xl overflow-hidden shadow-2xl border border-gray-200\">\n            <img \n              src={plantImage} \n              alt=\"Diagnosed plant\" \n              className=\"w-full aspect-[4/3] object-cover\"\n            />\n            <div className=\"absolute inset-0 bg-gradient-to-t from-black/30 via-transparent to-transparent\" />\n            <div className=\"absolute top-4 right-4 bg-green-500 rounded-full p-3 shadow-lg\">\n              <Leaf className=\"w-6 h-6 text-white\" />\n            </div>\n            <div className=\"absolute bottom-4 left-4 text-white\">\n              <div className=\"text-sm font-medium opacity-90\">Analyzed Image</div>\n              <div className=\"text-xs opacity-70\">{new Date().toLocaleDateString()}</div>\n            </div>\n          </div>\n        )}\n\n        {/* Disease Detection */}\n        <div className={`plant-card border-l-4 ${results.isHealthy ? 'border-green-500' : 'border-red-500'}`}>\n          <div className=\"flex items-start justify-between mb-4\">\n            <div className=\"flex-1\">\n              <h2 className={`text-xl font-bold mb-2 ${results.isHealthy ? 'text-green-700' : 'text-red-700'}`}>\n                {results.disease}\n              </h2>\n              <div className=\"flex items-center space-x-3 mb-3\">\n                <div className=\"flex items-center space-x-2\">\n                  <Progress value={100} className=\"w-20 h-2\" />\n                  <span className={`text-sm font-medium ${results.isHealthy ? 'text-green-600' : 'text-red-600'}`}>\n                    100% Confidence\n                  </span>\n                </div>\n                <span className={`px-2 py-1 rounded-full text-xs font-medium ${\n                  results.isHealthy ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'\n                }`}>\n                  {results.isHealthy ? 'HEALTHY' : 'NEEDS ATTENTION'}\n                </span>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                <div>\n                  <span className=\"font-medium text-agri-accent\">Affected Area:</span>\n                  <p className=\"text-agri-gray\">{results.affectedArea}</p>\n                </div>\n                <div>\n                  <span className=\"font-medium text-agri-accent\">Stage:</span>\n                  <p className=\"text-agri-gray\">{results.stage}</p>\n                </div>\n              </div>\n            </div>\n            <AlertTriangle className={`w-8 h-8 ${results.isHealthy ? 'text-green-500' : 'text-red-500'}`} />\n          </div>\n        </div>\n\n        {/* Treatment Timeline */}\n        <div className=\"bg-blue-50 rounded-2xl p-6 border border-blue-200\">\n          <div className=\"flex items-center space-x-3 mb-4\">\n            <Clock className=\"w-6 h-6 text-blue-600\" />\n            <h3 className=\"font-bold text-blue-900\">Treatment Timeline</h3>\n          </div>\n          \n          <div className=\"space-y-3\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-blue-800\">Recovery Duration:</span>\n              <span className=\"font-semibold text-blue-900\">14-21 days</span>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-blue-800\">Success Rate:</span>\n              <span className=\"font-semibold text-agri-success\">92% farmers recovered</span>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-blue-800\">Best Treatment Time:</span>\n              <span className=\"font-semibold text-blue-900\">Early morning</span>\n            </div>\n          </div>\n          \n          <Progress value={92} className=\"w-full h-2 mt-4\" />\n        </div>\n\n        {/* Treatment Steps */}\n        <div className=\"bg-gradient-to-r from-green-50 to-blue-50 rounded-3xl p-6 border border-green-200\">\n          <div className=\"flex items-center space-x-3 mb-6\">\n            <div className=\"bg-green-500 rounded-full p-3\">\n              <Target className=\"w-6 h-6 text-white\" />\n            </div>\n            <div>\n              <h3 className=\"font-bold text-gray-900 text-lg\">Treatment Steps</h3>\n              <p className=\"text-sm text-gray-600\">Follow these steps for best results</p>\n            </div>\n          </div>\n          \n          <div className=\"space-y-4\">\n            <div className=\"flex items-start space-x-4 p-4 bg-white rounded-2xl shadow-sm\">\n              <div className=\"bg-green-500 text-white rounded-full p-2 text-sm font-bold flex-shrink-0\">1</div>\n              <div>\n                <h4 className=\"font-semibold text-gray-900 mb-1\">Remove Affected Parts</h4>\n                <p className=\"text-sm text-gray-600\">Carefully remove all affected leaves and stems. Dispose away from healthy plants.</p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-start space-x-4 p-4 bg-white rounded-2xl shadow-sm\">\n              <div className=\"bg-blue-500 text-white rounded-full p-2 text-sm font-bold flex-shrink-0\">2</div>\n              <div>\n                <h4 className=\"font-semibold text-gray-900 mb-1\">Apply Copper Fungicide</h4>\n                <p className=\"text-sm text-gray-600\">Spray in early morning or evening. Repeat every 7-10 days for 3 applications.</p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-start space-x-4 p-4 bg-white rounded-2xl shadow-sm\">\n              <div className=\"bg-purple-500 text-white rounded-full p-2 text-sm font-bold flex-shrink-0\">3</div>\n              <div>\n                <h4 className=\"font-semibold text-gray-900 mb-1\">Improve Air Circulation</h4>\n                <p className=\"text-sm text-gray-600\">Space plants properly and avoid overhead watering to prevent reinfection.</p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-start space-x-4 p-4 bg-white rounded-2xl shadow-sm\">\n              <div className=\"bg-orange-500 text-white rounded-full p-2 text-sm font-bold flex-shrink-0\">4</div>\n              <div>\n                <h4 className=\"font-semibold text-gray-900 mb-1\">Monitor Progress</h4>\n                <p className=\"text-sm text-gray-600\">Check daily for new symptoms. Recovery should begin within 5-7 days.</p>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        {/* Add to Active Treatments */}\n        <div className=\"bg-gradient-to-r from-green-500 to-green-600 rounded-3xl p-6 text-white shadow-xl\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div>\n              <h3 className=\"font-bold text-white text-lg mb-2\">Save Treatment Plan</h3>\n              <p className=\"text-green-100 text-sm\">Track progress with daily reminders and monitoring</p>\n            </div>\n            <Calendar className=\"w-10 h-10 text-green-200\" />\n          </div>\n          \n          <div className=\"grid grid-cols-2 gap-4 mb-6 text-sm\">\n            <div className=\"bg-white/20 rounded-2xl p-3\">\n              <div className=\"font-semibold mb-1\">Duration</div>\n              <div className=\"text-green-100\">14-21 days</div>\n            </div>\n            <div className=\"bg-white/20 rounded-2xl p-3\">\n              <div className=\"font-semibold mb-1\">Success Rate</div>\n              <div className=\"text-green-100\">92% recovery</div>\n            </div>\n          </div>\n          \n          <Button \n            onClick={addToActiveTreatments}\n            className=\"w-full bg-white text-green-600 hover:bg-green-50 font-semibold py-3 rounded-2xl transition-all duration-300 transform hover:scale-105\"\n          >\n            <Plus className=\"w-5 h-5 mr-2\" />\n            Save to My Treatments\n          </Button>\n        </div>\n\n        {/* Fertilizer Recommendations */}\n        <div className=\"space-y-4\">\n          <h2 className=\"text-xl font-bold text-agri-accent\">Recommended Fertilizers</h2>\n          \n          {recommendedFertilizers.map((fertilizer, index) => (\n            <div key={index} className=\"plant-card\">\n              <div className=\"flex items-center justify-between mb-3\">\n                <div className=\"flex-1\">\n                  <h3 className=\"font-semibold text-agri-accent\">{fertilizer.name}</h3>\n                  <p className=\"text-lg font-bold text-agri-primary\">{fertilizer.price}</p>\n                </div>\n                <div className=\"text-right\">\n                  <span className={`px-2 py-1 rounded-full text-xs font-medium ${\n                    fertilizer.inStock ? 'bg-green-100 text-green-600' : 'bg-red-100 text-red-600'\n                  }`}>\n                    {fertilizer.inStock ? 'In Stock' : 'Out of Stock'}\n                  </span>\n                </div>\n              </div>\n              \n              <Button \n                onClick={() => handleFertilizerRecommendation(fertilizer.name)}\n                disabled={!fertilizer.inStock}\n                className=\"w-full\"\n                variant={fertilizer.inStock ? \"default\" : \"outline\"}\n              >\n                <ShoppingCart className=\"w-4 h-4 mr-2\" />\n                {fertilizer.inStock ? 'Order Now' : 'Check Alternatives'}\n              </Button>\n            </div>\n          ))}\n        </div>\n\n        {/* Alternative Options */}\n        <div className=\"space-y-4\">\n          <h2 className=\"text-xl font-bold text-agri-accent\">Alternative Options</h2>\n          \n          {/* Nearby Shops */}\n          <div className=\"plant-card bg-gradient-to-r from-purple-500 to-purple-600 text-white\">\n            <div className=\"flex items-start justify-between mb-4\">\n              <div>\n                <h3 className=\"text-lg font-bold mb-2\">Visit Nearby Fertilizer Shops</h3>\n                <p className=\"text-white/90 text-sm mb-4\">Get directions and contact details</p>\n                \n                <div className=\"space-y-1 text-sm\">\n                  <div className=\"flex items-center space-x-2\">\n                    <CheckCircle className=\"w-4 h-4\" />\n                    <span>3 shops within 5km</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <CheckCircle className=\"w-4 h-4\" />\n                    <span>GPS navigation available</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <CheckCircle className=\"w-4 h-4\" />\n                    <span>Expert advice included</span>\n                  </div>\n                </div>\n              </div>\n              <MapPin className=\"w-8 h-8 opacity-80\" />\n            </div>\n            \n            <Button \n              onClick={() => navigate('/nearby-shops')}\n              className=\"w-full bg-white text-purple-600 hover:bg-white/90 font-semibold\"\n            >\n              <MapPin className=\"w-4 h-4 mr-2\" />\n              Find Nearest Shops\n            </Button>\n          </div>\n\n          {/* Expert Consultation */}\n          <div className=\"plant-card bg-gradient-to-r from-orange-500 to-orange-600 text-white\">\n            <div className=\"flex items-start justify-between mb-4\">\n              <div>\n                <h3 className=\"text-lg font-bold mb-2\">Consult Agricultural Expert</h3>\n                <p className=\"text-white/90 text-sm mb-4\">Get personalized advice from experts</p>\n                \n                <div className=\"space-y-1 text-sm\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Award className=\"w-4 h-4\" />\n                    <span>Certified agricultural experts</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <CheckCircle className=\"w-4 h-4\" />\n                    <span>Video consultation available</span>\n                  </div>\n                </div>\n              </div>\n              <Award className=\"w-8 h-8 opacity-80\" />\n            </div>\n            \n            <Button \n              className=\"w-full bg-white text-orange-600 hover:bg-white/90 font-semibold\"\n            >\n              <Award className=\"w-4 h-4 mr-2\" />\n              Book Consultation\n            </Button>\n          </div>\n        </div>\n\n        {/* Action Summary */}\n        <div className=\"bg-agri-cream rounded-xl p-4 border border-agri-primary/20\">\n          <h3 className=\"font-semibold text-agri-accent mb-2\">Next Steps Summary:</h3>\n          <ol className=\"space-y-1 text-sm text-agri-gray\">\n            <li>1. Add to active treatments for monitoring</li>\n            <li>2. Order recommended fertilizers</li>\n            <li>3. Apply treatment in early morning</li>\n            <li>4. Monitor progress daily</li>\n            <li>5. Expect recovery in 14-21 days</li>\n          </ol>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DiagnoseResults;","size_bytes":18196},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/pages/FertilizerGuide.tsx":{"content":"import { useState } from 'react';\nimport { \n  ArrowLeft,\n  Bookmark,\n  BookmarkCheck,\n  Leaf,\n  Clock,\n  Droplets,\n  Volume2,\n  ChevronDown,\n  ChevronUp,\n  Calendar,\n  Beaker,\n  Info\n} from 'lucide-react';\nimport { useNavigate } from 'react-router-dom';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n\nconst FertilizerGuide = () => {\n  const navigate = useNavigate();\n  const [savedCrops, setSavedCrops] = useState<string[]>(() => {\n    const saved = localStorage.getItem('kisanmitra_saved_fertilizer_guides');\n    return saved ? JSON.parse(saved) : [];\n  });\n  const [expandedCards, setExpandedCards] = useState<string[]>([]);\n\n  const cropData = [\n    {\n      id: 'tomato',\n      name: 'Tomato',\n      image: '🍅',\n      season: 'Kharif/Rabi',\n      fertilizers: [\n        {\n          name: 'NPK (10:26:26)',\n          quantity: '200 kg/acre',\n          timing: 'At planting',\n          method: 'Basal application',\n          notes: 'Mix with soil before transplanting'\n        },\n        {\n          name: 'Urea (46% N)',\n          quantity: '50 kg/acre',\n          timing: '20 days after transplant',\n          method: 'Side dressing',\n          notes: 'Apply around plant base, avoid stems'\n        },\n        {\n          name: 'Calcium Nitrate',\n          quantity: '25 kg/acre',\n          timing: 'Flowering stage',\n          method: 'Foliar spray',\n          notes: 'Prevents blossom end rot'\n        }\n      ],\n      steps: [\n        'Prepare field with proper drainage',\n        'Apply basal fertilizer 1 week before transplanting',\n        'Transplant healthy seedlings',\n        'Apply first top dressing after 20 days',\n        'Monitor plant growth and adjust as needed'\n      ]\n    },\n    {\n      id: 'wheat',\n      name: 'Wheat',\n      image: '🌾',\n      season: 'Rabi',\n      fertilizers: [\n        {\n          name: 'DAP (18:46:0)',\n          quantity: '150 kg/acre',\n          timing: 'At sowing',\n          method: 'Drill with seed',\n          notes: 'Place 2-3 cm below seed level'\n        },\n        {\n          name: 'Urea (46% N)',\n          quantity: '65 kg/acre',\n          timing: '1st irrigation (21 days)',\n          method: 'Broadcasting',\n          notes: 'Apply before irrigation'\n        },\n        {\n          name: 'Urea (46% N)',\n          quantity: '65 kg/acre',\n          timing: '2nd irrigation (45 days)',\n          method: 'Broadcasting',\n          notes: 'Apply during tillering stage'\n        }\n      ],\n      steps: [\n        'Test soil pH (ideal 6.0-7.5)',\n        'Apply basal dose with seed drilling',\n        'Ensure proper seed depth (4-5 cm)',\n        'First top dressing at crown root stage',\n        'Second top dressing at tillering',\n        'Monitor for nutrient deficiency signs'\n      ]\n    },\n    {\n      id: 'rice',\n      name: 'Rice',\n      image: '🌾',\n      season: 'Kharif',\n      fertilizers: [\n        {\n          name: 'NPK (12:32:16)',\n          quantity: '125 kg/acre',\n          timing: 'Before transplanting',\n          method: 'Broadcasting',\n          notes: 'Mix thoroughly with puddled soil'\n        },\n        {\n          name: 'Urea (46% N)',\n          quantity: '45 kg/acre',\n          timing: '15 days after transplant',\n          method: 'Broadcasting',\n          notes: 'Apply in standing water'\n        },\n        {\n          name: 'Urea (46% N)',\n          quantity: '45 kg/acre',\n          timing: 'At panicle initiation',\n          method: 'Broadcasting',\n          notes: 'Apply during tillering stage'\n        }\n      ],\n      steps: [\n        'Prepare puddled field with standing water',\n        'Apply basal fertilizer 2-3 days before transplanting',\n        'Transplant 21-day old seedlings',\n        'Maintain water level at 2-5 cm',\n        'Apply nitrogen in split doses',\n        'Drain field 10 days before harvest'\n      ]\n    },\n    {\n      id: 'cotton',\n      name: 'Cotton',\n      image: '☁️',\n      season: 'Kharif',\n      fertilizers: [\n        {\n          name: 'NPK (17:17:17)',\n          quantity: '100 kg/acre',\n          timing: 'At sowing',\n          method: 'Side placement',\n          notes: 'Place 3-4 cm away from seed'\n        },\n        {\n          name: 'Urea (46% N)',\n          quantity: '60 kg/acre',\n          timing: '30-35 days after sowing',\n          method: 'Side dressing',\n          notes: 'Apply during square formation'\n        },\n        {\n          name: 'MOP (60% K2O)',\n          quantity: '35 kg/acre',\n          timing: 'At flowering',\n          method: 'Broadcasting',\n          notes: 'Helps in boll development'\n        }\n      ],\n      steps: [\n        'Select well-drained black cotton soil',\n        'Apply pre-sowing fertilizers',\n        'Sow seeds at proper depth (2-3 cm)',\n        'First top dressing during square stage',\n        'Second application at flowering',\n        'Monitor for pink bollworm'\n      ]\n    },\n    {\n      id: 'maize',\n      name: 'Maize',\n      image: '🌽',\n      season: 'Kharif/Rabi',\n      fertilizers: [\n        {\n          name: 'NPK (12:32:16)',\n          quantity: '125 kg/acre',\n          timing: 'At sowing',\n          method: 'Band placement',\n          notes: 'Place 5 cm away and below seed'\n        },\n        {\n          name: 'Urea (46% N)',\n          quantity: '65 kg/acre',\n          timing: '25-30 days after sowing',\n          method: 'Side dressing',\n          notes: 'Apply at knee-high stage'\n        },\n        {\n          name: 'Urea (46% N)',\n          quantity: '65 kg/acre',\n          timing: 'Pre-tasseling stage',\n          method: 'Side dressing',\n          notes: 'Apply 50-55 days after sowing'\n        }\n      ],\n      steps: [\n        'Choose well-drained fertile soil',\n        'Apply basal dose at time of sowing',\n        'Maintain plant spacing of 60x20 cm',\n        'First top dressing at knee-high stage',\n        'Second top dressing before tasseling',\n        'Ensure adequate moisture throughout'\n      ]\n    }\n  ];\n\n  const toggleSaveCrop = (cropId: string) => {\n    const updatedSaved = savedCrops.includes(cropId)\n      ? savedCrops.filter(id => id !== cropId)\n      : [...savedCrops, cropId];\n    \n    setSavedCrops(updatedSaved);\n    localStorage.setItem('kisanmitra_saved_fertilizer_guides', JSON.stringify(updatedSaved));\n  };\n\n  const toggleExpandCard = (cropId: string) => {\n    setExpandedCards(prev => \n      prev.includes(cropId) \n        ? prev.filter(id => id !== cropId)\n        : [...prev, cropId]\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-blue-50\">\n      {/* Header */}\n      <div className=\"bg-white shadow-sm border-b border-green-100 sticky top-0 z-10\">\n        <div className=\"px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <button\n                onClick={() => navigate('/')}\n                className=\"p-2 hover:bg-gray-100 rounded-xl transition-colors\"\n              >\n                <ArrowLeft className=\"w-6 h-6 text-gray-600\" />\n              </button>\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"p-3 bg-green-100 rounded-xl\">\n                  <Beaker className=\"w-7 h-7 text-green-600\" />\n                </div>\n                <div>\n                  <h1 className=\"text-2xl font-bold text-gray-900\">Fertilizer Guidance</h1>\n                  <p className=\"text-sm text-gray-600\">Crop-specific fertilizer recommendations</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"px-6 py-8 space-y-8\">\n        {/* Info Card */}\n        <Card className=\"bg-gradient-to-r from-green-50 to-blue-50 border-2 border-green-200\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-start space-x-4\">\n              <div className=\"p-3 bg-white rounded-xl\">\n                <Info className=\"w-6 h-6 text-green-600\" />\n              </div>\n              <div>\n                <h3 className=\"font-bold text-gray-900 mb-2 text-lg\">\n                  Scientific Fertilizer Recommendations\n                </h3>\n                <p className=\"text-gray-700 text-base leading-relaxed\">\n                  These guidelines are based on soil science research. Always conduct soil testing \n                  for best results. Tap 📖 to save guidance for your crops.\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Crop Cards */}\n        <div className=\"space-y-6\">\n          {cropData.map((crop) => {\n            const isExpanded = expandedCards.includes(crop.id);\n            const isSaved = savedCrops.includes(crop.id);\n            \n            return (\n              <Card key={crop.id} className=\"bg-white rounded-3xl shadow-lg border border-gray-100 overflow-hidden\">\n                {/* Crop Header */}\n                <CardHeader className=\"bg-gradient-to-r from-green-50 to-green-100 border-b border-green-200\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"text-4xl\">{crop.image}</div>\n                      <div>\n                        <CardTitle className=\"text-2xl font-bold text-gray-900\">{crop.name}</CardTitle>\n                        <div className=\"flex items-center space-x-2 mt-1\">\n                          <Calendar className=\"w-4 h-4 text-green-600\" />\n                          <span className=\"text-green-700 font-medium\">{crop.season} Season</span>\n                        </div>\n                      </div>\n                    </div>\n                    <button\n                      onClick={() => toggleSaveCrop(crop.id)}\n                      className={`p-3 rounded-xl transition-all duration-200 ${\n                        isSaved \n                          ? 'bg-green-100 text-green-600' \n                          : 'bg-gray-100 text-gray-600 hover:bg-green-100 hover:text-green-600'\n                      }`}\n                    >\n                      {isSaved ? (\n                        <BookmarkCheck className=\"w-6 h-6\" />\n                      ) : (\n                        <Bookmark className=\"w-6 h-6\" />\n                      )}\n                    </button>\n                  </div>\n                </CardHeader>\n\n                {/* Fertilizer Table */}\n                <CardContent className=\"p-6\">\n                  <div className=\"space-y-4\">\n                    <h3 className=\"text-xl font-bold text-gray-900 mb-4 flex items-center space-x-2\">\n                      <Droplets className=\"w-5 h-5 text-blue-600\" />\n                      <span>Fertilizer Schedule</span>\n                    </h3>\n                    \n                    <div className=\"space-y-3\">\n                      {crop.fertilizers.map((fertilizer, index) => (\n                        <div key={index} className=\"bg-gray-50 rounded-2xl p-4 border border-gray-200\">\n                          <div className=\"flex items-start justify-between mb-3\">\n                            <div className=\"flex-1\">\n                              <h4 className=\"font-bold text-gray-900 text-lg\">{fertilizer.name}</h4>\n                              <p className=\"text-green-600 font-bold text-base\">{fertilizer.quantity}</p>\n                            </div>\n                            <div className=\"text-right\">\n                              <div className=\"flex items-center space-x-1 text-blue-600\">\n                                <Clock className=\"w-4 h-4\" />\n                                <span className=\"text-sm font-medium\">{fertilizer.timing}</span>\n                              </div>\n                            </div>\n                          </div>\n                          \n                          <div className=\"grid grid-cols-1 gap-2\">\n                            <div className=\"flex items-center space-x-2\">\n                              <span className=\"text-sm font-medium text-gray-600\">Method:</span>\n                              <span className=\"text-sm text-gray-800 font-medium\">{fertilizer.method}</span>\n                            </div>\n                            <div className=\"flex items-start space-x-2\">\n                              <span className=\"text-sm font-medium text-gray-600 mt-0.5\">Notes:</span>\n                              <span className=\"text-sm text-gray-700 leading-relaxed\">{fertilizer.notes}</span>\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n\n                  {/* Expandable Steps */}\n                  <div className=\"mt-6\">\n                    <button\n                      onClick={() => toggleExpandCard(crop.id)}\n                      className=\"w-full flex items-center justify-between p-4 bg-gradient-to-r from-blue-50 to-purple-50 rounded-2xl hover:from-blue-100 hover:to-purple-100 transition-colors\"\n                    >\n                      <div className=\"flex items-center space-x-3\">\n                        <Leaf className=\"w-5 h-5 text-green-600\" />\n                        <span className=\"font-bold text-gray-900\">Step-by-Step Instructions</span>\n                      </div>\n                      {isExpanded ? (\n                        <ChevronUp className=\"w-5 h-5 text-gray-600\" />\n                      ) : (\n                        <ChevronDown className=\"w-5 h-5 text-gray-600\" />\n                      )}\n                    </button>\n\n                    {isExpanded && (\n                      <div className=\"mt-4 space-y-3\">\n                        {crop.steps.map((step, index) => (\n                          <div key={index} className=\"flex items-start space-x-3 p-3 bg-white rounded-xl border border-gray-200\">\n                            <div className=\"flex-shrink-0 w-6 h-6 bg-green-100 rounded-full flex items-center justify-center\">\n                              <span className=\"text-xs font-bold text-green-600\">{index + 1}</span>\n                            </div>\n                            <p className=\"text-gray-700 text-sm leading-relaxed\">{step}</p>\n                          </div>\n                        ))}\n                        \n                        <div className=\"mt-4 p-4 bg-yellow-50 rounded-xl border border-yellow-200\">\n                          <div className=\"flex items-center space-x-2 mb-2\">\n                            <Volume2 className=\"w-5 h-5 text-yellow-600\" />\n                            <span className=\"font-bold text-yellow-800\">Voice Guidance</span>\n                          </div>\n                          <p className=\"text-yellow-700 text-sm\">\n                            Tap the speaker icon for audio instructions in your local language.\n                          </p>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n\n                  {/* Save Button */}\n                  <div className=\"mt-6\">\n                    <Button\n                      onClick={() => toggleSaveCrop(crop.id)}\n                      className={`w-full py-4 rounded-2xl font-bold text-lg transition-all duration-300 ${\n                        isSaved\n                          ? 'bg-green-100 text-green-700 border-2 border-green-300 hover:bg-green-200'\n                          : 'bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white shadow-lg hover:shadow-xl'\n                      }`}\n                    >\n                      <div className=\"flex items-center justify-center space-x-3\">\n                        {isSaved ? (\n                          <>\n                            <BookmarkCheck className=\"w-6 h-6\" />\n                            <span>Saved to My Guidance</span>\n                          </>\n                        ) : (\n                          <>\n                            <Bookmark className=\"w-6 h-6\" />\n                            <span>Save Guidance</span>\n                          </>\n                        )}\n                      </div>\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FertilizerGuide;","size_bytes":16508},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/pages/Guides.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { \n  ArrowLeft, \n  Search, \n  BookOpen, \n  Bookmark,\n  ChevronRight,\n  Sprout,\n  Droplets,\n  Sun,\n  Scissors,\n  Beaker,\n  Shield,\n  Heart,\n  BookmarkCheck,\n  Wheat,\n  Corn\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\n\nconst Guides = () => {\n  const navigate = useNavigate();\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState('All');\n  const [savedGuides, setSavedGuides] = useState<string[]>([]);\n  \n  // Load saved guides from localStorage\n  useEffect(() => {\n    const saved = localStorage.getItem('kisanmitra_saved_cultivation_guides');\n    setSavedGuides(saved ? JSON.parse(saved) : []);\n  }, []);\n\n  const categories = [\n    { id: 'All', name: 'All', icon: BookOpen },\n    { id: 'Planting', name: 'Planting', icon: Sprout },\n    { id: 'Irrigation', name: 'Irrigation', icon: Droplets },\n    { id: 'Harvesting', name: 'Harvesting', icon: Scissors }\n  ];\n\n  const cropGuides = [\n    {\n      id: 'tomato',\n      name: 'Tomato',\n      image: '🍅',\n      keyStages: [\n        { icon: Sprout, name: 'Seed', description: 'Variety selection & seed treatment' },\n        { icon: Sun, name: 'Nursery', description: 'Spacing & nursery management' },\n        { icon: Droplets, name: 'Irrigation', description: 'Drip irrigation setup' },\n        { icon: Scissors, name: 'Harvest', description: 'Staking & maintenance' }\n      ],\n      summary: [\n        'Variety selection + seed treatment',\n        'Spacing & nursery management', \n        'Basal/top fertilization schedule',\n        'Drip irrigation system',\n        'Staking & maintenance techniques'\n      ],\n      categories: ['Planting', 'Irrigation']\n    },\n    {\n      id: 'wheat',\n      name: 'Wheat',\n      image: '🌾',\n      keyStages: [\n        { icon: Beaker, name: 'Treatment', description: 'Seed treatment process' },\n        { icon: Sprout, name: 'Sowing', description: 'Sowing method & seed rate' },\n        { icon: Droplets, name: 'Irrigation', description: 'Six-stage irrigation' },\n        { icon: Shield, name: 'Control', description: 'Weed & fertilizer control' }\n      ],\n      summary: [\n        'Seed treatment protocols',\n        'Sowing method & seed rate',\n        'Six-stage irrigation schedule',\n        'Fertilizer application timing',\n        'Weed control strategies'\n      ],\n      categories: ['Planting', 'Irrigation']\n    },\n    {\n      id: 'maize',\n      name: 'Maize',\n      image: '🌽', \n      keyStages: [\n        { icon: Sun, name: 'Land Prep', description: 'Land prep & raised beds' },\n        { icon: Beaker, name: 'Treatment', description: 'Seed rate & treatment' },\n        { icon: Sprout, name: 'Spacing', description: 'Proper plant spacing' },\n        { icon: Heart, name: 'Fertilizer', description: 'Trio fertilizer schedule' }\n      ],\n      summary: [\n        'Land preparation & raised beds',\n        'Seed rate & treatment methods',\n        'Optimal plant spacing',\n        'Trio fertilizer schedule',\n        'Growth monitoring techniques'\n      ],\n      categories: ['Planting']\n    }\n  ];\n\n  // Save/unsave cultivation guide\n  const toggleSaveGuide = (guideId: string) => {\n    const updatedSaved = savedGuides.includes(guideId)\n      ? savedGuides.filter(id => id !== guideId)\n      : [...savedGuides, guideId];\n    \n    setSavedGuides(updatedSaved);\n    localStorage.setItem('kisanmitra_saved_cultivation_guides', JSON.stringify(updatedSaved));\n  };\n\n  const filteredGuides = cropGuides.filter(guide => {\n    const matchesSearch = guide.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         guide.summary.some(item => item.toLowerCase().includes(searchQuery.toLowerCase()));\n    const matchesCategory = selectedCategory === 'All' || guide.categories.includes(selectedCategory);\n    return matchesSearch && matchesCategory;\n  });\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-emerald-50\">\n      {/* Header */}\n      <div className=\"bg-gradient-to-r from-green-600 to-emerald-600 px-4 py-4 shadow-lg\">\n        <div className=\"flex items-center space-x-3\">\n          <button onClick={() => navigate('/home')} className=\"text-white hover:bg-white/20 rounded-full p-2\">\n            <ArrowLeft className=\"w-6 h-6\" />\n          </button>\n          <h1 className=\"text-xl font-bold text-white\">Cultivation Guides</h1>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"px-4 py-6 space-y-6\">\n        {/* Search Bar */}\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n          <Input\n            placeholder=\"Search crops or guides...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10 py-3 text-base bg-white border-gray-200 rounded-xl shadow-sm\"\n          />\n        </div>\n\n        {/* Category Tabs */}\n        <div className=\"flex space-x-2 overflow-x-auto pb-2\">\n          {categories.map((category) => (\n            <button\n              key={category.id}\n              onClick={() => setSelectedCategory(category.id)}\n              className={`flex items-center space-x-2 px-4 py-2 rounded-xl whitespace-nowrap transition-all ${\n                selectedCategory === category.id\n                  ? 'bg-green-600 text-white shadow-md'\n                  : 'bg-white text-gray-600 border border-gray-200 hover:bg-gray-50'\n              }`}\n            >\n              <category.icon className=\"w-4 h-4\" />\n              <span className=\"text-sm font-medium\">{category.name}</span>\n            </button>\n          ))}\n        </div>\n\n        {/* Crop Cards */}\n        <div className=\"space-y-4\">\n          {filteredGuides.map((crop) => (\n            <div key={crop.id} className=\"bg-white rounded-2xl shadow-lg border border-green-100 overflow-hidden\">\n              {/* Crop Header */}\n              <div className=\"p-6 border-b border-green-50\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"text-4xl\">{crop.image}</div>\n                    <div>\n                      <h3 className=\"text-xl font-bold text-gray-900\">{crop.name}</h3>\n                      <p className=\"text-sm text-gray-500\">Complete cultivation guide</p>\n                    </div>\n                  </div>\n                  <button\n                    onClick={() => toggleSaveGuide(crop.id)}\n                    className={`p-2 rounded-lg transition-colors ${\n                      savedGuides.includes(crop.id)\n                        ? 'bg-green-100 text-green-600'\n                        : 'bg-gray-100 text-gray-500 hover:bg-green-50 hover:text-green-600'\n                    }`}\n                  >\n                    {savedGuides.includes(crop.id) ? (\n                      <BookmarkCheck className=\"w-5 h-5\" />\n                    ) : (\n                      <Bookmark className=\"w-5 h-5\" />\n                    )}\n                  </button>\n                </div>\n\n                {/* Key Stages Icons */}\n                <div className=\"flex items-center justify-between mb-4 bg-green-50 rounded-xl p-4\">\n                  {crop.keyStages.map((stage, index) => (\n                    <div key={index} className=\"flex flex-col items-center space-y-2 flex-1\">\n                      <div className=\"p-2 bg-white rounded-lg shadow-sm\">\n                        <stage.icon className=\"w-5 h-5 text-green-600\" />\n                      </div>\n                      <div className=\"text-center\">\n                        <p className=\"text-xs font-medium text-gray-700\">{stage.name}</p>\n                        <p className=\"text-xs text-gray-500\">{stage.description}</p>\n                      </div>\n                      {index < crop.keyStages.length - 1 && (\n                        <ChevronRight className=\"absolute right-0 w-4 h-4 text-gray-400\" />\n                      )}\n                    </div>\n                  ))}\n                </div>\n\n                {/* Summary Points */}\n                <div className=\"space-y-2 mb-6\">\n                  {crop.summary.map((point, index) => (\n                    <div key={index} className=\"flex items-start space-x-2\">\n                      <div className=\"w-1.5 h-1.5 bg-green-600 rounded-full mt-2 flex-shrink-0\"></div>\n                      <p className=\"text-sm text-gray-700\">{point}</p>\n                    </div>\n                  ))}\n                </div>\n\n                {/* Action Button */}\n                <Button \n                  onClick={() => navigate(`/guides/${crop.id}`)}\n                  className=\"w-full bg-green-600 hover:bg-green-700 text-white rounded-xl py-3 shadow-md transition-all\"\n                >\n                  Read Full Guide\n                  <ChevronRight className=\"w-4 h-4 ml-2\" />\n                </Button>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {/* No Results */}\n        {filteredGuides.length === 0 && (\n          <div className=\"text-center py-12\">\n            <BookOpen className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold text-gray-700 mb-2\">No guides found</h3>\n            <p className=\"text-gray-500 mb-6\">Try adjusting your search or browse different categories</p>\n            <Button \n              onClick={() => {\n                setSearchQuery('');\n                setSelectedCategory('All');\n              }}\n              variant=\"outline\"\n              className=\"border-green-600 text-green-600 hover:bg-green-50\"\n            >\n              Clear Filters\n            </Button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Guides;","size_bytes":10005},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/pages/Home.tsx":{"content":"\nimport { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { \n  Bell, \n  Camera, \n  ShoppingCart, \n  MapPin, \n  Package, \n  Sprout, \n  Home as HomeIcon,\n  User,\n  Lightbulb,\n  AlertTriangle,\n  TrendingUp,\n  Store,\n  Leaf,\n  Cloud,\n  Sun,\n  CheckCircle,\n  ChevronDown,\n  Droplets,\n  Activity,\n  TestTube,\n  Beaker,\n  IndianRupee,\n  ArrowRight,\n  Volume2,\n  BookOpen,\n  BarChart3,\n  List,\n  ChevronRight,\n  CloudRain,\n  Thermometer,\n  MessageCircle\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport LanguageSwitcher from '@/components/LanguageSwitcher';\nimport NotificationPanel from '@/components/NotificationPanel';\nimport { weatherService, WeatherData } from '@/lib/weather';\n\nconst Home = () => {\n  const navigate = useNavigate();\n  const [showNotifications, setShowNotifications] = useState(false);\n  const [weather, setWeather] = useState<WeatherData | null>(null);\n  const [weatherLoading, setWeatherLoading] = useState(true);\n  \n  // Get user data\n  const userData = JSON.parse(localStorage.getItem('kisanmitra_user') || '{}');\n  const userName = userData.name || 'Farmer';\n  \n  // Get time-based greeting\n  const getGreeting = () => {\n    const hour = new Date().getHours();\n    if (hour < 12) return '🌱 Good Morning';\n    if (hour < 17) return '🌞 Good Afternoon';\n    return '🌙 Good Evening';\n  };\n\n  // Load weather data\n  useEffect(() => {\n    const loadWeather = async () => {\n      try {\n        setWeatherLoading(true);\n        \n        // Try to get current location first\n        try {\n          const location = await weatherService.getCurrentLocation();\n          const weatherData = await weatherService.getCurrentWeather(location.lat, location.lon);\n          setWeather(weatherData);\n        } catch (locationError) {\n          // If location access fails, use a default location\n          console.warn('Location access failed, using default location');\n          const defaultWeather = await weatherService.getWeatherByCity('Delhi, IN');\n          setWeather(defaultWeather);\n        }\n      } catch (error) {\n        console.error('Weather fetch error:', error);\n        // Keep weather as null, will show fallback UI\n      } finally {\n        setWeatherLoading(false);\n      }\n    };\n\n    loadWeather();\n  }, []);\n\n  // Market prices data with enhanced info\n  const marketPrices = [\n    { crop: 'Tomato', price: '₹16/kg', trend: 'up', change: '+8%', changeValue: '+₹1.20' },\n    { crop: 'Paddy', price: '₹1,850/qtl', trend: 'down', change: '-3%', changeValue: '-₹57' },\n    { crop: 'Onion', price: '₹25/kg', trend: 'up', change: '+12%', changeValue: '+₹2.70' },\n  ];\n\n  const quickActions = [\n    {\n      id: 'listings',\n      title: 'My Listings',\n      subtitle: 'Manage crops',\n      icon: Package,\n      bgColor: 'bg-green-50',\n      iconColor: 'text-green-600',\n      badge: '3',\n      action: () => navigate('/sell')\n    },\n    {\n      id: 'sell',\n      title: 'Sell Produce',\n      subtitle: 'Post your harvest',\n      icon: TrendingUp,\n      bgColor: 'bg-agri-light',\n      iconColor: 'text-agri-primary',\n      badge: 'NEW',\n      action: () => navigate('/sell')\n    },\n    {\n      id: 'fertilizers',\n      title: 'Order Fertilizers',\n      subtitle: 'Shop nutrients',\n      icon: ShoppingCart,\n      bgColor: 'bg-orange-50',\n      iconColor: 'text-orange-600',\n      action: () => navigate('/shop')\n    },\n    {\n      id: 'shops',\n      title: 'Nearby Shops',\n      subtitle: 'Find agri stores',\n      icon: MapPin,\n      bgColor: 'bg-agri-light-purple',\n      iconColor: 'text-agri-purple',\n      action: () => navigate('/shops')\n    },\n    {\n      id: 'orders',\n      title: 'My Orders',\n      subtitle: 'Track orders',\n      icon: Package,\n      bgColor: 'bg-agri-light-blue',\n      iconColor: 'text-agri-info',\n      action: () => navigate('/orders')\n    }\n  ];\n\n  const farmActions = [\n    {\n      id: 'treatments',\n      title: 'Active Treatments',\n      subtitle: '2 ongoing',\n      icon: Activity,\n      bgColor: 'bg-red-50',\n      iconColor: 'text-red-600',\n      badge: 2,\n      action: () => navigate('/treatments')\n    },\n    {\n      id: 'guides',\n      title: 'Cultivation Guides',\n      subtitle: 'Growing tips',\n      icon: Sprout,\n      bgColor: 'bg-agri-light',\n      iconColor: 'text-agri-primary',\n      action: () => navigate('/guides')\n    }\n  ];\n\n  return (\n    <div className=\"mobile-container bg-gradient-to-br from-blue-50 via-green-50 to-yellow-50 min-h-screen\">\n      {/* Header */}\n      <div className=\"bg-gradient-to-r from-white to-blue-50 px-6 py-5 shadow-sm backdrop-blur-sm\">\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"w-12 h-12 bg-agri-primary rounded-2xl flex items-center justify-center\">\n            <Sprout className=\"w-7 h-7 text-white\" />\n          </div>\n          <div className=\"flex-1\">\n            <h1 className=\"text-2xl font-bold text-text-secondary\">KisanMitra</h1>\n            <p className=\"text-base text-agri-primary font-medium\">\n              {getGreeting()}, {userName} Ji!\n            </p>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center justify-end space-x-3 mt-4\">\n          <LanguageSwitcher />\n          \n          <button \n            onClick={() => setShowNotifications(true)}\n            className=\"relative p-3 hover:bg-gray-100 rounded-full transition-colors active:scale-95 z-10\"\n          >\n            <Bell className=\"w-7 h-7 text-agri-gray\" />\n            <div className=\"absolute -top-1 -right-1 w-6 h-6 bg-red-500 rounded-full flex items-center justify-center animate-pulse z-10\">\n              <span className=\"text-sm font-bold text-white\">3</span>\n            </div>\n          </button>\n\n          <button \n            onClick={() => navigate('/profile')}\n            className=\"w-12 h-12 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-full flex items-center justify-center text-white text-lg font-bold shadow-lg transition-all duration-200 active:scale-95 hover:shadow-xl\"\n          >\n            {userName.charAt(0).toUpperCase()}\n          </button>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"px-6 space-y-8 pt-6 pb-24\">\n        {/* Weather Card - Compact & Improved */}\n        <Card className=\"weather-card border-0 shadow-lg rounded-2xl bg-gradient-to-r from-blue-100/80 to-sky-100/80 backdrop-blur-sm\">\n          <CardContent className=\"p-4\">\n            {/* Header with location */}\n            <div className=\"flex items-center justify-between mb-3\">\n              <div className=\"flex items-center space-x-2\">\n                <MapPin className=\"w-4 h-4 text-blue-600\" />\n                <span className=\"text-sm font-semibold text-blue-800\">\n                  {weatherLoading ? 'Loading...' : weather?.location || 'Location unavailable'}\n                </span>\n              </div>\n              <Button \n                size=\"sm\" \n                variant=\"outline\" \n                className=\"bg-white/70 border-blue-200 hover:bg-white text-blue-700 text-sm h-8 px-3 rounded-xl\"\n                onClick={() => navigate('/weather')}\n              >\n                More\n              </Button>\n            </div>\n\n            <div className=\"flex items-center justify-between mb-3\">\n              {/* Weather Info */}\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-12 h-12 bg-white/80 rounded-xl flex items-center justify-center shadow-sm\">\n                  {weather && !weatherLoading ? (\n                    <img \n                      src={weatherService.getWeatherIconUrl(weather.icon)} \n                      alt={weather.description}\n                      className=\"w-8 h-8\"\n                    />\n                  ) : (\n                    <Cloud className=\"w-6 h-6 text-blue-600\" />\n                  )}\n                </div>\n                <div>\n                  <div className=\"text-xl font-bold text-blue-900\">\n                    {weatherLoading ? '--°C' : weather ? `${weather.temperature}°C` : '--°C'}\n                  </div>\n                  <div className=\"text-sm text-blue-600 capitalize\">\n                    {weatherLoading ? 'Loading...' : weather?.description || 'No data'}\n                  </div>\n                </div>\n              </div>\n              \n              {/* Quick Stats */}\n              <div className=\"text-center\">\n                <div className=\"text-xs text-blue-600 mb-1\">Humidity</div>\n                <div className=\"text-sm font-semibold text-blue-800\">\n                  {weatherLoading ? '--%' : weather ? `${weather.humidity}%` : '--%'}\n                </div>\n              </div>\n            </div>\n\n          </CardContent>\n        </Card>\n\n\n        {/* AI Plant Diagnosis - Compact Green Style */}\n        <Card className=\"bg-gradient-to-r from-green-400 to-emerald-500 border-0 shadow-xl rounded-2xl transform hover:scale-[1.02] transition-all duration-200\">\n          <CardContent className=\"p-5\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex-1\">\n                <div className=\"bg-white/20 text-white text-sm font-medium px-3 py-1 rounded-full inline-block mb-3\">\n                  AI Powered\n                </div>\n                <h3 className=\"font-bold text-white text-xl mb-1\">Diagnose Plant Health</h3>\n                <p className=\"text-white/90 text-base\">Take a photo to check diseases</p>\n              </div>\n              <Button \n                onClick={() => navigate('/diagnose')}\n                className=\"bg-white text-green-500 hover:bg-white/90 font-bold rounded-xl px-6 py-3 flex items-center space-x-2 text-base active:scale-95 transition-transform ml-4\"\n              >\n                <Camera className=\"w-5 h-5\" />\n                <span>Start</span>\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Soil & Fertilizer Cards */}\n        <div className=\"space-y-4\">\n          <h2 className=\"text-xl font-bold text-text-secondary\">🧪 Soil & Fertilizer</h2>\n          <div className=\"space-y-3\">\n            <Card className=\"cursor-pointer active:scale-95 transition-transform rounded-2xl shadow-md border-0 bg-gradient-to-r from-amber-100/90 to-orange-100/90 hover:shadow-lg backdrop-blur-sm\" onClick={() => navigate('/soil-health')}>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-12 h-12 bg-gradient-to-br from-amber-200 to-amber-300 rounded-xl flex items-center justify-center shadow-md\">\n                    <TestTube className=\"w-6 h-6 text-amber-800\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-bold text-amber-900 text-base mb-1\">Soil Health</h3>\n                    <p className=\"text-amber-800 text-sm\">Check nutrient levels</p>\n                  </div>\n                  <ChevronRight className=\"w-5 h-5 text-amber-700\" />\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"cursor-pointer active:scale-95 transition-transform rounded-2xl shadow-md border-0 bg-gradient-to-r from-green-100/90 to-emerald-100/90 hover:shadow-lg backdrop-blur-sm\" onClick={() => navigate('/fertilizer-guide')}>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-12 h-12 bg-gradient-to-br from-green-200 to-green-300 rounded-xl flex items-center justify-center shadow-md\">\n                    <Beaker className=\"w-6 h-6 text-green-800\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-bold text-green-900 text-base mb-1\">Fertilizer Guide</h3>\n                    <p className=\"text-green-800 text-sm\">Get nutrient advice</p>\n                  </div>\n                  <ChevronRight className=\"w-5 h-5 text-green-700\" />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Marketplace Section */}\n        <div className=\"space-y-4\">\n          <h2 className=\"text-xl font-bold text-text-secondary\">🛒 Marketplace</h2>\n          \n          {/* Market Prices Preview */}\n          <Card className=\"rounded-3xl shadow-lg border-0 bg-gradient-to-br from-blue-100/80 to-indigo-100/80 backdrop-blur-sm\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-5\">\n                <h3 className=\"font-bold text-text-secondary text-xl\">Today's Mandi Prices</h3>\n                <TrendingUp className=\"w-6 h-6 text-agri-success\" />\n              </div>\n              <div className=\"space-y-4 mb-6\">\n                {marketPrices.slice(0, 3).map((item, index) => (\n                  <div key={index} className=\"flex items-center justify-between p-4 bg-gray-50 rounded-2xl\">\n                    <div className=\"flex-1\">\n                      <span className=\"font-bold text-text-secondary text-lg\">{item.crop}</span>\n                      <div className=\"text-base text-gray-600 mt-1\">\n                        {item.trend === 'up' ? '↗ Trending up' : '↘ Trending down'}\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"font-bold text-text-secondary text-lg\">{item.price}</div>\n                      <div className={`text-base font-semibold flex items-center space-x-2 justify-end ${\n                        item.trend === 'up' \n                          ? 'text-agri-success' \n                          : 'text-agri-danger'\n                      }`}>\n                        {item.trend === 'up' ? (\n                          <TrendingUp className=\"w-4 h-4\" />\n                        ) : (\n                          <TrendingUp className=\"w-4 h-4 rotate-180\" />\n                        )}\n                        <span>{item.change}</span>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n              \n              {/* Marketplace Action Buttons */}\n              <div className=\"grid grid-cols-2 gap-4\">\n                <Button \n                  variant=\"outline\" \n                  onClick={() => navigate('/market-prices')}\n                  className=\"flex items-center space-x-3 justify-center h-12 text-base font-semibold rounded-2xl active:scale-95 transition-transform\"\n                >\n                  <BarChart3 className=\"w-5 h-5\" />\n                  <span>See All Prices</span>\n                </Button>\n                <Button \n                  onClick={() => navigate('/sell')}\n                  className=\"bg-agri-success hover:bg-agri-success/90 flex items-center space-x-3 justify-center h-12 text-base font-semibold rounded-2xl active:scale-95 transition-transform\"\n                >\n                  <TrendingUp className=\"w-5 h-5\" />\n                  <span>Sell Crops</span>\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n          \n          {/* Additional Marketplace Cards */}\n          <div className=\"space-y-3\">\n            <Card className=\"cursor-pointer active:scale-95 transition-transform rounded-2xl shadow-md border-0 bg-gradient-to-r from-orange-100/90 to-red-100/90 hover:shadow-lg backdrop-blur-sm\" onClick={() => navigate('/shop')}>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-12 h-12 bg-gradient-to-br from-orange-200 to-orange-300 rounded-xl flex items-center justify-center shadow-md\">\n                    <ShoppingCart className=\"w-6 h-6 text-orange-800\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-bold text-orange-900 text-base mb-1\">Order Fertilizers</h3>\n                    <p className=\"text-orange-800 text-sm\">Shop nutrients</p>\n                  </div>\n                  <ChevronRight className=\"w-5 h-5 text-orange-700\" />\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"cursor-pointer active:scale-95 transition-transform rounded-2xl shadow-md border-0 bg-gradient-to-r from-purple-100/90 to-pink-100/90 hover:shadow-lg backdrop-blur-sm\" onClick={() => navigate('/shops')}>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-12 h-12 bg-gradient-to-br from-purple-200 to-purple-300 rounded-xl flex items-center justify-center shadow-md\">\n                    <MapPin className=\"w-6 h-6 text-purple-800\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-bold text-purple-900 text-base mb-1\">Nearby Shops</h3>\n                    <p className=\"text-purple-800 text-sm\">Find agri stores</p>\n                  </div>\n                  <ChevronRight className=\"w-5 h-5 text-purple-700\" />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* My Farm Section - 4 Cards */}\n        <div className=\"space-y-4\">\n          <h2 className=\"text-xl font-bold text-text-secondary\">🌱 My Farm</h2>\n          \n          <div className=\"space-y-3\">\n            <Card className=\"cursor-pointer active:scale-95 transition-transform rounded-2xl shadow-md border-0 bg-gradient-to-r from-red-100/90 to-pink-100/90 hover:shadow-lg backdrop-blur-sm\" onClick={() => navigate('/treatments')}>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-12 h-12 bg-gradient-to-br from-red-200 to-red-300 rounded-xl flex items-center justify-center shadow-md relative\">\n                    <Activity className=\"w-6 h-6 text-red-800\" />\n                    <div className=\"absolute -top-1 -right-1 w-5 h-5 bg-red-600 text-white text-xs font-bold rounded-full flex items-center justify-center shadow-sm\">\n                      2\n                    </div>\n                  </div>\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-bold text-red-900 text-base mb-1\">Active Treatments</h3>\n                    <p className=\"text-red-800 text-sm\">2 ongoing sprays</p>\n                  </div>\n                  <ChevronRight className=\"w-5 h-5 text-red-700\" />\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"cursor-pointer active:scale-95 transition-transform rounded-2xl shadow-md border-0 bg-gradient-to-r from-emerald-100/90 to-teal-100/90 hover:shadow-lg backdrop-blur-sm\" onClick={() => navigate('/guides')}>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-12 h-12 bg-gradient-to-br from-emerald-200 to-emerald-300 rounded-xl flex items-center justify-center shadow-md\">\n                    <Sprout className=\"w-6 h-6 text-emerald-800\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-bold text-emerald-900 text-base mb-1\">Cultivation Guides</h3>\n                    <p className=\"text-emerald-800 text-sm\">Growing tips</p>\n                  </div>\n                  <ChevronRight className=\"w-5 h-5 text-emerald-700\" />\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"cursor-pointer active:scale-95 transition-transform rounded-2xl shadow-md border-0 bg-gradient-to-r from-cyan-100/90 to-blue-100/90 hover:shadow-lg backdrop-blur-sm\" onClick={() => navigate('/orders')}>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-12 h-12 bg-gradient-to-br from-cyan-200 to-cyan-300 rounded-xl flex items-center justify-center shadow-md\">\n                    <Package className=\"w-6 h-6 text-cyan-800\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-bold text-cyan-900 text-base mb-1\">My Orders</h3>\n                    <p className=\"text-cyan-800 text-sm\">Track purchases</p>\n                  </div>\n                  <ChevronRight className=\"w-5 h-5 text-cyan-700\" />\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"cursor-pointer active:scale-95 transition-transform rounded-2xl shadow-md border-0 bg-gradient-to-r from-lime-100/90 to-green-100/90 hover:shadow-lg backdrop-blur-sm\" onClick={() => navigate('/sell')}>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-12 h-12 bg-gradient-to-br from-lime-200 to-lime-300 rounded-xl flex items-center justify-center shadow-md\">\n                    <Package className=\"w-6 h-6 text-lime-800\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-bold text-lime-900 text-base mb-1\">My Listings</h3>\n                    <p className=\"text-lime-800 text-sm\">Manage crop listings</p>\n                  </div>\n                  <ChevronRight className=\"w-5 h-5 text-lime-700\" />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      {/* Bottom Navigation - 5 Tabs */}\n      <div className=\"fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 shadow-lg z-50\">\n        <div className=\"flex items-center justify-between px-4 py-3\">\n          <button className=\"flex flex-col items-center space-y-1 px-2 py-2 min-w-0\">\n            <HomeIcon className=\"w-7 h-7 text-agri-primary\" />\n            <span className=\"text-sm font-semibold text-agri-primary\">Home</span>\n          </button>\n          \n          <button \n            onClick={() => navigate('/diagnose')}\n            className=\"flex flex-col items-center space-y-1 px-2 py-2 transition-all duration-200 hover:bg-agri-light rounded-2xl min-w-0 active:scale-95\"\n          >\n            <Camera className=\"w-7 h-7 text-agri-gray\" />\n            <span className=\"text-sm text-agri-gray\">Diagnose</span>\n          </button>\n          \n          <button \n            onClick={() => navigate('/advisory')}\n            className=\"flex flex-col items-center space-y-1 px-2 py-2 transition-all duration-200 hover:bg-agri-light rounded-2xl min-w-0 active:scale-95\"\n          >\n            <BookOpen className=\"w-7 h-7 text-agri-gray\" />\n            <span className=\"text-sm text-agri-gray\">Advisory</span>\n          </button>\n          \n          <button \n            onClick={() => navigate('/shop')}\n            className=\"flex flex-col items-center space-y-1 px-2 py-2 transition-all duration-200 hover:bg-agri-light rounded-2xl min-w-0 active:scale-95\"\n          >\n            <Store className=\"w-7 h-7 text-agri-gray\" />\n            <span className=\"text-sm text-agri-gray\">Shop</span>\n          </button>\n          \n          <button \n            onClick={() => navigate('/mitra')}\n            className=\"flex flex-col items-center space-y-1 px-2 py-2 transition-all duration-200 hover:bg-agri-light rounded-2xl min-w-0 active:scale-95\"\n          >\n            <MessageCircle className=\"w-7 h-7 text-agri-gray\" />\n            <span className=\"text-sm text-agri-gray\">Mitra</span>\n          </button>\n        </div>\n      </div>\n\n      {/* Notification Panel */}\n      <NotificationPanel \n        isOpen={showNotifications} \n        onClose={() => setShowNotifications(false)} \n      />\n    </div>\n  );\n};\n\nexport default Home;\n","size_bytes":23985},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/pages/Index.tsx":{"content":"// Update this page (the content is just a fallback if you fail to update the page)\n\nconst Index = () => {\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background\">\n      <div className=\"text-center\">\n        <h1 className=\"text-4xl font-bold mb-4\">Welcome to Your Blank App</h1>\n        <p className=\"text-xl text-muted-foreground\">Start building your amazing project here!</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Index;\n","size_bytes":469},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/pages/Landing.tsx":{"content":"import { useNavigate } from 'react-router-dom';\nimport { Sprout } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport LanguageSwitcher from '@/components/LanguageSwitcher';\nimport farmerHero from '@/assets/farmer-hero.jpg';\n\nconst Landing = () => {\n  const navigate = useNavigate();\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-agri-light/30 via-background to-agri-primary/5 overflow-hidden\">\n      {/* Subtle Background Patterns */}\n      <div className=\"absolute inset-0 overflow-hidden\">\n        <div className=\"absolute top-0 right-0 w-72 h-72 bg-agri-primary/5 rounded-full blur-3xl\" />\n        <div className=\"absolute bottom-0 left-0 w-72 h-72 bg-agri-success/5 rounded-full blur-3xl\" />\n      </div>\n\n      <div className=\"relative z-10 min-h-screen flex flex-col max-w-sm mx-auto px-4\">\n        {/* Header */}\n        <header className=\"flex items-center justify-between py-6\">\n          {/* Logo and Tagline */}\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-14 h-14 bg-gradient-to-br from-green-500 to-emerald-600 rounded-3xl flex items-center justify-center shadow-lg\">\n              <Sprout className=\"w-8 h-8 text-white\" />\n            </div>\n            <div>\n              <h1 className=\"text-2xl font-bold bg-gradient-to-r from-green-600 to-emerald-600 bg-clip-text text-transparent\">\n                KisanMitra\n              </h1>\n              <p className=\"text-sm text-gray-600 font-medium\">\n                Smart Farming Assistant\n              </p>\n            </div>\n          </div>\n\n          {/* Language Switcher */}\n          <LanguageSwitcher />\n        </header>\n\n        {/* Main Content */}\n        <main className=\"flex-1 flex flex-col items-center justify-center space-y-10\">\n          {/* Hero Image */}\n          <div className=\"relative mb-4\">\n            <div className=\"w-72 h-72 rounded-full overflow-hidden shadow-2xl border-4 border-white/90 bg-white p-2\">\n              <img \n                src={farmerHero} \n                alt=\"Happy farmer with mobile technology\" \n                className=\"w-full h-full object-cover rounded-full\"\n              />\n            </div>\n            {/* Enhanced Floating Elements */}\n            <div className=\"absolute -top-3 -right-3 w-10 h-10 bg-gradient-to-br from-green-400 to-emerald-500 rounded-full shadow-lg animate-bounce flex items-center justify-center\" style={{ animationDelay: '0.5s' }}>\n              <span className=\"text-white text-lg\">🌱</span>\n            </div>\n            <div className=\"absolute -bottom-3 -left-3 w-8 h-8 bg-gradient-to-br from-emerald-500 to-green-600 rounded-full shadow-lg animate-bounce flex items-center justify-center\" style={{ animationDelay: '1s' }}>\n              <span className=\"text-white text-sm\">📱</span>\n            </div>\n            <div className=\"absolute top-4 -left-4 w-6 h-6 bg-yellow-400 rounded-full shadow-md animate-pulse\" style={{ animationDelay: '1.5s' }} />\n          </div>\n\n          {/* Tagline */}\n          <div className=\"text-center space-y-4\">\n            <h2 className=\"text-3xl font-bold text-gray-800 leading-tight\">\n              Your Smart Farming Assistant\n            </h2>\n            <p className=\"text-gray-600 text-base max-w-sm mx-auto leading-relaxed px-2\">\n              Get instant crop advice, disease diagnosis, and weather updates to boost your farm productivity\n            </p>\n          </div>\n\n          {/* CTA Buttons */}\n          <div className=\"w-full space-y-6 pt-6\">\n            <div className=\"space-y-4\">\n              <Button\n                onClick={() => navigate('/signup')}\n                className=\"w-full h-16 bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 text-white font-bold text-xl shadow-xl hover:shadow-2xl transition-all duration-300 transform active:scale-95 rounded-2xl\"\n              >\n                Get Started\n              </Button>\n              <Button\n                onClick={() => navigate('/login')}\n                variant=\"outline\"\n                className=\"w-full h-14 font-semibold text-lg border-2 border-green-600 text-green-600 hover:bg-green-600 hover:text-white transition-all duration-300 transform active:scale-95 shadow-lg hover:shadow-xl rounded-2xl\"\n              >\n                Login\n              </Button>\n            </div>\n            \n          </div>\n        </main>\n\n      </div>\n    </div>\n  );\n};\n\nexport default Landing;","size_bytes":4501},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/pages/Login.tsx":{"content":"import { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Phone, Sprout, User } from 'lucide-react';\nimport LanguageSwitcher from '@/components/LanguageSwitcher';\nimport { useToast } from '@/hooks/use-toast';\nimport CustomInput from '@/components/CustomInput';\nimport PINInput from '@/components/PINInput';\nimport AuthButton from '@/components/AuthButton';\n\nconst Login = () => {\n  const navigate = useNavigate();\n  const { toast } = useToast();\n  const [loading, setLoading] = useState(false);\n  const [formData, setFormData] = useState({\n    mobile: '',\n    pin: ''\n  });\n\n  const getMobileValidation = () => {\n    if (formData.mobile.length === 0) return undefined;\n    const isValid = formData.mobile.length === 10 && /^[6-9]\\d{9}$/.test(formData.mobile);\n    return {\n      isValid,\n      message: isValid ? \"Valid mobile number\" : \"Enter a valid 10-digit Indian mobile number\"\n    };\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.mobile || !formData.pin) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please enter mobile number and PIN\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (formData.mobile.length !== 10) {\n      toast({\n        title: \"Invalid Mobile Number\",\n        description: \"Please enter 10 digit mobile number\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (formData.pin.length !== 4) {\n      toast({\n        title: \"Invalid PIN\",\n        description: \"PIN must be 4 digits\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setLoading(true);\n    \n    // Check if user exists and authenticate\n    setTimeout(() => {\n      const existingUser = localStorage.getItem('kisanmitra_user');\n      const authToken = localStorage.getItem('kisanmitra_auth_token');\n      const expectedToken = btoa(`${formData.mobile}:${formData.pin}`);\n      \n      // Check if user exists or create new user\n      if (existingUser) {\n        const userData = JSON.parse(existingUser);\n        \n        // For existing users, check if credentials match OR if no auth token exists (fresh login)\n        if (!authToken || authToken === expectedToken) {\n          // Valid returning user or first login after logout\n          userData.isLoggedIn = true;\n          localStorage.setItem('kisanmitra_user', JSON.stringify(userData));\n          localStorage.setItem('kisanmitra_auth_token', expectedToken); // Save auth token\n          \n          toast({\n            title: `Welcome back, ${userData.name}! 🌾`,\n            description: \"Successfully logged in\",\n          });\n          navigate('/home');\n        } else {\n          // Wrong PIN for existing user\n          toast({\n            title: \"Login Failed\",\n            description: \"Invalid PIN. Please check your credentials.\",\n            variant: \"destructive\",\n          });\n        }\n      } else {\n        // New user - create account\n        const newUser = {\n          name: `Farmer ${formData.mobile.slice(-4)}`,\n          phone: formData.mobile,\n          location: 'India',\n          state: 'India',\n          isLoggedIn: true,\n          joinedDate: new Date().toISOString()\n        };\n        \n        localStorage.setItem('kisanmitra_user', JSON.stringify(newUser));\n        localStorage.setItem('kisanmitra_auth_token', expectedToken); // Save auth token\n        \n        toast({\n          title: `Welcome to KisanMitra! 🌾`,\n          description: \"Account created successfully\",\n        });\n        navigate('/home');\n      }\n      setLoading(false);\n    }, 1500);\n  };\n\n  return (\n    <div className=\"mobile-container min-h-screen bg-gradient-to-br from-agri-light to-white\">\n      {/* Subtle Background Pattern */}\n      <div className=\"absolute inset-0 opacity-5\">\n        <div className=\"absolute inset-0\" style={{\n          backgroundImage: `url(\"data:image/svg+xml,%3Csvg width='40' height='40' viewBox='0 0 40 40' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='%23059669' fill-opacity='0.1'%3E%3Cpath d='M20 20c0-5.5-4.5-10-10-10s-10 4.5-10 10 4.5 10 10 10 10-4.5 10-10zm10 0c0-5.5-4.5-10-10-10s-10 4.5-10 10 4.5 10 10 10 10-4.5 10-10z'/%3E%3C/g%3E%3C/svg%3E\")`,\n        }} />\n      </div>\n\n      <div className=\"relative z-10 min-h-screen flex flex-col\">\n        {/* Top Bar */}\n        <div className=\"flex items-center justify-between p-4 bg-white/80 backdrop-blur-sm\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-agri-primary rounded-xl flex items-center justify-center\">\n              <Sprout className=\"w-6 h-6 text-white\" />\n            </div>\n            <div>\n              <h1 className=\"text-lg font-bold text-agri-primary\">KisanMitra</h1>\n              <p className=\"text-xs text-agri-gray\">Smart Farming Assistant</p>\n            </div>\n          </div>\n          <LanguageSwitcher />\n        </div>\n\n        {/* Hero Section */}\n        <div className=\"text-center px-6 pt-12 pb-8\">\n          <div className=\"w-24 h-24 bg-gradient-to-br from-green-400 to-green-600 rounded-3xl mx-auto mb-6 flex items-center justify-center shadow-xl animate-pulse\">\n            <User className=\"w-12 h-12 text-white\" />\n          </div>\n          <h1 className=\"text-3xl font-bold bg-gradient-to-r from-green-600 to-green-500 bg-clip-text text-transparent mb-3\">\n            🌱 Welcome Back, Farmer\n          </h1>\n          <p className=\"text-lg text-gray-600 leading-relaxed\">\n            Continue your smart farming journey\n          </p>\n        </div>\n\n        {/* Form Container */}\n        <div className=\"flex-1 px-6\">\n          <div className=\"bg-white rounded-3xl p-8 shadow-2xl border border-green-100\">\n            <form onSubmit={handleSubmit} className=\"space-y-8\">\n              {/* Mobile Number */}\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-semibold text-gray-700\">Mobile Number</label>\n                <div className=\"relative\">\n                  <div className=\"absolute left-4 top-1/2 transform -translate-y-1/2 flex items-center space-x-2 z-10\">\n                    <Phone className=\"w-5 h-5 text-green-500\" />\n                    <span className=\"text-gray-500 font-medium\">🇮🇳 +91</span>\n                  </div>\n                  <input\n                    type=\"tel\"\n                    value={formData.mobile}\n                    onChange={(e) => setFormData(prev => ({ ...prev, mobile: e.target.value.replace(/\\D/g, '').slice(0, 10) }))}\n                    placeholder=\"10 digit number\"\n                    className=\"w-full h-16 pl-24 pr-4 text-lg font-medium bg-gray-50 border-2 border-gray-200 rounded-2xl focus:outline-none focus:border-green-500 focus:ring-4 focus:ring-green-100 transition-all duration-200\"\n                  />\n                </div>\n                {getMobileValidation() && (\n                  <p className={`text-sm ${getMobileValidation()?.isValid ? 'text-green-600' : 'text-red-500'}`}>\n                    {getMobileValidation()?.message}\n                  </p>\n                )}\n              </div>\n\n              {/* PIN Entry */}\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-semibold text-gray-700\">4-Digit PIN</label>\n                <PINInput\n                  value={formData.pin}\n                  onChange={(value) => setFormData(prev => ({ ...prev, pin: value }))}\n                  placeholder=\"Enter PIN\"\n                  className=\"space-y-3\"\n                />\n              </div>\n\n              {/* Login Button - Full Width Green Gradient */}\n              <div className=\"pt-6\">\n                <button\n                  type=\"submit\"\n                  disabled={loading || !formData.mobile || !formData.pin}\n                  className=\"w-full h-16 bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white text-xl font-bold rounded-2xl shadow-lg hover:shadow-xl transform hover:scale-[1.02] active:scale-[0.98] transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed\"\n                >\n                  {loading ? (\n                    <div className=\"flex items-center justify-center space-x-2\">\n                      <div className=\"w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n                      <span>Logging in...</span>\n                    </div>\n                  ) : (\n                    'Login to KisanMitra'\n                  )}\n                </button>\n              </div>\n\n              {/* Footer Links */}\n              <div className=\"text-center space-y-6 pt-8\">\n                <button \n                  type=\"button\"\n                  className=\"text-green-600 font-semibold hover:text-green-700 hover:underline transition-colors\"\n                  onClick={() => {\n                    toast({\n                      title: \"Forgot PIN?\",\n                      description: \"Contact support at 1800-KISAN for PIN reset assistance.\",\n                    });\n                  }}\n                >\n                  Forgot PIN?\n                </button>\n                \n                <div className=\"flex items-center justify-center space-x-2 text-gray-600\">\n                  <span>New to KisanMitra?</span>\n                  <button \n                    type=\"button\"\n                    onClick={() => navigate('/signup')}\n                    className=\"text-green-600 font-bold hover:text-green-700 hover:underline transition-colors\"\n                  >\n                    Create Account →\n                  </button>\n                </div>\n              </div>\n            </form>\n          </div>\n        </div>\n\n        {/* Bottom Spacing */}\n        <div className=\"h-6\" />\n      </div>\n    </div>\n  );\n};\n\nexport default Login;","size_bytes":9864},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/pages/MarketDetails.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { \n  ArrowLeft,\n  MapPin,\n  TrendingUp, \n  TrendingDown, \n  Bell,\n  BellOff,\n  Clock,\n  RefreshCw\n} from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Switch } from '@/components/ui/switch';\n\nconst MarketDetails = () => {\n  const navigate = useNavigate();\n  const { marketId } = useParams();\n  const [notificationsEnabled, setNotificationsEnabled] = useState(false);\n  const [lastUpdated, setLastUpdated] = useState(new Date());\n\n  // Mock market data - same as MarketPrices but with complete crop lists\n  const marketData = [\n    {\n      id: 1,\n      name: 'Azadpur Mandi',\n      location: 'Delhi',\n      distance: '12 km',\n      crops: [\n        { name: 'Tomato', price: '₹16/kg', change: '+8%', trend: 'up', previousPrice: '₹14.80/kg' },\n        { name: 'Onion', price: '₹25/kg', change: '+12%', trend: 'up', previousPrice: '₹22.30/kg' },\n        { name: 'Potato', price: '₹18/kg', change: '-5%', trend: 'down', previousPrice: '₹19/kg' },\n        { name: 'Carrot', price: '₹22/kg', change: '+3%', trend: 'up', previousPrice: '₹21.30/kg' },\n        { name: 'Cabbage', price: '₹12/kg', change: '0%', trend: 'stable', previousPrice: '₹12/kg' },\n        { name: 'Cauliflower', price: '₹20/kg', change: '+15%', trend: 'up', previousPrice: '₹17.40/kg' },\n        { name: 'Spinach', price: '₹18/kg', change: '-2%', trend: 'down', previousPrice: '₹18.40/kg' },\n        { name: 'Brinjal', price: '₹24/kg', change: '+7%', trend: 'up', previousPrice: '₹22.40/kg' },\n        { name: 'Okra', price: '₹35/kg', change: '+10%', trend: 'up', previousPrice: '₹31.80/kg' },\n        { name: 'Green Beans', price: '₹45/kg', change: '-3%', trend: 'down', previousPrice: '₹46.40/kg' }\n      ]\n    },\n    {\n      id: 2,\n      name: 'Ghazipur Mandi',\n      location: 'Delhi',\n      distance: '18 km',\n      crops: [\n        { name: 'Wheat', price: '₹2,150/qtl', change: '+2%', trend: 'up', previousPrice: '₹2,105/qtl' },\n        { name: 'Paddy', price: '₹1,850/qtl', change: '-3%', trend: 'down', previousPrice: '₹1,907/qtl' },\n        { name: 'Mustard', price: '₹4,200/qtl', change: '+5%', trend: 'up', previousPrice: '₹4,000/qtl' },\n        { name: 'Gram', price: '₹3,800/qtl', change: '+1%', trend: 'up', previousPrice: '₹3,762/qtl' },\n        { name: 'Barley', price: '₹1,650/qtl', change: '+4%', trend: 'up', previousPrice: '₹1,587/qtl' },\n        { name: 'Maize', price: '₹1,420/qtl', change: '-1%', trend: 'down', previousPrice: '₹1,434/qtl' },\n        { name: 'Bajra', price: '₹1,380/qtl', change: '+3%', trend: 'up', previousPrice: '₹1,340/qtl' },\n        { name: 'Jowar', price: '₹1,250/qtl', change: '+2%', trend: 'up', previousPrice: '₹1,225/qtl' }\n      ]\n    },\n    {\n      id: 3,\n      name: 'Najafgarh Mandi',\n      location: 'Delhi',\n      distance: '25 km',\n      crops: [\n        { name: 'Cauliflower', price: '₹15/kg', change: '+10%', trend: 'up', previousPrice: '₹13.60/kg' },\n        { name: 'Peas', price: '₹35/kg', change: '-8%', trend: 'down', previousPrice: '₹38/kg' },\n        { name: 'Spinach', price: '₹20/kg', change: '+15%', trend: 'up', previousPrice: '₹17.40/kg' },\n        { name: 'Radish', price: '₹8/kg', change: '+6%', trend: 'up', previousPrice: '₹7.55/kg' },\n        { name: 'Lettuce', price: '₹25/kg', change: '+5%', trend: 'up', previousPrice: '₹23.80/kg' },\n        { name: 'Coriander', price: '₹40/kg', change: '-10%', trend: 'down', previousPrice: '₹44.40/kg' },\n        { name: 'Mint', price: '₹50/kg', change: '+8%', trend: 'up', previousPrice: '₹46.30/kg' },\n        { name: 'Fenugreek', price: '₹30/kg', change: '+12%', trend: 'up', previousPrice: '₹26.80/kg' }\n      ]\n    },\n    {\n      id: 4,\n      name: 'Okhla Mandi',\n      location: 'Delhi',\n      distance: '22 km',\n      crops: [\n        { name: 'Apple', price: '₹120/kg', change: '+5%', trend: 'up', previousPrice: '₹114.30/kg' },\n        { name: 'Orange', price: '₹60/kg', change: '-2%', trend: 'down', previousPrice: '₹61.20/kg' },\n        { name: 'Banana', price: '₹40/kg', change: '+8%', trend: 'up', previousPrice: '₹37.00/kg' },\n        { name: 'Grapes', price: '₹80/kg', change: '+3%', trend: 'up', previousPrice: '₹77.70/kg' },\n        { name: 'Pomegranate', price: '₹150/kg', change: '+7%', trend: 'up', previousPrice: '₹140.20/kg' },\n        { name: 'Mango', price: '₹90/kg', change: '-5%', trend: 'down', previousPrice: '₹94.70/kg' },\n        { name: 'Guava', price: '₹45/kg', change: '+10%', trend: 'up', previousPrice: '₹40.90/kg' },\n        { name: 'Papaya', price: '₹25/kg', change: '+4%', trend: 'up', previousPrice: '₹24.00/kg' }\n      ]\n    }\n  ];\n\n  const market = marketData.find(m => m.id === parseInt(marketId || '1'));\n\n  const getTrendIcon = (trend: string) => {\n    switch (trend) {\n      case 'up':\n        return <TrendingUp className=\"w-4 h-4\" />;\n      case 'down':\n        return <TrendingDown className=\"w-4 h-4\" />;\n      default:\n        return <div className=\"w-4 h-4 rounded-full bg-gray-400\" />;\n    }\n  };\n\n  const getTrendColor = (trend: string) => {\n    switch (trend) {\n      case 'up':\n        return 'text-green-600';\n      case 'down':\n        return 'text-red-600';\n      default:\n        return 'text-gray-600';\n    }\n  };\n\n  const handleRefresh = () => {\n    setLastUpdated(new Date());\n  };\n\n  if (!market) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-blue-50 p-4\">\n        <div className=\"text-center py-12\">\n          <h3 className=\"text-lg font-medium text-gray-600 mb-2\">Market not found</h3>\n          <Button onClick={() => navigate('/market-prices')}>\n            Back to Markets\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-blue-50 pb-20\">\n      {/* Header */}\n      <div className=\"bg-white shadow-sm border-b border-green-100 sticky top-0 z-10\">\n        <div className=\"px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => navigate(-1)}\n              className=\"text-gray-600 hover:text-green-600 p-2\"\n            >\n              <ArrowLeft className=\"w-5 h-5 text-gray-600\" />\n            </Button>\n            <div className=\"flex-1 text-center\">\n              <h1 className=\"text-xl font-bold text-gray-900\">{market.name}</h1>\n              <div className=\"flex items-center justify-center space-x-2 text-sm text-gray-600\">\n                <MapPin className=\"w-4 h-4\" />\n                <span>{market.location} • {market.distance}</span>\n                <span>•</span>\n                <Clock className=\"w-4 h-4\" />\n                <span>Updated: {lastUpdated.toLocaleTimeString()}</span>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={handleRefresh}\n                  className=\"p-1 hover:bg-gray-100 rounded-full\"\n                >\n                  <RefreshCw className=\"w-4 h-4 text-green-600\" />\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          {/* Notification Toggle */}\n          <div className=\"flex items-center justify-center mt-4 bg-gray-50 rounded-xl p-3\">\n            <div className=\"flex items-center space-x-3\">\n              {notificationsEnabled ? (\n                <Bell className=\"w-5 h-5 text-blue-600\" />\n              ) : (\n                <BellOff className=\"w-5 h-5 text-gray-400\" />\n              )}\n              <span className=\"text-sm font-medium text-gray-700\">\n                Price Notifications\n              </span>\n              <Switch\n                checked={notificationsEnabled}\n                onCheckedChange={setNotificationsEnabled}\n              />\n              <span className=\"text-xs text-gray-500\">\n                {notificationsEnabled ? 'Enabled' : 'Disabled'}\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"px-6 py-6\">\n        <Card className=\"bg-white rounded-3xl shadow-lg border border-gray-100 overflow-hidden\">\n          <CardHeader className=\"bg-gradient-to-r from-green-50 to-blue-50 border-b border-gray-200 p-5\">\n            <CardTitle className=\"text-lg font-bold text-gray-900\">\n              All Crop Prices ({market.crops.length} items)\n            </CardTitle>\n          </CardHeader>\n\n          <CardContent className=\"p-0\">\n            <div className=\"space-y-0\">\n              {market.crops.map((crop, index) => (\n                <div key={index} className=\"flex items-center justify-between p-5 border-b border-gray-100 last:border-b-0 hover:bg-gray-50 transition-colors\">\n                  <div className=\"flex-1\">\n                    <h4 className=\"font-semibold text-gray-900 text-base\">{crop.name}</h4>\n                    <p className=\"text-sm text-gray-500\">Previous: {crop.previousPrice}</p>\n                  </div>\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"text-right\">\n                      <div className=\"font-bold text-lg text-gray-900\">{crop.price}</div>\n                      <div className={`text-sm font-medium flex items-center space-x-1 ${getTrendColor(crop.trend)}`}>\n                        {getTrendIcon(crop.trend)}\n                        <span>{crop.change}</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default MarketDetails;","size_bytes":9921},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/pages/MarketPrices.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { \n  Search, \n  Filter, \n  TrendingUp, \n  TrendingDown, \n  Bell, \n  ArrowLeft,\n  MapPin,\n  Clock,\n  RefreshCw,\n  Plus\n} from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\n\nconst MarketPrices = () => {\n  const navigate = useNavigate();\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedFilter, setSelectedFilter] = useState('all');\n  const [lastUpdated, setLastUpdated] = useState(new Date());\n  const [isRefreshing, setIsRefreshing] = useState(false);\n\n  // Mock market data - in real app this would come from API\n  const marketData = [\n    {\n      id: 1,\n      name: 'Azadpur Mandi',\n      location: 'Delhi',\n      distance: '12 km',\n      crops: [\n        { name: 'Tomato', price: '₹16/kg', change: '+8%', trend: 'up', previousPrice: '₹14.80/kg' },\n        { name: 'Onion', price: '₹25/kg', change: '+12%', trend: 'up', previousPrice: '₹22.30/kg' },\n        { name: 'Potato', price: '₹18/kg', change: '-5%', trend: 'down', previousPrice: '₹19/kg' },\n        { name: 'Carrot', price: '₹22/kg', change: '+3%', trend: 'up', previousPrice: '₹21.30/kg' },\n        { name: 'Cabbage', price: '₹12/kg', change: '0%', trend: 'stable', previousPrice: '₹12/kg' }\n      ]\n    },\n    {\n      id: 2,\n      name: 'Ghazipur Mandi',\n      location: 'Delhi',\n      distance: '18 km',\n      crops: [\n        { name: 'Wheat', price: '₹2,150/qtl', change: '+2%', trend: 'up', previousPrice: '₹2,105/qtl' },\n        { name: 'Paddy', price: '₹1,850/qtl', change: '-3%', trend: 'down', previousPrice: '₹1,907/qtl' },\n        { name: 'Mustard', price: '₹4,200/qtl', change: '+5%', trend: 'up', previousPrice: '₹4,000/qtl' },\n        { name: 'Gram', price: '₹3,800/qtl', change: '+1%', trend: 'up', previousPrice: '₹3,762/qtl' }\n      ]\n    },\n    {\n      id: 3,\n      name: 'Najafgarh Mandi',\n      location: 'Delhi',\n      distance: '25 km',\n      crops: [\n        { name: 'Cauliflower', price: '₹15/kg', change: '+10%', trend: 'up', previousPrice: '₹13.60/kg' },\n        { name: 'Peas', price: '₹35/kg', change: '-8%', trend: 'down', previousPrice: '₹38/kg' },\n        { name: 'Spinach', price: '₹20/kg', change: '+15%', trend: 'up', previousPrice: '₹17.40/kg' },\n        { name: 'Radish', price: '₹8/kg', change: '+6%', trend: 'up', previousPrice: '₹7.55/kg' }\n      ]\n    },\n    {\n      id: 4,\n      name: 'Okhla Mandi',\n      location: 'Delhi',\n      distance: '22 km',\n      crops: [\n        { name: 'Brinjal', price: '₹24/kg', change: '+7%', trend: 'up', previousPrice: '₹22.40/kg' },\n        { name: 'Okra', price: '₹28/kg', change: '-4%', trend: 'down', previousPrice: '₹29.20/kg' },\n        { name: 'Bottle Gourd', price: '₹18/kg', change: '+2%', trend: 'up', previousPrice: '₹17.65/kg' },\n        { name: 'Bitter Gourd', price: '₹32/kg', change: '+9%', trend: 'up', previousPrice: '₹29.35/kg' }\n      ]\n    }\n  ];\n\n  const filteredMarkets = marketData.filter(market => \n    market.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    market.crops.some(crop => crop.name.toLowerCase().includes(searchQuery.toLowerCase()))\n  );\n\n  const handleRefresh = async () => {\n    setIsRefreshing(true);\n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 1500));\n    setLastUpdated(new Date());\n    setIsRefreshing(false);\n  };\n\n  const getTrendIcon = (trend: string) => {\n    switch (trend) {\n      case 'up':\n        return <TrendingUp className=\"w-4 h-4 text-green-600\" />;\n      case 'down':\n        return <TrendingDown className=\"w-4 h-4 text-red-600\" />;\n      default:\n        return <div className=\"w-4 h-4 rounded-full bg-gray-400\" />;\n    }\n  };\n\n  const getTrendColor = (trend: string) => {\n    switch (trend) {\n      case 'up':\n        return 'text-green-600';\n      case 'down':\n        return 'text-red-600';\n      default:\n        return 'text-gray-600';\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-blue-50\">\n      {/* Header */}\n      <div className=\"bg-white shadow-sm border-b border-green-100 sticky top-0 z-20\">\n        <div className=\"px-6 py-4\">\n          <div className=\"flex items-center space-x-4 mb-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => navigate(-1)}\n              className=\"p-2 hover:bg-gray-100 rounded-full\"\n            >\n              <ArrowLeft className=\"w-5 h-5 text-gray-600\" />\n            </Button>\n            <div className=\"flex-1\">\n              <h1 className=\"text-2xl font-bold text-gray-900\">Market Prices</h1>\n              <div className=\"flex items-center space-x-2 text-sm text-gray-600\">\n                <Clock className=\"w-4 h-4\" />\n                <span>Last updated: {lastUpdated.toLocaleTimeString()}</span>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={handleRefresh}\n                  disabled={isRefreshing}\n                  className=\"p-1 hover:bg-gray-100 rounded-full\"\n                >\n                  <RefreshCw className={`w-4 h-4 text-green-600 ${isRefreshing ? 'animate-spin' : ''}`} />\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          {/* Search and Filter */}\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"flex-1 relative\">\n              <Search className=\"w-5 h-5 text-gray-400 absolute left-3 top-1/2 transform -translate-y-1/2\" />\n              <Input\n                placeholder=\"Search crops or markets...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10 pr-4 py-3 rounded-xl border-2 border-gray-200 focus:border-green-500 bg-white\"\n              />\n            </div>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"px-4 py-3 rounded-xl border-2 border-gray-200 hover:border-green-500\"\n            >\n              <Filter className=\"w-4 h-4 text-gray-600\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"px-6 py-6 space-y-6\">\n        {/* Market Cards */}\n        {filteredMarkets.map((market) => (\n          <Card key={market.id} className=\"bg-white rounded-3xl shadow-lg border border-gray-100 overflow-hidden\">\n            {/* Market Header */}\n            <CardHeader className=\"bg-gradient-to-r from-green-50 to-blue-50 border-b border-gray-200 p-5\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"p-3 bg-white rounded-xl shadow-sm\">\n                    <MapPin className=\"w-6 h-6 text-green-600\" />\n                  </div>\n                  <div>\n                    <CardTitle className=\"text-lg font-bold text-gray-900\">{market.name}</CardTitle>\n                    <div className=\"flex items-center space-x-2 text-sm text-gray-600\">\n                      <span>{market.location}</span>\n                      <span>•</span>\n                      <span className=\"bg-blue-100 text-blue-700 px-2 py-1 rounded-full text-xs font-medium\">\n                        {market.distance}\n                      </span>\n                      <span>•</span>\n                      <Bell className=\"w-4 h-4 text-gray-400\" />\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardHeader>\n\n            {/* Crops List - Top 5 */}\n            <CardContent className=\"p-0\">\n              <div className=\"space-y-0\">\n                {market.crops.slice(0, 5).map((crop, index) => (\n                  <div key={index} className=\"flex items-center justify-between p-5 border-b border-gray-100 last:border-b-0 hover:bg-gray-50 transition-colors\">\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-semibold text-gray-900 text-base\">{crop.name}</h4>\n                      <p className=\"text-sm text-gray-500\">Previous: {crop.previousPrice}</p>\n                    </div>\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"text-right\">\n                        <div className=\"font-bold text-lg text-gray-900\">{crop.price}</div>\n                        <div className={`text-sm font-medium flex items-center space-x-1 ${getTrendColor(crop.trend)}`}>\n                          {getTrendIcon(crop.trend)}\n                          <span>{crop.change}</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n                {/* More Info Button */}\n                <div className=\"p-4 border-t border-gray-200 bg-gray-50\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"w-full\"\n                    onClick={() => navigate(`/market-details/${market.id}`)}\n                  >\n                    More Info\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n\n        {/* No Results */}\n        {filteredMarkets.length === 0 && (\n          <div className=\"text-center py-12\">\n            <div className=\"p-4 bg-gray-100 rounded-full inline-block mb-4\">\n              <Search className=\"w-8 h-8 text-gray-400\" />\n            </div>\n            <h3 className=\"text-lg font-medium text-gray-600 mb-2\">No markets found</h3>\n            <p className=\"text-gray-500\">Try adjusting your search terms</p>\n          </div>\n        )}\n      </div>\n\n\n      {/* Pull to refresh hint (for mobile) */}\n      <div className=\"pb-20\"> {/* Extra padding for mobile navigation */}\n        <div className=\"text-center py-4 text-gray-500 text-sm\">\n          Pull down to refresh prices\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MarketPrices;","size_bytes":10218},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/pages/Mitra.tsx":{"content":"import { useState, useEffect, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { ArrowLeft, Send } from 'lucide-react';\n\ninterface Message {\n  id: number;\n  text: string;\n  isUser: boolean;\n}\n\nconst Mitra = () => {\n  const navigate = useNavigate();\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [inputMessage, setInputMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const [messageIdCounter, setMessageIdCounter] = useState(1);\n\n  // Get API key from environment\n  const API_KEY = import.meta.env.VITE_GEMINI_API_KEY || \"AIzaSyCzOBeYUKB6MsPt3bKkUZ0vS8_4LDYmf4Y\";\n\n  // Scroll to bottom when messages change\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  // Initial welcome message\n  useEffect(() => {\n    const welcomeMessage: Message = {\n      id: 0,\n      text: \"Hello! I'm Kisan Mitra, your digital assistant for farming. How can I help you today?\",\n      isUser: false\n    };\n    setMessages([welcomeMessage]);\n  }, []);\n\n  const sendMessage = async () => {\n    if (!inputMessage.trim()) return;\n\n    // Add user message\n    const userMessage: Message = {\n      id: messageIdCounter,\n      text: inputMessage,\n      isUser: true\n    };\n    \n    setMessages(prev => [...prev, userMessage]);\n    setMessageIdCounter(prev => prev + 1);\n    const currentMessage = inputMessage;\n    setInputMessage('');\n    setIsLoading(true);\n\n    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${API_KEY}`;\n    const systemPrompt = \"You are Hariyali Mitra, an expert AI farming assistant for Indian farmers using the KisanMitra agricultural support app. You help farmers with: crop cultivation, plant disease, soil health, weather, pest control, market prices, and agricultural best practices for Indian conditions. Speak in simple, everyday language and be supportive. Provide actionable, practical advice relevant to Indian farming.\";\n\n    try {\n      const response = await fetch(apiUrl, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          contents: [{\n            role: \"user\",\n            parts: [{ text: currentMessage }]\n          }],\n          tools: [{ \"google_search\": {} }],\n          systemInstruction: {\n            parts: [{ text: systemPrompt }]\n          },\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n\n      const result = await response.json();\n      const botResponse = result.candidates[0].content.parts[0].text;\n      \n      // Add bot response\n      const botMessage: Message = {\n        id: messageIdCounter + 1,\n        text: botResponse,\n        isUser: false\n      };\n      \n      setMessages(prev => [...prev, botMessage]);\n      setMessageIdCounter(prev => prev + 2);\n      \n    } catch (error) {\n      console.error('Error sending message:', error);\n      \n      // Add error message\n      const errorMessage: Message = {\n        id: messageIdCounter + 1,\n        text: \"I am having trouble connecting to the network. Please check your internet connection.\",\n        isUser: false\n      };\n      \n      setMessages(prev => [...prev, errorMessage]);\n      setMessageIdCounter(prev => prev + 2);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      sendMessage();\n    }\n  };\n\n  return (\n    <div className=\"bg-gray-100 min-h-screen flex items-center justify-center p-4\">\n      <div className=\"bg-white rounded-2xl shadow-xl w-full max-w-md h-[80vh] flex flex-col overflow-hidden\">\n        \n        {/* Chat Header */}\n        <div className=\"bg-green-600 text-white p-4 flex items-center justify-between rounded-t-2xl shadow-md\">\n          <button\n            onClick={() => navigate(-1)}\n            className=\"text-white hover:bg-white/20 rounded-full p-2 transition-colors\"\n          >\n            <ArrowLeft className=\"w-5 h-5\" />\n          </button>\n          <h1 className=\"text-xl font-bold\">Kisan Mitra</h1>\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\" className=\"w-6 h-6\">\n            <path fillRule=\"evenodd\" d=\"M12 2.25c-5.385 0-9.75 4.365-9.75 9.75s4.365 9.75 9.75 9.75 9.75-4.365 9.75-9.75S17.385 2.25 12 2.25Zm-3.25 9a.75.75 0 0 0 0 1.5h6.5a.75.75 0 0 0 0-1.5h-6.5Z\" clipRule=\"evenodd\" />\n          </svg>\n        </div>\n\n        {/* Chat Messages Container */}\n        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n          {messages.map((message) => (\n            <div key={message.id} className={`flex ${message.isUser ? 'justify-end' : 'justify-start'}`}>\n              <div className={`${\n                message.isUser \n                  ? 'bg-green-500 text-white' \n                  : 'bg-gray-200 text-gray-800'\n              } p-3 rounded-xl max-w-[80%] shadow-sm`}>\n                {message.text}\n              </div>\n            </div>\n          ))}\n          \n          {isLoading && (\n            <div className=\"flex justify-start\">\n              <div className=\"bg-gray-200 text-gray-800 p-3 rounded-xl shadow-sm animate-pulse\">\n                Typing...\n              </div>\n            </div>\n          )}\n          <div ref={messagesEndRef} />\n        </div>\n\n        {/* Chat Input and Send Button */}\n        <div className=\"p-4 border-t border-gray-200 flex items-center space-x-2\">\n          <input \n            type=\"text\" \n            placeholder=\"Type your message here...\" \n            value={inputMessage}\n            onChange={(e) => setInputMessage(e.target.value)}\n            onKeyUp={handleKeyPress}\n            disabled={isLoading}\n            className=\"flex-1 p-3 rounded-full border border-gray-300 focus:outline-none focus:ring-2 focus:ring-green-500 transition-all duration-200\"\n          />\n          <button \n            onClick={sendMessage}\n            disabled={isLoading || !inputMessage.trim()}\n            className=\"bg-green-600 text-white p-3 rounded-full shadow-lg hover:bg-green-700 transition-colors duration-200 disabled:opacity-50\"\n          >\n            <Send className=\"w-6 h-6 rotate-90\" />\n          </button>\n        </div>\n\n      </div>\n    </div>\n  );\n};\n\nexport default Mitra;","size_bytes":6540},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/pages/MyFertilizerGuidance.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { \n  ArrowLeft,\n  CheckCircle,\n  Clock,\n  Droplets,\n  Leaf,\n  Calendar,\n  Beaker,\n  ChevronDown,\n  ChevronUp\n} from 'lucide-react';\nimport { useNavigate } from 'react-router-dom';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n\nconst MyFertilizerGuidance = () => {\n  const navigate = useNavigate();\n  const [savedGuidance, setSavedGuidance] = useState<string[]>([]);\n  const [appliedGuidance, setAppliedGuidance] = useState<string[]>(() => {\n    const applied = localStorage.getItem('kisanmitra_applied_guidance');\n    return applied ? JSON.parse(applied) : [];\n  });\n  const [expandedCards, setExpandedCards] = useState<string[]>([]);\n\n  // Load saved fertilizer guidance\n  useEffect(() => {\n    const saved = localStorage.getItem('kisanmitra_saved_fertilizer_guides');\n    setSavedGuidance(saved ? JSON.parse(saved) : []);\n  }, []);\n\n  const cropData = {\n    'tomato': {\n      name: 'Tomato',\n      image: '🍅',\n      season: 'Kharif/Rabi',\n      fertilizers: [\n        { name: 'NPK (10:26:26)', quantity: '200 kg/acre', timing: 'At planting', method: 'Basal application', notes: 'Mix with soil before transplanting' },\n        { name: 'Urea (46% N)', quantity: '50 kg/acre', timing: '20 days after transplant', method: 'Side dressing', notes: 'Apply around plant base, avoid stems' },\n        { name: 'Calcium Nitrate', quantity: '25 kg/acre', timing: 'Flowering stage', method: 'Foliar spray', notes: 'Prevents blossom end rot' }\n      ],\n      steps: [\n        'Prepare field with proper drainage',\n        'Apply basal fertilizer 1 week before transplanting',\n        'Transplant healthy seedlings',\n        'Apply first top dressing after 20 days',\n        'Monitor plant growth and adjust as needed'\n      ]\n    },\n    'wheat': {\n      name: 'Wheat',\n      image: '🌾',\n      season: 'Rabi',\n      fertilizers: [\n        { name: 'DAP (18:46:0)', quantity: '150 kg/acre', timing: 'At sowing', method: 'Drill with seed', notes: 'Place 2-3 cm below seed level' },\n        { name: 'Urea (46% N)', quantity: '65 kg/acre', timing: '1st irrigation (21 days)', method: 'Broadcasting', notes: 'Apply before irrigation' },\n        { name: 'Urea (46% N)', quantity: '65 kg/acre', timing: '2nd irrigation (45 days)', method: 'Broadcasting', notes: 'Apply during tillering stage' }\n      ],\n      steps: [\n        'Test soil pH (ideal 6.0-7.5)',\n        'Apply basal dose with seed drilling',\n        'Ensure proper seed depth (4-5 cm)',\n        'First top dressing at crown root stage',\n        'Second top dressing at tillering',\n        'Monitor for nutrient deficiency signs'\n      ]\n    },\n    'rice': {\n      name: 'Rice',\n      image: '🌾',\n      season: 'Kharif',\n      fertilizers: [\n        { name: 'NPK (12:32:16)', quantity: '125 kg/acre', timing: 'Before transplanting', method: 'Broadcasting', notes: 'Mix thoroughly with puddled soil' },\n        { name: 'Urea (46% N)', quantity: '45 kg/acre', timing: '15 days after transplant', method: 'Broadcasting', notes: 'Apply in standing water' },\n        { name: 'Urea (46% N)', quantity: '45 kg/acre', timing: 'At panicle initiation', method: 'Broadcasting', notes: 'Apply during tillering stage' }\n      ],\n      steps: [\n        'Prepare puddled field with standing water',\n        'Apply basal fertilizer 2-3 days before transplanting',\n        'Transplant 21-day old seedlings',\n        'Maintain water level at 2-5 cm',\n        'Apply nitrogen in split doses',\n        'Drain field 10 days before harvest'\n      ]\n    },\n    'cotton': {\n      name: 'Cotton',\n      image: '☁️',\n      season: 'Kharif',\n      fertilizers: [\n        { name: 'NPK (17:17:17)', quantity: '100 kg/acre', timing: 'At sowing', method: 'Side placement', notes: 'Place 3-4 cm away from seed' },\n        { name: 'Urea (46% N)', quantity: '60 kg/acre', timing: '30-35 days after sowing', method: 'Side dressing', notes: 'Apply during square formation' },\n        { name: 'MOP (60% K2O)', quantity: '35 kg/acre', timing: 'At flowering', method: 'Broadcasting', notes: 'Helps in boll development' }\n      ],\n      steps: [\n        'Select well-drained black cotton soil',\n        'Apply pre-sowing fertilizers',\n        'Sow seeds at proper depth (2-3 cm)',\n        'First top dressing during square stage',\n        'Second application at flowering',\n        'Monitor for pink bollworm'\n      ]\n    },\n    'maize': {\n      name: 'Maize',\n      image: '🌽',\n      season: 'Kharif/Rabi',\n      fertilizers: [\n        { name: 'NPK (12:32:16)', quantity: '125 kg/acre', timing: 'At sowing', method: 'Band placement', notes: 'Place 5 cm away and below seed' },\n        { name: 'Urea (46% N)', quantity: '65 kg/acre', timing: '25-30 days after sowing', method: 'Side dressing', notes: 'Apply at knee-high stage' },\n        { name: 'Urea (46% N)', quantity: '65 kg/acre', timing: 'Pre-tasseling stage', method: 'Side dressing', notes: 'Apply 50-55 days after sowing' }\n      ],\n      steps: [\n        'Choose well-drained fertile soil',\n        'Apply basal dose at time of sowing',\n        'Maintain plant spacing of 60x20 cm',\n        'First top dressing at knee-high stage',\n        'Second top dressing before tasseling',\n        'Ensure adequate moisture throughout'\n      ]\n    }\n  };\n\n  const toggleAppliedStatus = (cropId: string) => {\n    const updatedApplied = appliedGuidance.includes(cropId)\n      ? appliedGuidance.filter(id => id !== cropId)\n      : [...appliedGuidance, cropId];\n    \n    setAppliedGuidance(updatedApplied);\n    localStorage.setItem('kisanmitra_applied_guidance', JSON.stringify(updatedApplied));\n  };\n\n  const toggleExpandCard = (cropId: string) => {\n    setExpandedCards(prev => \n      prev.includes(cropId) \n        ? prev.filter(id => id !== cropId)\n        : [...prev, cropId]\n    );\n  };\n\n  const savedCrops = savedGuidance.map(id => ({\n    id,\n    ...cropData[id as keyof typeof cropData]\n  })).filter(crop => crop.name);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-blue-50\">\n      {/* Header */}\n      <div className=\"bg-white shadow-sm border-b border-green-100 sticky top-0 z-10\">\n        <div className=\"px-6 py-4\">\n          <div className=\"flex items-center space-x-4\">\n            <button\n              onClick={() => navigate('/advisory')}\n              className=\"p-2 hover:bg-gray-100 rounded-xl transition-colors\"\n            >\n              <ArrowLeft className=\"w-6 h-6 text-gray-600\" />\n            </button>\n            <div className=\"p-3 bg-green-100 rounded-xl\">\n              <Beaker className=\"w-7 h-7 text-green-600\" />\n            </div>\n            <div>\n              <h1 className=\"text-2xl font-bold text-gray-900\">My Fertilizer Guidance</h1>\n              <p className=\"text-sm text-gray-600\">Your saved crop fertilizer recommendations</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"px-6 py-8 space-y-8\">\n        {savedCrops.length > 0 ? (\n          <div className=\"space-y-6\">\n            {savedCrops.map((crop) => {\n              const isApplied = appliedGuidance.includes(crop.id);\n              const isExpanded = expandedCards.includes(crop.id);\n              \n              return (\n                <Card key={crop.id} className=\"bg-white rounded-3xl shadow-lg border border-gray-100 overflow-hidden\">\n                  {/* Crop Header */}\n                  <CardHeader className={`${\n                    isApplied \n                      ? 'bg-gradient-to-r from-green-50 to-green-100 border-b border-green-200' \n                      : 'bg-gradient-to-r from-gray-50 to-gray-100 border-b border-gray-200'\n                  }`}>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"text-4xl\">{crop.image}</div>\n                        <div>\n                          <CardTitle className=\"text-2xl font-bold text-gray-900\">{crop.name}</CardTitle>\n                          <div className=\"flex items-center space-x-2 mt-1\">\n                            <Calendar className=\"w-4 h-4 text-green-600\" />\n                            <span className=\"text-green-700 font-medium\">{crop.season} Season</span>\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center space-x-3\">\n                        {isApplied && (\n                          <div className=\"flex items-center space-x-1 text-green-600 bg-green-100 px-3 py-1 rounded-full\">\n                            <CheckCircle className=\"w-4 h-4\" />\n                            <span className=\"text-sm font-medium\">Applied</span>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </CardHeader>\n\n                  {/* Fertilizer Table */}\n                  <CardContent className=\"p-6\">\n                    <div className=\"space-y-4\">\n                      <h3 className=\"text-xl font-bold text-gray-900 mb-4 flex items-center space-x-2\">\n                        <Droplets className=\"w-5 h-5 text-blue-600\" />\n                        <span>Fertilizer Schedule</span>\n                      </h3>\n                      \n                      <div className=\"space-y-3\">\n                        {crop.fertilizers.map((fertilizer, index) => (\n                          <div key={index} className=\"bg-gray-50 rounded-2xl p-4 border border-gray-200\">\n                            <div className=\"flex items-start justify-between mb-3\">\n                              <div className=\"flex-1\">\n                                <h4 className=\"font-bold text-gray-900 text-lg\">{fertilizer.name}</h4>\n                                <p className=\"text-green-600 font-bold text-base\">{fertilizer.quantity}</p>\n                              </div>\n                              <div className=\"text-right\">\n                                <div className=\"flex items-center space-x-1 text-blue-600\">\n                                  <Clock className=\"w-4 h-4\" />\n                                  <span className=\"text-sm font-medium\">{fertilizer.timing}</span>\n                                </div>\n                              </div>\n                            </div>\n                            \n                            <div className=\"grid grid-cols-1 gap-2\">\n                              <div className=\"flex items-center space-x-2\">\n                                <span className=\"text-sm font-medium text-gray-600\">Method:</span>\n                                <span className=\"text-sm text-gray-800 font-medium\">{fertilizer.method}</span>\n                              </div>\n                              <div className=\"flex items-start space-x-2\">\n                                <span className=\"text-sm font-medium text-gray-600 mt-0.5\">Notes:</span>\n                                <span className=\"text-sm text-gray-700 leading-relaxed\">{fertilizer.notes}</span>\n                              </div>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n\n                    {/* Expandable Steps */}\n                    <div className=\"mt-6\">\n                      <button\n                        onClick={() => toggleExpandCard(crop.id)}\n                        className=\"w-full flex items-center justify-between p-4 bg-gradient-to-r from-blue-50 to-purple-50 rounded-2xl hover:from-blue-100 hover:to-purple-100 transition-colors\"\n                      >\n                        <div className=\"flex items-center space-x-3\">\n                          <Leaf className=\"w-5 h-5 text-green-600\" />\n                          <span className=\"font-bold text-gray-900\">Step-by-Step Instructions</span>\n                        </div>\n                        {isExpanded ? (\n                          <ChevronUp className=\"w-5 h-5 text-gray-600\" />\n                        ) : (\n                          <ChevronDown className=\"w-5 h-5 text-gray-600\" />\n                        )}\n                      </button>\n\n                      {isExpanded && (\n                        <div className=\"mt-4 space-y-3\">\n                          {crop.steps.map((step, index) => (\n                            <div key={index} className=\"flex items-start space-x-3 p-3 bg-white rounded-xl border border-gray-200\">\n                              <div className=\"flex-shrink-0 w-6 h-6 bg-green-100 rounded-full flex items-center justify-center\">\n                                <span className=\"text-xs font-bold text-green-600\">{index + 1}</span>\n                              </div>\n                              <p className=\"text-gray-700 text-sm leading-relaxed\">{step}</p>\n                            </div>\n                          ))}\n                        </div>\n                      )}\n                    </div>\n\n                    {/* Apply Status Button */}\n                    <div className=\"mt-6\">\n                      <Button\n                        onClick={() => toggleAppliedStatus(crop.id)}\n                        className={`w-full py-4 rounded-2xl font-bold text-lg transition-all duration-300 ${\n                          isApplied\n                            ? 'bg-gray-100 text-gray-700 border-2 border-gray-300 hover:bg-gray-200'\n                            : 'bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white shadow-lg hover:shadow-xl'\n                        }`}\n                      >\n                        <div className=\"flex items-center justify-center space-x-3\">\n                          {isApplied ? (\n                            <>\n                              <Clock className=\"w-6 h-6\" />\n                              <span>Mark as Pending</span>\n                            </>\n                          ) : (\n                            <>\n                              <CheckCircle className=\"w-6 h-6\" />\n                              <span>Mark as Applied</span>\n                            </>\n                          )}\n                        </div>\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        ) : (\n          <Card className=\"bg-white rounded-3xl shadow-lg border border-gray-100 overflow-hidden\">\n            <CardContent className=\"p-8 text-center\">\n              <div className=\"p-4 bg-gray-100 rounded-xl w-20 h-20 mx-auto mb-4 flex items-center justify-center\">\n                <Beaker className=\"w-10 h-10 text-gray-400\" />\n              </div>\n              <h3 className=\"font-bold text-gray-900 text-xl mb-2\">No Saved Guidance</h3>\n              <p className=\"text-gray-500 text-base mb-6\">\n                Save fertilizer guidance from the Fertilizer Guide page to see them here\n              </p>\n              <Button \n                onClick={() => navigate('/fertilizer-guide')}\n                className=\"bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white py-3 px-6 rounded-2xl font-semibold\"\n              >\n                Browse Fertilizer Guide\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default MyFertilizerGuidance;","size_bytes":15577},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/pages/MySavedCultivationGuides.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { \n  ArrowLeft, \n  BookOpen,\n  Bookmark,\n  ChevronRight,\n  Trash2\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n\nconst MySavedCultivationGuides = () => {\n  const navigate = useNavigate();\n  const [savedCultivationGuides, setSavedCultivationGuides] = useState<string[]>([]);\n\n  // Load saved guides\n  useEffect(() => {\n    const saved = localStorage.getItem('kisanmitra_saved_cultivation_guides');\n    setSavedCultivationGuides(saved ? JSON.parse(saved) : []);\n  }, []);\n\n  const cultivationGuideData = {\n    tomato: { \n      name: 'Tomato', \n      image: '🍅', \n      summary: 'Variety selection + seed treatment; drip irrigation best practices',\n      details: 'Complete step-by-step guide for growing healthy tomatoes'\n    },\n    wheat: { \n      name: 'Wheat', \n      image: '🌾', \n      summary: 'Six-stage irrigation; fertilizer application timing',\n      details: 'Comprehensive guide for wheat cultivation and management'\n    },\n    maize: { \n      name: 'Maize', \n      image: '🌽', \n      summary: 'Land preparation + raised beds; trio fertilizer schedule',\n      details: 'Step-by-step maize cultivation guide for optimal yield'\n    }\n  };\n\n  const savedCultivationCrops = savedCultivationGuides.map(id => ({\n    id,\n    ...cultivationGuideData[id as keyof typeof cultivationGuideData]\n  })).filter(crop => crop.name);\n\n  const removeCultivationGuide = (guideId: string) => {\n    const updated = savedCultivationGuides.filter(id => id !== guideId);\n    setSavedCultivationGuides(updated);\n    localStorage.setItem('kisanmitra_saved_cultivation_guides', JSON.stringify(updated));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-emerald-50\">\n      {/* Header */}\n      <div className=\"bg-gradient-to-r from-green-600 to-emerald-600 px-4 py-4 shadow-lg\">\n        <div className=\"flex items-center space-x-3\">\n          <button onClick={() => navigate('/advisory')} className=\"text-white hover:bg-white/20 rounded-full p-2\">\n            <ArrowLeft className=\"w-6 h-6\" />\n          </button>\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"p-2 bg-white/20 rounded-lg\">\n              <BookOpen className=\"w-6 h-6 text-white\" />\n            </div>\n            <div>\n              <h1 className=\"text-xl font-bold text-white\">Saved Cultivation Guides</h1>\n              <p className=\"text-green-100 text-sm\">Your bookmarked farming guides</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"px-4 py-6\">\n        {savedCultivationCrops.length > 0 ? (\n          <div className=\"space-y-4\">\n            {/* Summary Info */}\n            <Card className=\"bg-gradient-to-r from-green-50 to-emerald-50 border-2 border-green-200\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"p-3 bg-white rounded-xl shadow-sm\">\n                    <BookOpen className=\"w-6 h-6 text-green-600\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-bold text-gray-900 mb-2 text-lg\">\n                      {savedCultivationCrops.length} Saved Guide{savedCultivationCrops.length !== 1 ? 's' : ''}\n                    </h3>\n                    <p className=\"text-gray-700 text-base\">\n                      Your personalized collection of cultivation guides for quick access\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Saved Guides */}\n            <div className=\"space-y-4\">\n              {savedCultivationCrops.map((crop) => (\n                <Card \n                  key={crop.id} \n                  className=\"bg-white shadow-lg border border-green-100 hover:shadow-xl transition-shadow cursor-pointer overflow-hidden\"\n                  onClick={() => navigate(`/guides/${crop.id}`)}\n                >\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"text-4xl\">{crop.image}</div>\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-bold text-gray-900 text-lg mb-1\">{crop.name}</h4>\n                        <p className=\"text-gray-600 text-sm mb-2\">{crop.details}</p>\n                        <p className=\"text-gray-500 text-sm\">{crop.summary}</p>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <button\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            removeCultivationGuide(crop.id);\n                          }}\n                          className=\"p-2 text-gray-400 hover:text-red-500 hover:bg-red-50 rounded-lg transition-colors\"\n                        >\n                          <Trash2 className=\"w-5 h-5\" />\n                        </button>\n                        <ChevronRight className=\"w-5 h-5 text-gray-400\" />\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </div>\n        ) : (\n          <div className=\"text-center py-16\">\n            <div className=\"w-24 h-24 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-6\">\n              <BookOpen className=\"w-12 h-12 text-green-600\" />\n            </div>\n            <h3 className=\"text-xl font-bold text-gray-700 mb-3\">No Saved Guides</h3>\n            <p className=\"text-gray-500 mb-8 text-lg leading-relaxed max-w-md mx-auto\">\n              Save cultivation guides from the Guides section to quickly access them here\n            </p>\n            <Button \n              onClick={() => navigate('/guides')}\n              className=\"bg-green-600 hover:bg-green-700 text-white px-8 py-3 rounded-xl shadow-lg\"\n            >\n              Browse Cultivation Guides\n            </Button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default MySavedCultivationGuides;","size_bytes":6313},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/pages/NearbyShops.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { \n  ArrowLeft, \n  MapPin, \n  Phone, \n  Clock, \n  Star,\n  Navigation,\n  Search,\n  Store,\n  RefreshCw,\n  Heart,\n  MoreVertical,\n  CheckCircle,\n  Route,\n  AlertCircle\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport useLocation from '@/hooks/useLocation';\nimport placesService, { type FertilizerShop } from '@/lib/places';\n\nconst NearbyShops = () => {\n  const navigate = useNavigate();\n  const [searchQuery, setSearchQuery] = useState('');\n  const [shops, setShops] = useState<FertilizerShop[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  \n  const { \n    loading: locationLoading, \n    data: locationData, \n    error: locationError, \n    getCurrentLocation \n  } = useLocation();\n\n  // Load nearby fertilizer shops when location is available\n  useEffect(() => {\n    if (locationData?.latitude && locationData?.longitude) {\n      loadNearbyShops(locationData.latitude, locationData.longitude);\n    }\n  }, [locationData]);\n\n  const loadNearbyShops = async (lat: number, lon: number) => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      const nearbyShops = await placesService.findNearbyFertilizerShops(lat, lon);\n      setShops(nearbyShops);\n    } catch (err) {\n      setError('Unable to find nearby fertilizer shops. Please try again.');\n      console.error('Error loading nearby shops:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const retryLocation = async () => {\n    try {\n      await getCurrentLocation();\n    } catch (err) {\n      setError('Unable to get your location. Please enable location services.');\n    }\n  };\n\n  // Filter shops based on search query\n  const filteredShops = shops.filter(shop => \n    shop.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    shop.address.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n\n  const handleCall = (phone?: string) => {\n    // Ensure phone number is properly formatted for calling\n    if (phone) {\n      // Clean the phone number and use tel: protocol\n      const cleanPhone = phone.replace(/[^+\\d]/g, ''); // Keep only + and digits\n      window.location.href = `tel:${cleanPhone}`;\n    } else {\n      // Show alert if no phone number available\n      alert('Phone number not available for this shop');\n    }\n  };\n\n  const handleGetDirections = (shopId: string) => {\n    const shop = shops.find(s => s.id === shopId);\n    if (shop && locationData) {\n      // Use universal Google Maps directions URL\n      const origin = `${locationData.latitude},${locationData.longitude}`;\n      const destination = `${shop.latitude},${shop.longitude}`;\n      const directionsUrl = `https://www.google.com/maps/dir/?api=1&origin=${origin}&destination=${destination}&travelmode=driving`;\n      \n      // Open in new window/app for navigation\n      window.open(directionsUrl, '_blank');\n    } else if (shop) {\n      // Fallback: show shop location on map\n      const mapUrl = `https://www.google.com/maps/search/?api=1&query=${shop.latitude},${shop.longitude}`;\n      window.open(mapUrl, '_blank');\n    } else {\n      alert('Unable to get directions to this location');\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-green-50\">\n      {/* Header */}\n      <div className=\"bg-gradient-to-r from-blue-600 to-green-600 px-6 py-6 shadow-lg\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <button \n              onClick={() => navigate('/home')}\n              className=\"w-10 h-10 bg-white/20 backdrop-blur-sm rounded-full flex items-center justify-center hover:bg-white/30 transition-all\"\n            >\n              <ArrowLeft className=\"w-5 h-5 text-white\" />\n            </button>\n            <div>\n              <h1 className=\"text-2xl font-bold text-white\">Fertilizer Shops</h1>\n              <p className=\"text-blue-100 text-sm\">Find fertilizer shops near you</p>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-3\">\n            <button \n              onClick={retryLocation}\n              disabled={locationLoading}\n              className=\"w-10 h-10 bg-white/20 backdrop-blur-sm rounded-full flex items-center justify-center hover:bg-white/30 transition-all disabled:opacity-50\"\n            >\n              <RefreshCw className={`w-5 h-5 text-white ${locationLoading ? 'animate-spin' : ''}`} />\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"px-6 py-6 space-y-6 pb-24\">\n        {/* Search Bar */}\n        <div className=\"relative\">\n          <Search className=\"absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n          <Input\n            placeholder=\"Search shops, products, speciality...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-12 pr-4 py-4 text-base bg-white border-0 rounded-2xl shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n          />\n        </div>\n\n        {/* Location Banner */}\n        {/* Location Status */}\n        <div className=\"bg-white rounded-3xl p-6 shadow-lg border border-gray-100\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"w-12 h-12 bg-gradient-to-br from-blue-100 to-green-100 rounded-2xl flex items-center justify-center\">\n                <MapPin className=\"w-6 h-6 text-blue-600\" />\n              </div>\n              <div>\n                <h3 className=\"font-bold text-gray-900 text-lg\">Current Location</h3>\n                {locationLoading ? (\n                  <p className=\"text-gray-600 text-sm\">Detecting your location...</p>\n                ) : locationError ? (\n                  <p className=\"text-red-600 text-sm\">Location unavailable</p>\n                ) : locationData ? (\n                  <p className=\"text-gray-600 text-sm\">{locationData.district}, {locationData.state}</p>\n                ) : (\n                  <p className=\"text-gray-600 text-sm\">Location not detected</p>\n                )}\n              </div>\n            </div>\n            {!locationData && (\n              <Button \n                onClick={retryLocation}\n                disabled={locationLoading}\n                variant=\"outline\" \n                size=\"sm\" \n                className=\"bg-blue-50 border-blue-200 text-blue-700 hover:bg-blue-100 rounded-xl\"\n              >\n                <Navigation className=\"w-4 h-4 mr-2\" />\n                {locationLoading ? 'Locating...' : 'Detect'}\n              </Button>\n            )}\n          </div>\n        </div>\n\n        {/* Error Message */}\n        {error && (\n          <div className=\"bg-red-50 border border-red-200 rounded-2xl p-4 flex items-center space-x-3\">\n            <AlertCircle className=\"w-5 h-5 text-red-600\" />\n            <p className=\"text-red-700 text-sm\">{error}</p>\n          </div>\n        )}\n\n        {/* Quick Stats */}\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div className=\"bg-gradient-to-br from-blue-100 to-blue-50 rounded-2xl p-5 text-center shadow-lg border border-blue-200\">\n            <div className=\"w-12 h-12 bg-white/80 rounded-xl flex items-center justify-center mx-auto mb-3\">\n              <Store className=\"w-6 h-6 text-blue-700\" />\n            </div>\n            <p className=\"text-2xl font-bold text-blue-900 mb-1\">{filteredShops.length}</p>\n            <p className=\"text-sm font-semibold text-blue-700\">Fertilizer Shops</p>\n          </div>\n          \n          <div className=\"bg-gradient-to-br from-green-100 to-green-50 rounded-2xl p-5 text-center shadow-lg border border-green-200\">\n            <div className=\"w-12 h-12 bg-white/80 rounded-xl flex items-center justify-center mx-auto mb-3\">\n              <MapPin className=\"w-6 h-6 text-green-700\" />\n            </div>\n            <p className=\"text-2xl font-bold text-green-900 mb-1\">\n              {filteredShops.length > 0 ? `${Math.min(...filteredShops.map(s => s.distance))} km` : '-'}\n            </p>\n            <p className=\"text-sm font-semibold text-green-700\">Nearest Shop</p>\n          </div>\n        </div>\n\n        {/* Shops List */}\n        {/* Shops List */}\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-lg font-bold text-text-secondary\">Fertilizer Shops Near You</h2>\n            <span className=\"text-sm text-agri-gray\">{filteredShops.length} shops</span>\n          </div>\n\n          {loading ? (\n            <div className=\"text-center py-12\">\n              <RefreshCw className=\"w-8 h-8 text-blue-600 mx-auto mb-4 animate-spin\" />\n              <h3 className=\"text-lg font-semibold text-gray-700 mb-2\">Finding Nearby Fertilizer Shops</h3>\n              <p className=\"text-gray-500\">Please wait while we locate shops near you...</p>\n            </div>\n          ) : filteredShops.length > 0 ? (\n            filteredShops.map((shop) => (\n              <div key={shop.id} className=\"bg-white rounded-3xl p-6 shadow-lg border border-gray-100 hover:shadow-xl transition-shadow\">\n                {/* Shop Header */}\n                <div className=\"flex items-start justify-between mb-4\">\n                  <div className=\"flex items-start space-x-3\">\n                    <div className=\"w-14 h-14 bg-gradient-to-br from-blue-100 to-green-100 rounded-2xl flex items-center justify-center shadow-sm\">\n                      <Store className=\"w-7 h-7 text-blue-600\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-2 mb-1\">\n                        <h3 className=\"font-semibold text-gray-900\">{shop.name}</h3>\n                        <CheckCircle className=\"w-4 h-4 text-green-500\" />\n                      </div>\n                      <p className=\"text-sm text-gray-600 mb-1\">Fertilizer & Agricultural Supplies</p>\n                      <div className=\"flex items-center space-x-2\">\n                        {shop.rating && (\n                          <>\n                            <div className=\"flex items-center space-x-1\">\n                              <Star className=\"w-3 h-3 fill-yellow-400 text-yellow-400\" />\n                              <span className=\"text-sm font-medium\">{shop.rating.toFixed(1)}</span>\n                            </div>\n                            {shop.reviews && (\n                              <>\n                                <span className=\"text-sm text-gray-500\">({shop.reviews})</span>\n                                <span className=\"text-sm text-gray-500\">•</span>\n                              </>\n                            )}\n                          </>\n                        )}\n                        <span className=\"text-sm font-medium text-blue-600\">{shop.distance.toFixed(1)} km</span>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-2\">\n                    <Badge className={shop.isOpen ? 'bg-green-500 text-white' : 'bg-red-500 text-white'}>\n                      {shop.isOpen ? 'Open' : 'Closed'}\n                    </Badge>\n                  </div>\n                </div>\n\n                {/* Address & Business Hours */}\n                <div className=\"bg-gradient-to-br from-gray-50 to-blue-50 rounded-2xl p-4 mb-4 border border-gray-100\">\n                  <div className=\"flex items-start space-x-3\">\n                    <MapPin className=\"w-5 h-5 text-blue-600 mt-0.5\" />\n                    <div className=\"flex-1\">\n                      <p className=\"font-medium text-gray-900 text-sm mb-2\">{shop.address}</p>\n                      \n                      {/* Business Hours */}\n                      <div className=\"bg-white rounded-lg p-3 border border-gray-200\">\n                        <div className=\"flex items-center space-x-2 mb-2\">\n                          <Clock className=\"w-4 h-4 text-green-600\" />\n                          <span className=\"font-semibold text-gray-800 text-sm\">Business Hours</span>\n                        </div>\n                        {shop.openingHours && shop.openingHours.length > 0 ? (\n                          <div className=\"space-y-1\">\n                            {shop.openingHours.map((hours, index) => (\n                              <p key={index} className=\"text-xs text-gray-700 leading-relaxed\">\n                                {hours}\n                              </p>\n                            ))}\n                          </div>\n                        ) : (\n                          <p className=\"text-xs text-gray-600\">Hours not available</p>\n                        )}\n                        \n                        {/* Current Status */}\n                        <div className=\"mt-2 pt-2 border-t border-gray-100\">\n                          <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${\n                            shop.isOpen \n                              ? 'bg-green-100 text-green-800' \n                              : 'bg-red-100 text-red-800'\n                          }`}>\n                            <div className={`w-2 h-2 rounded-full mr-1 ${\n                              shop.isOpen ? 'bg-green-400' : 'bg-red-400'\n                            }`} />\n                            {shop.isOpen ? 'Open Now' : 'Closed Now'}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Action Buttons */}\n                <div className=\"flex space-x-3\">\n                  <Button \n                    onClick={() => handleCall(shop.phone)}\n                    size=\"sm\" \n                    className=\"flex-1 bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700 text-white font-semibold rounded-xl shadow-md\"\n                  >\n                    <Phone className=\"w-4 h-4 mr-2\" />\n                    Call Now\n                  </Button>\n                  \n                  <Button \n                    onClick={() => handleGetDirections(shop.id)}\n                    variant=\"outline\" \n                    size=\"sm\" \n                    className=\"border-2 border-blue-300 text-blue-700 hover:bg-blue-50 font-semibold rounded-xl\"\n                  >\n                    <Route className=\"w-4 h-4 mr-2\" />\n                    Navigate\n                  </Button>\n                  \n                  <button className=\"p-3 border-2 border-gray-200 rounded-xl hover:bg-gray-50 transition-colors\">\n                    <Heart className=\"w-4 h-4 text-gray-500\" />\n                  </button>\n                </div>\n              </div>\n            ))\n          ) : !loading && (\n            <div className=\"text-center py-12\">\n              <Store className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold text-gray-700 mb-2\">No Real Fertilizer Shops Found</h3>\n              <p className=\"text-gray-500 mb-6\">\n                {!locationData ? \n                  'Please enable location access to find nearby shops' : \n                  'No actual fertilizer shops found in your area. This search only shows real businesses from map data.'}\n              </p>\n              \n              {/* Location Actions */}\n              <div className=\"space-y-3\">\n                {!locationData ? (\n                  <Button \n                    onClick={retryLocation}\n                    className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n                  >\n                    <Navigation className=\"w-4 h-4 mr-2\" />\n                    Enable Location\n                  </Button>\n                ) : (\n                  <div className=\"space-y-2\">\n                    <Button \n                      onClick={() => {\n                        if (locationData) {\n                          loadNearbyShops(locationData.latitude, locationData.longitude);\n                        }\n                      }}\n                      variant=\"outline\"\n                      className=\"border-blue-300 text-blue-700 hover:bg-blue-50\"\n                    >\n                      <RefreshCw className=\"w-4 h-4 mr-2\" />\n                      Search Again\n                    </Button>\n                    <p className=\"text-xs text-gray-400 max-w-xs mx-auto\">\n                      Showing only real businesses from verified map data. No mock or test data.\n                    </p>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Help Section */}\n        <div className=\"bg-white rounded-2xl p-6 shadow-soft\">\n          <h3 className=\"text-lg font-semibold text-text-secondary mb-4\">Need Help Finding Shops?</h3>\n          <div className=\"space-y-3\">\n            <button className=\"w-full flex items-center justify-between p-4 bg-agri-light rounded-xl hover:bg-agri-light-gray transition-colors\">\n              <div className=\"flex items-center space-x-3\">\n                <Phone className=\"w-5 h-5 text-agri-primary\" />\n                <span className=\"font-medium text-text-secondary\">Call Support</span>\n              </div>\n              <span className=\"text-sm text-agri-gray\">1800-123-4567</span>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NearbyShops;","size_bytes":17824},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/pages/NotFound.tsx":{"content":"import { useLocation, useNavigate } from \"react-router-dom\";\nimport { useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft, Home } from \"lucide-react\";\n\nconst NotFound = () => {\n  const location = useLocation();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    console.error(\n      \"404 Error: User attempted to access non-existent route:\",\n      location.pathname\n    );\n  }, [location.pathname]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-red-50 to-orange-50\">\n      {/* Header */}\n      <div className=\"bg-gradient-to-r from-red-500 to-orange-500 px-4 py-4 shadow-lg\">\n        <div className=\"flex items-center justify-between\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => navigate('/')}\n            className=\"text-white hover:bg-white/20 rounded-full p-3\"\n          >\n            <ArrowLeft className=\"w-5 h-5\" />\n          </Button>\n          \n          <h1 className=\"text-xl font-bold text-white\">Page Not Found</h1>\n          \n          <div className=\"w-12\" />\n        </div>\n      </div>\n      \n      {/* Content */}\n      <div className=\"flex items-center justify-center min-h-[calc(100vh-80px)]\">\n        <div className=\"text-center p-8\">\n          <div className=\"text-8xl mb-6\">🌾</div>\n          <h1 className=\"text-6xl font-bold mb-4 text-gray-800\">404</h1>\n          <p className=\"text-xl text-gray-600 mb-8\">Oops! This page doesn't exist</p>\n          <div className=\"space-y-4\">\n            <Button \n              onClick={() => navigate('/')}\n              className=\"bg-green-600 hover:bg-green-700 text-white px-8 py-3 rounded-2xl flex items-center space-x-2 mx-auto\"\n            >\n              <Home className=\"w-5 h-5\" />\n              <span>Return to Home</span>\n            </Button>\n            <Button \n              onClick={() => navigate(-1)}\n              variant=\"outline\"\n              className=\"border-green-600 text-green-600 hover:bg-green-50 px-8 py-3 rounded-2xl flex items-center space-x-2 mx-auto\"\n            >\n              <ArrowLeft className=\"w-5 h-5\" />\n              <span>Go Back</span>\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NotFound;\n","size_bytes":2281},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/pages/Onboarding.tsx":{"content":"import { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { ChevronLeft, ChevronRight, Sparkles, Star } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport onboarding1 from '@/assets/onboarding-1.png';\nimport onboarding2 from '@/assets/onboarding-2.png';\nimport onboarding3 from '@/assets/onboarding-3.png';\n\nconst onboardingData = [\n  {\n    id: 1,\n    image: onboarding1,\n    title: \"Welcome to Smart Farming Revolution\",\n    subtitle: \"Diagnose Plant Diseases with AI Magic\",\n    description: \"Simply capture a photo and get instant expert plant health analysis\",\n    color: \"from-green-400 to-emerald-600\",\n  },\n  {\n    id: 2,\n    image: onboarding2,\n    title: \"Your Digital Agricultural Marketplace\",\n    subtitle: \"Buy Smart, Sell Smarter\",\n    description: \"Access premium fertilizers, quality seeds, and connect with buyers\",\n    color: \"from-blue-400 to-indigo-600\",\n  },\n  {\n    id: 3,\n    image: onboarding3,\n    title: \"Personalized Farming Intelligence\",\n    subtitle: \"Weather Wisdom & Expert Guidance\",\n    description: \"Get hyper-local weather updates and AI-powered farming recommendations\",\n    color: \"from-purple-400 to-pink-600\",\n  },\n];\n\nconst Onboarding = () => {\n  const [currentStep, setCurrentStep] = useState(0);\n  const navigate = useNavigate();\n\n  const handleNext = () => {\n    if (currentStep < onboardingData.length - 1) {\n      setCurrentStep(currentStep + 1);\n    } else {\n      handleGetStarted();\n    }\n  };\n\n  const handlePrevious = () => {\n    if (currentStep > 0) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  const handleSkip = () => {\n    handleGetStarted();\n  };\n\n  const handleGetStarted = () => {\n    localStorage.setItem('kisanmitra_onboarding_seen', 'true');\n    navigate('/signup');\n  };\n\n  const currentData = onboardingData[currentStep];\n\n  return (\n    <div className=\"mobile-container\">\n      {/* Background with animated gradient */}\n      <div className={`absolute inset-0 bg-gradient-to-br ${currentData.color} transition-all duration-700`} />\n      \n      {/* Floating decorative elements */}\n      <div className=\"absolute inset-0 overflow-hidden\">\n        {[...Array(15)].map((_, i) => (\n          <div\n            key={i}\n            className=\"absolute\"\n            style={{\n              left: Math.random() * 100 + '%',\n              top: Math.random() * 100 + '%',\n              animationDelay: Math.random() * 4 + 's',\n            }}\n          >\n            {i % 3 === 0 ? (\n              <Sparkles className=\"w-4 h-4 text-white/30 animate-pulse\" />\n            ) : (\n              <Star className=\"w-3 h-3 text-white/20 animate-bounce\" />\n            )}\n          </div>\n        ))}\n      </div>\n\n      {/* Header */}\n      <div className=\"relative z-10 flex justify-between items-center p-6\">\n        <button\n          onClick={handlePrevious}\n          className={`p-2 rounded-full bg-white/20 backdrop-blur-sm transition-all ${\n            currentStep === 0 ? 'opacity-0 pointer-events-none' : 'opacity-100'\n          }`}\n        >\n          <ChevronLeft className=\"w-6 h-6 text-white\" />\n        </button>\n        \n        <button\n          onClick={handleSkip}\n          className=\"text-white/80 font-medium hover:text-white transition-colors\"\n        >\n          Skip\n        </button>\n      </div>\n\n      {/* Content */}\n      <div className=\"relative z-10 flex flex-col items-center justify-center min-h-[calc(100vh-200px)] px-6\">\n        {/* Image */}\n        <div className=\"mb-8 relative\">\n          <div className=\"w-80 h-60 relative animate-fade-in\">\n            <img\n              src={currentData.image}\n              alt={currentData.title}\n              className=\"w-full h-full object-contain drop-shadow-xl\"\n            />\n            \n            {/* Floating UI elements animation */}\n            <div className=\"absolute -top-4 -right-4 float-animation\">\n              <div className=\"w-8 h-8 bg-white/20 rounded-lg backdrop-blur-sm flex items-center justify-center\">\n                <Sparkles className=\"w-4 h-4 text-white\" />\n              </div>\n            </div>\n            \n            <div className=\"absolute -bottom-2 -left-4 float-animation\" style={{ animationDelay: '1s' }}>\n              <div className=\"w-6 h-6 bg-white/20 rounded-full backdrop-blur-sm\" />\n            </div>\n          </div>\n        </div>\n\n        {/* Text Content */}\n        <div className=\"text-center mb-12 animate-fade-in\">\n          <h1 className=\"text-3xl font-bold text-white mb-4 leading-tight\">\n            {currentData.title}\n          </h1>\n          \n          <div className=\"mb-4\">\n            <h2 className=\"text-xl font-semibold text-white/90 mb-2 bg-gradient-to-r from-white to-white/80 bg-clip-text text-transparent\">\n              {currentData.subtitle}\n            </h2>\n          </div>\n          \n          <p className=\"text-lg text-white/80 leading-relaxed max-w-xs\">\n            {currentData.description}\n          </p>\n        </div>\n\n        {/* Progress Indicators */}\n        <div className=\"flex space-x-3 mb-8\">\n          {onboardingData.map((_, index) => (\n            <div\n              key={index}\n              className={`h-2 rounded-full transition-all duration-500 ${\n                index === currentStep \n                  ? 'w-8 bg-white shadow-glow' \n                  : 'w-2 bg-white/40'\n              }`}\n            />\n          ))}\n        </div>\n      </div>\n\n      {/* Navigation */}\n      <div className=\"relative z-10 p-6\">\n        {currentStep === onboardingData.length - 1 ? (\n          <Button\n            onClick={handleGetStarted}\n            className=\"w-full btn-glass text-lg font-semibold py-4 bg-white/20 hover:bg-white/30 text-white border-0\"\n          >\n            <Sparkles className=\"w-5 h-5 mr-2\" />\n            Begin Your Journey\n          </Button>\n        ) : (\n          <Button\n            onClick={handleNext}\n            className=\"w-full btn-glass text-lg font-semibold py-4 bg-white/20 hover:bg-white/30 text-white border-0\"\n          >\n            Next\n            <ChevronRight className=\"w-5 h-5 ml-2\" />\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Onboarding;","size_bytes":6208},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/pages/OrderSuccess.tsx":{"content":"import { useEffect } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { \n  CheckCircle,\n  Package,\n  Truck,\n  Clock,\n  MapPin,\n  Phone,\n  Download\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\n\nconst OrderSuccess = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const orderData = location.state;\n  const orderId = orderData?.orderId || 'ORD' + Date.now();\n  const order = orderData?.order;\n  const selectedAddress = orderData?.selectedAddress;\n\n  useEffect(() => {\n    // Auto redirect to orders page after 10 seconds\n    const timer = setTimeout(() => {\n      navigate('/orders');\n    }, 10000);\n\n    return () => clearTimeout(timer);\n  }, [navigate]);\n\n  return (\n    <div className=\"mobile-container bg-green-50\">\n      <div className=\"mobile-content flex flex-col items-center justify-center min-h-screen text-center space-y-6 p-6\">\n        {/* Success Animation */}\n        <div className=\"relative\">\n          <div className=\"w-24 h-24 bg-green-500 rounded-full flex items-center justify-center animate-pulse\">\n            <CheckCircle className=\"w-12 h-12 text-white\" />\n          </div>\n          <div className=\"absolute -inset-4 border-4 border-green-300 rounded-full animate-ping opacity-20\"></div>\n        </div>\n\n        {/* Success Message */}\n        <div className=\"space-y-3\">\n          <h1 className=\"text-2xl font-bold text-green-800\">Order Placed Successfully!</h1>\n          <p className=\"text-green-600\">Thank you for your order. We'll take care of your farming needs.</p>\n        </div>\n\n        {/* Order Details */}\n        <div className=\"bg-white rounded-2xl p-6 shadow-sm border border-green-200 w-full max-w-sm\">\n          <div className=\"space-y-4\">\n            <div className=\"text-center\">\n              <p className=\"text-sm text-gray-500\">Order ID</p>\n              <p className=\"font-mono text-lg font-semibold text-gray-900\">#{orderId}</p>\n              {order && (\n                <div className=\"mt-2\">\n                  <p className=\"text-sm text-gray-600\">Total: <span className=\"font-semibold text-green-600\">₹{order.total}</span></p>\n                  <p className=\"text-xs text-gray-500\">{order.items.length} items</p>\n                </div>\n              )}\n            </div>\n\n            <div className=\"grid grid-cols-3 gap-4 text-center\">\n              <div>\n                <div className=\"w-12 h-12 bg-green-100 rounded-xl flex items-center justify-center mx-auto mb-2\">\n                  <Package className=\"w-6 h-6 text-green-600\" />\n                </div>\n                <p className=\"text-xs text-gray-500\">Processing</p>\n                <p className=\"text-sm font-medium text-green-600\">In Progress</p>\n              </div>\n\n              <div>\n                <div className=\"w-12 h-12 bg-gray-100 rounded-xl flex items-center justify-center mx-auto mb-2\">\n                  <Truck className=\"w-6 h-6 text-gray-400\" />\n                </div>\n                <p className=\"text-xs text-gray-500\">Shipping</p>\n                <p className=\"text-sm font-medium text-gray-400\">Pending</p>\n              </div>\n\n              <div>\n                <div className=\"w-12 h-12 bg-gray-100 rounded-xl flex items-center justify-center mx-auto mb-2\">\n                  <CheckCircle className=\"w-6 h-6 text-gray-400\" />\n                </div>\n                <p className=\"text-xs text-gray-500\">Delivered</p>\n                <p className=\"text-sm font-medium text-gray-400\">Pending</p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Estimated Delivery */}\n        <div className=\"bg-white rounded-2xl p-4 shadow-sm border border-green-200 w-full max-w-sm\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-blue-100 rounded-xl flex items-center justify-center\">\n              <Clock className=\"w-5 h-5 text-blue-600\" />\n            </div>\n            <div>\n              <p className=\"font-medium text-gray-900\">Estimated Delivery</p>\n              <p className=\"text-sm text-blue-600\">Tomorrow by 6:00 PM</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Delivery Address */}\n        <div className=\"bg-white rounded-2xl p-4 shadow-sm border border-green-200 w-full max-w-sm\">\n          <div className=\"flex items-start space-x-3\">\n            <div className=\"w-10 h-10 bg-green-100 rounded-xl flex items-center justify-center\">\n              <MapPin className=\"w-5 h-5 text-green-600\" />\n            </div>\n            <div>\n              <p className=\"font-medium text-gray-900\">Delivery Address</p>\n              <p className=\"text-sm text-gray-600\">\n                {selectedAddress ? selectedAddress.address : order?.address || 'Village Rampur, Dist. Hardoi, UP 241001'}\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Action Buttons */}\n        <div className=\"space-y-3 w-full max-w-sm\">\n          <Button \n            onClick={() => navigate('/orders')}\n            className=\"w-full bg-green-600 hover:bg-green-700 text-white py-3 rounded-xl\"\n          >\n            <Package className=\"w-5 h-5 mr-2\" />\n            Track Your Order\n          </Button>\n\n          <Button \n            onClick={() => navigate('/shop')}\n            variant=\"outline\"\n            className=\"w-full border-green-600 text-green-600 hover:bg-green-50 py-3 rounded-xl\"\n          >\n            Continue Shopping\n          </Button>\n\n          <button \n            onClick={() => navigate('/orders')}\n            className=\"w-full flex items-center justify-center space-x-2 text-green-600 hover:text-green-700 py-2\"\n          >\n            <Download className=\"w-4 h-4\" />\n            <span className=\"text-sm\">Download Invoice</span>\n          </button>\n        </div>\n\n        {/* Support Info */}\n        <div className=\"bg-blue-50 border border-blue-200 rounded-2xl p-4 w-full max-w-sm\">\n          <div className=\"flex items-center space-x-3\">\n            <Phone className=\"w-5 h-5 text-blue-600\" />\n            <div>\n              <p className=\"font-medium text-blue-800\">Need Help?</p>\n              <p className=\"text-sm text-blue-600\">Call us at 1800-123-4567</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Auto Redirect Info */}\n        <p className=\"text-xs text-gray-500\">\n          Redirecting to orders page in 10 seconds...\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default OrderSuccess;","size_bytes":6494},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/pages/Orders.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { \n  Package, \n  Truck, \n  CheckCircle, \n  Clock, \n  MapPin,\n  Phone,\n  Star,\n  RotateCcw,\n  ShoppingBag,\n  HelpCircle,\n  ChevronRight,\n  X,\n  ArrowLeft\n} from 'lucide-react';\nimport { cartManager, Order } from '@/lib/cart';\n\nconst FarmerOrdersPage = () => {\n  const navigate = useNavigate();\n  const [activeFilter, setActiveFilter] = useState('all');\n  const [orders, setOrders] = useState<Order[]>([]);\n\n  useEffect(() => {\n    loadOrders();\n  }, []);\n\n  const loadOrders = () => {\n    const allOrders = cartManager.getOrders();\n    setOrders(allOrders);\n  };\n\n  const handleReorder = (order: Order) => {\n    // Add all items from the order back to cart\n    order.items.forEach(item => {\n      cartManager.addToCart(item);\n    });\n    navigate('/cart');\n  };\n\n  const handleTrackOrder = (orderId: string) => {\n    // In a real app, this would navigate to a tracking page\n    alert(`Tracking order ${orderId}`);\n  };\n\n  const getItemIcon = (category: string) => {\n    const icons = {\n      fertilizers: '🌱',\n      seeds: '🍅',\n      pesticides: '🧪',\n      tools: '🔧'\n    };\n    return icons[category] || '🌱';\n  };\n\n  // Calculate summary stats\n  const totalOrders = orders.length;\n  const deliveredOrders = orders.filter(order => order.status === 'delivered').length;\n  const totalSpent = orders.reduce((sum, order) => sum + order.total, 0);\n\n  // Filter orders based on active filter\n  const filteredOrders = activeFilter === 'all' \n    ? orders \n    : orders.filter(order => order.status === activeFilter);\n\n  // Status configuration\n  const statusConfig = {\n    delivered: { color: 'bg-green-500', textColor: 'text-green-500', icon: CheckCircle, bgLight: 'bg-green-50' },\n    shipped: { color: 'bg-blue-500', textColor: 'text-blue-500', icon: Truck, bgLight: 'bg-blue-50' },\n    processing: { color: 'bg-orange-500', textColor: 'text-orange-500', icon: Clock, bgLight: 'bg-orange-50' },\n    cancelled: { color: 'bg-red-500', textColor: 'text-red-500', icon: X, bgLight: 'bg-red-50' }\n  };\n\n  const formatDate = (dateString) => {\n    return new Date(dateString).toLocaleDateString('en-IN', {\n      day: 'numeric',\n      month: 'short',\n      year: 'numeric'\n    });\n  };\n\n  const renderStatusBadge = (status) => {\n    const config = statusConfig[status];\n    const IconComponent = config.icon;\n    return (\n      <div className={`flex items-center gap-1 px-3 py-1 rounded-full ${config.color} text-white text-sm font-medium`}>\n        <IconComponent className=\"w-4 h-4\" />\n        {status.charAt(0).toUpperCase() + status.slice(1)}\n      </div>\n    );\n  };\n\n  const renderActionButtons = (order: Order) => {\n    const buttons = [];\n    \n    if (order.status === 'shipped' || order.status === 'processing') {\n      buttons.push(\n        <button \n          key=\"track\" \n          onClick={() => handleTrackOrder(order.id)}\n          className=\"flex items-center gap-2 px-4 py-2 bg-blue-500 text-white rounded-full text-sm font-medium hover:bg-blue-600 transition-colors\"\n        >\n          <Truck className=\"w-4 h-4\" />\n          Track Order\n        </button>\n      );\n    }\n    \n    if (order.status === 'delivered') {\n      buttons.push(\n        <button key=\"review\" className=\"flex items-center gap-2 px-4 py-2 bg-orange-500 text-white rounded-full text-sm font-medium hover:bg-orange-600 transition-colors\">\n          <Star className=\"w-4 h-4\" />\n          Rate & Review\n        </button>\n      );\n    }\n    \n    buttons.push(\n      <button \n        key=\"reorder\" \n        onClick={() => handleReorder(order)}\n        className=\"flex items-center gap-2 px-4 py-2 bg-green-500 text-white rounded-full text-sm font-medium hover:bg-green-600 transition-colors\"\n      >\n        <RotateCcw className=\"w-4 h-4\" />\n        Reorder\n      </button>\n    );\n\n    return (\n      <div className=\"flex gap-2 flex-wrap\">\n        {buttons}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white shadow-sm border-b\">\n        <div className=\"max-w-md mx-auto px-4 py-4\">\n          <div className=\"flex items-center space-x-3 mb-2\">\n            <button \n              onClick={() => navigate('/home')}\n              className=\"p-2 -ml-2 hover:bg-gray-100 rounded-full transition-colors\"\n            >\n              <ArrowLeft className=\"w-6 h-6 text-gray-700\" />\n            </button>\n            <h1 className=\"text-2xl font-bold text-gray-900\">My Orders</h1>\n          </div>\n          <p className=\"text-gray-600 text-sm\">Track your agricultural purchases</p>\n        </div>\n      </div>\n\n      <div className=\"max-w-md mx-auto px-4 py-6 space-y-6\">\n        {/* Summary Cards */}\n        <div className=\"grid grid-cols-3 gap-3\">\n          <div className=\"bg-white rounded-2xl p-4 shadow-sm border border-gray-100\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              <div className=\"w-8 h-8 bg-blue-50 rounded-lg flex items-center justify-center\">\n                <Package className=\"w-4 h-4 text-blue-500\" />\n              </div>\n            </div>\n            <div className=\"text-2xl font-bold text-gray-900\">{totalOrders}</div>\n            <div className=\"text-sm text-gray-600\">Total Orders</div>\n          </div>\n\n          <div className=\"bg-white rounded-2xl p-4 shadow-sm border border-gray-100\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              <div className=\"w-8 h-8 bg-green-50 rounded-lg flex items-center justify-center\">\n                <CheckCircle className=\"w-4 h-4 text-green-500\" />\n              </div>\n            </div>\n            <div className=\"text-2xl font-bold text-gray-900\">{deliveredOrders}</div>\n            <div className=\"text-sm text-gray-600\">Delivered</div>\n          </div>\n\n          <div className=\"bg-white rounded-2xl p-4 shadow-sm border border-gray-100\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              <div className=\"w-8 h-8 bg-yellow-50 rounded-lg flex items-center justify-center\">\n                <span className=\"text-lg\">💰</span>\n              </div>\n            </div>\n            <div className=\"text-2xl font-bold text-gray-900\">₹{totalSpent.toLocaleString()}</div>\n            <div className=\"text-sm text-gray-600\">Total Spent</div>\n          </div>\n        </div>\n\n        {/* Filter Pills */}\n        <div className=\"flex gap-2 overflow-x-auto pb-2\">\n          {['all', 'processing', 'shipped', 'delivered'].map((filter) => (\n            <button\n              key={filter}\n              onClick={() => setActiveFilter(filter)}\n              className={`px-6 py-2 rounded-full text-sm font-medium whitespace-nowrap transition-colors ${\n                activeFilter === filter\n                  ? 'bg-green-500 text-white'\n                  : 'bg-white text-gray-600 border border-gray-200 hover:bg-gray-50'\n              }`}\n            >\n              {filter.charAt(0).toUpperCase() + filter.slice(1)}\n            </button>\n          ))}\n        </div>\n\n        {/* Orders List */}\n        {filteredOrders.length > 0 ? (\n          <div className=\"space-y-4\">\n            {filteredOrders.map((order) => (\n              <div key={order.id} className=\"bg-white rounded-2xl p-5 shadow-sm border border-gray-100\">\n                {/* Order Header */}\n                <div className=\"flex justify-between items-start mb-4\">\n                  <div>\n                    <h3 className=\"font-semibold text-gray-900\">Order #{order.id}</h3>\n                    <p className=\"text-sm text-gray-600\">Placed on {formatDate(order.orderDate)}</p>\n                  </div>\n                  {renderStatusBadge(order.status)}\n                </div>\n\n                {/* Products */}\n                <div className=\"space-y-3 mb-4\">\n                  {order.items.slice(0, 2).map((product, index) => (\n                    <div key={index} className=\"flex justify-between items-center\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"w-10 h-10 bg-green-50 rounded-lg flex items-center justify-center\">\n                          <span className=\"text-lg\">{getItemIcon(product.category)}</span>\n                        </div>\n                        <div>\n                          <p className=\"text-sm font-medium text-gray-900\">{product.name}</p>\n                          <p className=\"text-xs text-gray-500\">{product.quantity} x ₹{product.price}</p>\n                        </div>\n                      </div>\n                      <p className=\"font-semibold text-gray-900\">₹{product.price * product.quantity}</p>\n                    </div>\n                  ))}\n                  {order.items.length > 2 && (\n                    <button className=\"text-sm text-green-500 font-medium\">\n                      + {order.items.length - 2} more items\n                    </button>\n                  )}\n                </div>\n\n                {/* Total Amount */}\n                <div className=\"flex justify-between items-center py-3 border-t border-gray-100\">\n                  <span className=\"font-semibold text-gray-900\">Total Amount</span>\n                  <span className=\"text-lg font-bold text-green-600\">₹{order.total}</span>\n                </div>\n\n                {/* Address & Delivery Info */}\n                <div className=\"bg-gray-50 rounded-xl p-3 mb-4\">\n                  <div className=\"flex items-start gap-2\">\n                    <MapPin className=\"w-4 h-4 text-gray-500 mt-0.5\" />\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm text-gray-900\">{order.address}</p>\n                      {order.status === 'delivered' && order.deliveryDate && (\n                        <p className=\"text-sm text-green-600 mt-1\">\n                          Delivered on {formatDate(order.deliveryDate)}\n                        </p>\n                      )}\n                      {order.status !== 'delivered' && order.estimatedDelivery && (\n                        <p className=\"text-sm text-blue-600 mt-1\">\n                          Expected by {formatDate(order.estimatedDelivery)}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n                </div>\n\n                {/* Action Buttons */}\n                {renderActionButtons(order)}\n              </div>\n            ))}\n          </div>\n        ) : (\n          /* Empty State */\n          <div className=\"text-center py-12 bg-white rounded-2xl shadow-sm border border-gray-100\">\n            <div className=\"w-20 h-20 bg-gray-50 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <ShoppingBag className=\"w-10 h-10 text-gray-400\" />\n            </div>\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No orders yet</h3>\n            <p className=\"text-gray-600 mb-6\">Start shopping for agricultural supplies today!</p>\n            <button \n              onClick={() => navigate('/shop')}\n              className=\"bg-green-500 text-white px-6 py-3 rounded-full font-medium hover:bg-green-600 transition-colors\"\n            >\n              Shop Now\n            </button>\n          </div>\n        )}\n\n        {/* Support Section */}\n        <div className=\"bg-white rounded-2xl p-5 shadow-sm border border-gray-100\">\n          <div className=\"flex items-center gap-2 mb-4\">\n            <HelpCircle className=\"w-5 h-5 text-gray-600\" />\n            <h3 className=\"text-lg font-semibold text-gray-900\">Need Help?</h3>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <button className=\"w-full flex items-center justify-between p-3 bg-gray-50 rounded-xl hover:bg-gray-100 transition-colors\">\n              <div className=\"flex items-center gap-3\">\n                <Phone className=\"w-5 h-5 text-green-500\" />\n                <span className=\"font-medium text-gray-900\">Contact Support</span>\n              </div>\n              <ChevronRight className=\"w-5 h-5 text-gray-400\" />\n            </button>\n            \n            <button className=\"w-full flex items-center justify-between p-3 bg-gray-50 rounded-xl hover:bg-gray-100 transition-colors\">\n              <div className=\"flex items-center gap-3\">\n                <RotateCcw className=\"w-5 h-5 text-green-500\" />\n                <span className=\"font-medium text-gray-900\">Return Policy</span>\n              </div>\n              <ChevronRight className=\"w-5 h-5 text-gray-400\" />\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FarmerOrdersPage;","size_bytes":12646},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/pages/Profile.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { realDataService, type UserStats } from '@/lib/realDataService';\nimport { \n  ArrowLeft, \n  Edit, \n  Phone, \n  MapPin, \n  Calendar,\n  TrendingUp,\n  Package,\n  Trophy,\n  Zap,\n  Eye,\n  ShoppingCart,\n  Cloud,\n  Activity,\n  Star,\n  Users,\n  Leaf,\n  Target,\n  Award,\n  BarChart3,\n  Settings,\n  Bell,\n  HelpCircle,\n  LogOut,\n  Crown,\n  Flame,\n  ShoppingBag,\n  Wallet\n} from 'lucide-react';\nimport { Switch } from '@/components/ui/switch';\n\nconst Profile = () => {\n  const navigate = useNavigate();\n  const [userData, setUserData] = useState<any>(null);\n  const [stats, setStats] = useState<UserStats>({\n    totalEarnings: 0,\n    activeListings: 0,\n    successfulSales: 0,\n    totalViews: 0,\n    avgRating: 4.0,\n    diagnosisCount: 0,\n    advisorySaved: 0,\n    level: 'New Farmer',\n    joinedDate: new Date().toISOString()\n  });\n  const [isLoading, setIsLoading] = useState(true);\n  const [notificationsEnabled, setNotificationsEnabled] = useState(true);\n\n  const [achievements, setAchievements] = useState([\n    { id: 1, title: 'First Sale', icon: Trophy, completed: false, color: 'text-yellow-500' },\n    { id: 2, title: 'Top Seller', icon: Crown, completed: false, color: 'text-purple-500' },\n    { id: 3, title: 'Plant Expert', icon: Leaf, completed: false, color: 'text-green-500' },\n    { id: 4, title: 'Super Star', icon: Star, completed: false, color: 'text-gray-400' }\n  ]);\n\n  // Calculate achievements based on real user activity\n  const calculateAchievements = (userStats: UserStats) => {\n    const newAchievements = [\n      {\n        id: 1,\n        title: 'First Sale',\n        icon: Trophy,\n        completed: userStats.successfulSales >= 1,\n        color: userStats.successfulSales >= 1 ? 'text-yellow-500' : 'text-gray-400'\n      },\n      {\n        id: 2,\n        title: 'Top Seller',\n        icon: Crown,\n        completed: userStats.successfulSales >= 10,\n        color: userStats.successfulSales >= 10 ? 'text-purple-500' : 'text-gray-400'\n      },\n      {\n        id: 3,\n        title: 'Plant Expert',\n        icon: Leaf,\n        completed: userStats.diagnosisCount >= 5,\n        color: userStats.diagnosisCount >= 5 ? 'text-green-500' : 'text-gray-400'\n      },\n      {\n        id: 4,\n        title: 'Super Star',\n        icon: Star,\n        completed: userStats.totalEarnings >= 50000,\n        color: userStats.totalEarnings >= 50000 ? 'text-indigo-500' : 'text-gray-400'\n      }\n    ];\n    setAchievements(newAchievements);\n    return newAchievements;\n  };\n\n  // Load user data from localStorage and calculate statistics\n  useEffect(() => {\n    const loadUserData = () => {\n      setIsLoading(true);\n      try {\n        const currentUser = localStorage.getItem('kisanmitra_user');\n        if (currentUser) {\n          const user = JSON.parse(currentUser);\n          setUserData(user);\n          \n          // Calculate basic statistics from stored data\n          const basicStats: UserStats = {\n            totalEarnings: user.totalEarnings || 0,\n            activeListings: user.activeListings || 0,\n            successfulSales: user.successfulSales || 0,\n            totalViews: user.totalViews || 0,\n            avgRating: user.avgRating || 4.0,\n            diagnosisCount: user.diagnosisCount || 0,\n            advisorySaved: user.advisorySaved || 0,\n            level: user.level || 'New Farmer',\n            joinedDate: user.joinedDate || user.createdAt || new Date().toISOString()\n          };\n          \n          setStats(basicStats);\n          calculateAchievements(basicStats);\n        } else {\n          // No user data found, redirect to login\n          navigate('/login');\n        }\n      } catch (error) {\n        console.error('Error loading user data:', error);\n        navigate('/login');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadUserData();\n  }, [navigate]);\n\n  // Add sample data for testing\n  const addSampleData = () => {\n    if (!userData) return;\n    \n    try {\n      setIsLoading(true);\n      \n      // Update user data with sample statistics\n      const updatedUser = {\n        ...userData,\n        totalEarnings: 25000,\n        activeListings: 3,\n        successfulSales: 8,\n        totalViews: 156,\n        avgRating: 4.5,\n        diagnosisCount: 12,\n        advisorySaved: 6,\n        level: 'Experienced Farmer',\n        lastActivityDate: new Date().toISOString()\n      };\n      \n      localStorage.setItem('kisanmitra_user', JSON.stringify(updatedUser));\n      setUserData(updatedUser);\n      \n      const newStats: UserStats = {\n        totalEarnings: updatedUser.totalEarnings,\n        activeListings: updatedUser.activeListings,\n        successfulSales: updatedUser.successfulSales,\n        totalViews: updatedUser.totalViews,\n        avgRating: updatedUser.avgRating,\n        diagnosisCount: updatedUser.diagnosisCount,\n        advisorySaved: updatedUser.advisorySaved,\n        level: updatedUser.level,\n        joinedDate: updatedUser.joinedDate\n      };\n      \n      setStats(newStats);\n      calculateAchievements(newStats);\n      \n      alert('✅ Sample data added! Check your updated statistics.');\n    } catch (error) {\n      console.error('Error adding sample data:', error);\n      alert('❌ Failed to add sample data. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleLogout = () => {\n    // Clear all user data from localStorage\n    localStorage.removeItem('kisanmitra_user');\n    localStorage.removeItem('kisanmitra_auth_token');\n    localStorage.removeItem('kisanmitra_user_id');\n    \n    // Navigate to login page\n    navigate('/login');\n  };\n\n  const StatCard = ({ title, value, icon: Icon, color, trend = null, subtitle = null }) => (\n    <div className=\"bg-white rounded-3xl p-5 shadow-sm border border-gray-100 min-h-[110px]\">\n      <div className=\"flex items-center justify-between mb-3\">\n        <div className={`w-12 h-12 ${color} rounded-2xl flex items-center justify-center`}>\n          <Icon className=\"w-6 h-6 text-white\" />\n        </div>\n        {trend && (\n          <div className=\"flex items-center space-x-1 text-green-600 text-xs font-medium\">\n            <TrendingUp className=\"w-4 h-4\" />\n            <span>{trend}</span>\n          </div>\n        )}\n      </div>\n      <div className=\"text-3xl font-bold text-gray-900 mb-1\">{value}</div>\n      <div className=\"text-base text-gray-700 font-medium\">{title}</div>\n      {subtitle && <div className=\"text-sm text-gray-500 mt-1\">{subtitle}</div>}\n    </div>\n  );\n\n  const QuickActionCard = ({ title, icon: Icon, color, onClick }) => (\n    <button\n      onClick={onClick}\n      className=\"bg-white rounded-3xl p-5 shadow-sm border border-gray-100 hover:shadow-md transition-all active:scale-95 min-h-[100px] flex flex-col items-center justify-center\"\n    >\n      <div className={`w-14 h-14 ${color} rounded-2xl flex items-center justify-center mb-3`}>\n        <Icon className=\"w-7 h-7 text-white\" />\n      </div>\n      <div className=\"text-sm font-semibold text-gray-900 text-center leading-tight\">{title}</div>\n    </button>\n  );\n\n  const MenuSection = ({ title, children }) => (\n    <div className=\"bg-white rounded-3xl shadow-sm border border-gray-100 overflow-hidden\">\n      {title && (\n        <div className=\"px-6 py-5 border-b border-gray-50\">\n          <h3 className=\"text-xl font-bold text-gray-900\">{title}</h3>\n        </div>\n      )}\n      <div className=\"p-3\">\n        {children}\n      </div>\n    </div>\n  );\n\n  const MenuItem = ({ icon: Icon, title, subtitle, onClick = () => {}, rightElement = null, color = \"text-gray-700\" }) => (\n    <button \n      onClick={onClick}\n      className=\"w-full flex items-center justify-between p-5 hover:bg-gray-50 rounded-2xl transition-all min-h-[70px] active:scale-98\"\n    >\n      <div className=\"flex items-center space-x-4\">\n        <div className=\"w-12 h-12 bg-gray-100 rounded-2xl flex items-center justify-center\">\n          <Icon className={`w-6 h-6 ${color}`} />\n        </div>\n        <div className=\"text-left\">\n          <div className=\"font-semibold text-gray-900 text-lg\">{title}</div>\n          {subtitle && <div className=\"text-base text-gray-600 mt-1\">{subtitle}</div>}\n        </div>\n      </div>\n      {rightElement || <div className=\"w-6 h-6\" />}\n    </button>\n  );\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 pb-24\">\n      {/* Header with Profile Info */}\n      <div className=\"bg-white px-5 py-8\">\n        <div className=\"flex items-center justify-between mb-8\">\n          <button \n            onClick={() => navigate('/home')}\n            className=\"w-12 h-12 bg-gray-100 rounded-full flex items-center justify-center active:scale-95 transition-transform\"\n          >\n            <ArrowLeft className=\"w-6 h-6 text-gray-700\" />\n          </button>\n          <button \n            onClick={() => navigate('/profile/edit')}\n            className=\"bg-blue-500 hover:bg-blue-600 px-6 py-3 rounded-2xl flex items-center space-x-2 transition-all active:scale-95\"\n          >\n            <Edit className=\"w-5 h-5 text-white\" />\n            <span className=\"text-base font-medium text-white\">Edit</span>\n          </button>\n        </div>\n\n        {/* Farmer Profile Card */}\n        <div className=\"bg-gray-50 rounded-3xl p-6 border border-gray-100 mb-6\">\n          <div className=\"flex items-start space-x-5\">\n            <div className=\"w-24 h-24 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-full flex items-center justify-center text-white text-3xl font-bold shadow-lg\">\n              {userData?.name?.charAt(0)?.toUpperCase() || 'F'}\n            </div>\n            <div className=\"flex-1\">\n              <h2 className=\"text-2xl font-bold mb-2 text-gray-900\">{userData?.name || 'Loading...'}</h2>\n              <div className=\"flex items-center space-x-2 mb-2\">\n                <MapPin className=\"w-4 h-4 text-gray-500\" />\n                <span className=\"text-sm text-gray-600\">{userData?.district || userData?.location || 'Unknown'}, {userData?.state || 'India'}</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Phone className=\"w-4 h-4 text-gray-500\" />\n                <span className=\"text-sm text-gray-600\">{userData?.phone || `+91 ${userData?.mobile}` || 'Not provided'}</span>\n              </div>\n            </div>\n          </div>\n\n          {/* Member Since Only */}\n          <div className=\"mt-5 pt-5 border-t border-gray-200\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-gray-900 mb-1\">\n                {userData?.joinedDate ? new Date(userData.joinedDate).toLocaleDateString() : 'Recently'}\n              </div>\n              <div className=\"text-xs text-gray-500 uppercase tracking-wider\">Member Since</div>\n            </div>\n          </div>\n        </div>\n\n        {/* Farm Overview - Real Data */}\n        <div className=\"bg-gradient-to-r from-blue-500 to-indigo-600 rounded-3xl p-6 shadow-lg\">\n          <h3 className=\"text-lg font-bold text-white mb-4 flex items-center\">\n            <TrendingUp className=\"w-5 h-5 mr-2\" />\n            Farm Activity\n          </h3>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-white mb-1\">₹{stats.totalEarnings.toLocaleString()}</div>\n              <div className=\"text-xs text-white/80 uppercase tracking-wider\">Total Earnings</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-white mb-1\">{stats.activeListings}</div>\n              <div className=\"text-xs text-white/80 uppercase tracking-wider\">Active Crops</div>\n            </div>\n          </div>\n          {!isLoading && stats.totalEarnings === 0 && (\n            <div className=\"mt-4 text-center\">\n              <p className=\"text-white/70 text-sm\">Start selling crops to track your earnings!</p>\n            </div>\n          )}\n        </div>\n      </div>\n\n      <div className=\"px-5 space-y-6 pt-6\">\n        {/* Marketplace Activity Section */}\n        <div className=\"bg-white rounded-3xl p-6 shadow-sm border border-gray-100\">\n          <div className=\"flex items-center justify-between mb-5\">\n            <h3 className=\"text-xl font-bold text-gray-900 flex items-center\">\n              <ShoppingBag className=\"w-6 h-6 mr-2 text-green-600\" />\n              Marketplace Activity\n            </h3>\n            <div className=\"text-sm text-green-600 bg-green-50 px-3 py-1 rounded-full font-medium\">\n              Active Seller\n            </div>\n          </div>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <StatCard \n              title=\"Active Listings\" \n              value={stats.activeListings} \n              icon={Package}\n              color=\"bg-blue-500\"\n              trend=\"+2 this week\"\n            />\n            <StatCard \n              title=\"Total Sales\" \n              value={stats.successfulSales} \n              icon={Trophy}\n              color=\"bg-green-500\"\n              subtitle=\"All time sales\"\n            />\n          </div>\n        </div>\n\n        {/* Farm Activity & Tools */}\n        <div className=\"bg-white rounded-3xl p-6 shadow-sm border border-gray-100\">\n          <div className=\"flex items-center justify-between mb-5\">\n            <h3 className=\"text-xl font-bold text-gray-900 flex items-center\">\n              <Activity className=\"w-6 h-6 mr-2 text-green-600\" />\n              Farm Activity\n            </h3>\n            <div className=\"text-sm text-green-600 bg-green-50 px-3 py-1 rounded-full font-medium\">\n              Active Farmer\n            </div>\n          </div>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <StatCard \n              title=\"Plant Diagnosis\" \n              value={stats.diagnosisCount} \n              icon={Leaf}\n              color=\"bg-green-500\"\n              subtitle=\"This season\"\n            />\n            <StatCard \n              title=\"Advisory Saved\" \n              value={stats.advisorySaved} \n              icon={Star}\n              color=\"bg-blue-500\"\n              subtitle=\"Farming tips\"\n            />\n          </div>\n        </div>\n\n        {/* Achievements */}\n        <div className=\"bg-white rounded-3xl p-7 shadow-sm border border-gray-100\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h3 className=\"text-xl font-bold text-gray-900\">Achievements</h3>\n            <div className=\"flex items-center space-x-2\">\n              <Trophy className=\"w-5 h-5 text-yellow-500\" />\n              <span className=\"text-base font-semibold text-gray-600\">\n                {achievements.filter(a => a.completed).length}/{achievements.length}\n              </span>\n            </div>\n          </div>\n          <div className=\"grid grid-cols-4 gap-4\">\n            {achievements.map((achievement) => (\n              <div key={achievement.id} className=\"text-center\">\n                <div className={`w-16 h-16 ${achievement.completed ? 'bg-yellow-100' : 'bg-gray-100'} rounded-2xl flex items-center justify-center mx-auto mb-3`}>\n                  <achievement.icon className={`w-8 h-8 ${achievement.color}`} />\n                </div>\n                <div className=\"text-sm font-semibold text-gray-700 leading-tight\">{achievement.title}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Quick Actions */}\n        <div className=\"bg-white rounded-3xl p-7 shadow-sm border border-gray-100\">\n          <h3 className=\"text-xl font-bold text-gray-900 mb-6\">Quick Actions</h3>\n          <div className=\"grid grid-cols-4 gap-4\">\n            <QuickActionCard \n              title=\"My Listings\" \n              icon={Package} \n              color=\"bg-green-500\"\n              onClick={() => navigate('/sell')}\n            />\n            <QuickActionCard \n              title=\"Market Prices\" \n              icon={BarChart3} \n              color=\"bg-blue-500\"\n              onClick={() => navigate('/market-prices')}\n            />\n            <QuickActionCard \n              title=\"Weather\" \n              icon={Cloud} \n              color=\"bg-sky-500\"\n              onClick={() => navigate('/weather')}\n            />\n            <QuickActionCard \n              title=\"Diagnose Plant\" \n              icon={Activity} \n              color=\"bg-orange-500\"\n              onClick={() => navigate('/diagnose')}\n            />\n          </div>\n        </div>\n\n\n        {/* My Activity */}\n        <MenuSection title=\"My Activity\">\n          <MenuItem \n            icon={ShoppingBag} \n            title=\"My Orders\" \n            subtitle=\"View purchase history\"\n            color=\"text-blue-600\"\n            onClick={() => navigate('/orders')}\n          />\n          <MenuItem \n            icon={Leaf} \n            title=\"Saved Advisory\" \n            subtitle={`${stats.advisorySaved} guidance saved`}\n            color=\"text-green-600\"\n            onClick={() => navigate('/advisory')}\n          />\n          <MenuItem \n            icon={Activity} \n            title=\"Treatment History\" \n            subtitle=\"Track applied treatments\"\n            color=\"text-orange-600\"\n            onClick={() => navigate('/treatments')}\n          />\n          <MenuItem \n            icon={Wallet} \n            title=\"Earnings Report\" \n            subtitle=\"View detailed sales report\"\n            color=\"text-purple-600\"\n            rightElement={\n              <div className=\"text-xs bg-green-100 text-green-700 px-2 py-1 rounded-full font-medium\">\n                ₹{stats.totalEarnings.toLocaleString()}\n              </div>\n            }\n          />\n        </MenuSection>\n\n        {/* App Settings */}\n        <MenuSection title=\"Settings\">\n          <div className=\"w-full flex items-center justify-between p-5 hover:bg-gray-50 rounded-2xl transition-all min-h-[70px]\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"w-12 h-12 bg-gray-100 rounded-2xl flex items-center justify-center\">\n                <Bell className=\"w-6 h-6 text-blue-600\" />\n              </div>\n              <div className=\"text-left\">\n                <div className=\"font-semibold text-gray-900 text-lg\">Notifications</div>\n                <div className=\"text-base text-gray-600 mt-1\">Receive farming alerts & updates</div>\n              </div>\n            </div>\n            <Switch\n              checked={notificationsEnabled}\n              onCheckedChange={setNotificationsEnabled}\n              className=\"ml-4\"\n            />\n          </div>\n          <MenuItem \n            icon={HelpCircle} \n            title=\"Help & Support\" \n            subtitle=\"24/7 farmer support\"\n            color=\"text-green-600\"\n            onClick={() => {\n              // Show help and support options\n              alert(\"Help & Support\\n\\n📞 Call: 1800-123-KISAN\\n📧 Email: support@kisanmitra.com\\n💬 Chat: Available 24/7\\n\\nFor immediate assistance, tap OK\");\n            }}\n          />\n        </MenuSection>\n\n        {/* Logout */}\n        <div className=\"bg-white rounded-3xl shadow-sm border border-red-100\">\n          <button \n            onClick={handleLogout}\n            className=\"w-full flex items-center justify-center space-x-4 p-6 hover:bg-red-50 rounded-3xl transition-all active:scale-98 min-h-[80px]\"\n          >\n            <div className=\"w-12 h-12 bg-red-100 rounded-2xl flex items-center justify-center\">\n              <LogOut className=\"w-6 h-6 text-red-600\" />\n            </div>\n            <span className=\"font-bold text-red-600 text-lg\">Logout</span>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Profile;","size_bytes":19730},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/pages/ProfileEdit.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { \n  ArrowLeft, \n  Save, \n  Camera,\n  User,\n  Phone, \n  MapPin, \n  Calendar,\n  Globe,\n  Mail,\n  Sprout\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { toast } from '@/components/ui/use-toast';\nimport CustomInput from '@/components/CustomInput';\nimport LocationPicker from '@/components/LocationPicker';\n\nconst ProfileEdit = () => {\n  const navigate = useNavigate();\n  const [userData, setUserData] = useState({\n    name: '',\n    phone: '',\n    email: '',\n    birthDate: '',\n    location: '',\n    state: '',\n    district: '',\n    pincode: '',\n    language: 'English',\n    farmSize: '',\n    experience: '',\n    crops: ''\n  });\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Load current user data\n  useEffect(() => {\n    const loadCurrentUser = () => {\n      try {\n        const currentUser = localStorage.getItem('kisanmitra_user');\n        if (currentUser) {\n          const user = JSON.parse(currentUser);\n          setUserData({\n            name: user.name || '',\n            phone: user.phone || user.mobile ? `+91 ${user.mobile}` : '',\n            email: user.email || '',\n            birthDate: user.birthDate || '',\n            location: user.location || user.district || '',\n            state: user.state || '',\n            district: user.district || user.location || '',\n            pincode: user.pincode || '',\n            language: user.language || 'English',\n            farmSize: user.farmSize || '',\n            experience: user.experience || '',\n            crops: user.crops || ''\n          });\n        }\n      } catch (error) {\n        console.error('Error loading user data:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadCurrentUser();\n  }, []);\n\n  const getNameValidation = () => {\n    if (userData.name.length === 0) return undefined;\n    const isValid = userData.name.trim().length >= 2;\n    return {\n      isValid,\n      message: isValid ? \"Valid name\" : \"Name must be at least 2 characters\"\n    };\n  };\n\n  const getPhoneValidation = () => {\n    if (userData.phone.length === 0) return undefined;\n    const phoneNumber = userData.phone.replace(/\\D/g, '');\n    const isValid = phoneNumber.length === 12 && phoneNumber.startsWith('91');\n    return {\n      isValid,\n      message: isValid ? \"Valid phone number\" : \"Enter a valid Indian mobile number\"\n    };\n  };\n\n  const handleSave = async () => {\n    try {\n      // Validate required fields\n      if (!userData.name.trim()) {\n        toast({\n          title: \"Validation Error\",\n          description: \"Name is required\",\n          variant: \"destructive\"\n        });\n        return;\n      }\n\n      // Get current user data and update it\n      const currentUser = JSON.parse(localStorage.getItem('kisanmitra_user') || '{}');\n      const phoneNumber = userData.phone.replace(/\\D/g, '').replace(/^91/, '');\n      \n      const updatedUser = {\n        ...currentUser,\n        name: userData.name.trim(),\n        phone: userData.phone,\n        mobile: phoneNumber,\n        email: userData.email,\n        birthDate: userData.birthDate,\n        location: userData.location || userData.district,\n        state: userData.state,\n        district: userData.district || userData.location,\n        pincode: userData.pincode,\n        language: userData.language,\n        farmSize: userData.farmSize,\n        experience: userData.experience,\n        crops: userData.crops,\n        updatedAt: new Date().toISOString()\n      };\n      \n      // Save to localStorage\n      localStorage.setItem('kisanmitra_user', JSON.stringify(updatedUser));\n      \n      // Also update auth token if phone changed\n      if (currentUser.pin) {\n        const authToken = btoa(`${phoneNumber}:${currentUser.pin}`);\n        localStorage.setItem('kisanmitra_auth_token', authToken);\n      }\n      \n      toast({\n        title: \"Profile Updated! ✅\",\n        description: \"Your profile has been successfully updated.\"\n      });\n      \n      navigate('/profile');\n      \n    } catch (error) {\n      console.error('Error saving profile:', error);\n      toast({\n        title: \"Save Failed\",\n        description: \"Failed to save profile. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    setUserData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  return (\n    <div className=\"mobile-container bg-background\">\n      {/* Header */}\n      <div className=\"mobile-header bg-white\">\n        <div className=\"flex items-center space-x-3\">\n          <button \n            onClick={() => navigate('/profile')}\n            className=\"w-10 h-10 bg-agri-light rounded-full flex items-center justify-center\"\n          >\n            <ArrowLeft className=\"w-5 h-5 text-agri-accent\" />\n          </button>\n          <h1 className=\"text-xl font-bold text-agri-accent\">Edit Profile</h1>\n        </div>\n        \n        <Button \n          onClick={handleSave}\n          className=\"bg-agri-primary hover:bg-agri-secondary text-white\"\n        >\n          <Save className=\"w-4 h-4 mr-2\" />\n          Save\n        </Button>\n      </div>\n\n      <div className=\"mobile-content space-y-6 pt-4\">\n        {/* Profile Photo */}\n        <div className=\"bg-white rounded-2xl p-6 shadow-soft\">\n          <div className=\"text-center\">\n            <div className=\"w-20 h-20 bg-agri-primary rounded-full flex items-center justify-center text-white text-2xl font-bold mx-auto mb-4\">\n              RJ\n            </div>\n            <Button variant=\"outline\" className=\"border-agri-primary text-agri-primary\">\n              <Camera className=\"w-4 h-4 mr-2\" />\n              Change Photo\n            </Button>\n          </div>\n        </div>\n\n        {/* Personal Information */}\n        <div className=\"bg-white rounded-2xl p-6 shadow-soft\">\n          <div className=\"flex items-center space-x-2 mb-6\">\n            <User className=\"w-5 h-5 text-agri-primary\" />\n            <h3 className=\"text-lg font-bold text-agri-accent\">Personal Information</h3>\n          </div>\n\n          <div className=\"space-y-4\">\n            <CustomInput\n              label=\"Full Name\"\n              icon={<User className=\"w-5 h-5\" />}\n              value={userData.name}\n              onChange={(value) => handleInputChange('name', value)}\n              placeholder=\"Enter your full name\"\n              type=\"text\"\n              validation={getNameValidation()}\n              required\n            />\n\n            <CustomInput\n              label=\"Mobile Number\"\n              icon={<Phone className=\"w-5 h-5\" />}\n              value={userData.phone.replace('+91 ', '')}\n              onChange={(value) => handleInputChange('phone', `+91 ${value}`)}\n              placeholder=\"Enter 10 digit mobile\"\n              type=\"tel\"\n              prefix=\"🇮🇳 +91\"\n              maxLength={10}\n              validation={getPhoneValidation()}\n              required\n            />\n\n            <div>\n              <Label htmlFor=\"email\" className=\"text-agri-accent font-medium\">Email Address (Optional)</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                value={userData.email}\n                onChange={(e) => handleInputChange('email', e.target.value)}\n                placeholder=\"your.email@example.com\"\n                className=\"mt-2 border-agri-primary/20 focus:border-agri-primary\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"birthDate\" className=\"text-agri-accent font-medium\">Date of Birth</Label>\n              <Input\n                id=\"birthDate\"\n                type=\"date\"\n                value={userData.birthDate}\n                onChange={(e) => handleInputChange('birthDate', e.target.value)}\n                className=\"mt-2 border-agri-primary/20 focus:border-agri-primary\"\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* Location Information */}\n        <div className=\"bg-white rounded-2xl p-6 shadow-soft\">\n          <div className=\"flex items-center space-x-2 mb-6\">\n            <MapPin className=\"w-5 h-5 text-agri-primary\" />\n            <h3 className=\"text-lg font-bold text-agri-accent\">Location Details</h3>\n          </div>\n\n          <LocationPicker\n            state={userData.state}\n            district={userData.district}\n            onStateChange={(value) => handleInputChange('state', value)}\n            onDistrictChange={(value) => handleInputChange('district', value)}\n          />\n\n          <div className=\"mt-4\">\n            <Label htmlFor=\"pincode\" className=\"text-agri-accent font-medium\">PIN Code (Optional)</Label>\n            <Input\n              id=\"pincode\"\n              value={userData.pincode}\n              onChange={(e) => handleInputChange('pincode', e.target.value.replace(/\\D/g, '').slice(0, 6))}\n              placeholder=\"Enter 6-digit PIN code\"\n              maxLength={6}\n              className=\"mt-2 border-agri-primary/20 focus:border-agri-primary\"\n            />\n          </div>\n        </div>\n\n        {/* Farm Information */}\n        <div className=\"bg-white rounded-2xl p-6 shadow-soft\">\n          <div className=\"flex items-center space-x-2 mb-6\">\n            <Sprout className=\"w-5 h-5 text-agri-primary\" />\n            <h3 className=\"text-lg font-bold text-agri-accent\">Farm Details</h3>\n          </div>\n\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"farmSize\" className=\"text-agri-accent font-medium\">Farm Size (Optional)</Label>\n              <Input\n                id=\"farmSize\"\n                value={userData.farmSize}\n                onChange={(e) => handleInputChange('farmSize', e.target.value)}\n                placeholder=\"e.g., 2.5 acres, 1 hectare\"\n                className=\"mt-2 border-agri-primary/20 focus:border-agri-primary\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"experience\" className=\"text-agri-accent font-medium\">Farming Experience (Optional)</Label>\n              <Input\n                id=\"experience\"\n                value={userData.experience}\n                onChange={(e) => handleInputChange('experience', e.target.value)}\n                placeholder=\"e.g., 5 years, New farmer\"\n                className=\"mt-2 border-agri-primary/20 focus:border-agri-primary\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"crops\" className=\"text-agri-accent font-medium\">Primary Crops (Optional)</Label>\n              <Input\n                id=\"crops\"\n                value={userData.crops}\n                onChange={(e) => handleInputChange('crops', e.target.value)}\n                placeholder=\"e.g., Rice, Wheat, Tomato\"\n                className=\"mt-2 border-agri-primary/20 focus:border-agri-primary\"\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* Preferences */}\n        <div className=\"bg-white rounded-2xl p-6 shadow-soft\">\n          <div className=\"flex items-center space-x-2 mb-6\">\n            <Globe className=\"w-5 h-5 text-agri-primary\" />\n            <h3 className=\"text-lg font-bold text-agri-accent\">Preferences</h3>\n          </div>\n\n          <div>\n            <Label htmlFor=\"language\" className=\"text-agri-accent font-medium\">Preferred Language</Label>\n            <Select value={userData.language} onValueChange={(value) => handleInputChange('language', value)}>\n              <SelectTrigger className=\"mt-2 border-agri-primary/20 focus:border-agri-primary\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"English\">🇮🇳 English</SelectItem>\n                <SelectItem value=\"Hindi\">🇮🇳 हिंदी (Hindi)</SelectItem>\n                <SelectItem value=\"Telugu\">🇮🇳 తెలుగు (Telugu)</SelectItem>\n                <SelectItem value=\"Tamil\">🇮🇳 தமிழ் (Tamil)</SelectItem>\n                <SelectItem value=\"Kannada\">🇮🇳 ಕನ್ನಡ (Kannada)</SelectItem>\n                <SelectItem value=\"Marathi\">🇮🇳 मराठी (Marathi)</SelectItem>\n                <SelectItem value=\"Gujarati\">🇮🇳 ગુજરાતી (Gujarati)</SelectItem>\n                <SelectItem value=\"Bengali\">🇮🇳 বাংলা (Bengali)</SelectItem>\n                <SelectItem value=\"Punjabi\">🇮🇳 ਪੰਜਾਬੀ (Punjabi)</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        {/* Save Button */}\n        <div className=\"pb-8\">\n          <Button \n            onClick={handleSave}\n            className=\"w-full bg-agri-primary hover:bg-agri-secondary text-white h-12 text-lg font-semibold\"\n          >\n            <Save className=\"w-5 h-5 mr-2\" />\n            Save Changes\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ProfileEdit;","size_bytes":13185},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/pages/SellProduce.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { dataService, type Listing } from '@/lib/dataService';\nimport {\n  ArrowLeft,\n  Plus,\n  MapPin,\n  Clock,\n  Eye,\n  Truck,\n  CheckCircle,\n  X,\n  TrendingUp\n} from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Switch } from '@/components/ui/switch';\n\nconst SellProduce = () => {\n  const navigate = useNavigate();\n  const [selectedTab, setSelectedTab] = useState('active');\n  const [showCreateListingDialog, setShowCreateListingDialog] = useState(false);\n  const [selectedCrop, setSelectedCrop] = useState('');\n  const [selectedMarket, setSelectedMarket] = useState('');\n  const [quantity, setQuantity] = useState('');\n  const [needTransport, setNeedTransport] = useState(false);\n  const [activeListings, setActiveListings] = useState<Listing[]>([]);\n  const [soldListings, setSoldListings] = useState<Listing[]>([]);\n  const [currentUser, setCurrentUser] = useState<any>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  \n  // Market data from MarketPrices component\n  const marketData = [\n    {\n      id: 1,\n      name: 'Azadpur Mandi',\n      location: 'Delhi',\n      distance: '12 km',\n      crops: [\n        { name: 'Tomato', price: 16, change: '+8%', trend: 'up', previousPrice: 14.80 },\n        { name: 'Onion', price: 25, change: '+12%', trend: 'up', previousPrice: 22.30 },\n        { name: 'Potato', price: 18, change: '-5%', trend: 'down', previousPrice: 19 },\n        { name: 'Carrot', price: 22, change: '+3%', trend: 'up', previousPrice: 21.30 },\n        { name: 'Cabbage', price: 12, change: '0%', trend: 'stable', previousPrice: 12 }\n      ]\n    },\n    {\n      id: 2,\n      name: 'Ghazipur Mandi',\n      location: 'Delhi',\n      distance: '18 km',\n      crops: [\n        { name: 'Wheat', price: 21.50, change: '+2%', trend: 'up', previousPrice: 21.05 },\n        { name: 'Paddy', price: 18.50, change: '-3%', trend: 'down', previousPrice: 19.07 },\n        { name: 'Mustard', price: 42, change: '+5%', trend: 'up', previousPrice: 40 },\n        { name: 'Gram', price: 38, change: '+1%', trend: 'up', previousPrice: 37.62 }\n      ]\n    },\n    {\n      id: 3,\n      name: 'Najafgarh Mandi',\n      location: 'Delhi',\n      distance: '25 km',\n      crops: [\n        { name: 'Cauliflower', price: 15, change: '+10%', trend: 'up', previousPrice: 13.60 },\n        { name: 'Peas', price: 35, change: '-8%', trend: 'down', previousPrice: 38 },\n        { name: 'Spinach', price: 20, change: '+15%', trend: 'up', previousPrice: 17.40 },\n        { name: 'Radish', price: 8, change: '+6%', trend: 'up', previousPrice: 7.55 }\n      ]\n    },\n    {\n      id: 4,\n      name: 'Okhla Mandi',\n      location: 'Delhi',\n      distance: '22 km',\n      crops: [\n        { name: 'Brinjal', price: 24, change: '+7%', trend: 'up', previousPrice: 22.40 },\n        { name: 'Okra', price: 28, change: '-4%', trend: 'down', previousPrice: 29.20 },\n        { name: 'Bottle Gourd', price: 18, change: '+2%', trend: 'up', previousPrice: 17.65 },\n        { name: 'Bitter Gourd', price: 32, change: '+9%', trend: 'up', previousPrice: 29.35 }\n      ]\n    }\n  ];\n\n  // Get market-specific price for selected crop and market\n  const getMarketPrice = () => {\n    if (!selectedMarket || !selectedCrop) return 0;\n    const market = marketData.find(m => m.name === selectedMarket);\n    const crop = market?.crops.find(c => c.name === selectedCrop);\n    return crop?.price || 0;\n  };\n\n  // Auto-calculated price based on quantity and market-specific price\n  const calculateTotalPrice = () => {\n    if (!selectedCrop || !quantity || !selectedMarket) return 0;\n    const marketPrice = getMarketPrice();\n    return parseFloat(quantity) * marketPrice;\n  };\n\n  // Load real user data and listings\n  useEffect(() => {\n    const loadUserData = async () => {\n      setIsLoading(true);\n      try {\n        const user = dataService.getCurrentUser();\n        if (user) {\n          setCurrentUser(user);\n          await loadUserListings(user.id);\n        }\n      } catch (error) {\n        console.error('Error loading user data:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadUserData();\n  }, []);\n\n  const loadUserListings = async (userId: string) => {\n    try {\n      const allListings = dataService.getUserListings(userId);\n      const active = allListings.filter(l => l.status === 'active');\n      const sold = allListings.filter(l => l.status === 'sold');\n      \n      setActiveListings(active);\n      setSoldListings(sold);\n    } catch (error) {\n      console.error('Error loading listings:', error);\n    }\n  };\n\n  const marketPrices = [\n    { crop: '🍅 Tomato', avgPrice: 25, emoji: '🍅', name: 'Tomato' },\n    { crop: '🌾 Wheat', avgPrice: 22, emoji: '🌾', name: 'Wheat' },\n    { crop: '🥔 Potato', avgPrice: 12, emoji: '🥔', name: 'Potato' },\n    { crop: '🌽 Maize', avgPrice: 18, emoji: '🌽', name: 'Maize' },\n    { crop: '🌶️ Chili', avgPrice: 80, emoji: '🌶️', name: 'Green Chili' },\n    { crop: '☁️ Cotton', avgPrice: 55, emoji: '☁️', name: 'Cotton' }\n  ];\n\n  const totalEarnings = soldListings.reduce((sum, listing) => sum + listing.soldPrice, 0);\n\n  const handleCreateListing = async () => {\n    if (!currentUser) {\n      alert('Please login first to create listings');\n      return;\n    }\n\n    if (!selectedMarket || !selectedCrop || !quantity) {\n      alert('Please fill all required fields');\n      return;\n    }\n\n    try {\n      const marketPrice = getMarketPrice();\n      const totalPrice = calculateTotalPrice();\n      const cropEmoji = getCropEmoji(selectedCrop);\n      \n      // Create new listing with real database structure\n      const newListing: Listing = {\n        id: `listing_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        userId: currentUser.id,\n        crop: `${cropEmoji} ${selectedCrop}`,\n        quantity: `${quantity} kg`,\n        pricePerKg: marketPrice,\n        market: selectedMarket,\n        transport: needTransport ? 'Yes' : 'No',\n        views: 0,\n        inquiries: 0,\n        totalPrice: totalPrice,\n        status: 'active',\n        postedDate: 'Just now',\n        createdAt: new Date().toISOString()\n      };\n\n      // Save to real database service\n      dataService.addListing(newListing);\n      \n      // Update local state\n      setActiveListings(prev => [...prev, newListing]);\n      \n      // Show success message\n      alert(`✅ Listing created successfully!\\n\\nCrop: ${selectedCrop}\\nQuantity: ${quantity} kg\\nMarket: ${selectedMarket}\\nTotal Value: ₹${totalPrice.toLocaleString()}`);\n      \n      setShowCreateListingDialog(false);\n      \n      // Reset form\n      setSelectedCrop('');\n      setSelectedMarket('');\n      setQuantity('');\n      setNeedTransport(false);\n    } catch (error) {\n      console.error('Error creating listing:', error);\n      alert('Failed to create listing. Please try again.');\n    }\n  };\n\n  // Helper function to get crop emoji\n  const getCropEmoji = (cropName) => {\n    const emojiMap = {\n      'Tomato': '🍅',\n      'Onion': '🧅', \n      'Potato': '🥔',\n      'Carrot': '🥕',\n      'Cabbage': '🥬',\n      'Wheat': '🌾',\n      'Paddy': '🌾',\n      'Mustard': '🌱',\n      'Gram': '🫘',\n      'Cauliflower': '🥬',\n      'Peas': '🟢',\n      'Spinach': '🥬',\n      'Radish': '🤍',\n      'Brinjal': '🍆',\n      'Okra': '🌶️',\n      'Bottle Gourd': '🥒',\n      'Bitter Gourd': '🥒'\n    };\n    return emojiMap[cropName] || '🌱';\n  };\n\n  const prefillFromMarketPrice = (crop: any) => {\n    setSelectedCrop(crop.name);\n    setShowCreateListingDialog(true);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-blue-50 pb-20\">\n      {/* Header - Mobile Optimized */}\n      <div className=\"bg-white shadow-sm border-b border-green-100 sticky top-0 z-10\">\n        <div className=\"px-4 py-3\">\n          <div className=\"flex items-center space-x-3\">\n            <button\n              onClick={() => navigate(-1)}\n              className=\"p-2 hover:bg-gray-100 rounded-xl transition-colors\"\n            >\n              <ArrowLeft className=\"w-5 h-5 text-gray-600\" />\n            </button>\n            <div>\n              <h1 className=\"text-xl font-bold text-gray-900\">My Listings</h1>\n              <p className=\"text-xs text-gray-600\">Manage your crop listings</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Top Section - Mobile Optimized Tabs and Earnings */}\n      <div className=\"px-4 py-4\">\n        <div className=\"flex items-center justify-between mb-4\">\n          {/* Tabs - Mobile Sized */}\n          <div className=\"flex bg-white rounded-2xl p-1 shadow-sm border\">\n            <button\n              onClick={() => setSelectedTab('active')}\n              className={`px-4 py-2.5 rounded-xl font-bold text-sm transition-all ${\n                selectedTab === 'active'\n                  ? 'bg-green-500 text-white shadow-sm'\n                  : 'text-gray-600 hover:text-green-600'\n              }`}\n            >\n              Active\n            </button>\n            <button\n              onClick={() => setSelectedTab('sold')}\n              className={`px-4 py-2.5 rounded-xl font-bold text-sm transition-all ${\n                selectedTab === 'sold'\n                  ? 'bg-green-500 text-white shadow-sm'\n                  : 'text-gray-600 hover:text-green-600'\n              }`}\n            >\n              Sold\n            </button>\n          </div>\n\n          {/* Counts and Earnings Display */}\n          <div className=\"flex space-x-3\">\n            <div className=\"text-center bg-blue-50 px-3 py-2 rounded-xl border border-blue-200\">\n              <p className=\"text-xs text-blue-600 font-medium\">Active</p>\n              <p className=\"text-lg font-bold text-blue-700\">{activeListings.length}</p>\n            </div>\n            <div className=\"text-center bg-orange-50 px-3 py-2 rounded-xl border border-orange-200\">\n              <p className=\"text-xs text-orange-600 font-medium\">Sold</p>\n              <p className=\"text-lg font-bold text-orange-700\">{soldListings.length}</p>\n            </div>\n            <div className=\"text-center bg-green-50 px-3 py-2 rounded-xl border border-green-200\">\n              <p className=\"text-xs text-green-600 font-medium\">Earned</p>\n              <p className=\"text-lg font-bold text-green-700\">₹{totalEarnings.toLocaleString()}</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Listings Section - Mobile Optimized */}\n        <div className=\"space-y-3 mb-6\">\n          {selectedTab === 'active' && (\n            <>\n              {activeListings.map((listing) => (\n                <Card key={listing.id} className=\"bg-white rounded-2xl shadow-sm border border-gray-100\">\n                  <CardContent className=\"p-4\">\n                    {/* Mobile Layout: Vertical Stack */}\n                    <div className=\"flex items-start justify-between mb-3\">\n                      <div className=\"flex items-center space-x-3 flex-1\">\n                        <div className=\"text-3xl\">{listing.crop.split(' ')[0]}</div>\n                        <div className=\"flex-1\">\n                          <h3 className=\"font-bold text-lg text-gray-900 leading-tight\">{listing.crop}</h3>\n                          <p className=\"text-sm text-gray-500\">{listing.quantity} – ₹{listing.pricePerKg}/kg – Transport: {listing.transport}</p>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center justify-between bg-gray-50 rounded-xl p-3\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"flex items-center space-x-1 text-blue-600\">\n                          <Eye className=\"w-4 h-4\" />\n                          <span className=\"text-xs font-medium\">{listing.views}</span>\n                        </div>\n                        <div className=\"flex items-center space-x-1 text-orange-600\">\n                          <Clock className=\"w-4 h-4\" />\n                          <span className=\"text-xs font-medium\">{listing.inquiries}</span>\n                        </div>\n                      </div>\n                      <p className=\"text-xs text-gray-500\">{listing.postedDate}</p>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </>\n          )}\n\n          {selectedTab === 'sold' && (\n            <>\n              {soldListings.map((listing) => (\n                <Card key={listing.id} className=\"bg-white rounded-2xl shadow-sm border border-gray-100\">\n                  <CardContent className=\"p-4\">\n                    {/* Mobile Layout: Vertical Stack */}\n                    <div className=\"flex items-start justify-between mb-3\">\n                      <div className=\"flex items-center space-x-3 flex-1\">\n                        <div className=\"text-3xl\">{listing.crop.split(' ')[0]}</div>\n                        <div className=\"flex-1\">\n                          <h3 className=\"font-bold text-lg text-gray-900 leading-tight\">{listing.crop}</h3>\n                          <p className=\"text-sm text-gray-500\">{listing.quantity} – ₹{listing.pricePerKg}/kg – Transport: {listing.transport}</p>\n                          <p className=\"text-lg font-bold text-green-600 mt-1\">Earned: ₹{listing.soldPrice.toLocaleString()}</p>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center justify-between bg-green-50 rounded-xl p-3 border border-green-200\">\n                      <div className=\"flex items-center space-x-2 text-green-600\">\n                        <CheckCircle className=\"w-4 h-4\" />\n                        <span className=\"text-sm font-medium\">Sold to {listing.buyer}</span>\n                      </div>\n                      <p className=\"text-xs text-gray-500\">{new Date(listing.soldDate).toLocaleDateString()}</p>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </>\n          )}\n        </div>\n\n        {/* Market Prices Section - Mobile Optimized */}\n        <div className=\"mb-6\">\n          <h2 className=\"text-lg font-bold text-gray-900 mb-3\">Select Crop to Sell</h2>\n          <div className=\"grid grid-cols-2 gap-2\">\n            {marketPrices.map((crop, index) => (\n              <Card \n                key={index}\n                className=\"bg-white rounded-2xl shadow-sm border border-gray-100 cursor-pointer hover:shadow-md transition-shadow active:scale-95\"\n                onClick={() => prefillFromMarketPrice(crop)}\n              >\n                <CardContent className=\"p-3 text-center\">\n                  <div className=\"text-2xl mb-1\">{crop.emoji}</div>\n                  <h3 className=\"font-bold text-sm text-gray-900 truncate\">{crop.name}</h3>\n                  <p className=\"text-green-600 font-bold text-sm\">₹{crop.avgPrice}/kg avg</p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {/* Floating Action Button (FAB) - Mobile Optimized */}\n      <button\n        onClick={() => setShowCreateListingDialog(true)}\n        className=\"fixed bottom-6 right-4 w-14 h-14 bg-green-500 hover:bg-green-600 text-white rounded-full shadow-2xl hover:shadow-3xl transition-all duration-300 flex items-center justify-center group z-50\"\n      >\n        <Plus className=\"w-7 h-7 group-hover:rotate-90 transition-transform duration-300\" />\n      </button>\n\n      {/* Create New Listing Dialog - Mobile Optimized */}\n      <Dialog open={showCreateListingDialog} onOpenChange={setShowCreateListingDialog}>\n        <DialogContent className=\"max-w-sm mx-auto m-4 rounded-2xl\">\n          <DialogHeader className=\"text-center\">\n            <DialogTitle className=\"text-lg font-bold text-gray-900\">Create New Listing</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-3 py-2\">\n            {/* Market Selection */}\n            <div>\n              <label className=\"block text-sm font-bold text-gray-700 mb-2\">Select Market</label>\n              <Select value={selectedMarket} onValueChange={setSelectedMarket}>\n                <SelectTrigger className=\"w-full h-12 text-base\">\n                  <SelectValue placeholder=\"Choose market\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {marketData.map((market) => (\n                    <SelectItem key={market.id} value={market.name} className=\"text-base py-3\">\n                      <div className=\"flex flex-col\">\n                        <span className=\"font-medium\">{market.name}</span>\n                        <span className=\"text-xs text-gray-500\">{market.location} • {market.distance}</span>\n                      </div>\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Crop Name */}\n            <div>\n              <label className=\"block text-sm font-bold text-gray-700 mb-2\">Crop Name</label>\n              <Select value={selectedCrop} onValueChange={setSelectedCrop} disabled={!selectedMarket}>\n                <SelectTrigger className=\"w-full h-12 text-base\">\n                  <SelectValue placeholder={selectedMarket ? \"Select crop\" : \"Select market first\"} />\n                </SelectTrigger>\n                <SelectContent>\n                  {selectedMarket && marketData.find(m => m.name === selectedMarket)?.crops.map((crop) => (\n                    <SelectItem key={crop.name} value={crop.name} className=\"text-base py-3\">\n                      <div className=\"flex justify-between items-center w-full\">\n                        <span>{crop.name}</span>\n                        <span className=\"text-green-600 font-medium\">₹{crop.price}/kg</span>\n                      </div>\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Quantity */}\n            <div>\n              <label className=\"block text-sm font-bold text-gray-700 mb-2\">Quantity (kg)</label>\n              <Input\n                type=\"number\"\n                placeholder=\"Enter quantity\"\n                value={quantity}\n                onChange={(e) => setQuantity(e.target.value)}\n                className=\"w-full h-12 text-base\"\n              />\n            </div>\n\n            {/* Price Display (Auto-calculated) */}\n            <div>\n              <label className=\"block text-sm font-bold text-gray-700 mb-2\">Price Information</label>\n              <div className=\"bg-gray-50 rounded-xl p-4 border\">\n                {selectedMarket && selectedCrop && (\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-gray-600\">Market:</span>\n                      <span className=\"text-sm font-medium\">{selectedMarket}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-gray-600\">Market price:</span>\n                      <span className=\"text-sm font-medium\">₹{getMarketPrice()}/kg</span>\n                    </div>\n                    {quantity && (\n                      <>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-sm text-gray-600\">Quantity:</span>\n                          <span className=\"text-sm font-medium\">{quantity} kg</span>\n                        </div>\n                        <div className=\"flex justify-between border-t pt-2\">\n                          <span className=\"text-sm font-bold text-gray-900\">Total Price:</span>\n                          <span className=\"text-lg font-bold text-green-600\">₹{calculateTotalPrice().toLocaleString()}</span>\n                        </div>\n                      </>\n                    )}\n                  </div>\n                )}\n                {(!selectedMarket || !selectedCrop) && (\n                  <p className=\"text-sm text-gray-500 text-center\">\n                    {!selectedMarket ? \"Select a market and crop to see price calculation\" : \"Select a crop to see price calculation\"}\n                  </p>\n                )}\n              </div>\n            </div>\n\n            {/* Transport Toggle */}\n            <div className=\"bg-gray-50 rounded-xl p-3\">\n              <div className=\"flex items-center justify-between\">\n                <label className=\"text-sm font-bold text-gray-700\">Need Transport?</label>\n                <div className=\"flex items-center space-x-3\">\n                  <span className={`text-sm font-medium ${!needTransport ? 'text-gray-900' : 'text-gray-500'}`}>No</span>\n                  <Switch\n                    checked={needTransport}\n                    onCheckedChange={setNeedTransport}\n                  />\n                  <span className={`text-sm font-medium ${needTransport ? 'text-gray-900' : 'text-gray-500'}`}>Yes</span>\n                </div>\n              </div>\n            </div>\n\n            {/* Submit Button */}\n            <Button\n              onClick={handleCreateListing}\n              disabled={!selectedMarket || !selectedCrop || !quantity}\n              className=\"w-full py-4 bg-green-500 hover:bg-green-600 text-white font-bold text-lg rounded-2xl h-12 mt-4\"\n            >\n              Create Listing\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default SellProduce;","size_bytes":22078},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/pages/Shop.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { \n  ArrowLeft, \n  Search, \n  Filter, \n  ShoppingCart, \n  Star, \n  Heart,\n  Plus,\n  Minus,\n  Package,\n  Truck,\n  Shield,\n  Zap,\n  Sparkles\n} from 'lucide-react';\nimport { cartManager } from '@/lib/cart';\n\nconst Shop = () => {\n  const navigate = useNavigate();\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState('all');\n  const [cartItems, setCartItems] = useState({});\n  const [wishlist, setWishlist] = useState({});\n  const [cartCount, setCartCount] = useState(0);\n  const [cartTotal, setCartTotal] = useState(0);\n\n  useEffect(() => {\n    updateCartDisplay();\n    const unsubscribe = cartManager.onCartChange(() => {\n      updateCartDisplay();\n    });\n    return unsubscribe;\n  }, []);\n\n  const updateCartDisplay = () => {\n    const cart = cartManager.getCart();\n    const itemCounts = {};\n    cart.forEach(item => {\n      itemCounts[item.id] = item.quantity;\n    });\n    setCartItems(itemCounts);\n    setCartCount(cartManager.getCartCount());\n    setCartTotal(cartManager.getCartTotal());\n  };\n\n  const categories = [\n    { id: 'all', name: 'All Products', icon: Package },\n    { id: 'fertilizers', name: 'Fertilizers', icon: Zap },\n    { id: 'seeds', name: 'Seeds', icon: Package },\n    { id: 'pesticides', name: 'Pesticides', icon: Shield },\n    { id: 'tools', name: 'Tools', icon: Package }\n  ];\n\n  const products = [\n    {\n      id: '1',\n      name: 'Organic NPK Fertilizer',\n      brand: 'FarmGrow',\n      price: 245,\n      originalPrice: 299,\n      rating: 4.5,\n      reviews: 1243,\n      category: 'fertilizers',\n      inStock: true,\n      bestseller: true,\n      organic: true,\n      size: '1kg',\n      features: ['Organic', 'Fast Acting', 'All Crops']\n    },\n    {\n      id: '2',\n      name: 'Tomato Hybrid Seeds',\n      brand: 'SeedMaster',\n      price: 120,\n      originalPrice: 150,\n      rating: 4.8,\n      reviews: 856,\n      category: 'seeds',\n      inStock: true,\n      bestseller: false,\n      organic: false,\n      size: '50g',\n      features: ['Hybrid', 'Disease Resistant', 'High Yield']\n    },\n    {\n      id: '3',\n      name: 'Copper Fungicide Spray',\n      brand: 'CropCare',\n      price: 180,\n      originalPrice: 210,\n      rating: 4.3,\n      reviews: 634,\n      category: 'pesticides',\n      inStock: true,\n      bestseller: false,\n      organic: false,\n      size: '500ml',\n      features: ['Fungicide', 'Long Lasting', 'Safe']\n    },\n    {\n      id: '4',\n      name: 'Premium Garden Spade',\n      brand: 'ToolMaster',\n      price: 350,\n      originalPrice: 420,\n      rating: 4.6,\n      reviews: 432,\n      category: 'tools',\n      inStock: false,\n      bestseller: false,\n      organic: false,\n      size: 'Standard',\n      features: ['Steel', 'Ergonomic', 'Durable']\n    },\n    {\n      id: '5',\n      name: 'Bio Compost Fertilizer',\n      brand: 'EcoGrow',\n      price: 180,\n      originalPrice: 220,\n      rating: 4.7,\n      reviews: 965,\n      category: 'fertilizers',\n      inStock: true,\n      bestseller: true,\n      organic: true,\n      size: '2kg',\n      features: ['Bio-Compost', 'Soil Health', 'Eco-Friendly']\n    }\n  ];\n\n  const filteredProducts = products.filter(product => {\n    const matchesSearch = product.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         product.brand.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesCategory = selectedCategory === 'all' || product.category === selectedCategory;\n    return matchesSearch && matchesCategory;\n  });\n\n  const addToCart = (productId) => {\n    const product = products.find(p => p.id === productId);\n    if (product) {\n      cartManager.addToCart(product);\n    }\n  };\n\n  const removeFromCart = (productId) => {\n    cartManager.removeFromCart(productId);\n  };\n\n  const toggleWishlist = (productId) => {\n    setWishlist(prev => ({\n      ...prev,\n      [productId]: !prev[productId]\n    }));\n  };\n\n  const getTotalItems = () => {\n    return cartCount;\n  };\n\n  const getDiscountPercentage = (original, current) => {\n    return Math.round(((original - current) / original) * 100);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"sticky top-0 z-40 bg-white shadow-sm border-b border-gray-100\">\n        <div className=\"flex items-center justify-between px-4 py-4\">\n          <div className=\"flex items-center space-x-3\">\n            <button \n              onClick={() => navigate('/home')}\n              className=\"p-2 -ml-2 hover:bg-gray-100 rounded-full transition-colors\"\n            >\n              <ArrowLeft className=\"w-6 h-6 text-gray-700\" />\n            </button>\n            <h1 className=\"text-xl font-bold text-gray-900\">Shop</h1>\n          </div>\n          \n          <div className=\"relative\">\n            <button \n              onClick={() => navigate('/cart')}\n              className=\"p-2 hover:bg-gray-100 rounded-full transition-colors\"\n            >\n              <ShoppingCart className=\"w-6 h-6 text-gray-700\" />\n              {getTotalItems() > 0 && (\n                <div className=\"absolute -top-1 -right-1 w-5 h-5 bg-red-500 rounded-full flex items-center justify-center\">\n                  <span className=\"text-xs font-bold text-white\">{getTotalItems()}</span>\n                </div>\n              )}\n            </button>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"px-4 py-6 space-y-6 pb-24\">\n        {/* Search Bar */}\n        <div className=\"relative\">\n          <div className=\"absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none\">\n            <Search className=\"h-5 w-5 text-gray-400\" />\n          </div>\n          <input\n            type=\"text\"\n            placeholder=\"Search fertilizers, seeds, tools...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"w-full pl-12 pr-12 py-4 text-base bg-white border border-gray-200 rounded-2xl focus:ring-2 focus:ring-green-500 focus:border-transparent shadow-sm outline-none\"\n          />\n          <div className=\"absolute inset-y-0 right-0 pr-4 flex items-center\">\n            <button className=\"p-1 hover:bg-gray-100 rounded-lg transition-colors\">\n              <Filter className=\"h-5 w-5 text-gray-400\" />\n            </button>\n          </div>\n        </div>\n\n        {/* Category Tabs */}\n        <div className=\"flex space-x-3 overflow-x-auto pb-2\" style={{scrollbarWidth: 'none', msOverflowStyle: 'none'}}>\n          {categories.map((category) => (\n            <button\n              key={category.id}\n              onClick={() => setSelectedCategory(category.id)}\n              className={`flex items-center space-x-2 px-5 py-3 rounded-full whitespace-nowrap font-medium transition-all duration-200 ${\n                selectedCategory === category.id\n                  ? 'bg-green-600 text-white shadow-lg'\n                  : 'bg-white text-gray-600 border border-gray-200 hover:border-green-300 hover:text-green-600'\n              }`}\n            >\n              <category.icon className=\"w-4 h-4\" />\n              <span className=\"text-sm\">{category.name}</span>\n            </button>\n          ))}\n        </div>\n\n\n        {/* Products Section */}\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-xl font-bold text-gray-900\">\n              {selectedCategory === 'all' ? 'All Products' : categories.find(c => c.id === selectedCategory)?.name}\n            </h2>\n            <span className=\"text-sm text-gray-500 bg-gray-100 px-3 py-1 rounded-full\">\n              {filteredProducts.length} products\n            </span>\n          </div>\n\n          {/* Product Grid */}\n          <div className=\"space-y-4\">\n            {filteredProducts.map((product) => (\n              <div \n                key={product.id} \n                className=\"bg-white rounded-2xl p-5 shadow-sm border border-gray-100 hover:shadow-md transition-shadow duration-200\"\n              >\n                <div className=\"flex space-x-4\">\n                  {/* Product Image & Labels */}\n                  <div className=\"relative flex-shrink-0\">\n                    <div className=\"w-24 h-24 bg-gray-100 rounded-2xl flex items-center justify-center\">\n                      <Package className=\"w-10 h-10 text-gray-400\" />\n                    </div>\n                    \n                    {/* Labels */}\n                    <div className=\"absolute -top-2 -right-2 space-y-1\">\n                      {product.bestseller && (\n                        <div className=\"bg-orange-500 text-white text-xs px-2 py-1 rounded-full shadow-lg font-medium\">\n                          Bestseller\n                        </div>\n                      )}\n                      {product.organic && (\n                        <div className=\"bg-green-500 text-white text-xs px-2 py-1 rounded-full shadow-lg font-medium\">\n                          Organic\n                        </div>\n                      )}\n                    </div>\n                  </div>\n\n                  {/* Product Info */}\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex justify-between items-start\">\n                      <div className=\"flex-1 min-w-0\">\n                        <h3 className=\"font-bold text-gray-900 text-base leading-tight mb-1\">\n                          {product.name}\n                        </h3>\n                        <p className=\"text-sm text-gray-500 mb-3\">\n                          {product.brand} • {product.size}\n                        </p>\n                        \n                        {/* Rating */}\n                        <div className=\"flex items-center space-x-2 mb-3\">\n                          <div className=\"flex items-center space-x-1\">\n                            <Star className=\"w-4 h-4 fill-yellow-400 text-yellow-400\" />\n                            <span className=\"text-sm font-semibold text-gray-700\">{product.rating}</span>\n                          </div>\n                          <span className=\"text-sm text-gray-400\">({product.reviews} reviews)</span>\n                        </div>\n\n                        {/* Feature Tags */}\n                        <div className=\"flex flex-wrap gap-2 mb-4\">\n                          {product.features.slice(0, 3).map((feature, index) => (\n                            <span \n                              key={index}\n                              className=\"text-xs px-2 py-1 border border-green-200 text-green-700 bg-green-50 font-medium rounded-full\"\n                            >\n                              {feature}\n                            </span>\n                          ))}\n                        </div>\n\n                        {/* Price */}\n                        <div className=\"flex items-center space-x-3 mb-4\">\n                          <span className=\"text-xl font-bold text-gray-900\">₹{product.price}</span>\n                          <span className=\"text-base text-gray-400 line-through\">₹{product.originalPrice}</span>\n                          <span className=\"bg-green-100 text-green-800 text-xs font-semibold px-2 py-1 rounded-full\">\n                            {getDiscountPercentage(product.originalPrice, product.price)}% OFF\n                          </span>\n                        </div>\n                      </div>\n\n                      {/* Wishlist Button */}\n                      <button\n                        onClick={() => toggleWishlist(product.id)}\n                        className=\"p-2 hover:bg-gray-50 rounded-full transition-colors\"\n                      >\n                        <Heart \n                          className={`w-5 h-5 ${\n                            wishlist[product.id] \n                              ? 'fill-red-500 text-red-500' \n                              : 'text-gray-400 hover:text-red-400'\n                          }`} \n                        />\n                      </button>\n                    </div>\n\n                    {/* Add to Cart Section */}\n                    <div className=\"flex items-center justify-end\">\n                      {product.inStock ? (\n                        <div className=\"flex items-center space-x-3\">\n                          {cartItems[product.id] > 0 ? (\n                            <div className=\"flex items-center space-x-3 bg-gray-50 rounded-full p-1\">\n                              <button\n                                onClick={() => removeFromCart(product.id)}\n                                className=\"w-8 h-8 bg-white rounded-full flex items-center justify-center shadow-sm hover:shadow-md transition-shadow\"\n                              >\n                                <Minus className=\"w-4 h-4 text-gray-600\" />\n                              </button>\n                              <span className=\"font-bold text-gray-900 min-w-[24px] text-center\">\n                                {cartItems[product.id]}\n                              </span>\n                              <button\n                                onClick={() => addToCart(product.id)}\n                                className=\"w-8 h-8 bg-green-600 rounded-full flex items-center justify-center shadow-sm hover:shadow-md transition-shadow\"\n                              >\n                                <Plus className=\"w-4 h-4 text-white\" />\n                              </button>\n                            </div>\n                          ) : (\n                            <button\n                              onClick={() => addToCart(product.id)}\n                              className=\"bg-green-600 hover:bg-green-700 text-white px-6 py-2 rounded-full font-semibold shadow-sm hover:shadow-md transition-all duration-200\"\n                            >\n                              Add to Cart\n                            </button>\n                          )}\n                        </div>\n                      ) : (\n                        <span className=\"text-red-600 border border-red-200 bg-red-50 px-3 py-1 rounded-full text-sm\">\n                          Out of Stock\n                        </span>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {/* Floating Cart Button */}\n      {getTotalItems() > 0 && (\n        <div className=\"fixed bottom-6 left-4 right-4 z-50\">\n          <button \n            onClick={() => navigate('/cart')}\n            className=\"w-full bg-green-600 hover:bg-green-700 text-white py-4 rounded-2xl shadow-2xl flex items-center justify-between text-lg font-bold px-6\"\n          >\n            <span className=\"flex items-center space-x-3\">\n              <ShoppingCart className=\"w-6 h-6\" />\n              <span>View Cart ({getTotalItems()} items)</span>\n            </span>\n            <span>₹{cartTotal}</span>\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Shop;","size_bytes":15101},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/pages/Signup.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { User, Phone, Sprout } from \"lucide-react\";\nimport { toast } from \"@/hooks/use-toast\";\nimport { useNavigate } from \"react-router-dom\";\nimport LanguageSwitcher from '@/components/LanguageSwitcher';\nimport CustomInput from '@/components/CustomInput';\nimport LocationPicker from '@/components/LocationPicker';\nimport PINInput from '@/components/PINInput';\nimport AuthButton from '@/components/AuthButton';\n\n\nconst Signup = () => {\n  const [formData, setFormData] = useState({\n    name: \"\",\n    mobile: \"\",\n    state: \"\",\n    district: \"\",\n    pin: \"\",\n    confirmPin: \"\"\n  });\n  const [loading, setLoading] = useState(false);\n  const navigate = useNavigate();\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  // Validation functions\n  const getNameValidation = () => {\n    if (formData.name.length === 0) return undefined;\n    const isValid = formData.name.trim().length >= 2 && /^[A-Za-z\\s]+$/.test(formData.name);\n    return {\n      isValid,\n      message: isValid ? \"Valid name\" : \"Name must contain only letters and be at least 2 characters\"\n    };\n  };\n\n  const getMobileValidation = () => {\n    if (formData.mobile.length === 0) return undefined;\n    const isValid = formData.mobile.length === 10 && /^[6-9]\\d{9}$/.test(formData.mobile);\n    return {\n      isValid,\n      message: isValid ? \"Valid mobile number\" : \"Enter a valid 10-digit Indian mobile number\"\n    };\n  };\n\n  const isFormValid = () => {\n    return formData.name.trim() !== \"\" &&\n           formData.mobile.length === 10 &&\n           formData.state !== \"\" &&\n           formData.district.trim() !== \"\" &&\n           formData.pin.length === 4 &&\n           formData.confirmPin.length === 4 &&\n           formData.pin === formData.confirmPin;\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (formData.pin !== formData.confirmPin) {\n      toast({\n        title: \"PIN Mismatch\",\n        description: \"PIN and Confirm PIN must match\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    \n    if (!isFormValid()) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill all required fields\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setLoading(true);\n    \n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      // Store comprehensive user data\n      const userData = {\n        id: Date.now().toString(),\n        name: formData.name.trim(),\n        mobile: formData.mobile,\n        phone: `+91 ${formData.mobile}`,\n        state: formData.state,\n        district: formData.district,\n        location: formData.district,\n        pin: formData.pin,\n        joinedDate: new Date().toLocaleDateString('en-US', { month: 'long', year: 'numeric' }),\n        farmSize: '2.5 acres',\n        experience: '5 years',\n        avatar: null,\n        isLoggedIn: true,\n        createdAt: new Date().toISOString()\n      };\n      \n      localStorage.setItem('kisanmitra_user', JSON.stringify(userData));\n      localStorage.setItem('kisanmitra_auth_token', btoa(`${formData.mobile}:${formData.pin}`));\n      \n      toast({\n        title: \"Account Created! 🎉\",\n        description: `Welcome to KisanMitra, ${formData.name}!`,\n      });\n      \n      navigate(\"/home\");\n      \n    } catch (error) {\n      toast({\n        title: \"Registration failed\",\n        description: \"Please try again\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"mobile-container min-h-screen bg-gradient-to-br from-agri-light to-white overflow-y-auto\">\n      {/* Subtle Background Pattern */}\n      <div className=\"absolute inset-0 opacity-5\">\n        <div className=\"absolute inset-0\" style={{\n          backgroundImage: `url(\"data:image/svg+xml,%3Csvg width='40' height='40' viewBox='0 0 40 40' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='%23059669' fill-opacity='0.1'%3E%3Cpath d='M20 20c0-5.5-4.5-10-10-10s-10 4.5-10 10 4.5 10 10 10 10-4.5 10-10zm10 0c0-5.5-4.5-10-10-10s-10 4.5-10 10 4.5 10 10 10 10-4.5 10-10z'/%3E%3C/g%3E%3C/svg%3E\")`,\n        }} />\n      </div>\n\n      <div className=\"relative z-10 min-h-screen flex flex-col\">\n        {/* Top Bar */}\n        <div className=\"flex items-center justify-between p-4 bg-white/80 backdrop-blur-sm\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-agri-primary rounded-xl flex items-center justify-center\">\n              <Sprout className=\"w-6 h-6 text-white\" />\n            </div>\n            <div>\n              <h1 className=\"text-lg font-bold text-agri-primary\">KisanMitra</h1>\n              <p className=\"text-xs text-agri-gray\">Smart Farming Assistant</p>\n            </div>\n          </div>\n          <LanguageSwitcher />\n        </div>\n\n        {/* Header */}\n        <div className=\"text-center px-6 pt-8 pb-6\">\n          <div className=\"w-24 h-24 bg-gradient-to-br from-green-400 to-green-600 rounded-3xl mx-auto mb-6 flex items-center justify-center shadow-xl\">\n            <Sprout className=\"w-12 h-12 text-white\" />\n          </div>\n          <h1 className=\"text-3xl font-bold bg-gradient-to-r from-green-600 to-green-500 bg-clip-text text-transparent mb-3\">\n            🌱 Join 50,000+ Smart Farmers\n          </h1>\n          <p className=\"text-lg text-gray-600 leading-relaxed mb-2\">\n            Create your farming account\n          </p>\n          <p className=\"text-sm text-green-600 font-medium\">\n            Location helps us provide region-based crop advice\n          </p>\n        </div>\n\n          {/* Form */}\n          <div className=\"flex-1 px-6\">\n            <div className=\"bg-white rounded-3xl p-8 shadow-2xl border border-green-100\">\n              <form onSubmit={handleSubmit} className=\"space-y-6\">\n                {/* Name Field */}\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-semibold text-gray-700\">Full Name</label>\n                  <div className=\"relative\">\n                    <div className=\"absolute left-4 top-1/2 transform -translate-y-1/2\">\n                      <User className=\"w-5 h-5 text-green-500\" />\n                    </div>\n                    <input\n                      type=\"text\"\n                      value={formData.name}\n                      onChange={(e) => handleInputChange(\"name\", e.target.value)}\n                      placeholder=\"Enter your full name\"\n                      className=\"w-full h-14 pl-12 pr-4 text-lg font-medium bg-gray-50 border-2 border-gray-200 rounded-2xl focus:outline-none focus:border-green-500 focus:ring-4 focus:ring-green-100 transition-all duration-200\"\n                    />\n                  </div>\n                  {getNameValidation() && (\n                    <p className={`text-sm ${getNameValidation()?.isValid ? 'text-green-600' : 'text-red-500'}`}>\n                      {getNameValidation()?.message}\n                    </p>\n                  )}\n                </div>\n\n                {/* Mobile Field */}\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-semibold text-gray-700\">Mobile Number</label>\n                  <div className=\"relative\">\n                    <div className=\"absolute left-4 top-1/2 transform -translate-y-1/2 flex items-center space-x-2 z-10\">\n                      <Phone className=\"w-5 h-5 text-green-500\" />\n                      <span className=\"text-gray-500 font-medium\">🇮🇳 +91</span>\n                    </div>\n                    <input\n                      type=\"tel\"\n                      value={formData.mobile}\n                      onChange={(e) => handleInputChange(\"mobile\", e.target.value.replace(/\\D/g, '').slice(0, 10))}\n                      placeholder=\"10 digit number\"\n                      className=\"w-full h-14 pl-24 pr-4 text-lg font-medium bg-gray-50 border-2 border-gray-200 rounded-2xl focus:outline-none focus:border-green-500 focus:ring-4 focus:ring-green-100 transition-all duration-200\"\n                    />\n                  </div>\n                  {getMobileValidation() && (\n                    <p className={`text-sm ${getMobileValidation()?.isValid ? 'text-green-600' : 'text-red-500'}`}>\n                      {getMobileValidation()?.message}\n                    </p>\n                  )}\n                </div>\n\n                {/* Location Fields */}\n                <LocationPicker\n                  state={formData.state}\n                  district={formData.district}\n                  onStateChange={(value) => handleInputChange(\"state\", value)}\n                  onDistrictChange={(value) => handleInputChange(\"district\", value)}\n                />\n\n                {/* PIN Entry */}\n                <div className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <label className=\"text-sm font-semibold text-gray-700\">4-Digit PIN</label>\n                    <PINInput\n                      value={formData.pin}\n                      onChange={(value) => handleInputChange(\"pin\", value)}\n                      placeholder=\"Create PIN\"\n                      showStrengthIndicator={true}\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <label className=\"text-sm font-semibold text-gray-700\">Confirm PIN</label>\n                    <PINInput\n                      value={formData.confirmPin}\n                      onChange={(value) => handleInputChange(\"confirmPin\", value)}\n                      placeholder=\"Confirm PIN\"\n                    />\n                    {formData.confirmPin.length > 0 && (\n                      <p className={`text-sm ${formData.pin === formData.confirmPin ? 'text-green-600' : 'text-red-500'}`}>\n                        {formData.pin === formData.confirmPin ? \"✓ PINs match\" : \"✗ PINs don't match\"}\n                      </p>\n                    )}\n                  </div>\n                </div>\n\n                {/* Create Account Button - Full Width Green Gradient */}\n                <div className=\"pt-6\">\n                  <button\n                    type=\"submit\"\n                    disabled={loading || !isFormValid()}\n                    className=\"w-full h-16 bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white text-xl font-bold rounded-2xl shadow-lg hover:shadow-xl transform hover:scale-[1.02] active:scale-[0.98] transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    {loading ? (\n                      <div className=\"flex items-center justify-center space-x-2\">\n                        <div className=\"w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n                        <span>Creating Account...</span>\n                      </div>\n                    ) : (\n                      'Create My Account'\n                    )}\n                  </button>\n                </div>\n              </form>\n            </div>\n\n            {/* Login Link */}\n            <div className=\"text-center mt-6 mb-6\">\n              <div className=\"flex items-center justify-center space-x-2 text-gray-600\">\n                <span>Already have an account?</span>\n                <button\n                  type=\"button\"\n                  onClick={() => navigate('/login')}\n                  className=\"text-green-600 font-bold hover:text-green-700 hover:underline transition-colors\"\n                >\n                  Login →\n                </button>\n              </div>\n            </div>\n          </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Signup;","size_bytes":11862},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/pages/SoilHealth.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { ArrowLeft, Plus, Eye, Bookmark, Droplets, Beaker, Leaf, Wheat, TreePine, TestTube2, AlertCircle, CheckCircle, Info, X, Save } from \"lucide-react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useState } from \"react\";\n\ninterface SoilTest {\n  id: string;\n  date: string;\n  pH: { value: number; status: 'acidic' | 'neutral' | 'alkaline' };\n  nitrogen: { value: string; status: 'low' | 'medium' | 'high' };\n  phosphorus: { value: string; status: 'low' | 'medium' | 'high' };\n  potassium: { value: string; status: 'low' | 'medium' | 'high' };\n  moisture: { value: string; status: 'low' | 'adequate' | 'high' };\n  recommendation: string;\n  detailedGuidance: {\n    fertilizer: string;\n    crops: string[];\n    irrigation: string;\n  };\n  expanded: boolean;\n}\n\nconst SoilHealth = () => {\n  const navigate = useNavigate();\n  const [showAddForm, setShowAddForm] = useState(false);\n  \n  // Sample soil test data - latest first\n  const [soilTests, setSoilTests] = useState<SoilTest[]>([\n    {\n      id: '1',\n      date: 'Sept 5, 2025',\n      pH: { value: 6.8, status: 'neutral' },\n      nitrogen: { value: 'Medium', status: 'medium' },\n      phosphorus: { value: 'Low', status: 'low' },\n      potassium: { value: 'High', status: 'high' },\n      moisture: { value: 'Adequate', status: 'adequate' },\n      recommendation: 'Apply Phosphorus fertilizer 40kg/acre',\n      detailedGuidance: {\n        fertilizer: 'Apply DAP fertilizer 40kg/acre before sowing. Add organic compost 2 tons/acre for better soil health.',\n        crops: ['🌾 Wheat', '🌾 Barley', '🌻 Mustard', '🥔 Potato'],\n        irrigation: 'Drip irrigation twice weekly. Maintain 70% soil moisture during flowering stage.'\n      },\n      expanded: false\n    },\n    {\n      id: '2',\n      date: 'Aug 28, 2025',\n      pH: { value: 5.8, status: 'acidic' },\n      nitrogen: { value: 'High', status: 'high' },\n      phosphorus: { value: 'Medium', status: 'medium' },\n      potassium: { value: 'Low', status: 'low' },\n      moisture: { value: 'Low', status: 'low' },\n      recommendation: 'Apply Lime 200kg/acre to balance pH',\n      detailedGuidance: {\n        fertilizer: 'Apply lime 200kg/acre. Add Potash fertilizer 30kg/acre. Use organic manure 1.5 tons/acre.',\n        crops: ['🌽 Maize', '🌾 Rice', '🥜 Groundnut', '🌿 Green gram'],\n        irrigation: 'Increase watering frequency. Use sprinkler irrigation daily during dry season.'\n      },\n      expanded: false\n    },\n    {\n      id: '3',\n      date: 'Aug 15, 2025',\n      pH: { value: 7.2, status: 'alkaline' },\n      nitrogen: { value: 'Low', status: 'low' },\n      phosphorus: { value: 'High', status: 'high' },\n      potassium: { value: 'Medium', status: 'medium' },\n      moisture: { value: 'High', status: 'high' },\n      recommendation: 'Apply Nitrogen fertilizer and reduce watering',\n      detailedGuidance: {\n        fertilizer: 'Apply Urea 50kg/acre in split doses. Add organic compost to improve soil structure.',\n        crops: ['🌾 Wheat', '🌻 Sunflower', '🌿 Soybean', '🥬 Cabbage'],\n        irrigation: 'Reduce watering frequency. Monitor soil moisture to prevent waterlogging.'\n      },\n      expanded: false\n    }\n  ]);\n\n  const [formData, setFormData] = useState({\n    soilTexture: '',\n    soilColor: '',\n    moisture: '',\n    cropHistory: '',\n    fertilizerHistory: '',\n    pH: '',\n    nitrogen: '',\n    phosphorus: '',\n    potassium: '',\n    moistureLevel: ''\n  });\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'low': return <AlertCircle className=\"w-4 h-4 text-red-500\" />;\n      case 'medium': case 'adequate': case 'neutral': return <CheckCircle className=\"w-4 h-4 text-green-500\" />;\n      case 'high': return <CheckCircle className=\"w-4 h-4 text-blue-500\" />;\n      case 'acidic': return <AlertCircle className=\"w-4 h-4 text-red-500\" />;\n      case 'alkaline': return <Info className=\"w-4 h-4 text-blue-500\" />;\n      default: return <CheckCircle className=\"w-4 h-4 text-green-500\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'low': case 'acidic': return 'text-red-600 bg-red-50 border-red-200';\n      case 'medium': case 'adequate': case 'neutral': return 'text-green-600 bg-green-50 border-green-200';\n      case 'high': case 'alkaline': return 'text-blue-600 bg-blue-50 border-blue-200';\n      default: return 'text-gray-600 bg-gray-50 border-gray-200';\n    }\n  };\n\n  const toggleExpanded = (testId: string) => {\n    setSoilTests(prev => prev.map(test => \n      test.id === testId ? { ...test, expanded: !test.expanded } : test\n    ));\n  };\n\n  const saveGuidance = (testId: string) => {\n    const test = soilTests.find(t => t.id === testId);\n    if (test) {\n      // Save to Advisory -> My Soil Guidance\n      const savedGuidance = {\n        id: testId,\n        date: test.date,\n        summary: test.recommendation,\n        detailed: test.detailedGuidance,\n        saved: new Date().toLocaleDateString()\n      };\n      \n      // In real app, this would save to localStorage or API\n      alert(`✅ Soil guidance saved successfully!\\n\\nSaved to: Advisory → My Soil Guidance\\nTest Date: ${test.date}\\nRecommendation: ${test.recommendation}`);\n    }\n  };\n\n  const handleAddTest = () => {\n    if (!formData.soilTexture || !formData.moisture) {\n      alert('Please fill in required fields: Soil Texture and Moisture');\n      return;\n    }\n\n    const newTest: SoilTest = {\n      id: Date.now().toString(),\n      date: new Date().toLocaleDateString('en-US', { \n        month: 'short', \n        day: 'numeric', \n        year: 'numeric' \n      }),\n      pH: { \n        value: parseFloat(formData.pH) || 6.5, \n        status: parseFloat(formData.pH) < 6.0 ? 'acidic' : parseFloat(formData.pH) > 7.0 ? 'alkaline' : 'neutral' \n      },\n      nitrogen: { \n        value: formData.nitrogen || 'Medium', \n        status: (formData.nitrogen?.toLowerCase() === 'low' ? 'low' : formData.nitrogen?.toLowerCase() === 'high' ? 'high' : 'medium') as 'low' | 'medium' | 'high'\n      },\n      phosphorus: { \n        value: formData.phosphorus || 'Medium', \n        status: (formData.phosphorus?.toLowerCase() === 'low' ? 'low' : formData.phosphorus?.toLowerCase() === 'high' ? 'high' : 'medium') as 'low' | 'medium' | 'high'\n      },\n      potassium: { \n        value: formData.potassium || 'Medium', \n        status: (formData.potassium?.toLowerCase() === 'low' ? 'low' : formData.potassium?.toLowerCase() === 'high' ? 'high' : 'medium') as 'low' | 'medium' | 'high'\n      },\n      moisture: { \n        value: formData.moisture, \n        status: (formData.moisture.toLowerCase() === 'low' ? 'low' : formData.moisture.toLowerCase() === 'high' ? 'high' : 'adequate') as 'low' | 'adequate' | 'high'\n      },\n      recommendation: 'Apply balanced fertilizer based on soil analysis',\n      detailedGuidance: {\n        fertilizer: 'Apply NPK fertilizer as per soil test results. Add organic matter to improve soil health.',\n        crops: ['🌾 Suitable crops based on soil condition'],\n        irrigation: 'Maintain optimal moisture levels based on crop requirements.'\n      },\n      expanded: false\n    };\n\n    setSoilTests(prev => [newTest, ...prev]);\n    setShowAddForm(false);\n    setFormData({\n      soilTexture: '', soilColor: '', moisture: '', cropHistory: '', \n      fertilizerHistory: '', pH: '', nitrogen: '', phosphorus: '', potassium: '', moistureLevel: ''\n    });\n    alert('✅ New soil test added successfully!');\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-amber-50 via-green-50 to-emerald-50 pb-24\">\n      {/* Header */}\n      <div className=\"bg-gradient-to-r from-green-600 to-emerald-600 px-4 py-4 shadow-lg\">\n        <div className=\"flex items-center justify-between\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => navigate('/home')}\n            className=\"text-white hover:bg-white/20 rounded-full p-3\"\n          >\n            <ArrowLeft className=\"w-5 h-5\" />\n          </Button>\n          \n          <h1 className=\"text-xl font-bold text-white flex items-center\">\n            <TestTube2 className=\"w-6 h-6 mr-2\" />\n            Soil Health Monitoring\n          </h1>\n          \n          <div className=\"w-12\" />\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"px-4 py-6 space-y-6\">\n        {/* Soil Test Cards */}\n        {soilTests.map((test) => (\n          <Card key={test.id} className=\"shadow-lg border-0 bg-white/90 backdrop-blur-sm hover:shadow-xl transition-all duration-300 rounded-3xl overflow-hidden\">\n            <CardContent className=\"p-0\">\n              {/* Card Header */}\n              <div className=\"bg-gradient-to-r from-green-500/10 to-emerald-500/10 p-5 border-b border-green-100\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className=\"text-sm font-semibold text-green-800 bg-green-100 px-3 py-1 rounded-full\">\n                    {test.date}\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"text-xs text-gray-600\">Test #{test.id}</div>\n                  </div>\n                </div>\n\n                {/* Key Parameters */}\n                <div className=\"grid grid-cols-2 gap-3 mb-4\">\n                  {/* pH */}\n                  <div className={`p-3 rounded-2xl border ${getStatusColor(test.pH.status)} flex items-center justify-between`}>\n                    <div className=\"flex items-center space-x-2\">\n                      {getStatusIcon(test.pH.status)}\n                      <span className=\"font-medium text-sm\">pH</span>\n                    </div>\n                    <div className=\"font-bold text-sm\">{test.pH.value}</div>\n                  </div>\n\n                  {/* Nitrogen */}\n                  <div className={`p-3 rounded-2xl border ${getStatusColor(test.nitrogen.status)} flex items-center justify-between`}>\n                    <div className=\"flex items-center space-x-2\">\n                      {getStatusIcon(test.nitrogen.status)}\n                      <span className=\"font-medium text-sm\">N</span>\n                    </div>\n                    <div className=\"font-bold text-sm\">{test.nitrogen.value}</div>\n                  </div>\n\n                  {/* Phosphorus */}\n                  <div className={`p-3 rounded-2xl border ${getStatusColor(test.phosphorus.status)} flex items-center justify-between`}>\n                    <div className=\"flex items-center space-x-2\">\n                      {getStatusIcon(test.phosphorus.status)}\n                      <span className=\"font-medium text-sm\">P</span>\n                    </div>\n                    <div className=\"font-bold text-sm\">{test.phosphorus.value}</div>\n                  </div>\n\n                  {/* Potassium */}\n                  <div className={`p-3 rounded-2xl border ${getStatusColor(test.potassium.status)} flex items-center justify-between`}>\n                    <div className=\"flex items-center space-x-2\">\n                      {getStatusIcon(test.potassium.status)}\n                      <span className=\"font-medium text-sm\">K</span>\n                    </div>\n                    <div className=\"font-bold text-sm\">{test.potassium.value}</div>\n                  </div>\n                </div>\n\n                {/* Moisture */}\n                <div className={`p-4 rounded-2xl border ${getStatusColor(test.moisture.status)} flex items-center justify-between mb-4`}>\n                  <div className=\"flex items-center space-x-2\">\n                    <Droplets className=\"w-5 h-5\" />\n                    <span className=\"font-medium\">Moisture</span>\n                  </div>\n                  <div className=\"font-bold\">{test.moisture.value}</div>\n                </div>\n\n                {/* Quick Recommendation */}\n                <div className=\"bg-blue-50 border border-blue-200 p-4 rounded-2xl\">\n                  <div className=\"flex items-start space-x-2\">\n                    <Leaf className=\"w-5 h-5 text-blue-600 mt-0.5\" />\n                    <div>\n                      <div className=\"font-medium text-blue-800 text-sm mb-1\">Quick Recommendation</div>\n                      <div className=\"text-blue-700 text-sm\">{test.recommendation}</div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Action Buttons */}\n              <div className=\"p-5 flex space-x-3\">\n                <Button \n                  onClick={() => toggleExpanded(test.id)}\n                  className=\"flex-1 bg-green-600 hover:bg-green-700 text-white rounded-2xl py-3 flex items-center justify-center space-x-2\"\n                >\n                  <Eye className=\"w-4 h-4\" />\n                  <span>View Details</span>\n                </Button>\n                \n                <Button \n                  onClick={() => saveGuidance(test.id)}\n                  variant=\"outline\"\n                  className=\"flex-1 border-green-600 text-green-600 hover:bg-green-50 rounded-2xl py-3 flex items-center justify-center space-x-2\"\n                >\n                  <Bookmark className=\"w-4 h-4\" />\n                  <span>Save Guidance</span>\n                </Button>\n              </div>\n\n              {/* Expanded Details */}\n              {test.expanded && (\n                <div className=\"border-t border-gray-100 p-5 bg-gray-50/50 space-y-4\">\n                  {/* Fertilizer Guidance */}\n                  <div className=\"bg-amber-50 border border-amber-200 p-4 rounded-2xl\">\n                    <div className=\"flex items-start space-x-2\">\n                      <Beaker className=\"w-5 h-5 text-amber-600 mt-0.5\" />\n                      <div>\n                        <div className=\"font-semibold text-amber-800 mb-2\">🌾 Fertilizer Guidance</div>\n                        <div className=\"text-amber-700 text-sm leading-relaxed\">{test.detailedGuidance.fertilizer}</div>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Crop Suggestions */}\n                  <div className=\"bg-green-50 border border-green-200 p-4 rounded-2xl\">\n                    <div className=\"flex items-start space-x-2\">\n                      <Wheat className=\"w-5 h-5 text-green-600 mt-0.5\" />\n                      <div className=\"flex-1\">\n                        <div className=\"font-semibold text-green-800 mb-2\">🌱 Recommended Crops</div>\n                        <div className=\"flex flex-wrap gap-2\">\n                          {test.detailedGuidance.crops.map((crop, index) => (\n                            <div key={index} className=\"bg-green-100 text-green-700 px-3 py-1 rounded-full text-sm font-medium\">\n                              {crop}\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Irrigation Tips */}\n                  <div className=\"bg-blue-50 border border-blue-200 p-4 rounded-2xl\">\n                    <div className=\"flex items-start space-x-2\">\n                      <Droplets className=\"w-5 h-5 text-blue-600 mt-0.5\" />\n                      <div>\n                        <div className=\"font-semibold text-blue-800 mb-2\">💧 Irrigation Tips</div>\n                        <div className=\"text-blue-700 text-sm leading-relaxed\">{test.detailedGuidance.irrigation}</div>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Save Button for Expanded View */}\n                  <div className=\"pt-2\">\n                    <Button \n                      onClick={() => saveGuidance(test.id)}\n                      className=\"w-full bg-green-600 hover:bg-green-700 text-white rounded-2xl py-3 flex items-center justify-center space-x-2\"\n                    >\n                      <Save className=\"w-4 h-4\" />\n                      <span>Save Complete Guidance to Advisory</span>\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Floating Add Button */}\n      <div className=\"fixed bottom-24 right-6 z-50\">\n        <Button\n          onClick={() => setShowAddForm(true)}\n          className=\"w-16 h-16 bg-green-600 hover:bg-green-700 text-white rounded-full shadow-2xl flex items-center justify-center hover:scale-110 transition-all duration-200\"\n        >\n          <Plus className=\"w-8 h-8\" />\n        </Button>\n      </div>\n\n      {/* Add New Soil Test Modal/Form */}\n      {showAddForm && (\n        <div className=\"fixed inset-0 bg-black/50 z-50 flex items-end\">\n          <div className=\"bg-white w-full max-h-[90vh] rounded-t-3xl overflow-hidden\">\n            {/* Form Header */}\n            <div className=\"bg-green-600 p-5 flex items-center justify-between\">\n              <h2 className=\"text-xl font-bold text-white\">Add New Soil Test</h2>\n              <Button \n                onClick={() => setShowAddForm(false)}\n                variant=\"ghost\" \n                size=\"sm\"\n                className=\"text-white hover:bg-white/20 rounded-full p-2\"\n              >\n                <X className=\"w-5 h-5\" />\n              </Button>\n            </div>\n\n            {/* Form Content */}\n            <div className=\"p-5 space-y-4 overflow-y-auto max-h-[calc(90vh-120px)]\">\n              {/* Required Fields */}\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Soil Texture *</label>\n                  <select \n                    value={formData.soilTexture}\n                    onChange={(e) => setFormData(prev => ({ ...prev, soilTexture: e.target.value }))}\n                    className=\"w-full p-3 border border-gray-300 rounded-2xl focus:ring-2 focus:ring-green-500 focus:border-green-500\"\n                  >\n                    <option value=\"\">Select soil texture</option>\n                    <option value=\"clay\">Clay</option>\n                    <option value=\"loam\">Loam</option>\n                    <option value=\"sandy\">Sandy</option>\n                    <option value=\"silt\">Silt</option>\n                  </select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Soil Color</label>\n                  <input \n                    type=\"text\"\n                    value={formData.soilColor}\n                    onChange={(e) => setFormData(prev => ({ ...prev, soilColor: e.target.value }))}\n                    placeholder=\"e.g., Dark brown, Red, Black\"\n                    className=\"w-full p-3 border border-gray-300 rounded-2xl focus:ring-2 focus:ring-green-500 focus:border-green-500\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Moisture Level *</label>\n                  <select \n                    value={formData.moisture}\n                    onChange={(e) => setFormData(prev => ({ ...prev, moisture: e.target.value }))}\n                    className=\"w-full p-3 border border-gray-300 rounded-2xl focus:ring-2 focus:ring-green-500 focus:border-green-500\"\n                  >\n                    <option value=\"\">Select moisture level</option>\n                    <option value=\"Low\">Low</option>\n                    <option value=\"Adequate\">Adequate</option>\n                    <option value=\"High\">High</option>\n                  </select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Crop History</label>\n                  <input \n                    type=\"text\"\n                    value={formData.cropHistory}\n                    onChange={(e) => setFormData(prev => ({ ...prev, cropHistory: e.target.value }))}\n                    placeholder=\"Previous crops grown\"\n                    className=\"w-full p-3 border border-gray-300 rounded-2xl focus:ring-2 focus:ring-green-500 focus:border-green-500\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Fertilizer History</label>\n                  <input \n                    type=\"text\"\n                    value={formData.fertilizerHistory}\n                    onChange={(e) => setFormData(prev => ({ ...prev, fertilizerHistory: e.target.value }))}\n                    placeholder=\"Recent fertilizers used\"\n                    className=\"w-full p-3 border border-gray-300 rounded-2xl focus:ring-2 focus:ring-green-500 focus:border-green-500\"\n                  />\n                </div>\n              </div>\n\n              {/* Optional IoT Sensor Data */}\n              <div className=\"border-t pt-4\">\n                <h3 className=\"text-lg font-semibold text-gray-800 mb-4\">Optional: IoT Sensor Data</h3>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">pH Level</label>\n                    <input \n                      type=\"number\"\n                      value={formData.pH}\n                      onChange={(e) => setFormData(prev => ({ ...prev, pH: e.target.value }))}\n                      placeholder=\"6.5\"\n                      step=\"0.1\"\n                      min=\"0\" max=\"14\"\n                      className=\"w-full p-3 border border-gray-300 rounded-2xl focus:ring-2 focus:ring-green-500 focus:border-green-500\"\n                    />\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">Nitrogen</label>\n                    <select \n                      value={formData.nitrogen}\n                      onChange={(e) => setFormData(prev => ({ ...prev, nitrogen: e.target.value }))}\n                      className=\"w-full p-3 border border-gray-300 rounded-2xl focus:ring-2 focus:ring-green-500 focus:border-green-500\"\n                    >\n                      <option value=\"\">Select level</option>\n                      <option value=\"Low\">Low</option>\n                      <option value=\"Medium\">Medium</option>\n                      <option value=\"High\">High</option>\n                    </select>\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">Phosphorus</label>\n                    <select \n                      value={formData.phosphorus}\n                      onChange={(e) => setFormData(prev => ({ ...prev, phosphorus: e.target.value }))}\n                      className=\"w-full p-3 border border-gray-300 rounded-2xl focus:ring-2 focus:ring-green-500 focus:border-green-500\"\n                    >\n                      <option value=\"\">Select level</option>\n                      <option value=\"Low\">Low</option>\n                      <option value=\"Medium\">Medium</option>\n                      <option value=\"High\">High</option>\n                    </select>\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">Potassium</label>\n                    <select \n                      value={formData.potassium}\n                      onChange={(e) => setFormData(prev => ({ ...prev, potassium: e.target.value }))}\n                      className=\"w-full p-3 border border-gray-300 rounded-2xl focus:ring-2 focus:ring-green-500 focus:border-green-500\"\n                    >\n                      <option value=\"\">Select level</option>\n                      <option value=\"Low\">Low</option>\n                      <option value=\"Medium\">Medium</option>\n                      <option value=\"High\">High</option>\n                    </select>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Form Actions */}\n            <div className=\"border-t bg-gray-50 p-5 flex space-x-3\">\n              <Button \n                onClick={() => setShowAddForm(false)}\n                variant=\"outline\"\n                className=\"flex-1 border-gray-300 text-gray-600 hover:bg-gray-100 rounded-2xl py-3\"\n              >\n                Cancel\n              </Button>\n              <Button \n                onClick={handleAddTest}\n                className=\"flex-1 bg-green-600 hover:bg-green-700 text-white rounded-2xl py-3\"\n              >\n                Save Test\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SoilHealth;","size_bytes":24955},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/pages/Splash.tsx":{"content":"import { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Sprout, Sparkles } from 'lucide-react';\nimport splashBg from '@/assets/splash-bg.jpg';\nimport logo from '@/assets/logo.png';\n\nconst Splash = () => {\n  const navigate = useNavigate();\n  const [seedlingGrown, setSeedlingGrown] = useState(false);\n  const [textVisible, setTextVisible] = useState(false);\n  const [taglineVisible, setTaglineVisible] = useState(false);\n\n  useEffect(() => {\n    // Animate seedling growth\n    setTimeout(() => setSeedlingGrown(true), 500);\n    \n    // Show brand text\n    setTimeout(() => setTextVisible(true), 1000);\n    \n    // Show tagline with typewriter effect\n    setTimeout(() => setTaglineVisible(true), 1500);\n    \n    // Navigate to onboarding after animation\n    setTimeout(() => {\n      const hasSeenOnboarding = localStorage.getItem('kisanmitra_onboarding_seen');\n      if (hasSeenOnboarding) {\n        navigate('/login');\n      } else {\n        navigate('/onboarding');\n      }\n    }, 3500);\n  }, [navigate]);\n\n  return (\n    <div className=\"mobile-container relative overflow-hidden\">\n      {/* Background with animated gradient */}\n      <div \n        className=\"absolute inset-0 gradient-splash\"\n        style={{\n          backgroundImage: `linear-gradient(135deg, rgba(16, 185, 129, 0.9), rgba(4, 120, 87, 0.9)), url(${splashBg})`,\n          backgroundSize: 'cover',\n          backgroundPosition: 'center',\n        }}\n      />\n      \n      {/* Floating particles animation */}\n      <div className=\"absolute inset-0 overflow-hidden\">\n        {[...Array(20)].map((_, i) => (\n          <div\n            key={i}\n            className=\"absolute bg-white/20 rounded-full animate-pulse\"\n            style={{\n              width: Math.random() * 8 + 4 + 'px',\n              height: Math.random() * 8 + 4 + 'px',\n              left: Math.random() * 100 + '%',\n              top: Math.random() * 100 + '%',\n              animationDelay: Math.random() * 3 + 's',\n              animationDuration: (Math.random() * 3 + 2) + 's',\n            }}\n          />\n        ))}\n      </div>\n\n      {/* Content */}\n      <div className=\"relative z-10 flex flex-col items-center justify-center min-h-screen px-8 text-center\">\n        {/* Logo and Seedling Animation */}\n        <div className=\"mb-8 relative\">\n          <div className={`transition-all duration-1000 transform ${seedlingGrown ? 'scale-100 rotate-0' : 'scale-0 -rotate-180'}`}>\n            <div className=\"relative\">\n              <img src={logo} alt=\"KisanMitra\" className=\"w-24 h-24 mx-auto mb-4 drop-shadow-lg\" />\n              \n              {/* Sparkle effects around logo */}\n              <div className=\"absolute -top-2 -right-2\">\n                <Sparkles className=\"w-6 h-6 text-yellow-300 animate-pulse\" />\n              </div>\n              <div className=\"absolute -bottom-2 -left-2\">\n                <Sparkles className=\"w-4 h-4 text-yellow-200 animate-pulse\" style={{ animationDelay: '0.5s' }} />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Brand Name */}\n        <div className={`mb-4 transition-all duration-800 transform ${textVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-4'}`}>\n          <h1 className=\"text-5xl font-bold text-white mb-2 tracking-tight\">\n            KisanMitra\n          </h1>\n          <div className=\"w-24 h-1 bg-white/60 mx-auto rounded-full shadow-glow\" />\n        </div>\n\n        {/* Tagline with typewriter effect */}\n        <div className={`mb-12 transition-all duration-800 ${taglineVisible ? 'opacity-100' : 'opacity-0'}`}>\n          <p className=\"text-xl text-white/90 font-medium tracking-wide\">\n            <span className={`inline-block ${taglineVisible ? 'animate-typing' : ''}`}>\n              Your Smart Farming Companion\n            </span>\n          </p>\n        </div>\n\n        {/* Growing seedling animation at bottom */}\n        <div className=\"absolute bottom-20 left-1/2 transform -translate-x-1/2\">\n          <div className={`transition-all duration-2000 transform ${seedlingGrown ? 'scale-100 opacity-100' : 'scale-0 opacity-0'}`}>\n            <Sprout className=\"w-8 h-8 text-green-200 animate-bounce\" style={{ animationDelay: '2s' }} />\n          </div>\n        </div>\n\n        {/* Subtle loading indicator */}\n        <div className=\"absolute bottom-8 left-1/2 transform -translate-x-1/2\">\n          <div className=\"flex space-x-2\">\n            {[...Array(3)].map((_, i) => (\n              <div\n                key={i}\n                className=\"w-2 h-2 bg-white/60 rounded-full animate-pulse\"\n                style={{ animationDelay: i * 0.2 + 's' }}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Splash;","size_bytes":4784},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/pages/Treatments.tsx":{"content":"import { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { \n  Plus, \n  ChevronDown, \n  ChevronUp,\n  Calendar,\n  AlertCircle,\n  CheckCircle,\n  Camera,\n  Edit3,\n  Mic,\n  Globe,\n  TrendingUp,\n  Droplets,\n  Bug,\n  Leaf,\n  Clock,\n  ChevronRight,\n  Check,\n  X,\n  ArrowLeft\n} from 'lucide-react';\n\nconst ActiveTreatments = () => {\n  const navigate = useNavigate();\n  const [expandedCards, setExpandedCards] = useState([]);\n  const [selectedLanguage, setSelectedLanguage] = useState('en');\n  const [activeFilter, setActiveFilter] = useState('active'); // 'active', 'completed', or 'all'\n  \n  const languages = {\n    en: { label: 'English', flag: '🇬🇧' },\n    hi: { label: 'हिन्दी', flag: '🇮🇳' },\n    ta: { label: 'தமிழ்', flag: '🇮🇳' }\n  };\n\n  const allTreatments = [\n    {\n      id: 1,\n      cropName: 'Tomato',\n      disease: 'Early Blight',\n      severity: 'moderate',\n      startDate: '2025-08-28',\n      totalDays: 21,\n      currentDay: 8,\n      status: 'active',\n      nextAction: {\n        title: 'Apply fungicide spray',\n        dueTime: 'Tomorrow, 6:00 AM',\n        overdue: false\n      },\n      products: [\n        { name: 'Copper Fungicide', used: 65, total: 100, unit: 'ml', icon: '💧' },\n        { name: 'Bio Booster', used: 30, total: 50, unit: 'ml', icon: '🌱' }\n      ],\n      notes: 'Leaves showing improvement after first application',\n      photos: 2\n    },\n    {\n      id: 2,\n      cropName: 'Rice Paddy',\n      disease: 'Leaf Blast',\n      severity: 'high',\n      startDate: '2025-08-25',\n      totalDays: 14,\n      currentDay: 11,\n      status: 'active',\n      nextAction: {\n        title: 'Final fungicide application',\n        dueTime: 'Overdue by 2 days',\n        overdue: true\n      },\n      products: [\n        { name: 'Tricyclazole', used: 80, total: 100, unit: 'g', icon: '💊' },\n        { name: 'Sticker Solution', used: 45, total: 50, unit: 'ml', icon: '💧' }\n      ],\n      notes: 'Disease progression stopped, new growth appearing healthy',\n      photos: 4\n    },\n    {\n      id: 3,\n      cropName: 'Chili',\n      disease: 'Powdery Mildew',\n      severity: 'low',\n      startDate: '2025-09-01',\n      totalDays: 10,\n      currentDay: 4,\n      status: 'active',\n      nextAction: {\n        title: 'Apply neem oil spray',\n        dueTime: 'Today, 5:30 PM',\n        overdue: false\n      },\n      products: [\n        { name: 'Neem Oil', used: 20, total: 100, unit: 'ml', icon: '🌿' }\n      ],\n      notes: 'Early detection, expecting quick recovery',\n      photos: 1\n    },\n    {\n      id: 4,\n      cropName: 'Wheat',\n      disease: 'Rust Disease',\n      severity: 'moderate',\n      startDate: '2025-08-15',\n      totalDays: 18,\n      currentDay: 18,\n      status: 'completed',\n      completedDate: '2025-09-02',\n      products: [\n        { name: 'Rust Fungicide', used: 100, total: 100, unit: 'ml', icon: '💧' }\n      ],\n      notes: 'Treatment completed successfully, crop recovered fully',\n      photos: 6\n    },\n    {\n      id: 5,\n      cropName: 'Cotton',\n      disease: 'Bollworm Attack',\n      severity: 'high',\n      startDate: '2025-08-10',\n      totalDays: 12,\n      currentDay: 12,\n      status: 'completed',\n      completedDate: '2025-08-22',\n      products: [\n        { name: 'Bt Pesticide', used: 150, total: 150, unit: 'ml', icon: '🐛' },\n        { name: 'Growth Booster', used: 75, total: 75, unit: 'ml', icon: '🌱' }\n      ],\n      notes: 'Excellent results, pest control achieved',\n      photos: 8\n    }\n  ];\n\n  // Filter treatments based on active filter\n  const treatments = allTreatments.filter(treatment => {\n    if (activeFilter === 'all') return true;\n    return treatment.status === activeFilter;\n  });\n\n  const summaryData = {\n    active: allTreatments.filter(t => t.status === 'active').length,\n    completed: allTreatments.filter(t => t.status === 'completed').length,\n    successRate: 87\n  };\n\n  const toggleExpand = (id) => {\n    setExpandedCards(prev => \n      prev.includes(id) \n        ? prev.filter(cardId => cardId !== id)\n        : [...prev, id]\n    );\n  };\n\n  const getSeverityStyle = (severity) => {\n    switch(severity) {\n      case 'low':\n        return 'bg-green-100 text-green-700 border-green-300';\n      case 'moderate':\n        return 'bg-yellow-100 text-yellow-700 border-yellow-300';\n      case 'high':\n        return 'bg-red-100 text-red-700 border-red-300';\n      default:\n        return 'bg-gray-100 text-gray-700';\n    }\n  };\n\n  const getProgressPercentage = (current, total) => {\n    return Math.round((current / total) * 100);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white shadow-sm sticky top-0 z-10\">\n        <div className=\"px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <button \n                onClick={() => navigate(-1)}\n                className=\"p-2 hover:bg-gray-100 rounded-xl transition-colors\"\n              >\n                <ArrowLeft className=\"w-5 h-5 text-gray-600\" />\n              </button>\n              <h1 className=\"text-2xl font-bold text-gray-900\">Active Treatments</h1>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <button className=\"p-3 hover:bg-gray-100 rounded-full transition-colors\">\n                <Mic className=\"w-5 h-5 text-gray-600\" />\n              </button>\n              <button className=\"flex items-center space-x-2 px-4 py-2 bg-gray-100 rounded-full\">\n                <span className=\"text-lg\">{languages[selectedLanguage].flag}</span>\n                <span className=\"text-sm font-medium text-gray-700\">{languages[selectedLanguage].label}</span>\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Summary Strip with Filter Buttons */}\n      <div className=\"px-6 py-6\">\n        <div className=\"grid grid-cols-3 gap-4\">\n          <button \n            onClick={() => setActiveFilter('active')}\n            className={`rounded-2xl p-4 transition-all duration-200 ${\n              activeFilter === 'active' \n                ? 'bg-blue-100 border-2 border-blue-400 shadow-lg' \n                : 'bg-blue-50 border border-blue-200 hover:bg-blue-100'\n            }`}\n          >\n            <div className=\"text-center\">\n              <div className=\"w-12 h-12 bg-blue-500 rounded-xl flex items-center justify-center mx-auto mb-3\">\n                <Leaf className=\"w-6 h-6 text-white\" />\n              </div>\n              <p className=\"text-sm font-medium text-blue-600 mb-1\">Active</p>\n              <p className=\"text-2xl font-bold text-blue-700\">{summaryData.active}</p>\n            </div>\n          </button>\n          \n          <button \n            onClick={() => setActiveFilter('completed')}\n            className={`rounded-2xl p-4 transition-all duration-200 ${\n              activeFilter === 'completed' \n                ? 'bg-green-100 border-2 border-green-400 shadow-lg' \n                : 'bg-green-50 border border-green-200 hover:bg-green-100'\n            }`}\n          >\n            <div className=\"text-center\">\n              <div className=\"w-12 h-12 bg-green-500 rounded-xl flex items-center justify-center mx-auto mb-3\">\n                <CheckCircle className=\"w-6 h-6 text-white\" />\n              </div>\n              <p className=\"text-sm font-medium text-green-600 mb-1\">Completed</p>\n              <p className=\"text-2xl font-bold text-green-700\">{summaryData.completed}</p>\n            </div>\n          </button>\n          \n          <button \n            onClick={() => setActiveFilter('all')}\n            className={`rounded-2xl p-4 transition-all duration-200 ${\n              activeFilter === 'all' \n                ? 'bg-purple-100 border-2 border-purple-400 shadow-lg' \n                : 'bg-purple-50 border border-purple-200 hover:bg-purple-100'\n            }`}\n          >\n            <div className=\"text-center\">\n              <div className=\"w-12 h-12 bg-purple-500 rounded-xl flex items-center justify-center mx-auto mb-3\">\n                <TrendingUp className=\"w-6 h-6 text-white\" />\n              </div>\n              <p className=\"text-sm font-medium text-purple-600 mb-1\">All</p>\n              <p className=\"text-2xl font-bold text-purple-700\">{summaryData.active + summaryData.completed}</p>\n            </div>\n          </button>\n        </div>\n      </div>\n\n      {/* Treatment Cards */}\n      <div className=\"px-6 pb-24 space-y-6\">\n        {treatments.map(treatment => {\n          const isExpanded = expandedCards.includes(treatment.id);\n          const progress = getProgressPercentage(treatment.currentDay, treatment.totalDays);\n          const isCompleted = treatment.status === 'completed';\n          \n          return (\n            <div key={treatment.id} className={`bg-white rounded-3xl shadow-md border overflow-hidden ${\n              isCompleted ? 'border-green-200 bg-green-50/30' : 'border-gray-100'\n            }`}>\n              {/* Main Card Content */}\n              <div className=\"p-6\">\n                {/* Header Row */}\n                <div className=\"flex justify-between items-start mb-4\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-3 mb-2\">\n                      <h3 className=\"text-xl font-bold text-gray-900\">{treatment.cropName}</h3>\n                      <span className={`px-3 py-1 text-xs font-bold rounded-full border ${getSeverityStyle(treatment.severity)} uppercase tracking-wide`}>\n                        {treatment.severity}\n                      </span>\n                    </div>\n                    <p className=\"text-base text-gray-600 font-medium\">{treatment.disease}</p>\n                  </div>\n                  <button\n                    onClick={() => toggleExpand(treatment.id)}\n                    className=\"p-3 hover:bg-gray-100 rounded-full transition-colors\"\n                  >\n                    {isExpanded ? (\n                      <ChevronUp className=\"w-6 h-6 text-gray-500\" />\n                    ) : (\n                      <ChevronDown className=\"w-6 h-6 text-gray-500\" />\n                    )}\n                  </button>\n                </div>\n\n                {/* Progress Bar */}\n                <div className=\"mb-6\">\n                  <div className=\"flex justify-between items-center mb-3\">\n                    <span className=\"text-sm font-medium text-gray-600\">\n                      Day {treatment.currentDay} of {treatment.totalDays}\n                    </span>\n                    <span className=\"text-sm font-bold text-gray-800\">{progress}% Complete</span>\n                  </div>\n                  <div className=\"w-full h-3 bg-gray-200 rounded-full overflow-hidden\">\n                    <div \n                      className=\"h-full bg-gradient-to-r from-green-400 to-green-500 rounded-full transition-all duration-500\"\n                      style={{ width: `${progress}%` }}\n                    />\n                  </div>\n                </div>\n\n                {/* Next Action or Completion Status */}\n                {isCompleted ? (\n                  <div className=\"p-5 rounded-2xl bg-green-50 border-2 border-green-200\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-10 h-10 rounded-xl flex items-center justify-center bg-green-100\">\n                        <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                      </div>\n                      <div className=\"flex-1\">\n                        <p className=\"text-sm font-bold text-gray-900 mb-1\">Treatment Completed</p>\n                        <p className=\"text-base font-medium text-green-800 mb-2\">Successfully treated on {treatment.completedDate}</p>\n                        <p className=\"text-sm text-green-700 font-medium\">\n                          ✓ 100% Progress Complete\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                ) : (\n                  <div className={`p-5 rounded-2xl ${treatment.nextAction.overdue ? 'bg-orange-50 border-2 border-orange-200' : 'bg-blue-50 border-2 border-blue-100'}`}>\n                    <div className=\"flex items-start justify-between mb-4\">\n                      <div className=\"flex items-start space-x-3 flex-1\">\n                        <div className={`w-10 h-10 rounded-xl flex items-center justify-center ${treatment.nextAction.overdue ? 'bg-orange-100' : 'bg-blue-100'}`}>\n                          <Clock className={`w-5 h-5 ${treatment.nextAction.overdue ? 'text-orange-600' : 'text-blue-600'}`} />\n                        </div>\n                        <div className=\"flex-1\">\n                          <p className=\"text-sm font-bold text-gray-900 mb-1\">Next Action</p>\n                          <p className=\"text-base font-medium text-gray-800 mb-2\">{treatment.nextAction.title}</p>\n                          <p className=\"text-sm text-gray-600\">\n                            {treatment.nextAction.overdue && (\n                              <span className=\"inline-flex items-center space-x-2 text-orange-700 font-medium\">\n                                <AlertCircle className=\"w-4 h-4\" />\n                                <span>{treatment.nextAction.dueTime}</span>\n                              </span>\n                            )}\n                            {!treatment.nextAction.overdue && (\n                              <span className=\"text-blue-700 font-medium\">{treatment.nextAction.dueTime}</span>\n                            )}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                    <button className=\"w-full py-3 bg-white text-green-600 font-bold border-2 border-green-300 rounded-xl hover:bg-green-50 transition-colors flex items-center justify-center space-x-2\">\n                      <Check className=\"w-5 h-5\" />\n                      <span>Mark Complete</span>\n                    </button>\n                  </div>\n                )}\n\n                {/* Expanded Content */}\n                {isExpanded && (\n                  <div className=\"mt-4 space-y-4\">\n                    {/* Products Used */}\n                    <div>\n                      <p className=\"text-sm font-medium text-gray-700 mb-2\">Products Used</p>\n                      <div className=\"space-y-2\">\n                        {treatment.products.map((product, index) => (\n                          <div key={index} className=\"flex items-center justify-between p-2 bg-gray-50 rounded-lg\">\n                            <div className=\"flex items-center space-x-2\">\n                              <span className=\"text-lg\">{product.icon}</span>\n                              <span className=\"text-sm text-gray-700\">{product.name}</span>\n                            </div>\n                            <div className=\"flex items-center space-x-2\">\n                              <div className=\"text-right\">\n                                <p className=\"text-xs text-gray-500\">Remaining</p>\n                                <p className=\"text-sm font-medium text-gray-700\">\n                                  {product.total - product.used}{product.unit}\n                                </p>\n                              </div>\n                              <div className=\"w-12 h-1.5 bg-gray-200 rounded-full overflow-hidden\">\n                                <div \n                                  className=\"h-full bg-blue-500 rounded-full\"\n                                  style={{ width: `${((product.total - product.used) / product.total) * 100}%` }}\n                                />\n                              </div>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n\n                    {/* Photos & Notes */}\n                    <div className=\"border-t pt-4\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <p className=\"text-sm font-medium text-gray-700\">Progress Photos & Notes</p>\n                        <button className=\"text-blue-600 text-sm hover:text-blue-700\">\n                          View All\n                        </button>\n                      </div>\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"flex items-center space-x-2 text-gray-600\">\n                          <Camera className=\"w-4 h-4\" />\n                          <span className=\"text-sm\">{treatment.photos} photos</span>\n                        </div>\n                        <div className=\"flex items-center space-x-2 text-gray-600\">\n                          <Edit3 className=\"w-4 h-4\" />\n                          <span className=\"text-sm truncate max-w-[200px]\">{treatment.notes}</span>\n                        </div>\n                      </div>\n                      <div className=\"flex space-x-2 mt-3\">\n                        <button className=\"flex-1 py-2 px-3 bg-gray-100 text-gray-700 rounded-lg text-sm font-medium hover:bg-gray-200 transition-colors flex items-center justify-center space-x-2\">\n                          <Camera className=\"w-4 h-4\" />\n                          <span>Add Photo</span>\n                        </button>\n                        <button className=\"flex-1 py-2 px-3 bg-gray-100 text-gray-700 rounded-lg text-sm font-medium hover:bg-gray-200 transition-colors flex items-center justify-center space-x-2\">\n                          <Edit3 className=\"w-4 h-4\" />\n                          <span>Add Note</span>\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          );\n        })}\n      </div>\n\n    </div>\n  );\n};\n\nexport default ActiveTreatments;","size_bytes":18011},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/pages/Weather.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { ArrowLeft, MapPin, Thermometer, Droplets, Wind, Eye, Sunrise, Sunset, AlertTriangle, RefreshCw } from 'lucide-react';\nimport { useNavigate } from 'react-router-dom';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { weatherService, WeatherData, DailyForecast } from '@/lib/weather';\n\nconst Weather = () => {\n  const navigate = useNavigate();\n  const [currentWeather, setCurrentWeather] = useState<WeatherData | null>(null);\n  const [forecast, setForecast] = useState<DailyForecast[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [location, setLocation] = useState({ lat: 0, lon: 0 });\n\n  const loadWeatherData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Try to get current location first\n      try {\n        const currentLocation = await weatherService.getCurrentLocation();\n        setLocation(currentLocation);\n        \n        // Fetch current weather and forecast\n        const [weather, forecastData] = await Promise.all([\n          weatherService.getCurrentWeather(currentLocation.lat, currentLocation.lon),\n          weatherService.getForecast(currentLocation.lat, currentLocation.lon)\n        ]);\n        \n        setCurrentWeather(weather);\n        setForecast(forecastData);\n      } catch (locationError) {\n        // If location access fails, use a default location (Delhi, India)\n        console.warn('Location access failed, using default location');\n        const defaultWeather = await weatherService.getWeatherByCity('Delhi, IN');\n        const defaultForecast = await weatherService.getForecast(28.6139, 77.2090); // Delhi coordinates\n        \n        setCurrentWeather(defaultWeather);\n        setForecast(defaultForecast);\n      }\n    } catch (err) {\n      setError('Unable to fetch weather data. Please try again.');\n      console.error('Weather fetch error:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadWeatherData();\n  }, []);\n\n  const formatTime = (timestamp: number) => {\n    return new Date(timestamp * 1000).toLocaleTimeString('en-US', {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const getWeatherAdvice = (weather: WeatherData) => {\n    return weatherService.generateFarmingAdvice(weather);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-green-100 p-4\">\n        <div className=\"max-w-md mx-auto\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => navigate(-1)}\n              className=\"text-green-700\"\n            >\n              <ArrowLeft className=\"h-5 w-5 mr-1\" />\n              Back\n            </Button>\n            <h1 className=\"text-xl font-bold text-green-800\">Weather Forecast</h1>\n            <div className=\"w-16\" />\n          </div>\n          \n          <div className=\"flex items-center justify-center py-20\">\n            <RefreshCw className=\"h-8 w-8 animate-spin text-green-600\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-green-100 p-4\">\n        <div className=\"max-w-md mx-auto\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => navigate(-1)}\n              className=\"text-green-700\"\n            >\n              <ArrowLeft className=\"h-5 w-5 mr-1\" />\n              Back\n            </Button>\n            <h1 className=\"text-xl font-bold text-green-800\">Weather Forecast</h1>\n            <div className=\"w-16\" />\n          </div>\n          \n          <Card className=\"mb-6\">\n            <CardContent className=\"p-6 text-center\">\n              <AlertTriangle className=\"h-12 w-12 text-red-500 mx-auto mb-4\" />\n              <p className=\"text-red-600 mb-4\">{error}</p>\n              <Button onClick={loadWeatherData} variant=\"outline\">\n                Try Again\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-green-100 p-4\">\n      <div className=\"max-w-md mx-auto\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => navigate(-1)}\n            className=\"text-green-700\"\n          >\n            <ArrowLeft className=\"h-5 w-5 mr-1\" />\n            Back\n          </Button>\n          <h1 className=\"text-xl font-bold text-green-800\">Weather Forecast</h1>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={loadWeatherData}\n            className=\"text-green-700\"\n          >\n            <RefreshCw className=\"h-5 w-5\" />\n          </Button>\n        </div>\n\n        {/* Current Weather */}\n        {currentWeather && (\n          <Card className=\"mb-6 bg-gradient-to-r from-blue-500 to-blue-600 text-white\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div>\n                  <div className=\"flex items-center mb-2\">\n                    <MapPin className=\"h-4 w-4 mr-1\" />\n                    <span className=\"text-sm\">{currentWeather.location}</span>\n                  </div>\n                  <div className=\"text-3xl font-bold mb-1\">\n                    {currentWeather.temperature}°C\n                  </div>\n                  <div className=\"text-sm opacity-90 capitalize\">\n                    {currentWeather.description}\n                  </div>\n                  <div className=\"text-sm opacity-90\">\n                    Feels like {currentWeather.feelsLike}°C\n                  </div>\n                </div>\n                <img\n                  src={weatherService.getWeatherIconUrl(currentWeather.icon)}\n                  alt={currentWeather.description}\n                  className=\"h-20 w-20\"\n                />\n              </div>\n\n              {/* Weather Details */}\n              <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                <div className=\"flex items-center\">\n                  <Droplets className=\"h-4 w-4 mr-2\" />\n                  <span>Humidity: {currentWeather.humidity}%</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <Wind className=\"h-4 w-4 mr-2\" />\n                  <span>Wind: {currentWeather.windSpeed} m/s</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <Thermometer className=\"h-4 w-4 mr-2\" />\n                  <span>Pressure: {currentWeather.pressure} hPa</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <Eye className=\"h-4 w-4 mr-2\" />\n                  <span>Visibility: {currentWeather.visibility} km</span>\n                </div>\n              </div>\n\n              {/* Sun Times */}\n              <div className=\"flex items-center justify-between mt-4 pt-4 border-t border-white/20\">\n                <div className=\"flex items-center\">\n                  <Sunrise className=\"h-4 w-4 mr-2\" />\n                  <span className=\"text-sm\">\n                    Sunrise: {formatTime(currentWeather.sunrise)}\n                  </span>\n                </div>\n                <div className=\"flex items-center\">\n                  <Sunset className=\"h-4 w-4 mr-2\" />\n                  <span className=\"text-sm\">\n                    Sunset: {formatTime(currentWeather.sunset)}\n                  </span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Farming Advice */}\n        {currentWeather && (\n          <Card className=\"mb-6 bg-green-50 border-green-200\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm text-green-800\">🌾 Farming Advice</CardTitle>\n            </CardHeader>\n            <CardContent className=\"pt-0\">\n              <p className=\"text-sm text-green-700\">\n                {getWeatherAdvice(currentWeather)}\n              </p>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* 7-Day Forecast */}\n        <div className=\"mb-6\">\n          <h2 className=\"text-xl font-bold text-green-800 mb-4 px-2\">7-Day Forecast</h2>\n          <div className=\"space-y-3 px-2\">\n            {forecast.map((day, index) => {\n              // Determine gradient based on weather condition\n              const getWeatherGradient = (icon: string, description: string) => {\n                const desc = description.toLowerCase();\n                const iconCode = icon;\n                \n                if (desc.includes('sun') || desc.includes('clear') || iconCode.includes('01')) {\n                  return 'from-yellow-400 via-orange-400 to-red-400';\n                } else if (desc.includes('rain') || desc.includes('drizzle') || iconCode.includes('09') || iconCode.includes('10')) {\n                  return 'from-blue-400 via-blue-500 to-indigo-600';\n                } else if (desc.includes('cloud') || iconCode.includes('02') || iconCode.includes('03') || iconCode.includes('04')) {\n                  return 'from-gray-400 via-gray-500 to-gray-600';\n                } else if (desc.includes('storm') || desc.includes('thunder') || iconCode.includes('11')) {\n                  return 'from-purple-500 via-indigo-600 to-gray-700';\n                } else if (desc.includes('snow') || iconCode.includes('13')) {\n                  return 'from-blue-100 via-blue-200 to-blue-300';\n                } else {\n                  return 'from-green-400 via-blue-500 to-purple-600';\n                }\n              };\n              \n              const getTextColor = (icon: string, description: string) => {\n                const desc = description.toLowerCase();\n                if (desc.includes('snow') || icon.includes('13')) {\n                  return 'text-gray-800';\n                }\n                return 'text-white';\n              };\n              \n              return (\n                <div\n                  key={day.date}\n                  className={`w-full bg-gradient-to-br ${getWeatherGradient(day.icon, day.description)} rounded-3xl p-4 shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-[1.02]`}\n                >\n                  <div className={`flex items-center justify-between ${getTextColor(day.icon, day.description)}`}>\n                    {/* Day */}\n                    <div className=\"font-bold text-lg opacity-90\">\n                      {index === 0 ? 'Today' : day.dayName.slice(0, 3)}\n                    </div>\n                    \n                    {/* Weather Icon */}\n                    <div className=\"flex justify-center\">\n                      <img\n                        src={weatherService.getWeatherIconUrl(day.icon)}\n                        alt={day.description}\n                        className=\"w-12 h-12 drop-shadow-lg\"\n                      />\n                    </div>\n                    \n                    {/* Temperature */}\n                    <div className=\"text-center\">\n                      <div className=\"text-lg font-bold\">\n                        {day.temperature.max}°\n                      </div>\n                      <div className=\"text-sm opacity-80\">\n                        {day.temperature.min}°\n                      </div>\n                    </div>\n                    \n                    {/* Humidity */}\n                    <div className=\"text-sm opacity-75 font-medium\">\n                      💧 {day.humidity}%\n                    </div>\n                    \n                    {/* Weather Description */}\n                    <div className=\"text-sm opacity-70 capitalize leading-tight\">\n                      {day.description.split(' ').slice(0, 2).join(' ')}\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n\n        {/* Additional Info */}\n        <div className=\"mt-6 text-center text-xs text-gray-500\">\n          Data provided by OpenWeatherMap\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Weather;","size_bytes":12531},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/components/ui/avatar.tsx":{"content":"import * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1405},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:size-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2701},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { DayPicker } from \"react-day-picker\";\n\nimport { cn } from \"@/lib/utils\";\nimport { buttonVariants } from \"@/components/ui/button\";\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>;\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ ..._props }) => <ChevronLeft className=\"h-4 w-4\" />,\n        IconRight: ({ ..._props }) => <ChevronRight className=\"h-4 w-4\" />,\n      }}\n      {...props}\n    />\n  );\n}\nCalendar.displayName = \"Calendar\";\n\nexport { Calendar };\n","size_bytes":2620},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1877},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/components/ui/chart.tsx":{"content":"import * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([_, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10466},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/components/ui/collapsible.tsx":{"content":"import * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":315},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\ninterface CommandDialogProps extends DialogProps {}\n\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4879},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7246},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/components/ui/dialog.tsx":{"content":"import * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3835},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/components/ui/drawer.tsx":{"content":"import * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3007},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7295},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/components/ui/form.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n  FormProvider,\n  useFormContext,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4085},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/components/ui/hover-card.tsx":{"content":"import * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1184},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/components/ui/menubar.tsx":{"content":"import * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst MenubarMenu = MenubarPrimitive.Menu\n\nconst MenubarGroup = MenubarPrimitive.Group\n\nconst MenubarPortal = MenubarPrimitive.Portal\n\nconst MenubarSub = MenubarPrimitive.Sub\n\nconst MenubarRadioGroup = MenubarPrimitive.RadioGroup\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":7974},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5046},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1230},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/components/ui/progress.tsx":{"content":"import * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":777},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/components/ui/resizable.tsx":{"content":"import { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1709},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/components/ui/select.tsx":{"content":"import * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5615},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/components/ui/sheet.tsx":{"content":"import * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n  VariantProps<typeof sheetVariants> { }\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet, SheetClose,\n  SheetContent, SheetDescription, SheetFooter, SheetHeader, SheetOverlay, SheetPortal, SheetTitle, SheetTrigger\n}\n\n","size_bytes":4250},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar:state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden md:block text-sidebar-foreground\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23367},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/components/ui/sonner.tsx":{"content":"import { useTheme } from \"next-themes\"\nimport { Toaster as Sonner, toast } from \"sonner\"\n\ntype ToasterProps = React.ComponentProps<typeof Sonner>\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\n          description: \"group-[.toast]:text-muted-foreground\",\n          actionButton:\n            \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\",\n          cancelButton:\n            \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\",\n        },\n      }}\n      {...props}\n    />\n  )\n}\n\nexport { Toaster, toast }\n","size_bytes":894},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":772},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/components/ui/toggle-group.tsx":{"content":"import * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1739},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3\",\n        sm: \"h-9 px-2.5\",\n        lg: \"h-11 px-5\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1435},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/components/ui/tooltip.tsx":{"content":"import * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1145},"sih10-1/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan/src/components/ui/use-toast.ts":{"content":"import { useToast, toast } from \"@/hooks/use-toast\";\n\nexport { useToast, toast };\n","size_bytes":82},"README.md":{"content":"# Welcome to your Lovable project\n\n## Project info\n\n**URL**: https://lovable.dev/projects/dedd10bc-e4b5-4e63-af47-01942e33b069\n\n## How can I edit this code?\n\nThere are several ways of editing your application.\n\n**Use Lovable**\n\nSimply visit the [Lovable Project](https://lovable.dev/projects/dedd10bc-e4b5-4e63-af47-01942e33b069) and start prompting.\n\nChanges made via Lovable will be committed automatically to this repo.\n\n**Use your preferred IDE**\n\nIf you want to work locally using your own IDE, you can clone this repo and push changes. Pushed changes will also be reflected in Lovable.\n\nThe only requirement is having Node.js & npm installed - [install with nvm](https://github.com/nvm-sh/nvm#installing-and-updating)\n\nFollow these steps:\n\n```sh\n# Step 1: Clone the repository using the project's Git URL.\ngit clone <YOUR_GIT_URL>\n\n# Step 2: Navigate to the project directory.\ncd <YOUR_PROJECT_NAME>\n\n# Step 3: Install the necessary dependencies.\nnpm i\n\n# Step 4: Start the development server with auto-reloading and an instant preview.\nnpm run dev\n```\n\n**Edit a file directly in GitHub**\n\n- Navigate to the desired file(s).\n- Click the \"Edit\" button (pencil icon) at the top right of the file view.\n- Make your changes and commit the changes.\n\n**Use GitHub Codespaces**\n\n- Navigate to the main page of your repository.\n- Click on the \"Code\" button (green button) near the top right.\n- Select the \"Codespaces\" tab.\n- Click on \"New codespace\" to launch a new Codespace environment.\n- Edit files directly within the Codespace and commit and push your changes once you're done.\n\n## What technologies are used for this project?\n\nThis project is built with:\n\n- Vite\n- TypeScript\n- React\n- shadcn-ui\n- Tailwind CSS\n\n## How can I deploy this project?\n\nSimply open [Lovable](https://lovable.dev/projects/dedd10bc-e4b5-4e63-af47-01942e33b069) and click on Share -> Publish.\n\n## Can I connect a custom domain to my Lovable project?\n\nYes, you can!\n\nTo connect a domain, navigate to Project > Settings > Domains and click Connect Domain.\n\nRead more here: [Setting up a custom domain](https://docs.lovable.dev/tips-tricks/custom-domain#step-by-step-guide)\n","size_bytes":2149},"README_SETUP.md":{"content":"# KisanMitra Setup Guide\n\n## Quick Start (Local Development)\n\n### 1. Prerequisites\n- Python 3.8+ installed\n- Node.js 16+ installed\n- Git installed\n\n### 2. Download and Setup\n```bash\n# Clone or download the project\ngit clone <your-repository-url>\ncd kisanmitra\n\n# Install Python dependencies\npip install -r requirements.txt\n\n# Install Node.js dependencies\nnpm install\n```\n\n### 3. Environment Configuration\n```bash\n# Copy the environment template\ncp .env.example .env\n\n# Open .env file and add your API keys:\n# - Get Gemini API key from: https://makersuite.google.com/app/apikey\n# - Get HuggingFace token from: https://huggingface.co/settings/tokens  \n# - Get OpenWeatherMap key from: https://openweathermap.org/api\n# - Get Supabase database URL from your Supabase dashboard\n```\n\n### 4. Run the Application\n```bash\n# Terminal 1: Start the backend (runs on port 8000)\npython server/plant_diagnosis_api.py\n\n# Terminal 2: Start the frontend (runs on port 5173)\nnpm run dev\n\n# Access the app at: http://localhost:5173\n# Backend API available at: http://localhost:8000\n```\n\n## API Keys Required\n\n### Essential Services\n1. **DATABASE_URL**: Supabase PostgreSQL connection string\n2. **OPENWEATHERMAP_API_KEY**: For weather features\n3. **VITE_OPENWEATHERMAP_API_KEY**: Same weather key for frontend\n\n### AI Features (Choose ONE)\n4a. **GEMINI_API_KEY**: For intelligent chat assistant (Google Gemini)\n4b. **OPENAI_API_KEY**: For intelligent chat assistant (OpenAI ChatGPT)\n5. **HF_TOKEN**: For plant disease detection AI\n\n### Optional Services\n- **TWILIO_***: For SMS notifications (future feature)\n\n## Troubleshooting\n\n### Common Issues\n1. **Backend not starting**: Check if Python dependencies are installed\n2. **Frontend build errors**: Run `npm install` again\n3. **API errors**: Verify your API keys are correctly set in .env\n4. **Database errors**: Check your Supabase connection string\n\n### Verification Commands\n```bash\n# Test backend health\ncurl http://localhost:8000/api/health\n\n# Test weather API\ncurl \"http://localhost:8000/api/weather?city=Delhi\"\n\n# Check if .env is loaded\npython -c \"from dotenv import load_dotenv; load_dotenv(); import os; print('✅ Keys loaded' if os.getenv('OPENWEATHERMAP_API_KEY') else '❌ .env not loaded')\"\n\n# Test frontend access\nopen http://localhost:5173\n```\n\n## Features Available\n\n### ✅ Core Features (Working)\n- Weather monitoring and forecasts\n- Agricultural marketplace\n- User profiles and authentication\n- Database integration (Supabase)\n- Mobile-responsive design\n\n### 🔄 AI Features (Requires API Keys)\n- Plant disease diagnosis (needs HF_TOKEN)\n- Intelligent farming assistant chat (needs GEMINI_API_KEY)\n\n### 📱 Mobile Features\n- Progressive Web App (PWA)\n- Offline functionality\n- Camera integration for plant diagnosis\n- Location-based services\n\n## Production Deployment\n\nFor production deployment, ensure:\n1. Use production database URL\n2. Set `FLASK_ENV=production`\n3. Use a production WSGI server like Gunicorn\n4. Configure proper CORS origins\n5. Enable HTTPS for all API keys\n\n## Support\n\nIf you encounter issues:\n1. Check the console logs for detailed error messages\n2. Verify all API keys are correctly formatted\n3. Ensure internet connection for external API calls\n4. Check that all required ports (5173, 8000) are available\n\n## 🚨 IMPORTANT SECURITY NOTE\n\nIf you downloaded this project from a source where .env files might have been committed:\n1. **IMMEDIATELY** rotate/revoke any Supabase database credentials\n2. **IMMEDIATELY** regenerate any OpenWeatherMap API keys\n3. **NEVER** commit .env files with real credentials to version control\n4. Always use .env.example for templates and keep .env files local only","size_bytes":3673},"android/app/src/androidTest/java/com/getcapacitor/myapp/ExampleInstrumentedTest.java":{"content":"package com.getcapacitor.myapp;\n\nimport static org.junit.Assert.*;\n\nimport android.content.Context;\nimport androidx.test.ext.junit.runners.AndroidJUnit4;\nimport androidx.test.platform.app.InstrumentationRegistry;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\n\n/**\n * Instrumented test, which will execute on an Android device.\n *\n * @see <a href=\"http://d.android.com/tools/testing\">Testing documentation</a>\n */\n@RunWith(AndroidJUnit4.class)\npublic class ExampleInstrumentedTest {\n\n    @Test\n    public void useAppContext() throws Exception {\n        // Context of the app under test.\n        Context appContext = InstrumentationRegistry.getInstrumentation().getTargetContext();\n\n        assertEquals(\"com.getcapacitor.app\", appContext.getPackageName());\n    }\n}\n","size_bytes":774},"android/app/src/main/java/com/kisanmitra/app/MainActivity.java":{"content":"package com.kisanmitra.app;\n\nimport com.getcapacitor.BridgeActivity;\n\npublic class MainActivity extends BridgeActivity {}\n","size_bytes":122},"android/app/src/test/java/com/getcapacitor/myapp/ExampleUnitTest.java":{"content":"package com.getcapacitor.myapp;\n\nimport static org.junit.Assert.*;\n\nimport org.junit.Test;\n\n/**\n * Example local unit test, which will execute on the development machine (host).\n *\n * @see <a href=\"http://d.android.com/tools/testing\">Testing documentation</a>\n */\npublic class ExampleUnitTest {\n\n    @Test\n    public void addition_isCorrect() throws Exception {\n        assertEquals(4, 2 + 2);\n    }\n}\n","size_bytes":402},"capacitor.config.ts":{"content":"import type { CapacitorConfig } from '@capacitor/cli';\n\nconst config: CapacitorConfig = {\n  appId: 'com.kisanmitra.app',\n  appName: 'Kisan Mitra',\n  webDir: 'dist',\n  server: {\n    androidScheme: 'https'\n  },\n  android: {\n    allowMixedContent: true,\n    captureInput: true,\n    webContentsDebuggingEnabled: false\n  },\n  ios: {\n    scheme: 'Kisan Mitra',\n    contentInset: 'automatic'\n  },\n  plugins: {\n    Camera: {\n      permissions: [\"camera\", \"photos\"]\n    },\n    PushNotifications: {\n      presentationOptions: [\"badge\", \"sound\", \"alert\"]\n    },\n    StatusBar: {\n      style: 'DEFAULT',\n      backgroundColor: '#22c55e'\n    },\n    SplashScreen: {\n      launchShowDuration: 2000,\n      backgroundColor: '#22c55e',\n      androidSplashResourceName: 'splash',\n      showSpinner: false\n    },\n    Keyboard: {\n      resize: 'body',\n      style: 'DARK',\n      resizeOnFullScreen: true\n    },\n    App: {\n      launchUrl: 'file://./index.html'\n    }\n  }\n};\n\nexport default config;","size_bytes":976},"drizzle.config.ts":{"content":"import { defineConfig } from 'drizzle-kit';\n\nexport default defineConfig({\n  schema: './shared/schema.ts',\n  out: './drizzle',\n  dialect: 'postgresql',\n  dbCredentials: {\n    url: process.env.DATABASE_URL!,\n  },\n});","size_bytes":215},"eslint.config.js":{"content":"import js from \"@eslint/js\";\nimport globals from \"globals\";\nimport reactHooks from \"eslint-plugin-react-hooks\";\nimport reactRefresh from \"eslint-plugin-react-refresh\";\nimport tseslint from \"typescript-eslint\";\n\nexport default tseslint.config(\n  { ignores: [\"dist\"] },\n  {\n    extends: [js.configs.recommended, ...tseslint.configs.recommended],\n    files: [\"**/*.{ts,tsx}\"],\n    languageOptions: {\n      ecmaVersion: 2020,\n      globals: globals.browser,\n    },\n    plugins: {\n      \"react-hooks\": reactHooks,\n      \"react-refresh\": reactRefresh,\n    },\n    rules: {\n      ...reactHooks.configs.recommended.rules,\n      \"react-refresh/only-export-components\": [\n        \"warn\",\n        { allowConstantExport: true },\n      ],\n      \"@typescript-eslint/no-unused-vars\": \"off\",\n    },\n  }\n);\n","size_bytes":789},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Hariyali Mitra - Farm Assistant Application\n\n## Project Overview\nHariyali Mitra is a comprehensive farming assistance application built with React, TypeScript, and Vite. It provides farmers with:\n- Plant disease diagnosis through AI-powered image analysis\n- Agricultural marketplace for buying/selling produce\n- Community features and expert guidance\n- Localized content and multi-language support\n\n## Technology Stack\n- **Frontend**: React 18.3.1 with TypeScript\n- **Build Tool**: Vite 5.4.19\n- **UI Framework**: shadcn/ui components with Tailwind CSS\n- **Routing**: React Router DOM 6.30.1\n- **State Management**: TanStack React Query\n- **Mobile**: Capacitor for hybrid app development\n- **Styling**: Tailwind CSS with custom animations\n\n## Current Setup\n**Status**: ✅ Successfully configured for Replit environment\n**Frontend Server**: Running on port 5000 (Vite dev server for development)\n**Backend Server**: Running on port 8000 (Flask API server for development)\n**Deployment**: ✅ Configured for autoscale deployment with Gunicorn serving static React build\n**Production Setup**: Single Flask server serves both API and static files on port 5000\n**Last Updated**: September 13, 2025\n\n### Development Configuration\n- Vite dev server configured for Replit (host: 0.0.0.0, port: 5000)\n- All hosts allowed for proper iframe rendering in Replit\n- Hot module replacement enabled for development\n\n### Deployment Configuration\n- **Target**: Autoscale (single Flask server with integrated static serving)\n- **Build Command**: `npm ci --omit=dev && npm run build && pip install -r requirements.txt`\n- **Run Command**: `gunicorn -w 2 -k gthread -b 0.0.0.0:5000 server.plant_diagnosis_api:app`\n- **Production Notes**: Flask serves React build from `/sihh/dist` with SPA routing fallback\n- **Port**: 5000 (single server for both API and static files)\n\n## Project Structure\n```\nsrc/\n├── components/     # Reusable UI components (shadcn/ui)\n├── pages/         # Application pages/routes\n├── hooks/         # Custom React hooks\n├── lib/           # Utilities and configurations\n└── assets/        # Images and static assets\n```\n\n## Key Features Implemented\n1. **Landing & Onboarding**: Multi-step user introduction\n2. **Authentication**: Login/signup system\n3. **Plant Diagnosis**: Camera capture and AI analysis\n4. **Marketplace**: Shopping cart and checkout flow\n5. **Profile Management**: User profile editing\n6. **Community Features**: Guides and treatments\n\n## Development Workflow\n- **Frontend Server**: Workflow configured on port 5000\n- **Backend Server**: Workflow configured on port 8000 (Python Flask API)\n- **Build for Production**: `npm run build`\n- **Preview Production**: `npm run preview`\n\n## Backend Requirements\n- **Python Dependencies**: flask, flask-cors, Pillow, requests\n- **Optional**: HF_TOKEN environment variable for Hugging Face API (uses demo mode if not provided)\n- **Endpoints**: /health, /diagnose, /diagnose/upload\n\n## Recent Changes\n- September 13, 2025: ✅ **Successfully completed fresh GitHub import setup in Replit environment**\n  - Installed Python 3.11 with all required dependencies (flask, cors, pillow, requests, etc.)\n  - Installed all npm dependencies for React/Vite frontend\n  - Fixed workflow configurations with correct directory paths\n  - Verified frontend-backend communication through Vite API proxy (/api routes)\n  - Tested health endpoints: backend (port 8000) and frontend proxy (port 5000/api)\n  - Configured autoscale deployment with proper build and run commands\n  - Both workflows running error-free with proper logs\n  - Frontend accessible on port 5000 with HMR working\n  - Backend API running on port 8000 with database connection\n  - Production deployment configured and ready","size_bytes":3764},"server/database/__init__.py":{"content":"#!/usr/bin/env python3\n\nfrom .models import (\n    Base,\n    User,\n    Listing, \n    Diagnosis,\n    AdvisoryRecord,\n    UserActivity,\n    create_tables,\n    get_db,\n    get_db_session,\n    create_user,\n    get_user_by_phone,\n    get_user_by_id,\n    create_diagnosis,\n    get_user_diagnoses,\n    create_user_activity,\n    test_connection\n)\n\n__all__ = [\n    'Base',\n    'User',\n    'Listing',\n    'Diagnosis', \n    'AdvisoryRecord',\n    'UserActivity',\n    'create_tables',\n    'get_db',\n    'get_db_session',\n    'create_user',\n    'get_user_by_phone',\n    'get_user_by_id',\n    'create_diagnosis',\n    'get_user_diagnoses',\n    'create_user_activity',\n    'test_connection'\n]","size_bytes":674},"server/database/init_db.py":{"content":"#!/usr/bin/env python3\n\nimport os\nimport sys\nfrom datetime import datetime\n\n# Add the parent directory to Python path so we can import models\nsys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\nfrom database.models import create_tables, test_connection, get_db_session, create_user, create_user_activity\n\ndef init_database():\n    \"\"\"Initialize the database with tables and sample data if needed\"\"\"\n    print(\"Initializing database...\")\n    \n    # Test database connection first\n    if not test_connection():\n        print(\"❌ Database connection failed. Please check your DATABASE_URL.\")\n        return False\n    \n    print(\"✅ Database connection successful\")\n    \n    # Create tables\n    if not create_tables():\n        print(\"❌ Failed to create database tables\")\n        return False\n    \n    print(\"✅ Database tables created successfully\")\n    \n    # Create a sample user for testing if none exists\n    try:\n        db = get_db_session()\n        \n        # Check if we have any users\n        from database.models import User\n        existing_users = db.query(User).count()\n        \n        if existing_users == 0:\n            print(\"Creating sample user for testing...\")\n            \n            sample_user = create_user(\n                db=db,\n                name=\"Test Farmer\",\n                phone=\"+919876543210\",\n                location=\"Test Village\",\n                state=\"Maharashtra\",\n                avatar=None\n            )\n            \n            # Log the user creation activity\n            create_user_activity(\n                db=db,\n                user_id=sample_user.id,\n                action=\"user_registered\",\n                data={\"registration_method\": \"system_init\", \"test_user\": True}\n            )\n            \n            print(f\"✅ Sample user created with ID: {sample_user.id}\")\n        else:\n            print(f\"✅ Database already has {existing_users} users\")\n            \n        db.close()\n        \n    except Exception as e:\n        print(f\"❌ Error creating sample data: {e}\")\n        return False\n    \n    print(\"🎉 Database initialization completed successfully!\")\n    return True\n\ndef reset_database():\n    \"\"\"Drop all tables and recreate them (WARNING: This will delete all data!)\"\"\"\n    print(\"⚠️  WARNING: This will delete all data in the database!\")\n    confirm = input(\"Are you sure you want to continue? (yes/no): \")\n    \n    if confirm.lower() != 'yes':\n        print(\"Operation cancelled.\")\n        return False\n    \n    try:\n        from database.models import Base, engine\n        \n        print(\"Dropping all tables...\")\n        Base.metadata.drop_all(bind=engine)\n        print(\"✅ All tables dropped\")\n        \n        print(\"Recreating tables...\")\n        Base.metadata.create_all(bind=engine)\n        print(\"✅ All tables recreated\")\n        \n        print(\"🎉 Database reset completed successfully!\")\n        return True\n        \n    except Exception as e:\n        print(f\"❌ Error resetting database: {e}\")\n        return False\n\nif __name__ == '__main__':\n    import argparse\n    \n    parser = argparse.ArgumentParser(description='Database management utility')\n    parser.add_argument('command', choices=['init', 'reset'], help='Command to run')\n    \n    args = parser.parse_args()\n    \n    if args.command == 'init':\n        success = init_database()\n        sys.exit(0 if success else 1)\n    elif args.command == 'reset':\n        success = reset_database()\n        sys.exit(0 if success else 1)","size_bytes":3508},"server/database/models.py":{"content":"#!/usr/bin/env python3\n\nfrom sqlalchemy import create_engine, Column, Integer, String, Text, DateTime, Boolean, Numeric, ForeignKey, JSON, text\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker, relationship\nfrom sqlalchemy.dialects.postgresql import UUID\nfrom datetime import datetime\nimport uuid\nimport os\nfrom dotenv import load_dotenv\n\n# Load environment variables from .env file\nload_dotenv()\n\nBase = declarative_base()\n\nclass User(Base):\n    __tablename__ = 'users'\n    \n    id = Column(Integer, primary_key=True)\n    name = Column(String(255), nullable=False)\n    phone = Column(String(20), unique=True, nullable=False)\n    location = Column(String(255), nullable=False)\n    state = Column(String(100), nullable=False)\n    avatar = Column(Text)\n    joined_date = Column(DateTime, default=datetime.utcnow, nullable=False)\n    created_at = Column(DateTime, default=datetime.utcnow, nullable=False)\n    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow, nullable=False)\n    \n    # Relationships\n    listings = relationship(\"Listing\", back_populates=\"user\", cascade=\"all, delete-orphan\")\n    diagnoses = relationship(\"Diagnosis\", back_populates=\"user\", cascade=\"all, delete-orphan\")\n    advisory_records = relationship(\"AdvisoryRecord\", back_populates=\"user\", cascade=\"all, delete-orphan\")\n    activities = relationship(\"UserActivity\", back_populates=\"user\", cascade=\"all, delete-orphan\")\n    \n    def to_dict(self):\n        return {\n            'id': self.id,\n            'name': self.name,\n            'phone': self.phone,\n            'location': self.location,\n            'state': self.state,\n            'avatar': self.avatar,\n            'joined_date': self.joined_date.isoformat() if self.joined_date else None,\n            'created_at': self.created_at.isoformat() if self.created_at else None,\n            'updated_at': self.updated_at.isoformat() if self.updated_at else None\n        }\n\nclass Listing(Base):\n    __tablename__ = 'listings'\n    \n    id = Column(Integer, primary_key=True)\n    user_id = Column(Integer, ForeignKey('users.id'), nullable=False)\n    crop = Column(String(100), nullable=False)\n    quantity = Column(String(50), nullable=False)\n    price_per_kg = Column(Numeric(10, 2), nullable=False)\n    market = Column(String(255), nullable=False)\n    transport = Column(String(10), nullable=False)\n    views = Column(Integer, default=0, nullable=False)\n    inquiries = Column(Integer, default=0, nullable=False)\n    total_price = Column(Numeric(12, 2), nullable=False)\n    status = Column(String(20), default='active', nullable=False)  # active, sold, expired\n    posted_date = Column(String(50), nullable=False)\n    sold_date = Column(DateTime)\n    sold_price = Column(Numeric(12, 2))\n    buyer = Column(String(255))\n    created_at = Column(DateTime, default=datetime.utcnow, nullable=False)\n    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow, nullable=False)\n    \n    # Relationships\n    user = relationship(\"User\", back_populates=\"listings\")\n    \n    def to_dict(self):\n        return {\n            'id': self.id,\n            'user_id': self.user_id,\n            'crop': self.crop,\n            'quantity': self.quantity,\n            'price_per_kg': float(self.price_per_kg) if self.price_per_kg else None,\n            'market': self.market,\n            'transport': self.transport,\n            'views': self.views,\n            'inquiries': self.inquiries,\n            'total_price': float(self.total_price) if self.total_price else None,\n            'status': self.status,\n            'posted_date': self.posted_date,\n            'sold_date': self.sold_date.isoformat() if self.sold_date else None,\n            'sold_price': float(self.sold_price) if self.sold_price else None,\n            'buyer': self.buyer,\n            'created_at': self.created_at.isoformat() if self.created_at else None,\n            'updated_at': self.updated_at.isoformat() if self.updated_at else None\n        }\n\nclass Diagnosis(Base):\n    __tablename__ = 'diagnoses'\n    \n    id = Column(Integer, primary_key=True)\n    user_id = Column(Integer, ForeignKey('users.id'), nullable=False)\n    crop_name = Column(String(100), nullable=False)\n    diagnosis = Column(Text, nullable=False)\n    confidence = Column(Integer, nullable=False)\n    treatment = Column(Text, nullable=False)\n    date = Column(DateTime, nullable=False)\n    created_at = Column(DateTime, default=datetime.utcnow, nullable=False)\n    \n    # Relationships\n    user = relationship(\"User\", back_populates=\"diagnoses\")\n    \n    def to_dict(self):\n        return {\n            'id': self.id,\n            'user_id': self.user_id,\n            'crop_name': self.crop_name,\n            'diagnosis': self.diagnosis,\n            'confidence': self.confidence,\n            'treatment': self.treatment,\n            'date': self.date.isoformat() if self.date else None,\n            'created_at': self.created_at.isoformat() if self.created_at else None\n        }\n\nclass AdvisoryRecord(Base):\n    __tablename__ = 'advisory_records'\n    \n    id = Column(Integer, primary_key=True)\n    user_id = Column(Integer, ForeignKey('users.id'), nullable=False)\n    title = Column(String(255), nullable=False)\n    content = Column(Text, nullable=False)\n    category = Column(String(100), nullable=False)\n    saved_date = Column(DateTime, default=datetime.utcnow, nullable=False)\n    created_at = Column(DateTime, default=datetime.utcnow, nullable=False)\n    \n    # Relationships\n    user = relationship(\"User\", back_populates=\"advisory_records\")\n    \n    def to_dict(self):\n        return {\n            'id': self.id,\n            'user_id': self.user_id,\n            'title': self.title,\n            'content': self.content,\n            'category': self.category,\n            'saved_date': self.saved_date.isoformat() if self.saved_date else None,\n            'created_at': self.created_at.isoformat() if self.created_at else None\n        }\n\nclass UserActivity(Base):\n    __tablename__ = 'user_activities'\n    \n    id = Column(Integer, primary_key=True)\n    user_id = Column(Integer, ForeignKey('users.id'), nullable=False)\n    action = Column(String(100), nullable=False)\n    data = Column(JSON)\n    timestamp = Column(DateTime, default=datetime.utcnow, nullable=False)\n    \n    # Relationships\n    user = relationship(\"User\", back_populates=\"activities\")\n    \n    def to_dict(self):\n        return {\n            'id': self.id,\n            'user_id': self.user_id,\n            'action': self.action,\n            'data': self.data,\n            'timestamp': self.timestamp.isoformat() if self.timestamp else None\n        }\n\n# Database configuration and session management\nDATABASE_URL = os.environ.get('DATABASE_URL')\n\n# Global variables for database engine and session\nengine = None\nSessionLocal = None\nDB_AVAILABLE = False\n\ndef _ensure_ssl_in_database_url(database_url: str) -> str:\n    \"\"\"Ensure DATABASE_URL includes proper SSL configuration for Supabase\"\"\"\n    if not database_url:\n        return database_url\n    \n    # Add SSL mode for Supabase/PostgreSQL if not present\n    if 'sslmode=' not in database_url.lower():\n        connector = '&' if '?' in database_url else '?'\n        database_url += f'{connector}sslmode=require'\n    \n    return database_url\n\ndef _initialize_database():\n    \"\"\"Initialize database connection with proper error handling\"\"\"\n    global engine, SessionLocal, DB_AVAILABLE\n    \n    if not DATABASE_URL:\n        print(\"⚠️ DATABASE_URL not provided - running without database functionality\")\n        DB_AVAILABLE = False\n        return False\n    \n    try:\n        # Ensure SSL configuration for Supabase\n        ssl_database_url = _ensure_ssl_in_database_url(DATABASE_URL)\n        \n        # Create engine with SSL and connection pooling\n        engine = create_engine(\n            ssl_database_url,\n            pool_size=10,\n            max_overflow=20,\n            pool_recycle=3600,\n            pool_pre_ping=True,  # Enable connection health checks\n            echo=False  # Set to True for SQL debugging\n        )\n        \n        # Create session factory\n        SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n        \n        # Test the connection\n        test_db = SessionLocal()\n        test_db.execute(text(\"SELECT 1\"))\n        test_db.close()\n        \n        DB_AVAILABLE = True\n        print(\"✅ Database connection initialized successfully\")\n        return True\n        \n    except Exception as e:\n        print(f\"⚠️ Database initialization failed: {e}\")\n        print(\"⚠️ Running without database functionality\")\n        DB_AVAILABLE = False\n        engine = None\n        SessionLocal = None\n        return False\n\n# Initialize database on module import\n_initialize_database()\n\ndef create_tables():\n    \"\"\"Create all tables in the database\"\"\"\n    if not DB_AVAILABLE or not engine:\n        print(\"⚠️ Database not available - cannot create tables\")\n        return False\n        \n    try:\n        Base.metadata.create_all(bind=engine)\n        print(\"Database tables created successfully\")\n        return True\n    except Exception as e:\n        print(f\"Error creating database tables: {e}\")\n        return False\n\ndef get_db():\n    \"\"\"Get database session (for FastAPI dependency injection)\"\"\"\n    if not DB_AVAILABLE or not SessionLocal:\n        raise RuntimeError(\"Database not available\")\n        \n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\ndef get_db_session():\n    \"\"\"Get database session for direct use\"\"\"\n    if not DB_AVAILABLE or not SessionLocal:\n        return None\n    return SessionLocal()\n\ndef is_database_available() -> bool:\n    \"\"\"Check if database is available\"\"\"\n    return DB_AVAILABLE\n\n# Helper functions for database operations\ndef _validate_user_input(name: str, phone: str, location: str, state: str) -> list:\n    \"\"\"Validate user input parameters\"\"\"\n    errors = []\n    \n    # Validate name\n    if not name or not name.strip():\n        errors.append(\"Name is required\")\n    elif len(name.strip()) < 2:\n        errors.append(\"Name must be at least 2 characters long\")\n    elif len(name.strip()) > 255:\n        errors.append(\"Name must be less than 255 characters\")\n    \n    # Validate phone\n    if not phone or not phone.strip():\n        errors.append(\"Phone number is required\")\n    else:\n        phone_clean = phone.strip().replace(' ', '').replace('-', '').replace('(', '').replace(')', '')\n        if not phone_clean.startswith('+'):\n            if phone_clean.startswith('91') and len(phone_clean) == 12:\n                # Indian number without +\n                pass\n            elif len(phone_clean) == 10:\n                # 10 digit number\n                pass\n            else:\n                errors.append(\"Phone number must be a valid format (10 digits or +91xxxxxxxxxx)\")\n        elif len(phone_clean) < 10 or len(phone_clean) > 15:\n            errors.append(\"Phone number must be between 10-15 digits\")\n    \n    # Validate location\n    if not location or not location.strip():\n        errors.append(\"Location is required\")\n    elif len(location.strip()) > 255:\n        errors.append(\"Location must be less than 255 characters\")\n    \n    # Validate state\n    if not state or not state.strip():\n        errors.append(\"State is required\")\n    elif len(state.strip()) > 100:\n        errors.append(\"State must be less than 100 characters\")\n    \n    return errors\n\ndef create_user(db, name: str, phone: str, location: str, state: str, avatar: str = None) -> User:\n    \"\"\"Create a new user with proper validation and error handling\"\"\"\n    if not db:\n        raise RuntimeError(\"Database session not available\")\n    \n    # Validate input\n    validation_errors = _validate_user_input(name, phone, location, state)\n    if validation_errors:\n        raise ValueError(f\"Validation errors: {', '.join(validation_errors)}\")\n    \n    try:\n        user = User(\n            name=name.strip(),\n            phone=phone.strip(),\n            location=location.strip(),\n            state=state.strip(),\n            avatar=avatar\n        )\n        db.add(user)\n        db.commit()\n        db.refresh(user)\n        \n        # Create a detached copy of the user object that can be used outside the session\n        user_copy = User(\n            id=user.id,\n            name=user.name,\n            phone=user.phone,\n            location=user.location,\n            state=user.state,\n            avatar=user.avatar,\n            joined_date=user.joined_date,\n            created_at=user.created_at,\n            updated_at=user.updated_at\n        )\n        return user_copy\n        \n    except Exception as e:\n        try:\n            db.rollback()\n        except:\n            pass  # Rollback might fail if connection is lost\n        \n        # Handle specific database errors\n        if 'unique constraint' in str(e).lower() or 'duplicate key' in str(e).lower():\n            raise ValueError(f\"A user with phone number {phone} already exists\")\n        else:\n            raise RuntimeError(f\"Database error: {str(e)}\")\n\ndef get_user_by_phone(db, phone: str) -> User:\n    \"\"\"Get user by phone number with proper error handling\"\"\"\n    if not db:\n        return None\n    if not phone or not phone.strip():\n        return None\n        \n    try:\n        return db.query(User).filter(User.phone == phone.strip()).first()\n    except Exception as e:\n        print(f\"Error querying user by phone: {e}\")\n        return None\n\ndef get_user_by_id(db, user_id: int) -> User:\n    \"\"\"Get user by ID with proper error handling\"\"\"\n    if not db:\n        return None\n    if not user_id or user_id <= 0:\n        return None\n        \n    try:\n        return db.query(User).filter(User.id == user_id).first()\n    except Exception as e:\n        print(f\"Error querying user by ID: {e}\")\n        return None\n\ndef create_diagnosis(db, user_id: int, crop_name: str, diagnosis: str, \n                    confidence: int, treatment: str, date: datetime = None) -> Diagnosis:\n    \"\"\"Create a new diagnosis record with proper error handling\"\"\"\n    if not db:\n        raise RuntimeError(\"Database session not available\")\n    \n    # Validate input\n    if not user_id or user_id <= 0:\n        raise ValueError(\"Valid user_id is required\")\n    if not crop_name or not crop_name.strip():\n        raise ValueError(\"Crop name is required\")\n    if not diagnosis or not diagnosis.strip():\n        raise ValueError(\"Diagnosis is required\")\n    if confidence < 0 or confidence > 100:\n        raise ValueError(\"Confidence must be between 0 and 100\")\n    if not treatment or not treatment.strip():\n        raise ValueError(\"Treatment is required\")\n    \n    try:\n        if date is None:\n            date = datetime.utcnow()\n            \n        diagnosis_record = Diagnosis(\n            user_id=user_id,\n            crop_name=crop_name.strip(),\n            diagnosis=diagnosis.strip(),\n            confidence=confidence,\n            treatment=treatment.strip(),\n            date=date\n        )\n        db.add(diagnosis_record)\n        db.commit()\n        db.refresh(diagnosis_record)\n        \n        # Create a detached copy\n        diagnosis_copy = Diagnosis(\n            id=diagnosis_record.id,\n            user_id=diagnosis_record.user_id,\n            crop_name=diagnosis_record.crop_name,\n            diagnosis=diagnosis_record.diagnosis,\n            confidence=diagnosis_record.confidence,\n            treatment=diagnosis_record.treatment,\n            date=diagnosis_record.date,\n            created_at=diagnosis_record.created_at\n        )\n        return diagnosis_copy\n        \n    except Exception as e:\n        try:\n            db.rollback()\n        except:\n            pass  # Rollback might fail if connection is lost\n        raise RuntimeError(f\"Database error: {str(e)}\")\n\ndef get_user_diagnoses(db, user_id: int, limit: int = 50):\n    \"\"\"Get recent diagnoses for a user with proper error handling\"\"\"\n    if not db:\n        return []\n    if not user_id or user_id <= 0:\n        return []\n    if limit <= 0:\n        limit = 50\n        \n    try:\n        return db.query(Diagnosis).filter(Diagnosis.user_id == user_id)\\\n                 .order_by(Diagnosis.created_at.desc()).limit(limit).all()\n    except Exception as e:\n        print(f\"Error querying user diagnoses: {e}\")\n        return []\n\ndef create_user_activity(db, user_id: int, action: str, data: dict = None):\n    \"\"\"Log user activity with proper error handling\"\"\"\n    if not db:\n        raise RuntimeError(\"Database session not available\")\n    \n    # Validate input\n    if not user_id or user_id <= 0:\n        raise ValueError(\"Valid user_id is required\")\n    if not action or not action.strip():\n        raise ValueError(\"Action is required\")\n    \n    try:\n        activity = UserActivity(\n            user_id=user_id,\n            action=action.strip(),\n            data=data\n        )\n        db.add(activity)\n        db.commit()\n        db.refresh(activity)\n        return activity\n        \n    except Exception as e:\n        try:\n            db.rollback()\n        except:\n            pass  # Rollback might fail if connection is lost\n        raise RuntimeError(f\"Database error: {str(e)}\")\n\ndef test_connection():\n    \"\"\"Test live database connection\"\"\"\n    if not DB_AVAILABLE:\n        return False\n        \n    db = None\n    try:\n        db = get_db_session()\n        if not db:\n            return False\n            \n        # Simple query to test connection\n        result = db.execute(text(\"SELECT 1\")).fetchone()\n        return result is not None\n        \n    except Exception as e:\n        print(f\"Database connection test failed: {e}\")\n        return False\n    finally:\n        if db:\n            try:\n                db.close()\n            except:\n                pass  # Ignore close errors","size_bytes":17820},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"../shared/schema.js\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":487},"server/mitra_chat_api.py":{"content":"from flask import Flask, request, jsonify\nfrom flask_cors import CORS\nfrom openai import OpenAI\nimport os\nfrom datetime import datetime\nfrom dotenv import load_dotenv\n\n# Load environment variables from .env file\nload_dotenv()\n\napp = Flask(__name__)\nCORS(app)\n\n# Set up OpenAI client\napi_key = os.getenv('OPENAI_API_KEY')  # Only use OpenAI API key\nclient = OpenAI(api_key=api_key) if api_key else None\n\n# System prompt for the farming assistant\nFARMING_SYSTEM_PROMPT = \"\"\"You are Hariyali Mitra, a knowledgeable and friendly AI farming assistant specifically designed to help farmers in India. Your role is to provide practical, accurate, and culturally relevant agricultural advice.\n\nKey guidelines:\n1. Always respond in a warm, respectful tone using simple language\n2. Provide practical, actionable advice for Indian farming conditions\n3. Consider local crops, climate, and farming practices\n4. Include seasonal considerations when relevant\n5. Mention organic/sustainable practices when appropriate\n6. If asked about medical issues with plants, provide treatment options\n7. Keep responses concise but comprehensive\n8. Use Hindi/local language terms when helpful, with English explanations\n9. Always prioritize farmer safety and sustainable practices\n\nYou can help with:\n- Crop cultivation advice\n- Pest and disease management\n- Soil health and fertilizers\n- Weather-related farming decisions\n- Market prices and selling strategies\n- Irrigation and water management\n- Organic farming methods\n- Seasonal planning\n- Equipment and tools guidance\n\nRemember: You are a helpful friend to the farmer, not just an information source.\"\"\"\n\n@app.route('/api/chat', methods=['POST'])\ndef chat():\n    try:\n        data = request.get_json()\n        user_message = data.get('message', '').strip()\n        \n        if not user_message:\n            return jsonify({'error': 'Message is required'}), 400\n        \n        if not client.api_key:\n            return jsonify({'error': 'OpenAI API key not configured'}), 500\n            \n        # Create chat completion with OpenAI\n        response = client.chat.completions.create(\n            model=\"gpt-3.5-turbo\",\n            messages=[\n                {\"role\": \"system\", \"content\": FARMING_SYSTEM_PROMPT},\n                {\"role\": \"user\", \"content\": user_message}\n            ],\n            max_tokens=500,\n            temperature=0.7\n        )\n        \n        bot_response = response.choices[0].message.content.strip()\n        \n        # Log the conversation for debugging (optional)\n        print(f\"[{datetime.now()}] User: {user_message}\")\n        print(f\"[{datetime.now()}] Bot: {bot_response}\")\n        \n        return jsonify({\n            'response': bot_response,\n            'timestamp': datetime.now().isoformat()\n        })\n        \n    except Exception as e:\n        error_str = str(e).lower()\n        if \"authentication\" in error_str:\n            return jsonify({'error': 'Invalid OpenAI API key'}), 401\n        elif \"rate_limit\" in error_str:\n            return jsonify({'error': 'API rate limit exceeded. Please try again later.'}), 429\n        elif \"openai\" in error_str:\n            return jsonify({'error': f'OpenAI API error: {str(e)}'}), 500\n        else:\n            print(f\"Error in chat endpoint: {str(e)}\")\n            return jsonify({'error': 'Internal server error'}), 500\n\n@app.route('/api/health', methods=['GET'])\ndef health_check():\n    return jsonify({\n        'status': 'healthy',\n        'service': 'Mitra Chat API',\n        'timestamp': datetime.now().isoformat(),\n        'openai_configured': bool(client.api_key)\n    })\n\nif __name__ == '__main__':\n    if not os.getenv('OPENAI_API_KEY'):\n        print(\"Warning: OPENAI_API_KEY not found in environment variables\")\n    \n    app.run(host='0.0.0.0', port=8001, debug=True)","size_bytes":3790},"server/plant_diagnosis_api.py":{"content":"#!/usr/bin/env python3\n\nimport os\nimport requests\nfrom flask import Flask, request, jsonify, send_from_directory, send_file\nfrom flask_cors import CORS\nfrom PIL import Image\nimport base64\nimport io\nimport json\nfrom typing import Dict, List, Any\nimport google.generativeai as genai\nfrom datetime import datetime\nfrom dotenv import load_dotenv\n\n# Load environment variables from .env file\nload_dotenv()\n\n# Database imports\ntry:\n    from database import (\n        create_tables, test_connection, get_db_session,\n        create_user, get_user_by_phone, get_user_by_id,\n        create_diagnosis, get_user_diagnoses, create_user_activity,\n        User, Diagnosis\n    )\n    DATABASE_AVAILABLE = True\n    print(\"✅ Database modules imported successfully\")\nexcept ImportError as e:\n    DATABASE_AVAILABLE = False\n    print(f\"⚠️ Database not available: {e}\")\n\napp = Flask(__name__)\n\n# Configure CORS based on environment\nif os.environ.get('FLASK_ENV') == 'production':\n    # In production, restrict CORS to specific origins\n    cors_origins = os.environ.get('CORS_ORIGINS', 'https://*.replit.dev')\n    allowed_origins = cors_origins.split(',')\n    CORS(app, origins=allowed_origins, allow_headers=['Content-Type'], methods=['GET', 'POST', 'OPTIONS'])\nelse:\n    # In development, allow all origins\n    CORS(app, origins=['*'], allow_headers=['Content-Type'], methods=['GET', 'POST', 'OPTIONS'])\n\n# Hugging Face API configuration - Using your specific plant disease detection model\nHF_API_URL = \"https://api-inference.huggingface.co/models/linkanjarad/mobilenet_v2_1.0_224-plant-disease-identification\"\nHF_TOKEN = os.environ.get('HF_TOKEN')\n\n# Gemini AI client setup for chat functionality\ngemini_api_key = os.getenv('GEMINI_API_KEY')  # Only use Gemini API key\ntry:\n    if gemini_api_key:\n        genai.configure(api_key=gemini_api_key)\n        # Initialize the Gemini model\n        gemini_model = genai.GenerativeModel('gemini-pro')\n        print(\"Gemini AI client initialized successfully\")\n    else:\n        gemini_model = None\n        print(\"Warning: No Gemini API key provided\")\nexcept Exception as e:\n    print(f\"Warning: Could not initialize Gemini client: {e}\")\n    gemini_model = None\n\n# System prompt for the farming assistant\nFARMING_SYSTEM_PROMPT = \"\"\"You are Hariyali Mitra, a knowledgeable and friendly AI farming assistant specifically designed to help farmers in India. Your role is to provide practical, accurate, and culturally relevant agricultural advice.\n\nKey guidelines:\n1. Always respond in a warm, respectful tone using simple language\n2. Provide practical, actionable advice for Indian farming conditions\n3. Consider local crops, climate, and farming practices\n4. Include seasonal considerations when relevant\n5. Mention organic/sustainable practices when appropriate\n6. If asked about medical issues with plants, provide treatment options\n7. Keep responses concise but comprehensive\n8. Use Hindi/local language terms when helpful, with English explanations\n9. Always prioritize farmer safety and sustainable practices\n\nYou can help with:\n- Crop cultivation advice\n- Pest and disease management\n- Soil health and fertilizers\n- Weather-related farming decisions\n- Market prices and selling strategies\n- Irrigation and water management\n- Organic farming methods\n- Seasonal planning\n- Equipment and tools guidance\n\nRemember: You are a helpful friend to the farmer, not just an information source.\"\"\"\n\nif not HF_TOKEN:\n    print(\"Warning: HF_TOKEN not provided. API will use demo mode.\")\n\nheaders = {\"Authorization\": f\"Bearer {HF_TOKEN}\"}\n\n# Initialize database on startup\ndef initialize_database():\n    \"\"\"Initialize database tables and connection\"\"\"\n    if not DATABASE_AVAILABLE:\n        print(\"⚠️ Database not available - running without database functionality\")\n        return False\n        \n    try:\n        # Test connection first\n        if not test_connection():\n            print(\"❌ Database connection failed\")\n            return False\n            \n        # Create tables if they don't exist\n        if not create_tables():\n            print(\"❌ Failed to create database tables\")\n            return False\n            \n        print(\"✅ Database initialized successfully\")\n        return True\n        \n    except Exception as e:\n        print(f\"❌ Database initialization error: {e}\")\n        return False\n\n# Initialize database when the module loads\nDB_INITIALIZED = initialize_database()\n\ndef query_huggingface_api(image_bytes: bytes, max_retries: int = 2) -> Dict[str, Any]:\n    \"\"\"\n    Query the Hugging Face Inference API with proper format\n    \"\"\"\n    import time\n    \n    for attempt in range(max_retries + 1):\n        try:\n            # Send raw image bytes with correct content type\n            api_headers = {\n                \"Authorization\": f\"Bearer {HF_TOKEN}\",\n                \"Content-Type\": \"application/octet-stream\"  # Critical for image data!\n            }\n            \n            # Add wait-for-model header on retries\n            if attempt > 0:\n                api_headers[\"x-wait-for-model\"] = \"true\"\n            \n            response = requests.post(HF_API_URL, headers=api_headers, data=image_bytes, timeout=30)\n            response.raise_for_status()\n            return response.json()\n            \n        except requests.exceptions.RequestException as e:\n            # Log the response content for debugging\n            if hasattr(e, 'response') and e.response is not None:\n                try:\n                    error_detail = e.response.json()\n                    print(f\"HF API Error Details (attempt {attempt + 1}): {error_detail}\")\n                    \n                    # Check if it's a model loading issue\n                    if (e.response.status_code == 503 or \n                        \"'NoneType' object has no attribute\" in str(error_detail) or\n                        \"currently loading\" in str(error_detail).lower() or\n                        \"model\" in str(error_detail).lower()):\n                        \n                        if attempt < max_retries:\n                            wait_time = min((attempt + 1) * 5, 15)  # Shorter waits: 5s, 10s, 15s max\n                            print(f\"Model loading detected, waiting {wait_time}s before retry...\")\n                            time.sleep(wait_time)\n                            continue\n                    \n                    raise Exception(f\"Error calling Hugging Face API: {str(e)}. Details: {error_detail}\")\n                except Exception as parse_error:\n                    error_text = e.response.text\n                    print(f\"HF API Error Text (attempt {attempt + 1}): {error_text}\")\n                    \n                    # Check for cold start patterns in text response\n                    if (e.response.status_code == 503 or \n                        \"loading\" in error_text.lower() or\n                        \"nonetype\" in error_text.lower()):\n                        \n                        if attempt < max_retries:\n                            wait_time = (attempt + 1) * 10\n                            print(f\"Model loading detected, waiting {wait_time}s before retry...\")\n                            time.sleep(wait_time)\n                            continue\n                    \n                    raise Exception(f\"Error calling Hugging Face API: {str(e)}. Response: {error_text}\")\n            else:\n                if attempt < max_retries:\n                    print(f\"Network error (attempt {attempt + 1}), retrying...\")\n                    time.sleep(5)\n                    continue\n                raise Exception(f\"Error calling Hugging Face API: {str(e)}\")\n    \n    raise Exception(\"Max retries exceeded for Hugging Face API\")\n\ndef process_image_from_url(image_url: str) -> bytes:\n    \"\"\"\n    Download and process image from URL for MobileNetV2 224x224 model\n    \"\"\"\n    try:\n        response = requests.get(image_url, stream=True)\n        response.raise_for_status()\n        \n        # Open and process the image\n        image = Image.open(response.raw)\n        \n        # Convert to RGB if necessary\n        if image.mode != 'RGB':\n            image = image.convert('RGB')\n        \n        # CRITICAL: Resize to exactly 224x224 for MobileNetV2 model\n        image = image.resize((224, 224), Image.Resampling.LANCZOS)\n        \n        # Convert to bytes with high quality\n        img_byte_arr = io.BytesIO()\n        image.save(img_byte_arr, format='JPEG', quality=95)\n        return img_byte_arr.getvalue()\n        \n    except Exception as e:\n        raise Exception(f\"Error processing image from URL: {str(e)}\")\n\ndef process_base64_image(base64_data: str) -> bytes:\n    \"\"\"\n    Process base64 encoded image for MobileNetV2 224x224 model\n    \"\"\"\n    try:\n        # Remove data URL prefix if present\n        if ',' in base64_data:\n            base64_data = base64_data.split(',')[1]\n        \n        # Decode base64\n        image_data = base64.b64decode(base64_data)\n        \n        # Open and process the image\n        image = Image.open(io.BytesIO(image_data))\n        \n        # Convert to RGB if necessary\n        if image.mode != 'RGB':\n            image = image.convert('RGB')\n        \n        # CRITICAL: Resize to exactly 224x224 for MobileNetV2 model\n        # This model expects 224x224 input images\n        image = image.resize((224, 224), Image.Resampling.LANCZOS)\n        \n        # Convert to bytes with high quality\n        img_byte_arr = io.BytesIO()\n        image.save(img_byte_arr, format='JPEG', quality=95)\n        return img_byte_arr.getvalue()\n        \n    except Exception as e:\n        raise Exception(f\"Error processing base64 image: {str(e)}\")\n\ndef get_disease_with_highest_probability(predictions: Any) -> Dict[str, Any]:\n    \"\"\"\n    Extract the disease with highest probability from predictions\n    \"\"\"\n    # Handle different response formats from HuggingFace API\n    if isinstance(predictions, dict):\n        if 'error' in predictions:\n            return {\"error\": predictions['error']}\n        # If it's a single prediction dict, convert to list\n        predictions = [predictions]\n    \n    if not predictions or not isinstance(predictions, list):\n        return {\"error\": \"No valid predictions received\"}\n    \n    # Find the prediction with highest score\n    highest_prediction = max(predictions, key=lambda x: x.get('score', 0))\n    \n    # Get the AI prediction and convert to 100% confidence\n    highest_prediction = max(predictions, key=lambda x: x.get('score', 0))\n    disease_name = highest_prediction.get('label', 'Unknown Disease')\n    \n    # Clean up disease name - remove technical prefixes and make user-friendly\n    import re\n    clean_disease_name = re.sub(r'^LABEL_\\d+_?', '', disease_name, flags=re.IGNORECASE)\n    clean_disease_name = clean_disease_name.replace('_', ' ')\n    clean_disease_name = ' '.join(word.capitalize() for word in clean_disease_name.split())\n    \n    # Determine if healthy or not based on label\n    is_healthy = 'healthy' in disease_name.lower() or 'normal' in disease_name.lower()\n    \n    return {\n        \"disease\": clean_disease_name,\n        \"confidence\": 100,  # Always 100% as requested\n        \"status\": \"healthy\" if is_healthy else \"not_healthy\",\n        \"is_healthy\": is_healthy,\n        \"all_predictions\": [\n            {\"disease\": clean_disease_name, \"confidence\": 100}\n        ]\n    }\n\ndef get_demo_disease_result() -> Dict[str, Any]:\n    \"\"\"\n    Provide realistic disease detection results with 100% confidence\n    NOTE: This is a fallback when AI model is unavailable\n    \"\"\"\n    import random\n    \n    # Common plant diseases with realistic data\n    diseases = [\n        {\"name\": \"Tomato Late Blight\", \"healthy\": False},\n        {\"name\": \"Potato Early Blight\", \"healthy\": False},\n        {\"name\": \"Apple Scab\", \"healthy\": False},\n        {\"name\": \"Corn Northern Leaf Blight\", \"healthy\": False},\n        {\"name\": \"Grape Black Rot\", \"healthy\": False},\n        {\"name\": \"Bell Pepper Bacterial Spot\", \"healthy\": False},\n        {\"name\": \"Cucumber Mosaic Virus\", \"healthy\": False},\n        {\"name\": \"Rose Powdery Mildew\", \"healthy\": False},\n        {\"name\": \"Wheat Rust\", \"healthy\": False},\n        {\"name\": \"Healthy Plant\", \"healthy\": True}\n    ]\n    \n    # Select a random disease for demo\n    selected = random.choice(diseases)\n    \n    print(f\"WARNING: Using demo/fallback result: {selected['name']}\")\n    \n    return {\n        \"disease\": selected[\"name\"],\n        \"confidence\": 100,  # Always 100% as requested\n        \"status\": \"healthy\" if selected[\"healthy\"] else \"not_healthy\",\n        \"is_healthy\": selected[\"healthy\"],\n        \"all_predictions\": [\n            {\"disease\": selected[\"name\"], \"confidence\": 100}\n        ]\n    }\n\ndef save_diagnosis_to_db(user_id: int, crop_name: str, diagnosis: str, confidence: int, treatment: str):\n    \"\"\"Save diagnosis result to database\"\"\"\n    if not DB_INITIALIZED or not DATABASE_AVAILABLE:\n        print(\"Database not available - skipping diagnosis save\")\n        return None\n        \n    try:\n        db = get_db_session()\n        diagnosis_record = create_diagnosis(\n            db=db, \n            user_id=user_id,\n            crop_name=crop_name,\n            diagnosis=diagnosis,\n            confidence=confidence,\n            treatment=treatment,\n            date=datetime.utcnow()\n        )\n        \n        # Log the diagnosis activity\n        create_user_activity(\n            db=db,\n            user_id=user_id,\n            action=\"plant_diagnosis\",\n            data={\n                \"diagnosis_id\": diagnosis_record.id,\n                \"crop_name\": crop_name,\n                \"diagnosis\": diagnosis,\n                \"confidence\": confidence\n            }\n        )\n        \n        db.close()\n        print(f\"✅ Diagnosis saved to database with ID: {diagnosis_record.id}\")\n        return diagnosis_record\n        \n    except Exception as e:\n        print(f\"❌ Error saving diagnosis to database: {e}\")\n        return None\n\ndef get_treatment_recommendation(disease_name: str) -> str:\n    \"\"\"Generate treatment recommendation based on disease\"\"\"\n    # Basic treatment recommendations based on common diseases\n    treatments = {\n        \"late blight\": \"Apply copper-based fungicides. Remove affected leaves. Improve air circulation. Avoid overhead watering.\",\n        \"early blight\": \"Use fungicides containing chlorothalonil. Practice crop rotation. Remove plant debris after harvest.\",\n        \"powdery mildew\": \"Apply sulfur or neem oil. Increase air circulation. Avoid overhead watering. Remove affected parts.\",\n        \"bacterial spot\": \"Use copper-based bactericides. Avoid overhead irrigation. Practice crop rotation. Remove infected plants.\",\n        \"mosaic virus\": \"Remove infected plants immediately. Control aphid vectors. Use virus-resistant varieties.\",\n        \"rust\": \"Apply fungicides with propiconazole. Improve air circulation. Avoid overhead watering.\",\n        \"black rot\": \"Use copper-based fungicides. Practice crop rotation. Remove infected plant parts promptly.\",\n        \"scab\": \"Apply fungicides during wet weather. Improve air circulation. Remove fallen leaves.\",\n        \"healthy\": \"Plant appears healthy. Continue current care practices. Monitor regularly for any changes.\"\n    }\n    \n    # Find matching treatment\n    disease_lower = disease_name.lower()\n    for key, treatment in treatments.items():\n        if key in disease_lower:\n            return treatment\n    \n    # Default treatment advice\n    return \"Consult with a local agricultural expert for specific treatment recommendations. Monitor the plant closely and remove any affected parts.\"\n\n@app.route('/api/health', methods=['GET'])\ndef health_check():\n    \"\"\"Health check endpoint with live database connectivity probe\"\"\"\n    # Get live database status instead of using stale module-level flag\n    if DATABASE_AVAILABLE:\n        try:\n            db_connected = test_connection()\n            db_status = \"connected\" if db_connected else \"connection_failed\"\n        except Exception as e:\n            db_status = f\"error: {str(e)}\"\n    else:\n        db_status = \"not_available\"\n    \n    return jsonify({\n        \"status\": \"healthy\", \n        \"message\": \"Plant Diagnosis API is running\",\n        \"database\": db_status,\n        \"database_live_test\": True  # Indicates this is a live test, not cached\n    })\n\n@app.route('/health', methods=['GET'])\ndef health_check_root():\n    \"\"\"Health check endpoint at root for deployment health checks\"\"\"\n    return jsonify({\"status\": \"healthy\", \"message\": \"Plant Diagnosis API is running\"})\n\n@app.route('/api/diagnose', methods=['POST'])\ndef diagnose_plant():\n    \"\"\"\n    Main endpoint for plant disease diagnosis\n    Accepts either image_url or base64_image in the request\n    Optional: user_id and crop_name for database storage\n    \"\"\"\n    try:\n        data = request.get_json()\n        \n        if not data:\n            return jsonify({\"error\": \"No data provided\"}), 400\n        \n        # Extract optional parameters for database storage\n        user_id = data.get('user_id')\n        crop_name = data.get('crop_name', 'Unknown Crop')\n        \n        image_bytes = None\n        \n        # Process image from URL\n        if 'image_url' in data:\n            image_url = data['image_url']\n            if not image_url:\n                return jsonify({\"error\": \"image_url cannot be empty\"}), 400\n            image_bytes = process_image_from_url(image_url)\n        \n        # Process base64 image\n        elif 'base64_image' in data:\n            base64_data = data['base64_image']\n            if not base64_data:\n                return jsonify({\"error\": \"base64_image cannot be empty\"}), 400\n            print(f\"Processing base64 image, size: {len(base64_data)} chars\")\n            image_bytes = process_base64_image(base64_data)\n            print(f\"Processed image size: {len(image_bytes)} bytes\")\n        \n        else:\n            return jsonify({\"error\": \"Either image_url or base64_image must be provided\"}), 400\n        \n        # Query Hugging Face API\n        print(f\"Sending {len(image_bytes)} bytes to HF API\")\n        predictions = query_huggingface_api(image_bytes)\n        print(f\"Raw HF API response: {predictions}\")\n        \n        # Process results\n        result = get_disease_with_highest_probability(predictions)\n        print(f\"Final result: {result}\")\n        \n        # Generate treatment recommendation\n        treatment = get_treatment_recommendation(result.get('disease', ''))\n        result['treatment'] = treatment\n        \n        # Save to database if user_id is provided\n        diagnosis_record = None\n        if user_id and DB_INITIALIZED:\n            diagnosis_record = save_diagnosis_to_db(\n                user_id=user_id,\n                crop_name=crop_name,\n                diagnosis=result.get('disease', ''),\n                confidence=result.get('confidence', 0),\n                treatment=treatment\n            )\n            \n            if diagnosis_record:\n                result['diagnosis_id'] = diagnosis_record.id\n                result['saved_to_db'] = True\n            else:\n                result['saved_to_db'] = False\n        \n        return jsonify({\n            \"success\": True,\n            \"result\": result\n        })\n        \n    except Exception as e:\n        print(f\"Error in /diagnose endpoint: {str(e)}\")\n        # Provide demo result instead of error\n        demo_result = get_demo_disease_result()\n        demo_result['treatment'] = get_treatment_recommendation(demo_result.get('disease', ''))\n        return jsonify({\n            \"success\": True,\n            \"result\": demo_result,\n            \"note\": \"Demo mode - AI service temporarily unavailable\"\n        })\n\n@app.route('/api/diagnose/upload', methods=['POST'])\ndef diagnose_uploaded_file():\n    \"\"\"\n    Endpoint for direct file upload\n    Optional form data: user_id and crop_name for database storage\n    \"\"\"\n    try:\n        if 'file' not in request.files:\n            return jsonify({\"error\": \"No file uploaded\"}), 400\n        \n        file = request.files['file']\n        if file.filename == '':\n            return jsonify({\"error\": \"No file selected\"}), 400\n        \n        # Extract optional parameters for database storage\n        user_id = request.form.get('user_id')\n        crop_name = request.form.get('crop_name', 'Unknown Crop')\n        \n        # Convert user_id to int if provided\n        if user_id:\n            try:\n                user_id = int(user_id)\n            except ValueError:\n                return jsonify({\"error\": \"Invalid user_id format\"}), 400\n        \n        # Read and process the uploaded file\n        image = Image.open(file.stream)\n        \n        # Convert to RGB if necessary\n        if image.mode != 'RGB':\n            image = image.convert('RGB')\n        \n        # Resize image if too large\n        max_size = (1024, 1024)\n        if image.size[0] > max_size[0] or image.size[1] > max_size[1]:\n            image.thumbnail(max_size, Image.Resampling.LANCZOS)\n        \n        # Convert to bytes\n        img_byte_arr = io.BytesIO()\n        image.save(img_byte_arr, format='JPEG', quality=85)\n        image_bytes = img_byte_arr.getvalue()\n        \n        # Query Hugging Face API\n        predictions = query_huggingface_api(image_bytes)\n        \n        # Process results\n        result = get_disease_with_highest_probability(predictions)\n        \n        # Generate treatment recommendation\n        treatment = get_treatment_recommendation(result.get('disease', ''))\n        result['treatment'] = treatment\n        \n        # Save to database if user_id is provided\n        diagnosis_record = None\n        if user_id and DB_INITIALIZED:\n            diagnosis_record = save_diagnosis_to_db(\n                user_id=user_id,\n                crop_name=crop_name,\n                diagnosis=result.get('disease', ''),\n                confidence=result.get('confidence', 0),\n                treatment=treatment\n            )\n            \n            if diagnosis_record:\n                result['diagnosis_id'] = diagnosis_record.id\n                result['saved_to_db'] = True\n            else:\n                result['saved_to_db'] = False\n        \n        return jsonify({\n            \"success\": True,\n            \"result\": result\n        })\n        \n    except Exception as e:\n        print(f\"Error in /diagnose/upload endpoint: {str(e)}\")\n        # Provide demo result instead of error\n        demo_result = get_demo_disease_result()\n        demo_result['treatment'] = get_treatment_recommendation(demo_result.get('disease', ''))\n        return jsonify({\n            \"success\": True,\n            \"result\": demo_result,\n            \"note\": \"Demo mode - AI service temporarily unavailable\"\n        })\n\n# User Management API endpoints\n@app.route('/api/users', methods=['POST'])\ndef create_user_endpoint():\n    \"\"\"Create a new user\"\"\"\n    try:\n        if not DB_INITIALIZED or not DATABASE_AVAILABLE:\n            return jsonify({\"error\": \"Database not available\"}), 503\n            \n        data = request.get_json()\n        \n        if not data:\n            return jsonify({\"error\": \"No data provided\"}), 400\n        \n        # Validate required fields\n        required_fields = ['name', 'phone', 'location', 'state']\n        for field in required_fields:\n            if field not in data or not data[field].strip():\n                return jsonify({\"error\": f\"{field} is required\"}), 400\n        \n        db = get_db_session()\n        \n        # Check if user with this phone already exists\n        existing_user = get_user_by_phone(db, data['phone'])\n        if existing_user:\n            db.close()\n            return jsonify({\n                \"success\": True,\n                \"user\": existing_user.to_dict(),\n                \"message\": \"User already exists\"\n            })\n        \n        # Create new user\n        user = create_user(\n            db=db,\n            name=data['name'].strip(),\n            phone=data['phone'].strip(),\n            location=data['location'].strip(),\n            state=data['state'].strip(),\n            avatar=data.get('avatar')\n        )\n        \n        # Log user registration activity\n        create_user_activity(\n            db=db,\n            user_id=user.id,\n            action=\"user_registered\",\n            data={\n                \"registration_method\": \"api\",\n                \"location\": user.location,\n                \"state\": user.state\n            }\n        )\n        \n        db.close()\n        \n        return jsonify({\n            \"success\": True,\n            \"user\": user.to_dict(),\n            \"message\": \"User created successfully\"\n        })\n        \n    except Exception as e:\n        print(f\"Error creating user: {str(e)}\")\n        return jsonify({\"error\": \"Internal server error\"}), 500\n\n@app.route('/api/users/<int:user_id>', methods=['GET'])\ndef get_user_endpoint(user_id):\n    \"\"\"Get user information by ID\"\"\"\n    try:\n        if not DB_INITIALIZED or not DATABASE_AVAILABLE:\n            return jsonify({\"error\": \"Database not available\"}), 503\n            \n        db = get_db_session()\n        user = get_user_by_id(db, user_id)\n        \n        if not user:\n            db.close()\n            return jsonify({\"error\": \"User not found\"}), 404\n        \n        db.close()\n        return jsonify({\n            \"success\": True,\n            \"user\": user.to_dict()\n        })\n        \n    except Exception as e:\n        print(f\"Error getting user: {str(e)}\")\n        return jsonify({\"error\": \"Internal server error\"}), 500\n\n@app.route('/api/users/phone/<phone>', methods=['GET'])\ndef get_user_by_phone_endpoint(phone):\n    \"\"\"Get user information by phone number\"\"\"\n    try:\n        if not DB_INITIALIZED or not DATABASE_AVAILABLE:\n            return jsonify({\"error\": \"Database not available\"}), 503\n            \n        db = get_db_session()\n        user = get_user_by_phone(db, phone)\n        \n        if not user:\n            db.close()\n            return jsonify({\"error\": \"User not found\"}), 404\n        \n        db.close()\n        return jsonify({\n            \"success\": True,\n            \"user\": user.to_dict()\n        })\n        \n    except Exception as e:\n        print(f\"Error getting user by phone: {str(e)}\")\n        return jsonify({\"error\": \"Internal server error\"}), 500\n\n@app.route('/api/users/<int:user_id>/diagnoses', methods=['GET'])\ndef get_user_diagnoses_endpoint(user_id):\n    \"\"\"Get diagnosis history for a user\"\"\"\n    try:\n        if not DB_INITIALIZED or not DATABASE_AVAILABLE:\n            return jsonify({\"error\": \"Database not available\"}), 503\n            \n        # Get optional limit parameter\n        limit = request.args.get('limit', 50, type=int)\n        if limit > 100:  # Cap at 100 for performance\n            limit = 100\n            \n        db = get_db_session()\n        \n        # Check if user exists\n        user = get_user_by_id(db, user_id)\n        if not user:\n            db.close()\n            return jsonify({\"error\": \"User not found\"}), 404\n        \n        # Get user diagnoses\n        diagnoses = get_user_diagnoses(db, user_id, limit)\n        \n        diagnoses_data = [diagnosis.to_dict() for diagnosis in diagnoses]\n        \n        db.close()\n        \n        return jsonify({\n            \"success\": True,\n            \"user_id\": user_id,\n            \"diagnoses\": diagnoses_data,\n            \"count\": len(diagnoses_data)\n        })\n        \n    except Exception as e:\n        print(f\"Error getting user diagnoses: {str(e)}\")\n        return jsonify({\"error\": \"Internal server error\"}), 500\n\n# Chat API endpoint\n@app.route('/api/chat', methods=['POST'])\ndef chat():\n    try:\n        data = request.get_json()\n        user_message = data.get('message', '').strip()\n        \n        if not user_message:\n            return jsonify({'error': 'Message is required'}), 400\n        \n        if not gemini_model:\n            # Provide a helpful fallback response when Gemini is not configured\n            return jsonify({\n                'response': \"Hello! I'm Hariyali Mitra, your farming assistant. I can help you with crop cultivation, pest management, soil health, and other farming questions. However, I need proper API configuration to provide detailed responses. Please ask me about specific farming topics!\",\n                'timestamp': datetime.now().isoformat()\n            })\n            \n        # Create chat completion with Gemini\n        full_prompt = f\"{FARMING_SYSTEM_PROMPT}\\n\\nUser: {user_message}\\n\\nHariyali Mitra:\"\n        response = gemini_model.generate_content(full_prompt)\n        \n        bot_response = response.text.strip()\n        \n        # Log the conversation for debugging\n        print(f\"[{datetime.now()}] User: {user_message}\")\n        print(f\"[{datetime.now()}] Bot: {bot_response}\")\n        \n        return jsonify({\n            'response': bot_response,\n            'timestamp': datetime.now().isoformat()\n        })\n        \n    except Exception as e:\n        error_str = str(e).lower()\n        print(f\"Error in chat endpoint: {str(e)}\")\n        \n        # Provide helpful fallback response\n        return jsonify({\n            'response': \"I'm experiencing some technical difficulties right now. As your farming assistant, I'm here to help with questions about crops, soil, pests, irrigation, and sustainable farming practices. Could you please try asking your question again?\",\n            'timestamp': datetime.now().isoformat()\n        })\n\n# Gemini AI API endpoints for treatment management\n@app.route('/api/treatment/fertilizers', methods=['POST'])\ndef get_fertilizer_recommendations():\n    \"\"\"Get fertilizer recommendations using Gemini AI\"\"\"\n    try:\n        data = request.get_json()\n        if not data or 'disease' not in data:\n            return jsonify({\"error\": \"Disease name is required\"}), 400\n        \n        disease_name = data['disease']\n        \n        # Prepare Gemini API prompt for fertilizer recommendations\n        prompt = f\"\"\"\n        As an agricultural expert, provide fertilizer recommendations for treating {disease_name} in plants.\n        \n        Please provide exactly 3 fertilizer recommendations in this JSON format:\n        {{\n            \"fertilizers\": [\n                {{\n                    \"name\": \"Fertilizer name\",\n                    \"price\": \"₹XXX\",\n                    \"availability\": \"In Stock\" or \"Out of Stock\"\n                }}\n            ]\n        }}\n        \n        Focus on effective, commonly available fertilizers for treating {disease_name}.\n        \"\"\"\n        \n        try:\n            if gemini_model:\n                response = gemini_model.generate_content(prompt)\n                response_text = response.text.strip()\n                \n                # Try to extract JSON from response\n                start_idx = response_text.find('{')\n                end_idx = response_text.rfind('}') + 1\n                \n                if start_idx != -1 and end_idx > start_idx:\n                    import json\n                    fertilizer_data = json.loads(response_text[start_idx:end_idx])\n                    return jsonify({\n                        \"success\": True,\n                        \"fertilizers\": fertilizer_data.get(\"fertilizers\", [])\n                    })\n        except Exception as e:\n            print(f\"Gemini API error for fertilizers: {str(e)}\")\n        \n        # Fallback recommendations\n        fallback_fertilizers = [\n            {\"name\": \"Copper Fungicide Spray\", \"price\": \"₹450\", \"availability\": \"In Stock\"},\n            {\"name\": \"Organic Disease Control\", \"price\": \"₹320\", \"availability\": \"In Stock\"},\n            {\"name\": \"Plant Immunity Booster\", \"price\": \"₹280\", \"availability\": \"Out of Stock\"}\n        ]\n        \n        return jsonify({\n            \"success\": True,\n            \"fertilizers\": fallback_fertilizers,\n            \"note\": \"Using fallback recommendations\"\n        })\n        \n    except Exception as e:\n        print(f\"Error in fertilizer recommendations: {str(e)}\")\n        return jsonify({\"error\": \"Failed to get fertilizer recommendations\"}), 500\n\n@app.route('/api/treatment/steps', methods=['POST'])\ndef get_treatment_steps():\n    \"\"\"Get treatment steps using Gemini AI\"\"\"\n    try:\n        data = request.get_json()\n        if not data or 'disease' not in data:\n            return jsonify({\"error\": \"Disease name is required\"}), 400\n        \n        disease_name = data['disease']\n        \n        # Prepare Gemini API prompt for treatment steps\n        prompt = f\"\"\"\n        As an agricultural expert, provide treatment steps for {disease_name} in plants.\n        \n        Please provide exactly 5 treatment steps in this JSON format:\n        {{\n            \"steps\": [\n                {{\n                    \"step\": 1,\n                    \"title\": \"Step title\",\n                    \"description\": \"Detailed description of what to do\"\n                }}\n            ]\n        }}\n        \n        Focus on practical, actionable steps that farmers can easily follow to treat {disease_name}.\n        \"\"\"\n        \n        try:\n            if gemini_model:\n                response = gemini_model.generate_content(prompt)\n                response_text = response.text.strip()\n                \n                # Try to extract JSON from response\n                start_idx = response_text.find('{')\n                end_idx = response_text.rfind('}') + 1\n                \n                if start_idx != -1 and end_idx > start_idx:\n                    import json\n                    steps_data = json.loads(response_text[start_idx:end_idx])\n                    return jsonify({\n                        \"success\": True,\n                        \"steps\": steps_data.get(\"steps\", [])\n                    })\n        except Exception as e:\n            print(f\"Gemini API error for treatment steps: {str(e)}\")\n        \n        # Fallback treatment steps\n        fallback_steps = [\n            {\"step\": 1, \"title\": \"Remove Affected Parts\", \"description\": \"Carefully remove all affected leaves and stems. Dispose away from healthy plants.\"},\n            {\"step\": 2, \"title\": \"Apply Treatment\", \"description\": \"Apply appropriate fungicide or treatment as recommended. Follow label instructions.\"},\n            {\"step\": 3, \"title\": \"Improve Conditions\", \"description\": \"Improve air circulation and avoid overhead watering to prevent reinfection.\"},\n            {\"step\": 4, \"title\": \"Monitor Progress\", \"description\": \"Check daily for new symptoms. Recovery should begin within 5-7 days.\"},\n            {\"step\": 5, \"title\": \"Follow-up Care\", \"description\": \"Continue monitoring and apply follow-up treatments as needed.\"}\n        ]\n        \n        return jsonify({\n            \"success\": True,\n            \"steps\": fallback_steps,\n            \"note\": \"Using fallback treatment steps\"\n        })\n        \n    except Exception as e:\n        print(f\"Error in treatment steps: {str(e)}\")\n        return jsonify({\"error\": \"Failed to get treatment steps\"}), 500\n\n@app.route('/api/treatment/duration', methods=['POST'])\ndef get_treatment_duration():\n    \"\"\"Get treatment duration and success rate using Gemini AI\"\"\"\n    try:\n        data = request.get_json()\n        if not data or 'disease' not in data:\n            return jsonify({\"error\": \"Disease name is required\"}), 400\n        \n        disease_name = data['disease']\n        \n        # Prepare Gemini API prompt for duration and success rate\n        prompt = f\"\"\"\n        As an agricultural expert, provide treatment duration and success rate for {disease_name} in plants.\n        \n        Please provide the information in this JSON format:\n        {{\n            \"duration\": \"X-Y days\",\n            \"success_rate\": XX\n        }}\n        \n        Where duration is the expected recovery time range and success_rate is a percentage (number only).\n        Focus on realistic timeframes and success rates for treating {disease_name}.\n        \"\"\"\n        \n        try:\n            if gemini_model:\n                response = gemini_model.generate_content(prompt)\n                response_text = response.text.strip()\n                \n                # Try to extract JSON from response\n                start_idx = response_text.find('{')\n                end_idx = response_text.rfind('}') + 1\n                \n                if start_idx != -1 and end_idx > start_idx:\n                    import json\n                    duration_data = json.loads(response_text[start_idx:end_idx])\n                    return jsonify({\n                        \"success\": True,\n                        \"duration\": duration_data.get(\"duration\", \"14-21 days\"),\n                        \"success_rate\": duration_data.get(\"success_rate\", 85)\n                    })\n        except Exception as e:\n            print(f\"Gemini API error for duration: {str(e)}\")\n        \n        # Fallback data\n        return jsonify({\n            \"success\": True,\n            \"duration\": \"14-21 days\",\n            \"success_rate\": 87,\n            \"note\": \"Using fallback duration data\"\n        })\n        \n    except Exception as e:\n        print(f\"Error in treatment duration: {str(e)}\")\n        return jsonify({\"error\": \"Failed to get treatment duration\"}), 500\n\n@app.route('/api/treatments', methods=['GET', 'POST'])\ndef manage_treatments():\n    \"\"\"Manage active treatments - GET to list, POST to create\"\"\"\n    if request.method == 'GET':\n        # Get treatments from localStorage (frontend manages this)\n        # This endpoint could be enhanced to store in database\n        return jsonify({\n            \"success\": True,\n            \"message\": \"Treatments are managed on frontend via localStorage\"\n        })\n    \n    elif request.method == 'POST':\n        # Create new treatment\n        try:\n            data = request.get_json()\n            if not data:\n                return jsonify({\"error\": \"No treatment data provided\"}), 400\n            \n            # For now, return success as frontend handles storage\n            return jsonify({\n                \"success\": True,\n                \"message\": \"Treatment created successfully\",\n                \"treatment_id\": str(int(datetime.now().timestamp()))\n            })\n            \n        except Exception as e:\n            print(f\"Error creating treatment: {str(e)}\")\n            return jsonify({\"error\": \"Failed to create treatment\"}), 500\n\n# Static file serving for production\n@app.route('/')\ndef serve_index():\n    \"\"\"Serve the React app's index.html\"\"\"\n    try:\n        return send_file('../dist/index.html')\n    except FileNotFoundError:\n        return jsonify({\"error\": \"Frontend not built. Run 'npm run build' first.\"}), 404\n\n@app.route('/<path:filename>')\ndef serve_static(filename):\n    \"\"\"Serve static files from the React build\"\"\"\n    try:\n        return send_from_directory('../dist', filename)\n    except FileNotFoundError:\n        # For SPA routing, serve index.html for unknown routes\n        try:\n            return send_file('../dist/index.html')\n        except FileNotFoundError:\n            return jsonify({\"error\": \"Frontend not built. Run 'npm run build' first.\"}), 404\n\nif __name__ == '__main__':\n    if not gemini_api_key:\n        print(\"Warning: Gemini API key not found in environment variables - chat will use fallback responses\")\n    \n    # Run the Flask app\n    port = int(os.environ.get('PORT', 8000))  # Use port 8000 to avoid conflict with frontend\n    debug_mode = os.environ.get('FLASK_ENV') != 'production'\n    app.run(host='0.0.0.0', port=port, debug=debug_mode)","size_bytes":39406},"server/storage.ts":{"content":"import { users, listings, diagnoses, advisoryRecords, userActivities } from \"../shared/schema\";\nimport type { User, InsertUser, Listing, InsertListing, Diagnosis, InsertDiagnosis, AdvisoryRecord, InsertAdvisoryRecord, UserActivity, InsertUserActivity } from \"../shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: number): Promise<User | undefined>;\n  getUserByPhone(phone: string): Promise<User | undefined>;\n  createUser(insertUser: InsertUser): Promise<User>;\n  updateUser(id: number, updates: Partial<InsertUser>): Promise<User>;\n\n  // Listing operations\n  getUserListings(userId: number): Promise<Listing[]>;\n  createListing(insertListing: InsertListing): Promise<Listing>;\n  updateListing(id: number, updates: Partial<InsertListing>): Promise<Listing>;\n  markListingAsSold(id: number, soldPrice: number, buyer: string): Promise<Listing>;\n  incrementListingViews(id: number): Promise<void>;\n  incrementListingInquiries(id: number): Promise<void>;\n\n  // Diagnosis operations\n  getUserDiagnoses(userId: number): Promise<Diagnosis[]>;\n  createDiagnosis(insertDiagnosis: InsertDiagnosis): Promise<Diagnosis>;\n\n  // Advisory operations\n  getUserAdvisories(userId: number): Promise<AdvisoryRecord[]>;\n  createAdvisory(insertAdvisory: InsertAdvisoryRecord): Promise<AdvisoryRecord>;\n\n  // Activity tracking\n  createUserActivity(insertActivity: InsertUserActivity): Promise<UserActivity>;\n  getUserActivities(userId: number): Promise<UserActivity[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: number): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByPhone(phone: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.phone, phone));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  async updateUser(id: number, updates: Partial<InsertUser>): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async getUserListings(userId: number): Promise<Listing[]> {\n    return await db\n      .select()\n      .from(listings)\n      .where(eq(listings.userId, userId))\n      .orderBy(desc(listings.createdAt));\n  }\n\n  async createListing(insertListing: InsertListing): Promise<Listing> {\n    const [listing] = await db\n      .insert(listings)\n      .values(insertListing)\n      .returning();\n    \n    // Track activity\n    await this.createUserActivity({\n      userId: insertListing.userId,\n      action: 'listing_created',\n      data: { listingId: listing.id, crop: insertListing.crop },\n    });\n\n    return listing;\n  }\n\n  async updateListing(id: number, updates: Partial<InsertListing>): Promise<Listing> {\n    const [listing] = await db\n      .update(listings)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(listings.id, id))\n      .returning();\n    return listing;\n  }\n\n  async markListingAsSold(id: number, soldPrice: number, buyer: string): Promise<Listing> {\n    const [listing] = await db\n      .update(listings)\n      .set({\n        status: 'sold',\n        soldDate: new Date(),\n        soldPrice: soldPrice.toString(),\n        buyer,\n        updatedAt: new Date(),\n      })\n      .where(eq(listings.id, id))\n      .returning();\n\n    // Track activity\n    await this.createUserActivity({\n      userId: listing.userId,\n      action: 'listing_sold',\n      data: { listingId: id, soldPrice, buyer },\n    });\n\n    return listing;\n  }\n\n  async incrementListingViews(id: number): Promise<void> {\n    const [listing] = await db.select().from(listings).where(eq(listings.id, id));\n    if (listing) {\n      await db\n        .update(listings)\n        .set({\n          views: listing.views + 1,\n          updatedAt: new Date(),\n        })\n        .where(eq(listings.id, id));\n    }\n  }\n\n  async incrementListingInquiries(id: number): Promise<void> {\n    const [listing] = await db.select().from(listings).where(eq(listings.id, id));\n    if (listing) {\n      await db\n        .update(listings)\n        .set({\n          inquiries: listing.inquiries + 1,\n          updatedAt: new Date(),\n        })\n        .where(eq(listings.id, id));\n    }\n  }\n\n  async getUserDiagnoses(userId: number): Promise<Diagnosis[]> {\n    return await db\n      .select()\n      .from(diagnoses)\n      .where(eq(diagnoses.userId, userId))\n      .orderBy(desc(diagnoses.createdAt));\n  }\n\n  async createDiagnosis(insertDiagnosis: InsertDiagnosis): Promise<Diagnosis> {\n    const [diagnosis] = await db\n      .insert(diagnoses)\n      .values(insertDiagnosis)\n      .returning();\n\n    // Track activity\n    await this.createUserActivity({\n      userId: insertDiagnosis.userId,\n      action: 'diagnosis_created',\n      data: { diagnosisId: diagnosis.id, crop: insertDiagnosis.cropName },\n    });\n\n    return diagnosis;\n  }\n\n  async getUserAdvisories(userId: number): Promise<AdvisoryRecord[]> {\n    return await db\n      .select()\n      .from(advisoryRecords)\n      .where(eq(advisoryRecords.userId, userId))\n      .orderBy(desc(advisoryRecords.createdAt));\n  }\n\n  async createAdvisory(insertAdvisory: InsertAdvisoryRecord): Promise<AdvisoryRecord> {\n    const [advisory] = await db\n      .insert(advisoryRecords)\n      .values(insertAdvisory)\n      .returning();\n\n    // Track activity\n    await this.createUserActivity({\n      userId: insertAdvisory.userId,\n      action: 'advisory_saved',\n      data: { advisoryId: advisory.id, title: insertAdvisory.title },\n    });\n\n    return advisory;\n  }\n\n  async createUserActivity(insertActivity: InsertUserActivity): Promise<UserActivity> {\n    const [activity] = await db\n      .insert(userActivities)\n      .values(insertActivity)\n      .returning();\n    return activity;\n  }\n\n  async getUserActivities(userId: number): Promise<UserActivity[]> {\n    return await db\n      .select()\n      .from(userActivities)\n      .where(eq(userActivities.userId, userId))\n      .orderBy(desc(userActivities.timestamp))\n      .limit(100); // Keep only recent activities\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":6408},"shared/schema.ts":{"content":"// KisanMitra Database Schema\nimport { pgTable, serial, text, integer, decimal, timestamp, boolean, varchar, jsonb } from 'drizzle-orm/pg-core';\nimport { relations } from 'drizzle-orm';\n\n// Users table\nexport const users = pgTable('users', {\n  id: serial('id').primaryKey(),\n  name: varchar('name', { length: 255 }).notNull(),\n  phone: varchar('phone', { length: 20 }).unique().notNull(),\n  location: varchar('location', { length: 255 }).notNull(),\n  state: varchar('state', { length: 100 }).notNull(),\n  avatar: text('avatar'),\n  joinedDate: timestamp('joined_date').defaultNow().notNull(),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  updatedAt: timestamp('updated_at').defaultNow().notNull(),\n});\n\n// Listings table\nexport const listings = pgTable('listings', {\n  id: serial('id').primaryKey(),\n  userId: integer('user_id').references(() => users.id).notNull(),\n  crop: varchar('crop', { length: 100 }).notNull(),\n  quantity: varchar('quantity', { length: 50 }).notNull(),\n  pricePerKg: decimal('price_per_kg', { precision: 10, scale: 2 }).notNull(),\n  market: varchar('market', { length: 255 }).notNull(),\n  transport: varchar('transport', { length: 10 }).notNull(),\n  views: integer('views').default(0).notNull(),\n  inquiries: integer('inquiries').default(0).notNull(),\n  totalPrice: decimal('total_price', { precision: 12, scale: 2 }).notNull(),\n  status: varchar('status', { length: 20 }).default('active').notNull(), // active, sold, expired\n  postedDate: varchar('posted_date', { length: 50 }).notNull(),\n  soldDate: timestamp('sold_date'),\n  soldPrice: decimal('sold_price', { precision: 12, scale: 2 }),\n  buyer: varchar('buyer', { length: 255 }),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  updatedAt: timestamp('updated_at').defaultNow().notNull(),\n});\n\n// Diagnoses table\nexport const diagnoses = pgTable('diagnoses', {\n  id: serial('id').primaryKey(),\n  userId: integer('user_id').references(() => users.id).notNull(),\n  cropName: varchar('crop_name', { length: 100 }).notNull(),\n  diagnosis: text('diagnosis').notNull(),\n  confidence: integer('confidence').notNull(),\n  treatment: text('treatment').notNull(),\n  date: timestamp('date').notNull(),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n});\n\n// Advisory records table\nexport const advisoryRecords = pgTable('advisory_records', {\n  id: serial('id').primaryKey(),\n  userId: integer('user_id').references(() => users.id).notNull(),\n  title: varchar('title', { length: 255 }).notNull(),\n  content: text('content').notNull(),\n  category: varchar('category', { length: 100 }).notNull(),\n  savedDate: timestamp('saved_date').defaultNow().notNull(),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n});\n\n// User activities table\nexport const userActivities = pgTable('user_activities', {\n  id: serial('id').primaryKey(),\n  userId: integer('user_id').references(() => users.id).notNull(),\n  action: varchar('action', { length: 100 }).notNull(),\n  data: jsonb('data'),\n  timestamp: timestamp('timestamp').defaultNow().notNull(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  listings: many(listings),\n  diagnoses: many(diagnoses),\n  advisoryRecords: many(advisoryRecords),\n  activities: many(userActivities),\n}));\n\nexport const listingsRelations = relations(listings, ({ one }) => ({\n  user: one(users, {\n    fields: [listings.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const diagnosesRelations = relations(diagnoses, ({ one }) => ({\n  user: one(users, {\n    fields: [diagnoses.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const advisoryRecordsRelations = relations(advisoryRecords, ({ one }) => ({\n  user: one(users, {\n    fields: [advisoryRecords.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const userActivitiesRelations = relations(userActivities, ({ one }) => ({\n  user: one(users, {\n    fields: [userActivities.userId],\n    references: [users.id],\n  }),\n}));\n\n// Export types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = typeof users.$inferInsert;\nexport type Listing = typeof listings.$inferSelect;\nexport type InsertListing = typeof listings.$inferInsert;\nexport type Diagnosis = typeof diagnoses.$inferSelect;\nexport type InsertDiagnosis = typeof diagnoses.$inferInsert;\nexport type AdvisoryRecord = typeof advisoryRecords.$inferSelect;\nexport type InsertAdvisoryRecord = typeof advisoryRecords.$inferInsert;\nexport type UserActivity = typeof userActivities.$inferSelect;\nexport type InsertUserActivity = typeof userActivities.$inferInsert;","size_bytes":4574},"start.sh":{"content":"#!/bin/bash\ncd /home/runner/workspace/sih8/sih7/sih6/sih5/kisanj/kisano/finalkisan/mitra/kisan\n\necho \"Starting backend server on port 8000...\"\npython server/plant_diagnosis_api.py &\nBACKEND_PID=$!\n\necho \"Waiting for backend to initialize...\"\nsleep 3\n\necho \"Starting frontend development server on port 5000...\"\nnpm run dev &\nFRONTEND_PID=$!\n\necho \"Both servers are starting...\"\necho \"Backend PID: $BACKEND_PID\"\necho \"Frontend PID: $FRONTEND_PID\"\n\n# Wait for both processes\nwait $BACKEND_PID\nwait $FRONTEND_PID","size_bytes":509},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n\tdarkMode: [\"class\"],\n\tcontent: [\n\t\t\"./pages/**/*.{ts,tsx}\",\n\t\t\"./components/**/*.{ts,tsx}\",\n\t\t\"./app/**/*.{ts,tsx}\",\n\t\t\"./src/**/*.{ts,tsx}\",\n\t],\n\tprefix: \"\",\n\ttheme: {\n\t\tcontainer: {\n\t\t\tcenter: true,\n\t\t\tpadding: '1rem',\n\t\t\tscreens: {\n\t\t\t\t'sm': '640px',\n\t\t\t\t'md': '768px',\n\t\t\t\t'lg': '1024px',\n\t\t\t\t'xl': '1280px',\n\t\t\t\t'2xl': '1400px'\n\t\t\t}\n\t\t},\n\t\textend: {\n\t\t\tfontFamily: {\n\t\t\t\t'inter': ['Inter', 'sans-serif'],\n\t\t\t\t'sans': ['Inter', 'system-ui', 'sans-serif'],\n\t\t\t},\n\t\t\tcolors: {\n\t\t\t\tborder: 'hsl(var(--border))',\n\t\t\t\tinput: 'hsl(var(--input))',\n\t\t\t\tring: 'hsl(var(--ring))',\n\t\t\t\tbackground: 'hsl(var(--background))',\n\t\t\t\tforeground: 'hsl(var(--foreground))',\n\t\t\t\tprimary: {\n\t\t\t\t\tDEFAULT: 'hsl(var(--primary))',\n\t\t\t\t\tforeground: 'hsl(var(--primary-foreground))'\n\t\t\t\t},\n\t\t\t\tsecondary: {\n\t\t\t\t\tDEFAULT: 'hsl(var(--secondary))',\n\t\t\t\t\tforeground: 'hsl(var(--secondary-foreground))'\n\t\t\t\t},\n\t\t\t\tdestructive: {\n\t\t\t\t\tDEFAULT: 'hsl(var(--destructive))',\n\t\t\t\t\tforeground: 'hsl(var(--destructive-foreground))'\n\t\t\t\t},\n\t\t\t\tmuted: {\n\t\t\t\t\tDEFAULT: 'hsl(var(--muted))',\n\t\t\t\t\tforeground: 'hsl(var(--muted-foreground))'\n\t\t\t\t},\n\t\t\t\taccent: {\n\t\t\t\t\tDEFAULT: 'hsl(var(--accent))',\n\t\t\t\t\tforeground: 'hsl(var(--accent-foreground))'\n\t\t\t\t},\n\t\t\t\tpopover: {\n\t\t\t\t\tDEFAULT: 'hsl(var(--popover))',\n\t\t\t\t\tforeground: 'hsl(var(--popover-foreground))'\n\t\t\t\t},\n\t\t\t\tcard: {\n\t\t\t\t\tDEFAULT: 'hsl(var(--card))',\n\t\t\t\t\tforeground: 'hsl(var(--card-foreground))'\n\t\t\t\t},\n\t\t\t\t// Agricultural color system\n\t\t\t\t'agri-primary': 'hsl(var(--primary-green))',\n\t\t\t\t'agri-secondary': 'hsl(var(--secondary-green))',\n\t\t\t\t'agri-accent': 'hsl(var(--accent-green))',\n\t\t\t\t'agri-light': 'hsl(var(--light-green))',\n\t\t\t\t'agri-success': 'hsl(var(--success-green))',\n\t\t\t\t'agri-warning': 'hsl(var(--warning-orange))',\n\t\t\t\t'agri-danger': 'hsl(var(--danger-red))',\n\t\t\t\t'agri-info': 'hsl(var(--info-blue))',\n\t\t\t\t'agri-light-blue': 'hsl(var(--light-blue))',\n\t\t\t\t'agri-purple': 'hsl(var(--purple))',\n\t\t\t\t'agri-light-purple': 'hsl(var(--light-purple))',\n\t\t\t\t'agri-cream': 'hsl(var(--cream))',\n\t\t\t\t'agri-light-cream': 'hsl(var(--light-cream))',\n\t\t\t\t'agri-gray': 'hsl(var(--gray))',\n\t\t\t\t'agri-light-gray': 'hsl(var(--light-gray))',\n\t\t\t\t'text-primary': 'hsl(var(--text-primary))',\n\t\t\t\t'text-secondary': 'hsl(var(--text-secondary))',\n\t\t\t},\n\t\t\tborderRadius: {\n\t\t\t\tlg: 'var(--radius)',\n\t\t\t\tmd: 'calc(var(--radius) - 2px)',\n\t\t\t\tsm: 'calc(var(--radius) - 4px)'\n\t\t\t},\n\t\t\tkeyframes: {\n\t\t\t\t'accordion-down': {\n\t\t\t\t\tfrom: {\n\t\t\t\t\t\theight: '0'\n\t\t\t\t\t},\n\t\t\t\t\tto: {\n\t\t\t\t\t\theight: 'var(--radix-accordion-content-height)'\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'accordion-up': {\n\t\t\t\t\tfrom: {\n\t\t\t\t\t\theight: 'var(--radix-accordion-content-height)'\n\t\t\t\t\t},\n\t\t\t\t\tto: {\n\t\t\t\t\t\theight: '0'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tanimation: {\n\t\t\t\t'accordion-down': 'accordion-down 0.2s ease-out',\n\t\t\t\t'accordion-up': 'accordion-up 0.2s ease-out'\n\t\t\t}\n\t\t}\n\t},\n\tplugins: [require(\"tailwindcss-animate\")],\n} satisfies Config;\n","size_bytes":2944},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react-swc\";\nimport path from \"node:path\";\nimport { componentTagger } from \"lovable-tagger\";\n\n// https://vitejs.dev/config/\nexport default defineConfig(({ mode }: { mode: string }) => ({\n  server: {\n    host: \"0.0.0.0\",\n    port: 5000,\n    strictPort: true,\n    allowedHosts: true as true,\n    hmr: {\n      clientPort: 443,\n      port: 5000\n    },\n    proxy: {\n      '/api': {\n        target: 'http://127.0.0.1:8000',\n        changeOrigin: true,\n      },\n    },\n  },\n  define: {\n    global: 'globalThis',\n    'process.env': {\n      VITE_API_BASE_URL: JSON.stringify(process.env.VITE_API_BASE_URL || '/api')\n    }\n  },\n  plugins: [\n    react(),\n    mode === 'development' &&\n    componentTagger(),\n  ].filter(Boolean),\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"./src\"),\n    },\n  },\n}));\n","size_bytes":876},"src/App.css":{"content":"#root {\n  max-width: 1280px;\n  margin: 0 auto;\n  padding: 2rem;\n  text-align: center;\n}\n\n.logo {\n  height: 6em;\n  padding: 1.5em;\n  will-change: filter;\n  transition: filter 300ms;\n}\n.logo:hover {\n  filter: drop-shadow(0 0 2em #646cffaa);\n}\n.logo.react:hover {\n  filter: drop-shadow(0 0 2em #61dafbaa);\n}\n\n@keyframes logo-spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n@media (prefers-reduced-motion: no-preference) {\n  a:nth-of-type(2) .logo {\n    animation: logo-spin infinite 20s linear;\n  }\n}\n\n.card {\n  padding: 2em;\n}\n\n.read-the-docs {\n  color: #888;\n}\n","size_bytes":606},"src/App.tsx":{"content":"import { Toaster } from \"@/components/ui/toaster\";\nimport { Toaster as Sonner } from \"@/components/ui/sonner\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { NotificationProvider } from \"@/hooks/useNotifications\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport { useEffect } from \"react\";\nimport { StatusBar, Style } from '@capacitor/status-bar';\nimport { SplashScreen } from '@capacitor/splash-screen';\nimport { Keyboard } from '@capacitor/keyboard';\nimport { App as CapacitorApp } from '@capacitor/app';\nimport { Capacitor } from '@capacitor/core';\nimport Landing from \"./pages/Landing\";\nimport Splash from \"./pages/Splash\";\nimport Onboarding from \"./pages/Onboarding\";\nimport Signup from \"./pages/Signup\";\nimport Login from \"./pages/Login\";\nimport Home from \"./pages/Home\";\nimport Diagnose from \"./pages/Diagnose\";\nimport CameraCapture from \"./pages/CameraCapture\";\nimport AnalyzePlant from \"./pages/AnalyzePlant\";\nimport DiagnoseResults from \"./pages/DiagnoseResults\";\nimport Shop from \"./pages/Shop\";\nimport Orders from \"./pages/Orders\";\nimport Profile from \"./pages/Profile\";\nimport ProfileEdit from \"./pages/ProfileEdit\";\nimport Treatments from \"./pages/Treatments\";\nimport Guides from \"./pages/Guides\";\nimport NearbyShops from \"./pages/NearbyShops\";\nimport SellProduce from \"./pages/SellProduce\";\nimport Cart from \"./pages/Cart\";\nimport Checkout from \"./pages/Checkout\";\nimport OrderSuccess from \"./pages/OrderSuccess\";\nimport SoilHealth from \"./pages/SoilHealth\";\nimport Weather from \"./pages/Weather\";\nimport FertilizerGuide from \"./pages/FertilizerGuide\";\nimport Advisory from \"./pages/Advisory\";\nimport MarketPrices from \"./pages/MarketPrices\";\nimport MarketDetails from \"./pages/MarketDetails\";\nimport MyFertilizerGuidance from \"./pages/MyFertilizerGuidance\";\nimport CropGuideDetail from \"./pages/CropGuideDetail\";\nimport MySavedCultivationGuides from \"./pages/MySavedCultivationGuides\";\nimport Mitra from \"./pages/Mitra\";\nimport NotFound from \"./pages/NotFound\";\n\nconst queryClient = new QueryClient();\n\nconst App = () => {\n  useEffect(() => {\n    const initializeApp = async () => {\n      if (Capacitor.isNativePlatform()) {\n        // Configure status bar for Android\n        await StatusBar.setStyle({ style: Style.Default });\n        await StatusBar.setBackgroundColor({ color: '#22c55e' });\n        \n        // Hide splash screen after app loads\n        await SplashScreen.hide();\n        \n        // Configure keyboard behavior\n        Keyboard.setAccessoryBarVisible({ isVisible: false });\n        \n        // Handle app state changes\n        CapacitorApp.addListener('appStateChange', ({ isActive }) => {\n          console.log('App state changed. Is active:', isActive);\n        });\n        \n        // Handle back button on Android\n        CapacitorApp.addListener('backButton', ({ canGoBack }) => {\n          if (!canGoBack) {\n            CapacitorApp.exitApp();\n          } else {\n            window.history.back();\n          }\n        });\n      }\n    };\n    \n    initializeApp();\n  }, []);\n  \n  return (\n  <QueryClientProvider client={queryClient}>\n    <TooltipProvider>\n      <NotificationProvider>\n        <Toaster />\n        <Sonner />\n        <BrowserRouter>\n        <Routes>\n          <Route path=\"/\" element={<Landing />} />\n          <Route path=\"/splash\" element={<Splash />} />\n          <Route path=\"/onboarding\" element={<Onboarding />} />\n          <Route path=\"/signup\" element={<Signup />} />\n          <Route path=\"/login\" element={<Login />} />\n          <Route path=\"/home\" element={<Home />} />\n          <Route path=\"/diagnose\" element={<Diagnose />} />\n          <Route path=\"/diagnose/capture\" element={<CameraCapture />} />\n          <Route path=\"/diagnose/analyze\" element={<AnalyzePlant />} />\n          <Route path=\"/diagnose/results\" element={<DiagnoseResults />} />\n          <Route path=\"/shop\" element={<Shop />} />\n          <Route path=\"/orders\" element={<Orders />} />\n          <Route path=\"/profile\" element={<Profile />} />\n          <Route path=\"/profile/edit\" element={<ProfileEdit />} />\n          <Route path=\"/treatments\" element={<Treatments />} />\n          <Route path=\"/guides\" element={<Guides />} />\n          <Route path=\"/guides/:cropId\" element={<CropGuideDetail />} />\n          <Route path=\"/my-saved-cultivation-guides\" element={<MySavedCultivationGuides />} />\n          <Route path=\"/shops\" element={<NearbyShops />} />\n          <Route path=\"/sell\" element={<SellProduce />} />\n          <Route path=\"/sell/new\" element={<SellProduce />} />\n          <Route path=\"/cart\" element={<Cart />} />\n          <Route path=\"/checkout\" element={<Checkout />} />\n          <Route path=\"/order-success\" element={<OrderSuccess />} />\n          <Route path=\"/soil-health\" element={<SoilHealth />} />\n          <Route path=\"/weather\" element={<Weather />} />\n          <Route path=\"/fertilizer-guide\" element={<FertilizerGuide />} />\n          <Route path=\"/advisory\" element={<Advisory />} />\n          <Route path=\"/market-prices\" element={<MarketPrices />} />\n          <Route path=\"/market-details/:marketId\" element={<MarketDetails />} />\n          <Route path=\"/my-fertilizer-guidance\" element={<MyFertilizerGuidance />} />\n          <Route path=\"/mitra\" element={<Mitra />} />\n          {/* ADD ALL CUSTOM ROUTES ABOVE THE CATCH-ALL \"*\" ROUTE */}\n          <Route path=\"*\" element={<NotFound />} />\n        </Routes>\n      </BrowserRouter>\n      </NotificationProvider>\n    </TooltipProvider>\n  </QueryClientProvider>\n  );\n};\n\nexport default App;\n","size_bytes":5641},"src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* KisanMitra Agricultural App - Android Mobile Optimized Design System */\n\n/* Android Safe Areas & Mobile Viewport */\n@supports (padding: max(0px)) {\n  .safe-area-top { padding-top: max(20px, env(safe-area-inset-top)); }\n  .safe-area-bottom { padding-bottom: max(20px, env(safe-area-inset-bottom)); }\n  .safe-area-left { padding-left: max(0px, env(safe-area-inset-left)); }\n  .safe-area-right { padding-right: max(0px, env(safe-area-inset-right)); }\n}\n\n/* Prevent overscroll bounce for better native feel */\nhtml {\n  overscroll-behavior: none;\n  -webkit-overflow-scrolling: touch;\n}\n\nbody {\n  overscroll-behavior: none;\n  -webkit-user-select: none;\n  user-select: none;\n}\n\n/* Custom Floating Animation for FAB */\n@keyframes floating {\n  0% { \n    transform: translate(0, 0px) scale(1); \n    box-shadow: 0 8px 30px rgba(34, 197, 94, 0.4);\n  }\n  50% { \n    transform: translate(0, -12px) scale(1.05); \n    box-shadow: 0 15px 35px rgba(34, 197, 94, 0.6);\n  }\n  100% { \n    transform: translate(0, 0px) scale(1); \n    box-shadow: 0 8px 30px rgba(34, 197, 94, 0.4);\n  }\n}\n\n.floating-fab {\n  animation: floating 2.5s ease-in-out infinite;\n}\n\n@layer base {\n  :root {\n    /* Agricultural Color Palette */\n    --primary-green: 158 64% 52%; /* #10B981 */\n    --secondary-green: 160 84% 39%; /* #059669 */\n    --accent-green: 157 69% 38%; /* #047857 */\n    --light-green: 155 100% 97%; /* #ECFDF5 */\n    --success-green: 142 71% 45%; /* #22C55E */\n    \n    /* Functional Colors */\n    --warning-orange: 38 92% 50%; /* #F59E0B */\n    --danger-red: 0 84% 60%; /* #EF4444 */\n    --info-blue: 217 91% 60%; /* #3B82F6 */\n    --light-blue: 214 100% 97%; /* #DBEAFE */\n    --purple: 262 83% 58%; /* #8B5CF6 */\n    --light-purple: 250 100% 97%; /* #EDE9FE */\n    \n    /* Neutral Colors */\n    --text-primary: 220 14% 96%; /* #F8FAFC */\n    --text-secondary: 215 25% 27%; /* #374151 */\n    --gray: 215 20% 65%; /* #9CA3AF */\n    --light-gray: 210 40% 96%; /* #F1F5F9 */\n    --cream: 43 74% 91%; /* #FAF7F0 */\n    --light-cream: 45 100% 97%; /* #FEF7ED */\n    \n    /* Gradients */\n    --gradient-primary: linear-gradient(135deg, hsl(var(--primary-green)), hsl(var(--secondary-green)));\n    --gradient-hero: linear-gradient(135deg, hsl(var(--primary-green)), hsl(var(--accent-green)));\n    --gradient-splash: linear-gradient(180deg, hsl(var(--primary-green)), hsl(var(--accent-green)));\n    --gradient-mesh: linear-gradient(135deg, hsl(var(--primary-green)), hsl(var(--secondary-green)), hsl(var(--success-green)));\n    --gradient-glass: linear-gradient(135deg, hsla(var(--primary-green), 0.1), hsla(var(--secondary-green), 0.1));\n    \n    /* Shadows */\n    --shadow-soft: 0 1px 3px 0 hsla(var(--text-secondary), 0.1), 0 1px 2px 0 hsla(var(--text-secondary), 0.06);\n    --shadow-medium: 0 4px 6px -1px hsla(var(--text-secondary), 0.1), 0 2px 4px -1px hsla(var(--text-secondary), 0.06);\n    --shadow-large: 0 10px 15px -3px hsla(var(--text-secondary), 0.1), 0 4px 6px -2px hsla(var(--text-secondary), 0.05);\n    --shadow-glow: 0 0 20px hsla(var(--primary-green), 0.3);\n    --shadow-inner: inset 0 2px 4px 0 hsla(var(--text-secondary), 0.06);\n    \n    /* Animations - Android Material Motion */\n    --transition-fast: all 0.15s cubic-bezier(0.4, 0.0, 0.2, 1);\n    --transition-smooth: all 0.3s cubic-bezier(0.4, 0.0, 0.2, 1);\n    --transition-spring: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);\n    --transition-bounce: all 0.6s cubic-bezier(0.68, -0.55, 0.265, 1.55);\n    \n    /* Spacing System */\n    --space-xs: 0.25rem; /* 4px */\n    --space-sm: 0.5rem;  /* 8px */\n    --space-md: 1rem;    /* 16px */\n    --space-lg: 1.5rem;  /* 24px */\n    --space-xl: 2rem;    /* 32px */\n    --space-2xl: 3rem;   /* 48px */\n    \n    /* Border Radius */\n    --radius-sm: 0.375rem; /* 6px */\n    --radius-md: 0.75rem;  /* 12px */\n    --radius-lg: 1rem;     /* 16px */\n    --radius-xl: 1.25rem;  /* 20px */\n    --radius-full: 9999px;\n    \n    /* Standard design tokens */\n    --background: var(--text-primary);\n    --foreground: var(--text-secondary);\n    --card: var(--text-primary);\n    --card-foreground: var(--text-secondary);\n    --popover: var(--text-primary);\n    --popover-foreground: var(--text-secondary);\n    --primary: var(--primary-green);\n    --primary-foreground: var(--text-primary);\n    --secondary: var(--light-gray);\n    --secondary-foreground: var(--text-secondary);\n    --muted: var(--light-gray);\n    --muted-foreground: var(--gray);\n    --accent: var(--light-green);\n    --accent-foreground: var(--text-secondary);\n    --destructive: var(--danger-red);\n    --destructive-foreground: var(--text-primary);\n    --border: 214.3 31.8% 91.4%;\n    --input: 214.3 31.8% 91.4%;\n    --ring: var(--primary-green);\n    --radius: var(--radius-md);\n  }\n\n  .dark {\n    --background: 222.2 84% 4.9%;\n    --foreground: 210 40% 98%;\n\n    --card: 222.2 84% 4.9%;\n    --card-foreground: 210 40% 98%;\n\n    --popover: 222.2 84% 4.9%;\n    --popover-foreground: 210 40% 98%;\n\n    --primary: 210 40% 98%;\n    --primary-foreground: 222.2 47.4% 11.2%;\n\n    --secondary: 217.2 32.6% 17.5%;\n    --secondary-foreground: 210 40% 98%;\n\n    --muted: 217.2 32.6% 17.5%;\n    --muted-foreground: 215 20.2% 65.1%;\n\n    --accent: 217.2 32.6% 17.5%;\n    --accent-foreground: 210 40% 98%;\n\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 210 40% 98%;\n\n    --border: 217.2 32.6% 17.5%;\n    --input: 217.2 32.6% 17.5%;\n    --ring: 212.7 26.8% 83.9%;\n    --sidebar-background: 240 5.9% 10%;\n    --sidebar-foreground: 240 4.8% 95.9%;\n    --sidebar-primary: 224.3 76.3% 48%;\n    --sidebar-primary-foreground: 0 0% 100%;\n    --sidebar-accent: 240 3.7% 15.9%;\n    --sidebar-accent-foreground: 240 4.8% 95.9%;\n    --sidebar-border: 240 3.7% 15.9%;\n    --sidebar-ring: 217.2 91.2% 59.8%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground font-inter;\n    font-family: 'Inter', -apple-system, BlinkMacSystemFont, system-ui, sans-serif;\n  }\n}\n\n@layer components {\n  /* Agricultural App Components */\n  .glass-card {\n    @apply backdrop-blur-lg bg-white/80 border border-white/20 shadow-lg;\n  }\n  \n  .gradient-primary {\n    background: var(--gradient-primary);\n  }\n  \n  .gradient-hero {\n    background: var(--gradient-hero);\n  }\n  \n  .gradient-splash {\n    background: var(--gradient-splash);\n  }\n  \n  .gradient-mesh {\n    background: var(--gradient-mesh);\n  }\n  \n  .gradient-glass {\n    background: var(--gradient-glass);\n  }\n  \n  .shadow-glow {\n    box-shadow: var(--shadow-glow);\n  }\n  \n  .shadow-soft {\n    box-shadow: var(--shadow-soft);\n  }\n  \n  .shadow-medium {\n    box-shadow: var(--shadow-medium);\n  }\n  \n  .shadow-large {\n    box-shadow: var(--shadow-large);\n  }\n  \n  .transition-smooth {\n    transition: var(--transition-smooth);\n  }\n  \n  .transition-spring {\n    transition: var(--transition-spring);\n  }\n  \n  /* Button Variants */\n  .btn-primary {\n    @apply bg-primary hover:bg-primary/90 text-primary-foreground font-semibold py-4 px-6 rounded-xl transition-all duration-300 transform hover:scale-105 active:scale-95 shadow-md hover:shadow-lg;\n  }\n  \n  .btn-secondary {\n    @apply bg-white border-2 border-primary text-primary hover:bg-primary hover:text-white font-semibold py-4 px-6 rounded-xl transition-all duration-300 transform hover:scale-105 active:scale-95;\n  }\n  \n  .btn-glass {\n    @apply glass-card text-primary hover:bg-white/90 font-semibold py-4 px-6 rounded-xl transition-all duration-300 transform hover:scale-105 active:scale-95;\n  }\n  \n  /* Agricultural Theme Components */\n  .plant-card {\n    @apply bg-white rounded-2xl p-6 shadow-medium hover:shadow-large transition-all duration-300 border border-gray-100 hover:border-primary/20;\n  }\n  \n  .weather-card {\n    @apply bg-gradient-to-br from-blue-50 to-blue-100 rounded-2xl p-6 shadow-medium border border-blue-200;\n  }\n  \n  .tip-card {\n    @apply bg-gradient-to-r from-yellow-50 to-orange-50 rounded-2xl p-6 shadow-medium border-l-4 border-yellow-400;\n  }\n  \n  .diagnosis-card {\n    @apply bg-white rounded-2xl p-6 shadow-large border border-gray-100;\n  }\n  \n  /* Floating Animation */\n  .float-animation {\n    animation: float 3s ease-in-out infinite;\n  }\n  \n  .pulse-glow {\n    animation: pulse-glow 2s ease-in-out infinite;\n  }\n  \n  .grow-animation {\n    animation: grow 2s ease-out forwards;\n  }\n  \n  /* Android Mobile Optimizations */\n  .mobile-container {\n    @apply w-full max-w-full min-h-screen bg-background relative overflow-hidden;\n    -webkit-tap-highlight-color: transparent;\n    -webkit-overflow-scrolling: touch;\n    overscroll-behavior: none;\n  }\n  \n  .mobile-header {\n    @apply flex items-center justify-between p-4 bg-white/95 backdrop-blur-md shadow-soft sticky top-0 z-50;\n    padding-top: max(16px, env(safe-area-inset-top));\n  }\n  \n  .mobile-content {\n    @apply px-4 pb-24;\n    -webkit-overflow-scrolling: touch;\n    padding-bottom: max(96px, calc(env(safe-area-inset-bottom) + 96px));\n  }\n  \n  .mobile-bottom-nav {\n    @apply fixed bottom-0 left-0 right-0 w-full bg-white/95 backdrop-blur-md border-t border-gray-200 shadow-large z-50;\n    padding-bottom: max(0px, env(safe-area-inset-bottom));\n  }\n\n  /* Android Button Animations */\n  .android-ripple {\n    @apply relative overflow-hidden;\n    -webkit-tap-highlight-color: transparent;\n    transition: all 0.2s cubic-bezier(0.4, 0.0, 0.2, 1);\n  }\n\n  .android-ripple:active {\n    transform: scale(0.96);\n  }\n\n  /* Android Card Style */\n  .android-card {\n    @apply bg-white rounded-2xl shadow-sm border border-gray-100;\n    transition: all 0.3s cubic-bezier(0.4, 0.0, 0.2, 1);\n  }\n\n  .android-card:active {\n    transform: scale(0.98);\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.12);\n  }\n\n  /* Touch Targets */\n  .touch-friendly {\n    min-height: 48px;\n    min-width: 48px;\n    @apply flex items-center justify-center;\n  }\n  \n  /* Agriculture Color Utilities */\n  .text-agri-primary { color: hsl(var(--primary-green)); }\n  .text-agri-secondary { color: hsl(var(--secondary-green)); }\n  .text-agri-accent { color: hsl(var(--accent-green)); }\n  .text-agri-success { color: hsl(var(--success-green)); }\n  .text-agri-warning { color: hsl(var(--warning-orange)); }\n  .text-agri-danger { color: hsl(var(--danger-red)); }\n  .text-agri-info { color: hsl(var(--info-blue)); }\n  .text-agri-purple { color: hsl(var(--purple)); }\n  \n  .bg-agri-primary { background-color: hsl(var(--primary-green)); }\n  .bg-agri-secondary { background-color: hsl(var(--secondary-green)); }\n  .bg-agri-accent { background-color: hsl(var(--accent-green)); }\n  .bg-agri-light { background-color: hsl(var(--light-green)); }\n  .bg-agri-success { background-color: hsl(var(--success-green)); }\n  .bg-agri-warning { background-color: hsl(var(--warning-orange)); }\n  .bg-agri-danger { background-color: hsl(var(--danger-red)); }\n  .bg-agri-info { background-color: hsl(var(--info-blue)); }\n  .bg-agri-light-blue { background-color: hsl(var(--light-blue)); }\n  .bg-agri-purple { background-color: hsl(var(--purple)); }\n  .bg-agri-light-purple { background-color: hsl(var(--light-purple)); }\n  .bg-agri-cream { background-color: hsl(var(--cream)); }\n  .bg-agri-light-cream { background-color: hsl(var(--light-cream)); }\n}\n\n@layer utilities {\n  /* Keyframe Animations */\n  @keyframes float {\n    0%, 100% {\n      transform: translateY(0px);\n    }\n    50% {\n      transform: translateY(-10px);\n    }\n  }\n  \n  @keyframes pulse-glow {\n    0%, 100% {\n      box-shadow: 0 0 5px hsla(var(--primary-green), 0.5);\n    }\n    50% {\n      box-shadow: 0 0 20px hsla(var(--primary-green), 0.8);\n    }\n  }\n  \n  @keyframes grow {\n    0% {\n      transform: scale(0) rotate(-180deg);\n      opacity: 0;\n    }\n    100% {\n      transform: scale(1) rotate(0deg);\n      opacity: 1;\n    }\n  }\n  \n  @keyframes slideUp {\n    0% {\n      transform: translateY(100%);\n      opacity: 0;\n    }\n    100% {\n      transform: translateY(0);\n      opacity: 1;\n    }\n  }\n  \n  @keyframes fadeIn {\n    0% {\n      opacity: 0;\n      transform: translateY(20px);\n    }\n    100% {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n  \n  @keyframes typing {\n    0% { width: 0; }\n    100% { width: 100%; }\n  }\n  \n  @keyframes shimmer {\n    0% {\n      background-position: -200% 0;\n    }\n    100% {\n      background-position: 200% 0;\n    }\n  }\n  \n  .animate-slide-up {\n    animation: slideUp 0.5s ease-out;\n  }\n  \n  .animate-fade-in {\n    animation: fadeIn 0.6s ease-out;\n  }\n  \n  .animate-typing {\n    animation: typing 2s steps(20, end);\n  }\n  \n  .animate-shimmer {\n    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);\n    background-size: 200% 100%;\n    animation: shimmer 1.5s infinite;\n  }\n}","size_bytes":12800},"src/main.tsx":{"content":"import { createRoot } from 'react-dom/client'\nimport App from './App.tsx'\nimport './index.css'\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":158},"src/vite-env.d.ts":{"content":"/// <reference types=\"vite/client\" />\n","size_bytes":38},"src/components/AuthButton.tsx":{"content":"import React, { ReactNode } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Loader2 } from 'lucide-react';\n\ninterface AuthButtonProps {\n  children: ReactNode;\n  loading?: boolean;\n  loadingText?: string;\n  disabled?: boolean;\n  onClick?: () => void;\n  type?: 'button' | 'submit';\n  variant?: 'primary' | 'secondary' | 'outline';\n  size?: 'sm' | 'md' | 'lg';\n  className?: string;\n  icon?: ReactNode;\n}\n\nconst AuthButton: React.FC<AuthButtonProps> = ({\n  children,\n  loading = false,\n  loadingText = 'Loading...',\n  disabled = false,\n  onClick,\n  type = 'button',\n  variant = 'primary',\n  size = 'lg',\n  className = '',\n  icon\n}) => {\n  const getVariantClasses = () => {\n    switch (variant) {\n      case 'primary':\n        return 'bg-agri-primary hover:bg-agri-secondary text-white shadow-large';\n      case 'secondary':\n        return 'bg-agri-secondary hover:bg-agri-primary text-white shadow-large';\n      case 'outline':\n        return 'border-2 border-agri-primary text-agri-primary hover:bg-agri-primary hover:text-white shadow-md';\n      default:\n        return 'bg-agri-primary hover:bg-agri-secondary text-white shadow-large';\n    }\n  };\n\n  const getSizeClasses = () => {\n    switch (size) {\n      case 'sm':\n        return 'h-12 text-base px-6';\n      case 'md':\n        return 'h-16 text-lg px-8';\n      case 'lg':\n        return 'h-20 text-2xl px-8';\n      default:\n        return 'h-20 text-2xl px-8';\n    }\n  };\n\n  const isDisabled = disabled || loading;\n\n  return (\n    <Button\n      type={type}\n      onClick={onClick}\n      disabled={isDisabled}\n      className={`\n        w-full font-bold rounded-2xl transition-all duration-200\n        disabled:opacity-50 disabled:cursor-not-allowed\n        active:scale-95 transform\n        ${getVariantClasses()}\n        ${getSizeClasses()}\n        ${className}\n      `}\n    >\n      {loading ? (\n        <div className=\"flex items-center justify-center space-x-3\">\n          <Loader2 className=\"w-6 h-6 animate-spin\" />\n          <span>{loadingText}</span>\n        </div>\n      ) : (\n        <div className=\"flex items-center justify-center space-x-3\">\n          {icon && <span className=\"w-8 h-8 flex items-center justify-center\">{icon}</span>}\n          <span>{children}</span>\n        </div>\n      )}\n    </Button>\n  );\n};\n\nexport default AuthButton;","size_bytes":2332},"src/components/CustomInput.tsx":{"content":"import React, { ReactNode } from 'react';\nimport { Input } from '@/components/ui/input';\nimport { AlertCircle, CheckCircle } from 'lucide-react';\n\ninterface CustomInputProps {\n  label: string;\n  icon: ReactNode;\n  value: string;\n  onChange: (value: string) => void;\n  placeholder: string;\n  type?: 'text' | 'tel' | 'email';\n  validation?: {\n    isValid: boolean;\n    message: string;\n  };\n  prefix?: string;\n  maxLength?: number;\n  className?: string;\n  inputClassName?: string;\n  disabled?: boolean;\n  required?: boolean;\n}\n\nconst CustomInput: React.FC<CustomInputProps> = ({\n  label,\n  icon,\n  value,\n  onChange,\n  placeholder,\n  type = 'text',\n  validation,\n  prefix,\n  maxLength,\n  className = '',\n  inputClassName = '',\n  disabled = false,\n  required = false\n}) => {\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    let newValue = e.target.value;\n    \n    // Apply specific formatting based on type\n    if (type === 'tel') {\n      newValue = newValue.replace(/\\D/g, '');\n    } else if (type === 'text' && label.toLowerCase().includes('name')) {\n      // Only allow alphabets and spaces for name fields\n      newValue = newValue.replace(/[^A-Za-z\\s]/g, '');\n    }\n    \n    onChange(newValue);\n  };\n\n  const getValidationStyle = () => {\n    if (!validation || value.length === 0) {\n      return 'border-agri-primary/30 focus:border-agri-primary';\n    }\n    \n    return validation.isValid \n      ? 'border-green-400 focus:border-green-500' \n      : 'border-red-400 focus:border-red-500';\n  };\n\n  const showValidationIcon = validation && value.length > 0;\n\n  return (\n    <div className={`space-y-2 ${className}`}>\n      {/* Label */}\n      <label className=\"text-lg font-bold text-agri-primary flex items-center\">\n        {icon}\n        <span className=\"ml-3\">{label}</span>\n        {required && <span className=\"text-red-500 ml-1\">*</span>}\n      </label>\n\n      {/* Input Container */}\n      <div className=\"relative\">\n        {/* Prefix */}\n        {prefix && (\n          <div className=\"absolute left-4 top-1/2 transform -translate-y-1/2 bg-agri-light rounded-lg px-3 py-2\">\n            <span className=\"text-agri-primary font-bold text-lg\">{prefix}</span>\n          </div>\n        )}\n\n        {/* Input Field */}\n        <Input\n          type={type}\n          placeholder={placeholder}\n          value={value}\n          onChange={handleChange}\n          maxLength={maxLength}\n          disabled={disabled}\n          className={`\n            ${prefix ? 'pl-24' : 'pl-4'} \n            ${showValidationIcon ? 'pr-16' : 'pr-4'}\n            h-16 text-xl rounded-2xl border-2 \n            ${getValidationStyle()}\n            bg-agri-light/30 font-semibold\n            disabled:opacity-50 disabled:cursor-not-allowed\n            ${type === 'tel' ? 'text-center tracking-wider font-bold' : ''}\n            ${inputClassName}\n          `}\n        />\n\n        {/* Validation Icon */}\n        {showValidationIcon && (\n          <div className=\"absolute right-4 top-1/2 transform -translate-y-1/2\">\n            {validation.isValid ? (\n              <CheckCircle className=\"w-6 h-6 text-green-600\" />\n            ) : (\n              <AlertCircle className=\"w-6 h-6 text-red-600\" />\n            )}\n          </div>\n        )}\n      </div>\n\n      {/* Validation Message */}\n      {validation && validation.message && value.length > 0 && (\n        <div className={`text-sm px-3 py-2 rounded-lg ${\n          validation.isValid \n            ? 'text-green-700 bg-green-50' \n            : 'text-red-700 bg-red-50'\n        }`}>\n          {validation.message}\n        </div>\n      )}\n\n      {/* Character count for limited inputs */}\n      {maxLength && value.length > 0 && (\n        <div className=\"text-sm text-agri-gray text-right\">\n          {value.length}/{maxLength}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default CustomInput;","size_bytes":3852},"src/components/LanguageSwitcher.tsx":{"content":"import { useState } from 'react';\n\nconst languages = [\n  { code: 'en', name: 'English', flag: '🇬🇧', short: 'EN' },\n  { code: 'hi', name: 'हिंदी', flag: '🇮🇳', short: 'हिं' },\n];\n\nconst LanguageSwitcher = () => {\n  const [selectedLanguage, setSelectedLanguage] = useState('en');\n\n  return (\n    <div className=\"flex items-center bg-white/90 backdrop-blur-sm rounded-full p-1 shadow-sm border border-green-100\">\n      {languages.map((lang) => {\n        const isSelected = selectedLanguage === lang.code;\n        return (\n          <button\n            key={lang.code}\n            onClick={() => setSelectedLanguage(lang.code)}\n            className={`\n              px-3 py-1.5 rounded-full text-sm font-medium transition-all duration-200 ease-in-out flex items-center space-x-1\n              ${\n                isSelected\n                  ? 'bg-green-500 text-white shadow-sm transform scale-105'\n                  : 'text-green-600 hover:bg-green-50'\n              }\n            `}\n          >\n            <span className=\"text-xs\">{lang.flag}</span>\n            <span className=\"text-xs font-semibold\">{lang.short}</span>\n          </button>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default LanguageSwitcher;","size_bytes":1243},"src/components/LocationPermissionModal.tsx":{"content":"import React from 'react';\nimport { MapPin, Shield, Navigation, AlertCircle } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\n\ninterface LocationPermissionModalProps {\n  isOpen: boolean;\n  onRequestPermission: () => void;\n  onSkip: () => void;\n  permissionStatus: 'granted' | 'denied' | 'prompt' | 'unsupported';\n}\n\nconst LocationPermissionModal: React.FC<LocationPermissionModalProps> = ({\n  isOpen,\n  onRequestPermission,\n  onSkip,\n  permissionStatus\n}) => {\n  const getModalContent = () => {\n    switch (permissionStatus) {\n      case 'denied':\n        return {\n          icon: <AlertCircle className=\"w-16 h-16 text-amber-500 mx-auto mb-4\" />,\n          title: \"Location Access Blocked\",\n          description: \"Location access has been denied. To auto-fill your location, please:\",\n          instructions: [\n            \"Click the location icon in your browser's address bar\",\n            \"Select 'Allow' for location access\",\n            \"Refresh this page and try again\"\n          ],\n          buttonText: \"Manual Entry Instead\",\n          buttonAction: onSkip\n        };\n      \n      case 'unsupported':\n        return {\n          icon: <MapPin className=\"w-16 h-16 text-gray-500 mx-auto mb-4\" />,\n          title: \"Location Not Supported\",\n          description: \"Your device doesn't support automatic location detection.\",\n          instructions: [\n            \"You can manually select your state and district\",\n            \"This won't affect your farming experience\"\n          ],\n          buttonText: \"Continue Manually\",\n          buttonAction: onSkip\n        };\n      \n      default:\n        return {\n          icon: <Navigation className=\"w-16 h-16 text-agri-primary mx-auto mb-4\" />,\n          title: \"Help Us Serve You Better\",\n          description: \"KisanMitra would like to access your location to:\",\n          instructions: [\n            \"🌾 Auto-fill your state and district\",\n            \"🌤️ Provide local weather information\",\n            \"📍 Show nearby farming services\",\n            \"💰 Display regional market prices\"\n          ],\n          buttonText: \"Allow Location Access\",\n          buttonAction: onRequestPermission\n        };\n    }\n  };\n\n  const { icon, title, description, instructions, buttonText, buttonAction } = getModalContent();\n\n  return (\n    <Dialog open={isOpen}>\n      <DialogContent className=\"max-w-sm mx-auto bg-white rounded-3xl p-6 border-2 border-agri-primary/20\">\n        <DialogHeader className=\"text-center\">\n          {icon}\n          <DialogTitle className=\"text-2xl font-bold text-agri-primary mb-2\">\n            {title}\n          </DialogTitle>\n          <DialogDescription className=\"text-agri-gray text-base mb-4\">\n            {description}\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          <div className=\"bg-agri-light/30 rounded-2xl p-4\">\n            <ul className=\"space-y-2\">\n              {instructions.map((instruction, index) => (\n                <li key={index} className=\"flex items-start text-agri-gray text-sm\">\n                  <span className=\"inline-block w-2 h-2 rounded-full bg-agri-primary mr-3 mt-2 flex-shrink-0\" />\n                  <span>{instruction}</span>\n                </li>\n              ))}\n            </ul>\n          </div>\n\n          <div className=\"flex flex-col space-y-3\">\n            <Button\n              onClick={buttonAction}\n              className=\"w-full h-14 bg-agri-primary hover:bg-agri-secondary text-white font-bold text-lg rounded-2xl\"\n            >\n              {buttonText}\n            </Button>\n            \n            {permissionStatus === 'prompt' && (\n              <Button\n                onClick={onSkip}\n                variant=\"outline\"\n                className=\"w-full h-12 border-2 border-agri-primary/30 text-agri-primary font-semibold rounded-2xl hover:bg-agri-light/50\"\n              >\n                Enter Manually\n              </Button>\n            )}\n          </div>\n\n          {permissionStatus === 'prompt' && (\n            <div className=\"flex items-center justify-center text-center pt-2\">\n              <Shield className=\"w-4 h-4 text-agri-primary mr-2\" />\n              <p className=\"text-xs text-agri-gray\">\n                Your location data is secure and stays on your device\n              </p>\n            </div>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default LocationPermissionModal;","size_bytes":4578},"src/components/LocationPicker.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { MapPin, Navigation, RefreshCw, AlertCircle, CheckCircle } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport useLocation from '@/hooks/useLocation';\nimport LocationPermissionModal from './LocationPermissionModal';\n\ninterface LocationPickerProps {\n  state: string;\n  district: string;\n  onStateChange: (value: string) => void;\n  onDistrictChange: (value: string) => void;\n  className?: string;\n}\n\nconst indianStates = [\n  \"Andhra Pradesh\", \"Arunachal Pradesh\", \"Assam\", \"Bihar\", \"Chhattisgarh\", \n  \"Goa\", \"Gujarat\", \"Haryana\", \"Himachal Pradesh\", \"Jharkhand\", \"Karnataka\", \n  \"Kerala\", \"Madhya Pradesh\", \"Maharashtra\", \"Manipur\", \"Meghalaya\", \"Mizoram\", \n  \"Nagaland\", \"Odisha\", \"Punjab\", \"Rajasthan\", \"Sikkim\", \"Tamil Nadu\", \n  \"Telangana\", \"Tripura\", \"Uttar Pradesh\", \"Uttarakhand\", \"West Bengal\",\n  \"Delhi\", \"Puducherry\", \"Chandigarh\", \"Dadra and Nagar Haveli\", \"Daman and Diu\",\n  \"Lakshadweep\", \"Ladakh\", \"Jammu and Kashmir\"\n];\n\nconst LocationPicker: React.FC<LocationPickerProps> = ({\n  state,\n  district,\n  onStateChange,\n  onDistrictChange,\n  className = \"\"\n}) => {\n  const {\n    loading,\n    data,\n    error,\n    permissionStatus,\n    getCurrentLocation,\n    retryLocation,\n    getAccuracyLevel,\n    hasValidLocation,\n    stateDistrictMapping\n  } = useLocation();\n\n  const [showPermissionModal, setShowPermissionModal] = useState(false);\n  const [useManualEntry, setUseManualEntry] = useState(false);\n  const [autoLocationAttempted, setAutoLocationAttempted] = useState(false);\n  const [isSignupFlow, setIsSignupFlow] = useState(false);\n\n  // Auto-detect location on component mount (for signup flow)\n  useEffect(() => {\n    // Check if this is likely a signup flow (no existing state/district values)\n    const isLikelySignup = !state && !district;\n    setIsSignupFlow(isLikelySignup);\n    \n    // Auto-attempt location detection for signup flow if not already attempted\n    if (isLikelySignup && !autoLocationAttempted && permissionStatus !== 'denied' && !useManualEntry) {\n      console.log('Auto-attempting location detection for signup...');\n      setAutoLocationAttempted(true);\n      getCurrentLocation().catch(() => {\n        console.log('Auto location detection failed, user can try manually');\n      });\n    }\n  }, []);\n\n  // Auto-fill when location data is available (fixed to prevent infinite loop)\n  useEffect(() => {\n    if (data?.state && data?.district && !useManualEntry) {\n      // Only update if values are different to prevent infinite loops\n      if (state !== data.state) {\n        onStateChange(data.state);\n      }\n      if (district !== data.district) {\n        onDistrictChange(data.district);\n      }\n    }\n    // Exclude handler functions from dependencies to prevent infinite loops\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data?.state, data?.district, useManualEntry, state, district]);\n\n  const handleLocationRequest = async () => {\n    setShowPermissionModal(false);\n    setAutoLocationAttempted(true);\n    \n    try {\n      await getCurrentLocation();\n    } catch (error) {\n      console.error('Location request failed:', error);\n    }\n  };\n\n  const handleSkipLocation = () => {\n    setShowPermissionModal(false);\n    setUseManualEntry(true);\n  };\n\n  const handleUseCurrentLocation = () => {\n    if (permissionStatus === 'prompt' || permissionStatus === 'denied') {\n      setShowPermissionModal(true);\n    } else {\n      getCurrentLocation();\n    }\n  };\n\n  const getAccuracyIndicator = () => {\n    if (!data) return null;\n    \n    // Simple accuracy determination based on available data\n    const accuracy = data.accuracy || (data.state && data.district ? 'high' : 'medium');\n    const colors = {\n      high: 'text-green-600',\n      medium: 'text-yellow-600',\n      low: 'text-orange-600'\n    };\n\n    return (\n      <div className=\"flex items-center space-x-2 text-sm\">\n        <div className={`w-2 h-2 rounded-full ${\n          accuracy === 'high' ? 'bg-green-500' : \n          accuracy === 'medium' ? 'bg-yellow-500' : 'bg-orange-500'\n        }`} />\n        <span className={`text-xs ${colors[accuracy] || colors['low']}`}>\n          {accuracy === 'high' ? 'High accuracy' : \n           accuracy === 'medium' ? 'Medium accuracy' : 'Low accuracy'}\n        </span>\n      </div>\n    );\n  };\n\n  return (\n    <div className={`space-y-4 ${className}`}>\n      {/* Location Detection Section */}\n      {!useManualEntry && (\n        <div className=\"bg-agri-light/30 rounded-2xl p-4 border border-agri-primary/20\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <div className=\"flex items-center space-x-2\">\n              <Navigation className=\"w-5 h-5 text-agri-primary\" />\n              <span className=\"font-semibold text-agri-primary\">Auto Location</span>\n            </div>\n            \n            {hasValidLocation && (\n              <CheckCircle className=\"w-5 h-5 text-green-600\" />\n            )}\n          </div>\n\n          {loading && (\n            <div className=\"flex items-center space-x-3 py-2\">\n              <RefreshCw className=\"w-4 h-4 text-agri-primary animate-spin\" />\n              <span className=\"text-sm text-agri-gray\">Detecting your location...</span>\n            </div>\n          )}\n\n          {error && (\n            <div className=\"flex items-start space-x-2 py-2 text-sm text-red-600\">\n              <AlertCircle className=\"w-4 h-4 mt-0.5 flex-shrink-0\" />\n              <span>{error}</span>\n            </div>\n          )}\n\n          {hasValidLocation && data && (\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-agri-gray\">Detected Location:</span>\n                {getAccuracyIndicator()}\n              </div>\n              <div className=\"text-sm font-medium text-agri-primary\">\n                📍 {data.district}, {data.state}\n              </div>\n            </div>\n          )}\n\n          <div className=\"flex space-x-2 mt-3\">\n            <Button\n              type=\"button\"\n              onClick={handleUseCurrentLocation}\n              disabled={loading}\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"flex-1 h-10 border-agri-primary/50 text-agri-primary hover:bg-agri-primary hover:text-white rounded-xl\"\n            >\n              <Navigation className=\"w-4 h-4 mr-2\" />\n              {loading ? 'Locating...' : 'Use Current Location'}\n            </Button>\n\n            {hasValidLocation && (\n              <Button\n                type=\"button\"\n                onClick={retryLocation}\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"h-10 border-agri-primary/50 text-agri-primary hover:bg-agri-primary hover:text-white rounded-xl px-3\"\n              >\n                <RefreshCw className=\"w-4 h-4\" />\n              </Button>\n            )}\n\n            <Button\n              type=\"button\"\n              onClick={() => setUseManualEntry(true)}\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"h-10 border-agri-primary/50 text-agri-primary hover:bg-agri-primary hover:text-white rounded-xl px-3\"\n            >\n              Manual\n            </Button>\n          </div>\n        </div>\n      )}\n\n      {/* Manual Entry Section */}\n      {(useManualEntry || (!hasValidLocation && autoLocationAttempted)) && (\n        <>\n          {/* State Field */}\n          <div className=\"space-y-2\">\n            <label className=\"text-lg font-bold text-agri-primary flex items-center\">\n              <MapPin className=\"w-6 h-6 mr-3\" />\n              State\n              {!useManualEntry && <span className=\"text-sm font-normal text-agri-gray ml-2\">(Manual Entry)</span>}\n            </label>\n            <Select onValueChange={onStateChange} value={state}>\n              <SelectTrigger className=\"h-16 text-xl rounded-2xl border-2 border-agri-primary/30 focus:border-agri-primary bg-agri-light/30 font-semibold\">\n                <SelectValue placeholder=\"Select your state\" />\n              </SelectTrigger>\n              <SelectContent className=\"bg-white border border-agri-primary/20 shadow-large rounded-lg max-h-48\">\n                {indianStates.map((stateName) => (\n                  <SelectItem \n                    key={stateName} \n                    value={stateName}\n                    className=\"text-lg py-3 px-4 hover:bg-agri-light\"\n                  >\n                    {stateName}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* District Field */}\n          <div className=\"space-y-2\">\n            <label className=\"text-lg font-bold text-agri-primary flex items-center\">\n              <MapPin className=\"w-6 h-6 mr-3\" />\n              District\n            </label>\n            <Input\n              type=\"text\"\n              placeholder=\"Enter your district name\"\n              value={district}\n              onChange={(e) => onDistrictChange(e.target.value)}\n              className=\"h-16 text-xl rounded-2xl border-2 border-agri-primary/30 focus:border-agri-primary bg-agri-light/30 font-semibold\"\n            />\n            \n            {/* District suggestions if state is selected */}\n            {state && stateDistrictMapping[state] && (\n              <div className=\"mt-2\">\n                <p className=\"text-sm text-agri-gray mb-2\">Popular districts in {state}:</p>\n                <div className=\"flex flex-wrap gap-2\">\n                  {stateDistrictMapping[state].slice(0, 4).map((dist) => (\n                    <button\n                      key={dist}\n                      type=\"button\"\n                      onClick={() => onDistrictChange(dist)}\n                      className=\"px-3 py-1 text-sm bg-agri-light text-agri-primary rounded-lg hover:bg-agri-primary hover:text-white transition-colors\"\n                    >\n                      {dist}\n                    </button>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n\n          {useManualEntry && (\n            <Button\n              type=\"button\"\n              onClick={() => {\n                setUseManualEntry(false);\n                setAutoLocationAttempted(false);\n                handleUseCurrentLocation();\n              }}\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"w-full h-10 border-agri-primary/50 text-agri-primary hover:bg-agri-primary hover:text-white rounded-xl\"\n            >\n              <Navigation className=\"w-4 h-4 mr-2\" />\n              Try Auto Location Again\n            </Button>\n          )}\n        </>\n      )}\n\n      <LocationPermissionModal\n        isOpen={showPermissionModal}\n        onRequestPermission={handleLocationRequest}\n        onSkip={handleSkipLocation}\n        permissionStatus={permissionStatus}\n      />\n    </div>\n  );\n};\n\nexport default LocationPicker;","size_bytes":11139},"src/components/NotificationPanel.tsx":{"content":"\nimport { useState, useEffect } from 'react';\nimport { X, Bell, Package, TrendingUp, AlertCircle, CheckCircle, Clock, MessageCircle, Trash2, CheckCheck } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\n\ninterface NotificationPanelProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst NotificationPanel = ({ isOpen, onClose }: NotificationPanelProps) => {\n  const [notifications, setNotifications] = useState([\n    {\n      id: 1,\n      type: 'market_request',\n      title: 'Market Request Accepted!',\n      message: 'FreshMart has accepted your tomatoes order for ₹800',\n      time: '2 minutes ago',\n      icon: CheckCircle,\n      iconColor: 'text-green-600',\n      bgColor: 'bg-green-50',\n      unread: true\n    },\n    {\n      id: 2,\n      type: 'price_alert',\n      title: 'Price Alert',\n      message: 'Tomato prices increased by ₹3/kg in your area',\n      time: '1 hour ago',\n      icon: TrendingUp,\n      iconColor: 'text-blue-600',\n      bgColor: 'bg-blue-50',\n      unread: true\n    },\n    {\n      id: 3,\n      type: 'treatment_reminder',\n      title: 'Treatment Reminder',\n      message: 'Time to apply fungicide to your wheat crop',\n      time: '3 hours ago',\n      icon: AlertCircle,\n      iconColor: 'text-orange-600',\n      bgColor: 'bg-orange-50',\n      unread: true\n    },\n    {\n      id: 4,\n      type: 'order_delivered',\n      title: 'Order Delivered',\n      message: 'Your fertilizer order has been delivered successfully',\n      time: 'Yesterday',\n      icon: Package,\n      iconColor: 'text-green-600',\n      bgColor: 'bg-green-50',\n      unread: false\n    },\n    {\n      id: 5,\n      type: 'buyer_inquiry',\n      title: 'New Buyer Inquiry',\n      message: 'Someone is interested in your green chilies listing',\n      time: '2 days ago',\n      icon: MessageCircle,\n      iconColor: 'text-purple-600',\n      bgColor: 'bg-purple-50',\n      unread: false\n    },\n    {\n      id: 6,\n      type: 'weather_alert',\n      title: 'Weather Alert',\n      message: 'Heavy rain expected tomorrow. Protect your crops',\n      time: '2 days ago',\n      icon: AlertCircle,\n      iconColor: 'text-red-600',\n      bgColor: 'bg-red-50',\n      unread: false\n    }\n  ]);\n\n  // Load notifications from localStorage\n  useEffect(() => {\n    const savedNotifications = localStorage.getItem('kisanmitra_notifications');\n    if (savedNotifications) {\n      setNotifications(JSON.parse(savedNotifications));\n    }\n  }, []);\n\n  // Save notifications to localStorage whenever they change\n  useEffect(() => {\n    localStorage.setItem('kisanmitra_notifications', JSON.stringify(notifications));\n  }, [notifications]);\n\n  const handleMarkAllRead = () => {\n    setNotifications(prev => \n      prev.map(notif => ({ ...notif, unread: false }))\n    );\n  };\n\n  const handleClearAll = () => {\n    setNotifications([]);\n    localStorage.removeItem('kisanmitra_notifications');\n  };\n\n  if (!isOpen) return null;\n\n  const unreadCount = notifications.filter(n => n.unread).length;\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 z-50 flex justify-end\">\n      <div className=\"bg-white w-full max-w-sm h-full overflow-hidden shadow-xl animate-slide-in-right\">\n        {/* Header */}\n        <div className=\"bg-gradient-to-r from-green-500 to-green-600 p-4 text-white\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              <Bell className=\"w-6 h-6\" />\n              <h2 className=\"text-xl font-bold\">Notifications</h2>\n              {unreadCount > 0 && (\n                <Badge className=\"bg-red-500 text-white\">\n                  {unreadCount}\n                </Badge>\n              )}\n            </div>\n            <button\n              onClick={onClose}\n              className=\"p-1 rounded-full hover:bg-white/20 transition-colors\"\n            >\n              <X className=\"w-6 h-6\" />\n            </button>\n          </div>\n        </div>\n\n        {/* Notifications List */}\n        <div className=\"flex-1 overflow-y-auto max-h-[calc(100vh-200px)]\">\n          <div className=\"p-4 space-y-4 pb-20\">\n            {notifications.map((notification) => (\n              <div\n                key={notification.id}\n                className={`p-4 rounded-xl border transition-all hover:shadow-md ${\n                  notification.unread \n                    ? 'border-green-200 bg-green-50/50' \n                    : 'border-gray-200 bg-white'\n                }`}\n              >\n                <div className=\"flex items-start space-x-3\">\n                  <div className={`w-10 h-10 ${notification.bgColor} rounded-full flex items-center justify-center flex-shrink-0`}>\n                    <notification.icon className={`w-5 h-5 ${notification.iconColor}`} />\n                  </div>\n                  \n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-start justify-between\">\n                      <h4 className=\"font-semibold text-gray-900 text-sm\">\n                        {notification.title}\n                      </h4>\n                      {notification.unread && (\n                        <div className=\"w-2 h-2 bg-green-500 rounded-full flex-shrink-0 mt-1\"></div>\n                      )}\n                    </div>\n                    \n                    <p className=\"text-sm text-gray-600 mt-1 leading-relaxed\">\n                      {notification.message}\n                    </p>\n                    \n                    <div className=\"flex items-center space-x-1 mt-2\">\n                      <Clock className=\"w-3 h-3 text-gray-400\" />\n                      <span className=\"text-xs text-gray-400\">{notification.time}</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Footer Actions */}\n        <div className=\"border-t border-gray-200 p-4 space-y-2\">\n          <div className=\"flex space-x-2\">\n            <Button \n              variant=\"outline\" \n              className=\"flex-1 text-sm\"\n              onClick={handleMarkAllRead}\n            >\n              <CheckCheck className=\"w-4 h-4 mr-2\" />\n              Mark All Read\n            </Button>\n            <Button \n              variant=\"outline\" \n              className=\"flex-1 text-sm text-red-600 border-red-200 hover:bg-red-50\"\n              onClick={handleClearAll}\n            >\n              <Trash2 className=\"w-4 h-4 mr-2\" />\n              Clear All\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NotificationPanel;\n","size_bytes":6657},"src/components/PINInput.tsx":{"content":"import React, { useState } from 'react';\nimport { Eye, EyeOff, Lock } from 'lucide-react';\nimport { Input } from '@/components/ui/input';\n\ninterface PINInputProps {\n  value: string;\n  onChange: (value: string) => void;\n  placeholder?: string;\n  label?: string;\n  showStrengthIndicator?: boolean;\n  className?: string;\n}\n\nconst PINInput: React.FC<PINInputProps> = ({\n  value,\n  onChange,\n  placeholder = \"Enter PIN\",\n  label = \"4-Digit PIN\",\n  showStrengthIndicator = false,\n  className = \"\"\n}) => {\n  const [showPin, setShowPin] = useState(false);\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = e.target.value.replace(/\\D/g, '').slice(0, 4);\n    onChange(newValue);\n  };\n\n  const getPinStrength = (): 'weak' | 'medium' | 'strong' => {\n    if (value.length < 4) return 'weak';\n    \n    const hasRepeating = /(.)\\1{2,}/.test(value);\n    const isSequential = /^(0123|1234|2345|3456|4567|5678|6789|9876|8765|7654|6543|5432|4321|3210)/.test(value);\n    const isCommon = ['1111', '2222', '3333', '4444', '5555', '6666', '7777', '8888', '9999', '0000', '1234', '4321'].includes(value);\n    \n    if (hasRepeating || isSequential || isCommon) return 'weak';\n    \n    const uniqueDigits = new Set(value.split('')).size;\n    return uniqueDigits >= 3 ? 'strong' : 'medium';\n  };\n\n  const getStrengthColor = () => {\n    const strength = getPinStrength();\n    switch (strength) {\n      case 'weak': return 'text-red-500 bg-red-100';\n      case 'medium': return 'text-yellow-600 bg-yellow-100';\n      case 'strong': return 'text-green-600 bg-green-100';\n    }\n  };\n\n  const getStrengthText = () => {\n    const strength = getPinStrength();\n    switch (strength) {\n      case 'weak': return 'Weak PIN';\n      case 'medium': return 'Medium PIN';\n      case 'strong': return 'Strong PIN';\n    }\n  };\n\n  return (\n    <div className={`space-y-3 ${className}`}>\n      {/* Label */}\n      <label className=\"text-lg font-bold text-agri-primary flex items-center\">\n        <Lock className=\"w-6 h-6 mr-3\" />\n        {label}\n      </label>\n\n      {/* PIN Input */}\n      <div className=\"relative\">\n        <Input\n          type={showPin ? \"text\" : \"password\"}\n          placeholder={placeholder}\n          value={value}\n          onChange={handleChange}\n          maxLength={4}\n          className=\"pr-16 h-16 text-2xl rounded-2xl border-2 border-agri-primary/30 focus:border-agri-primary bg-agri-light/30 font-bold text-center tracking-[0.8em] placeholder:tracking-normal placeholder:text-base\"\n        />\n        \n        {/* Show/Hide Button */}\n        <button\n          type=\"button\"\n          onClick={() => setShowPin(!showPin)}\n          className=\"absolute right-4 top-1/2 transform -translate-y-1/2 p-2 rounded-xl hover:bg-agri-light transition-colors\"\n        >\n          {showPin ? (\n            <EyeOff className=\"w-6 h-6 text-agri-primary\" />\n          ) : (\n            <Eye className=\"w-6 h-6 text-agri-primary\" />\n          )}\n        </button>\n      </div>\n\n      {/* PIN Dots Indicator */}\n      <div className=\"flex justify-center space-x-4 mt-4\">\n        {[...Array(4)].map((_, i) => (\n          <div\n            key={i}\n            className={`w-4 h-4 rounded-full transition-all duration-300 ${\n              i < value.length \n                ? 'bg-agri-primary scale-125 shadow-md' \n                : 'bg-agri-light'\n            }`}\n          />\n        ))}\n      </div>\n\n      {/* PIN Strength Indicator */}\n      {showStrengthIndicator && value.length > 0 && (\n        <div className=\"mt-3\">\n          <div className={`inline-flex items-center px-3 py-2 rounded-xl text-sm font-medium ${getStrengthColor()}`}>\n            <div className={`w-2 h-2 rounded-full mr-2 ${\n              getPinStrength() === 'weak' ? 'bg-red-500' :\n              getPinStrength() === 'medium' ? 'bg-yellow-500' : 'bg-green-500'\n            }`} />\n            {getStrengthText()}\n          </div>\n          \n          {/* Strength Tips */}\n          {value.length === 4 && getPinStrength() === 'weak' && (\n            <div className=\"mt-2 text-sm text-red-600 bg-red-50 p-3 rounded-xl\">\n              💡 <strong>Tip:</strong> Avoid repeating digits (1111), sequences (1234), or common patterns\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* PIN Requirements */}\n      {value.length > 0 && value.length < 4 && (\n        <div className=\"text-sm text-agri-gray\">\n          PIN must be exactly 4 digits ({value.length}/4)\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default PINInput;","size_bytes":4528},"src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"src/hooks/useLocation.ts":{"content":"import { useState, useEffect } from 'react';\n\ninterface LocationData {\n  latitude: number;\n  longitude: number;\n  state: string;\n  district: string;\n  accuracy: number;\n}\n\ninterface LocationState {\n  loading: boolean;\n  data: LocationData | null;\n  error: string | null;\n  permissionStatus: 'granted' | 'denied' | 'prompt' | 'unsupported';\n}\n\n// Indian states and districts mapping for reverse geocoding fallback\nconst stateDistrictMapping: Record<string, string[]> = {\n  \"Maharashtra\": [\"Mumbai\", \"Pune\", \"Nagpur\", \"Nashik\", \"Aurangabad\", \"Solapur\"],\n  \"Karnataka\": [\"Bangalore\", \"Mysore\", \"Hubli\", \"Mangalore\", \"Belgaum\", \"Gulbarga\"],\n  \"Tamil Nadu\": [\"Chennai\", \"Coimbatore\", \"Madurai\", \"Tiruchirappalli\", \"Salem\", \"Tirunelveli\"],\n  \"Gujarat\": [\"Ahmedabad\", \"Surat\", \"Vadodara\", \"Rajkot\", \"Bhavnagar\", \"Jamnagar\"],\n  \"Punjab\": [\"Ludhiana\", \"Amritsar\", \"Jalandhar\", \"Patiala\", \"Bathinda\", \"Mohali\"],\n  \"Uttar Pradesh\": [\"Lucknow\", \"Kanpur\", \"Agra\", \"Varanasi\", \"Allahabad\", \"Meerut\"],\n  \"West Bengal\": [\"Kolkata\", \"Howrah\", \"Durgapur\", \"Asansol\", \"Siliguri\", \"Malda\"],\n  \"Rajasthan\": [\"Jaipur\", \"Jodhpur\", \"Kota\", \"Bikaner\", \"Udaipur\", \"Ajmer\"],\n  \"Madhya Pradesh\": [\"Bhopal\", \"Indore\", \"Gwalior\", \"Jabalpur\", \"Ujjain\", \"Sagar\"],\n  \"Haryana\": [\"Gurugram\", \"Faridabad\", \"Panipat\", \"Ambala\", \"Yamunanagar\", \"Rohtak\"]\n};\n\nconst useLocation = () => {\n  const [locationState, setLocationState] = useState<LocationState>({\n    loading: false,\n    data: null,\n    error: null,\n    permissionStatus: 'prompt'\n  });\n\n  const checkPermissionStatus = async (): Promise<'granted' | 'denied' | 'prompt' | 'unsupported'> => {\n    if (!navigator.geolocation) {\n      return 'unsupported';\n    }\n\n    try {\n      const permission = await navigator.permissions.query({ name: 'geolocation' });\n      return permission.state as 'granted' | 'denied' | 'prompt';\n    } catch {\n      return 'prompt';\n    }\n  };\n\n  const reverseGeocode = async (lat: number, lon: number): Promise<{ state: string; district: string }> => {\n    try {\n      // Using a free geocoding service (OpenStreetMap Nominatim)\n      const response = await fetch(\n        `https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lon}&addressdetails=1&accept-language=en`\n      );\n      \n      if (!response.ok) {\n        throw new Error('Geocoding failed');\n      }\n\n      const data = await response.json();\n      const address = data.address;\n      \n      let state = address.state || address.province || '';\n      let district = address.city || address.town || address.village || address.suburb || '';\n\n      // Fallback: Try to match with Indian states if exact match not found\n      if (!state || !Object.keys(stateDistrictMapping).includes(state)) {\n        // Simple matching logic for Indian context\n        const stateName = Object.keys(stateDistrictMapping).find(s => \n          state.toLowerCase().includes(s.toLowerCase()) || \n          s.toLowerCase().includes(state.toLowerCase())\n        );\n        if (stateName) {\n          state = stateName;\n        }\n      }\n\n      return { \n        state: state || 'Unknown State', \n        district: district || 'Unknown District' \n      };\n    } catch (error) {\n      console.error('Reverse geocoding failed:', error);\n      return { state: 'Unknown State', district: 'Unknown District' };\n    }\n  };\n\n  const getCurrentLocation = async (): Promise<void> => {\n    setLocationState(prev => ({ ...prev, loading: true, error: null }));\n\n    try {\n      const permissionStatus = await checkPermissionStatus();\n      setLocationState(prev => ({ ...prev, permissionStatus }));\n\n      if (permissionStatus === 'denied') {\n        throw new Error('Location access denied. Please enable location services and try again.');\n      }\n\n      if (permissionStatus === 'unsupported') {\n        throw new Error('Location services are not supported by your device.');\n      }\n\n      return new Promise((resolve, reject) => {\n        const options: PositionOptions = {\n          enableHighAccuracy: true,\n          timeout: 15000,\n          maximumAge: 300000 // 5 minutes cache\n        };\n\n        navigator.geolocation.getCurrentPosition(\n          async (position) => {\n            try {\n              const { latitude, longitude, accuracy } = position.coords;\n              const { state, district } = await reverseGeocode(latitude, longitude);\n\n              const locationData: LocationData = {\n                latitude,\n                longitude,\n                state,\n                district,\n                accuracy\n              };\n\n              setLocationState(prev => ({\n                ...prev,\n                loading: false,\n                data: locationData,\n                error: null,\n                permissionStatus: 'granted'\n              }));\n\n              // Cache the location data\n              localStorage.setItem('kisanmitra_location', JSON.stringify({\n                ...locationData,\n                timestamp: Date.now()\n              }));\n\n              resolve();\n            } catch (error) {\n              const errorMessage = error instanceof Error ? error.message : 'Failed to get location details';\n              setLocationState(prev => ({\n                ...prev,\n                loading: false,\n                error: errorMessage\n              }));\n              reject(new Error(errorMessage));\n            }\n          },\n          (error) => {\n            let errorMessage = 'Unable to retrieve your location. ';\n            \n            switch (error.code) {\n              case error.PERMISSION_DENIED:\n                errorMessage += 'Location access denied.';\n                setLocationState(prev => ({ ...prev, permissionStatus: 'denied' }));\n                break;\n              case error.POSITION_UNAVAILABLE:\n                errorMessage += 'Location information unavailable.';\n                break;\n              case error.TIMEOUT:\n                errorMessage += 'Location request timed out.';\n                break;\n              default:\n                errorMessage += 'An unknown error occurred.';\n                break;\n            }\n\n            setLocationState(prev => ({\n              ...prev,\n              loading: false,\n              error: errorMessage\n            }));\n            reject(new Error(errorMessage));\n          },\n          options\n        );\n      });\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Location access failed';\n      setLocationState(prev => ({\n        ...prev,\n        loading: false,\n        error: errorMessage\n      }));\n    }\n  };\n\n  const loadCachedLocation = (): boolean => {\n    try {\n      const cached = localStorage.getItem('kisanmitra_location');\n      if (cached) {\n        const { timestamp, ...locationData } = JSON.parse(cached);\n        const now = Date.now();\n        const fiveMinutes = 5 * 60 * 1000;\n\n        if (now - timestamp < fiveMinutes) {\n          setLocationState(prev => ({\n            ...prev,\n            data: locationData,\n            permissionStatus: 'granted'\n          }));\n          return true;\n        }\n      }\n    } catch (error) {\n      console.error('Failed to load cached location:', error);\n    }\n    return false;\n  };\n\n  const clearLocation = () => {\n    setLocationState({\n      loading: false,\n      data: null,\n      error: null,\n      permissionStatus: 'prompt'\n    });\n    localStorage.removeItem('kisanmitra_location');\n  };\n\n  const retryLocation = () => {\n    getCurrentLocation();\n  };\n\n  const getAccuracyLevel = (accuracy: number): 'high' | 'medium' | 'low' => {\n    if (accuracy <= 100) return 'high';\n    if (accuracy <= 1000) return 'medium';\n    return 'low';\n  };\n\n  useEffect(() => {\n    // Try to load cached location on mount\n    loadCachedLocation();\n  }, []);\n\n  return {\n    ...locationState,\n    getCurrentLocation,\n    retryLocation,\n    clearLocation,\n    getAccuracyLevel: locationState.data ? getAccuracyLevel(locationState.data.accuracy) : null,\n    hasValidLocation: !!locationState.data && !locationState.error,\n    stateDistrictMapping\n  };\n};\n\nexport default useLocation;","size_bytes":8110},"src/lib/cart.ts":{"content":"// Cart state management using localStorage\nexport interface CartItem {\n  id: string;\n  name: string;\n  brand: string;\n  price: number;\n  originalPrice: number;\n  quantity: number;\n  size: string;\n  category: string;\n  features: string[];\n  inStock: boolean;\n}\n\nexport interface Order {\n  id: string;\n  status: 'processing' | 'shipped' | 'delivered' | 'cancelled';\n  items: CartItem[];\n  subtotal: number;\n  discount: number;\n  deliveryFee: number;\n  total: number;\n  orderDate: string;\n  estimatedDelivery?: string;\n  deliveryDate?: string;\n  address: string;\n  paymentMethod: string;\n}\n\nclass CartManager {\n  private static instance: CartManager;\n  private cartKey = 'hariyali_mitra_cart';\n  private ordersKey = 'hariyali_mitra_orders';\n\n  static getInstance(): CartManager {\n    if (!CartManager.instance) {\n      CartManager.instance = new CartManager();\n    }\n    return CartManager.instance;\n  }\n\n  // Cart operations\n  getCart(): CartItem[] {\n    try {\n      const cart = localStorage.getItem(this.cartKey);\n      return cart ? JSON.parse(cart) : [];\n    } catch {\n      return [];\n    }\n  }\n\n  addToCart(product: any): void {\n    const cart = this.getCart();\n    const existingItem = cart.find(item => item.id === product.id);\n\n    if (existingItem) {\n      existingItem.quantity += 1;\n    } else {\n      const cartItem: CartItem = {\n        id: product.id,\n        name: product.name,\n        brand: product.brand,\n        price: product.price,\n        originalPrice: product.originalPrice,\n        quantity: 1,\n        size: product.size,\n        category: product.category,\n        features: product.features,\n        inStock: product.inStock\n      };\n      cart.push(cartItem);\n    }\n\n    localStorage.setItem(this.cartKey, JSON.stringify(cart));\n    this.notifyCartChange();\n  }\n\n  removeFromCart(productId: string): void {\n    const cart = this.getCart();\n    const existingItem = cart.find(item => item.id === productId);\n\n    if (existingItem && existingItem.quantity > 1) {\n      existingItem.quantity -= 1;\n    } else {\n      const index = cart.findIndex(item => item.id === productId);\n      if (index > -1) {\n        cart.splice(index, 1);\n      }\n    }\n\n    localStorage.setItem(this.cartKey, JSON.stringify(cart));\n    this.notifyCartChange();\n  }\n\n  updateQuantity(productId: string, quantity: number): void {\n    if (quantity <= 0) {\n      this.deleteItem(productId);\n      return;\n    }\n\n    const cart = this.getCart();\n    const existingItem = cart.find(item => item.id === productId);\n\n    if (existingItem) {\n      existingItem.quantity = quantity;\n      localStorage.setItem(this.cartKey, JSON.stringify(cart));\n      this.notifyCartChange();\n    }\n  }\n\n  deleteItem(productId: string): void {\n    const cart = this.getCart();\n    const filteredCart = cart.filter(item => item.id !== productId);\n    localStorage.setItem(this.cartKey, JSON.stringify(filteredCart));\n    this.notifyCartChange();\n  }\n\n  clearCart(): void {\n    localStorage.removeItem(this.cartKey);\n    this.notifyCartChange();\n  }\n\n  getCartCount(): number {\n    return this.getCart().reduce((total, item) => total + item.quantity, 0);\n  }\n\n  getCartTotal(): number {\n    return this.getCart().reduce((total, item) => total + (item.price * item.quantity), 0);\n  }\n\n  getCartSubtotal(): number {\n    return this.getCart().reduce((total, item) => total + (item.price * item.quantity), 0);\n  }\n\n  getCartSavings(): number {\n    return this.getCart().reduce((total, item) => total + ((item.originalPrice - item.price) * item.quantity), 0);\n  }\n\n  // Order operations\n  getOrders(): Order[] {\n    try {\n      const orders = localStorage.getItem(this.ordersKey);\n      return orders ? JSON.parse(orders) : [];\n    } catch {\n      return [];\n    }\n  }\n\n  createOrder(orderData: {\n    address: string;\n    paymentMethod: string;\n    discount?: number;\n  }): Order {\n    const cart = this.getCart();\n    if (cart.length === 0) {\n      throw new Error('Cart is empty');\n    }\n\n    const subtotal = this.getCartSubtotal();\n    const discount = orderData.discount || 0;\n    const deliveryFee = subtotal >= 500 ? 0 : 40;\n    const total = subtotal - discount + deliveryFee;\n\n    const orderId = 'ORD' + Date.now();\n    const orderDate = new Date().toISOString();\n    const estimatedDelivery = new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(); // Tomorrow\n\n    const order: Order = {\n      id: orderId,\n      status: 'processing',\n      items: [...cart],\n      subtotal,\n      discount,\n      deliveryFee,\n      total,\n      orderDate,\n      estimatedDelivery,\n      address: orderData.address,\n      paymentMethod: orderData.paymentMethod\n    };\n\n    const orders = this.getOrders();\n    orders.unshift(order); // Add to beginning\n    localStorage.setItem(this.ordersKey, JSON.stringify(orders));\n\n    // Clear cart after successful order\n    this.clearCart();\n\n    return order;\n  }\n\n  updateOrderStatus(orderId: string, status: Order['status']): void {\n    const orders = this.getOrders();\n    const order = orders.find(o => o.id === orderId);\n    \n    if (order) {\n      order.status = status;\n      if (status === 'delivered') {\n        order.deliveryDate = new Date().toISOString();\n      }\n      localStorage.setItem(this.ordersKey, JSON.stringify(orders));\n    }\n  }\n\n  // Event system for cart changes\n  private notifyCartChange(): void {\n    window.dispatchEvent(new CustomEvent('cartChanged'));\n  }\n\n  // Subscribe to cart changes\n  onCartChange(callback: () => void): () => void {\n    const handler = () => callback();\n    window.addEventListener('cartChanged', handler);\n    \n    // Return unsubscribe function\n    return () => window.removeEventListener('cartChanged', handler);\n  }\n}\n\nexport const cartManager = CartManager.getInstance();","size_bytes":5744},"src/lib/dataService.ts":{"content":"// Real Database Service for KisanMitra App\n// This provides real data persistence and user-specific statistics\n\nexport interface User {\n  id: string;\n  name: string;\n  phone: string;\n  location: string;\n  state: string;\n  avatar?: string;\n  joinedDate: string;\n  createdAt: string;\n}\n\nexport interface Listing {\n  id: string;\n  userId: string;\n  crop: string;\n  quantity: string;\n  pricePerKg: number;\n  market: string;\n  transport: string;\n  views: number;\n  inquiries: number;\n  totalPrice: number;\n  status: 'active' | 'sold' | 'expired';\n  postedDate: string;\n  createdAt: string;\n  soldDate?: string;\n  soldPrice?: number;\n  buyer?: string;\n}\n\nexport interface DiagnosisRecord {\n  id: string;\n  userId: string;\n  cropName: string;\n  diagnosis: string;\n  confidence: number;\n  treatment: string;\n  date: string;\n  createdAt: string;\n  status?: 'active' | 'completed' | 'discontinued';\n  treatmentStartDate?: string;\n  treatmentEndDate?: string;\n}\n\nexport interface AdvisoryRecord {\n  id: string;\n  userId: string;\n  title: string;\n  content: string;\n  category: string;\n  savedDate: string;\n  createdAt: string;\n}\n\nexport interface UserActivity {\n  id: string;\n  userId: string;\n  action: string;\n  data: any;\n  timestamp: string;\n}\n\nexport interface UserStats {\n  totalEarnings: number;\n  activeListings: number;\n  successfulSales: number;\n  totalViews: number;\n  avgRating: number;\n  diagnosisCount: number;\n  activeTreatments: number;\n  advisorySaved: number;\n  level: string;\n  joinedDate: string;\n}\n\nclass DataService {\n  private storagePrefix = 'kisanmitra_';\n\n  // User Management\n  getCurrentUser(): User | null {\n    try {\n      const userData = localStorage.getItem(`${this.storagePrefix}user`);\n      return userData ? JSON.parse(userData) : null;\n    } catch (error) {\n      console.error('Error loading user data:', error);\n      return null;\n    }\n  }\n\n  saveUser(user: User): void {\n    try {\n      localStorage.setItem(`${this.storagePrefix}user`, JSON.stringify(user));\n    } catch (error) {\n      console.error('Error saving user data:', error);\n    }\n  }\n\n  // Listings Management\n  getUserListings(userId: string): Listing[] {\n    try {\n      const listingsKey = `${this.storagePrefix}listings_${userId}`;\n      const stored = localStorage.getItem(listingsKey);\n      return stored ? JSON.parse(stored) : [];\n    } catch (error) {\n      console.error('Error loading listings:', error);\n      return [];\n    }\n  }\n\n  saveUserListings(userId: string, listings: Listing[]): void {\n    try {\n      const listingsKey = `${this.storagePrefix}listings_${userId}`;\n      localStorage.setItem(listingsKey, JSON.stringify(listings));\n      \n      // Also save to global listings for search functionality\n      this.updateGlobalListings();\n    } catch (error) {\n      console.error('Error saving listings:', error);\n    }\n  }\n\n  addListing(listing: Listing): void {\n    try {\n      const currentListings = this.getUserListings(listing.userId);\n      currentListings.push(listing);\n      this.saveUserListings(listing.userId, currentListings);\n      \n      // Track activity\n      this.trackUserActivity(listing.userId, 'listing_created', listing);\n    } catch (error) {\n      console.error('Error adding listing:', error);\n    }\n  }\n\n  markListingAsSold(userId: string, listingId: string, soldPrice: number, buyer: string): void {\n    try {\n      const listings = this.getUserListings(userId);\n      const listing = listings.find(l => l.id === listingId);\n      \n      if (listing) {\n        listing.status = 'sold';\n        listing.soldDate = new Date().toISOString();\n        listing.soldPrice = soldPrice;\n        listing.buyer = buyer;\n        \n        this.saveUserListings(userId, listings);\n        this.trackUserActivity(userId, 'listing_sold', { listingId, soldPrice, buyer });\n      }\n    } catch (error) {\n      console.error('Error marking listing as sold:', error);\n    }\n  }\n\n  // Diagnosis Management\n  getUserDiagnoses(userId: string): DiagnosisRecord[] {\n    try {\n      const diagnosesKey = `${this.storagePrefix}diagnoses_${userId}`;\n      const stored = localStorage.getItem(diagnosesKey);\n      return stored ? JSON.parse(stored) : [];\n    } catch (error) {\n      console.error('Error loading diagnoses:', error);\n      return [];\n    }\n  }\n\n  addDiagnosis(diagnosis: DiagnosisRecord): void {\n    try {\n      const currentDiagnoses = this.getUserDiagnoses(diagnosis.userId);\n      currentDiagnoses.push(diagnosis);\n      \n      const diagnosesKey = `${this.storagePrefix}diagnoses_${diagnosis.userId}`;\n      localStorage.setItem(diagnosesKey, JSON.stringify(currentDiagnoses));\n      \n      this.trackUserActivity(diagnosis.userId, 'diagnosis_created', diagnosis);\n    } catch (error) {\n      console.error('Error adding diagnosis:', error);\n    }\n  }\n\n  // Advisory Management\n  getUserAdvisories(userId: string): AdvisoryRecord[] {\n    try {\n      const advisoriesKey = `${this.storagePrefix}advisories_${userId}`;\n      const stored = localStorage.getItem(advisoriesKey);\n      return stored ? JSON.parse(stored) : [];\n    } catch (error) {\n      console.error('Error loading advisories:', error);\n      return [];\n    }\n  }\n\n  saveAdvisory(advisory: AdvisoryRecord): void {\n    try {\n      const currentAdvisories = this.getUserAdvisories(advisory.userId);\n      currentAdvisories.push(advisory);\n      \n      const advisoriesKey = `${this.storagePrefix}advisories_${advisory.userId}`;\n      localStorage.setItem(advisoriesKey, JSON.stringify(currentAdvisories));\n      \n      this.trackUserActivity(advisory.userId, 'advisory_saved', advisory);\n    } catch (error) {\n      console.error('Error saving advisory:', error);\n    }\n  }\n\n  // Activity Tracking\n  trackUserActivity(userId: string, action: string, data: any): void {\n    try {\n      const activity: UserActivity = {\n        id: `activity_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        userId,\n        action,\n        data,\n        timestamp: new Date().toISOString()\n      };\n\n      const activitiesKey = `${this.storagePrefix}activities_${userId}`;\n      const currentActivities = JSON.parse(localStorage.getItem(activitiesKey) || '[]');\n      currentActivities.push(activity);\n      \n      // Keep only last 100 activities to prevent storage bloat\n      if (currentActivities.length > 100) {\n        currentActivities.splice(0, currentActivities.length - 100);\n      }\n      \n      localStorage.setItem(activitiesKey, JSON.stringify(currentActivities));\n    } catch (error) {\n      console.error('Error tracking activity:', error);\n    }\n  }\n\n  // Real Statistics Calculation\n  calculateUserStats(userId: string): UserStats {\n    try {\n      const listings = this.getUserListings(userId);\n      const diagnoses = this.getUserDiagnoses(userId);\n      const advisories = this.getUserAdvisories(userId);\n      const user = this.getCurrentUser();\n\n      const activeListings = listings.filter(l => l.status === 'active');\n      const soldListings = listings.filter(l => l.status === 'sold');\n      \n      const totalEarnings = soldListings.reduce((sum, listing) => sum + (listing.soldPrice || 0), 0);\n      const totalViews = listings.reduce((sum, listing) => sum + listing.views, 0);\n      const successfulSales = soldListings.length;\n\n      // Calculate active treatments (diagnoses that are still being treated)\n      const activeTreatments = diagnoses.filter(d => {\n        if (d.status === 'active') return true;\n        if (!d.status) {\n          // If no status is set, consider treatments from last 30 days as potentially active\n          const diagnosisDate = new Date(d.createdAt || d.date);\n          const thirtyDaysAgo = new Date();\n          thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n          return diagnosisDate > thirtyDaysAgo;\n        }\n        return false;\n      }).length;\n\n      // Calculate level based on activity\n      let level = 'New Farmer';\n      if (successfulSales >= 50 && totalEarnings >= 100000) {\n        level = 'Expert Farmer';\n      } else if (successfulSales >= 20 && totalEarnings >= 50000) {\n        level = 'Advanced Farmer';\n      } else if (successfulSales >= 5 && totalEarnings >= 10000) {\n        level = 'Experienced Farmer';\n      } else if (successfulSales >= 1) {\n        level = 'Active Farmer';\n      }\n\n      // Calculate average rating (simulate based on successful sales)\n      let avgRating = 4.0;\n      if (successfulSales > 10) avgRating = 4.8;\n      else if (successfulSales > 5) avgRating = 4.5;\n      else if (successfulSales > 0) avgRating = 4.2;\n\n      return {\n        totalEarnings,\n        activeListings: activeListings.length,\n        successfulSales,\n        totalViews,\n        avgRating,\n        diagnosisCount: diagnoses.length,\n        activeTreatments,\n        advisorySaved: advisories.length,\n        level,\n        joinedDate: user?.joinedDate || new Date().toISOString()\n      };\n    } catch (error) {\n      console.error('Error calculating user stats:', error);\n      return {\n        totalEarnings: 0,\n        activeListings: 0,\n        successfulSales: 0,\n        totalViews: 0,\n        avgRating: 4.0,\n        diagnosisCount: 0,\n        activeTreatments: 0,\n        advisorySaved: 0,\n        level: 'New Farmer',\n        joinedDate: new Date().toISOString()\n      };\n    }\n  }\n\n  // Increment listing views\n  incrementListingViews(userId: string, listingId: string): void {\n    try {\n      const listings = this.getUserListings(userId);\n      const listing = listings.find(l => l.id === listingId);\n      \n      if (listing) {\n        listing.views += 1;\n        this.saveUserListings(userId, listings);\n      }\n    } catch (error) {\n      console.error('Error incrementing views:', error);\n    }\n  }\n\n  // Increment listing inquiries\n  incrementListingInquiries(userId: string, listingId: string): void {\n    try {\n      const listings = this.getUserListings(userId);\n      const listing = listings.find(l => l.id === listingId);\n      \n      if (listing) {\n        listing.inquiries += 1;\n        this.saveUserListings(userId, listings);\n      }\n    } catch (error) {\n      console.error('Error incrementing inquiries:', error);\n    }\n  }\n\n  // Global listings for search (combine all users)\n  private updateGlobalListings(): void {\n    try {\n      // This would typically be handled by a backend\n      // For now, we'll keep user-specific storage\n    } catch (error) {\n      console.error('Error updating global listings:', error);\n    }\n  }\n\n  // Clear all user data (for testing)\n  clearUserData(userId: string): void {\n    try {\n      localStorage.removeItem(`${this.storagePrefix}listings_${userId}`);\n      localStorage.removeItem(`${this.storagePrefix}diagnoses_${userId}`);\n      localStorage.removeItem(`${this.storagePrefix}advisories_${userId}`);\n      localStorage.removeItem(`${this.storagePrefix}activities_${userId}`);\n    } catch (error) {\n      console.error('Error clearing user data:', error);\n    }\n  }\n\n  // Get user activity log\n  getUserActivities(userId: string): UserActivity[] {\n    try {\n      const activitiesKey = `${this.storagePrefix}activities_${userId}`;\n      const stored = localStorage.getItem(activitiesKey);\n      return stored ? JSON.parse(stored) : [];\n    } catch (error) {\n      console.error('Error loading activities:', error);\n      return [];\n    }\n  }\n}\n\n// Export singleton instance\nexport const dataService = new DataService();\nexport default dataService;","size_bytes":11418},"src/lib/places.ts":{"content":"// Places service for finding nearby fertilizer shops using real location data\n\nexport interface FertilizerShop {\n  id: string;\n  name: string;\n  address: string;\n  latitude: number;\n  longitude: number;\n  distance: number;\n  rating?: number;\n  reviews?: number;\n  phone?: string;\n  isOpen?: boolean;\n  openingHours?: string[];\n  website?: string;\n  placeId?: string;\n}\n\nclass PlacesService {\n  private apiKey: string;\n  private phoneNumbers = [\n    '+919876543210', '+918765432109', '+917654321098', \n    '+916543210987', '+915432109876', '+919123456789',\n    '+918234567890', '+917345678901', '+916456789012'\n  ];\n\n  constructor() {\n    // Get API key from environment variables (browser only)\n    this.apiKey = import.meta.env.VITE_GOOGLE_PLACES_API_KEY || '';\n    \n    if (!this.apiKey) {\n      console.log('Using fertilizer shop data with real data priority.');\n    }\n  }\n  \n  // Get phone number from the array\n  private getPhoneNumber(index: number): string {\n    return this.phoneNumbers[index % this.phoneNumbers.length];\n  }\n\n  // Calculate distance between two coordinates using Haversine formula\n  private calculateDistance(lat1: number, lon1: number, lat2: number, lon2: number): number {\n    const R = 6371; // Earth's radius in kilometers\n    const dLat = (lat2 - lat1) * Math.PI / 180;\n    const dLon = (lon2 - lon1) * Math.PI / 180;\n    const a = \n      Math.sin(dLat/2) * Math.sin(dLat/2) +\n      Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * \n      Math.sin(dLon/2) * Math.sin(dLon/2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n    return R * c;\n  }\n\n  // Find nearby fertilizer shops - try real data first, then dummy data\n  async findNearbyFertilizerShops(lat: number, lon: number, radius: number = 15000): Promise<FertilizerShop[]> {\n    try {\n      console.log('Searching for real fertilizer shops near:', lat, lon);\n      \n      // First try to get real shops from OpenStreetMap\n      const realShops = await this.searchRealFertilizerShops(lat, lon, radius);\n      \n      // If we found real shops, return them\n      if (realShops.length > 0) {\n        console.log(`Found ${realShops.length} real fertilizer shops`);\n        return realShops.slice(0, 5); // Return exactly 5 shops as requested\n      }\n      \n      // No real shops found - show exactly 5 dummy shops instead of empty list\n      console.log('No real shops found, showing exactly 5 dummy fertilizer shops');\n      return this.generateLocationBasedShops(lat, lon);\n      \n    } catch (error) {\n      console.error('Error finding nearby fertilizer shops:', error);\n      // On error, also show exactly 5 dummy shops instead of empty list\n      return this.generateLocationBasedShops(lat, lon);\n    }\n  }\n\n  // Search for real fertilizer shops using OpenStreetMap Overpass API\n  private async searchRealFertilizerShops(lat: number, lon: number, radius: number): Promise<FertilizerShop[]> {\n    try {\n      // Search for various types of agricultural and fertilizer shops\n      const overpassQuery = `\n        [out:json][timeout:25];\n        (\n          node[\"shop\"=\"agrarian\"](around:${radius},${lat},${lon});\n          node[\"shop\"=\"farm\"](around:${radius},${lat},${lon});\n          node[\"shop\"=\"garden_centre\"](around:${radius},${lat},${lon});\n          node[\"name\"~\"fertilizer\",i](around:${radius},${lat},${lon});\n          node[\"name\"~\"agro\",i](around:${radius},${lat},${lon});\n          node[\"name\"~\"krishi\",i](around:${radius},${lat},${lon});\n          way[\"shop\"=\"agrarian\"](around:${radius},${lat},${lon});\n          way[\"shop\"=\"farm\"](around:${radius},${lat},${lon});\n          way[\"shop\"=\"garden_centre\"](around:${radius},${lat},${lon});\n          way[\"name\"~\"fertilizer\",i](around:${radius},${lat},${lon});\n          way[\"name\"~\"agro\",i](around:${radius},${lat},${lon});\n          way[\"name\"~\"krishi\",i](around:${radius},${lat},${lon});\n        );\n        out center meta;\n      `;\n      \n      const response = await fetch('https://overpass-api.de/api/interpreter', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: `data=${encodeURIComponent(overpassQuery)}`\n      });\n      \n      if (!response.ok) {\n        console.warn('Overpass API request failed:', response.status);\n        return [];\n      }\n      \n      const data = await response.json();\n      \n      if (!data.elements || data.elements.length === 0) {\n        console.log('No real fertilizer shops found in OpenStreetMap data');\n        return [];\n      }\n      \n      // Process the results\n      const shops: FertilizerShop[] = data.elements.map((element: any, index: number) => {\n        const shopLat = element.lat || element.center?.lat || lat;\n        const shopLon = element.lon || element.center?.lon || lon;\n        const distance = this.calculateDistance(lat, lon, shopLat, shopLon);\n        \n        // Get real opening hours from OpenStreetMap data\n        const realOpeningHours = this.parseRealOpeningHours(element.tags?.opening_hours);\n        const openStatus = this.calculateRealOpenStatus(element.tags?.opening_hours);\n        \n        return {\n          id: `real_shop_${element.id || index}`,\n          name: element.tags?.name || `Fertilizer Shop ${index + 1}`,\n          address: this.formatAddress(element.tags, shopLat, shopLon),\n          latitude: shopLat,\n          longitude: shopLon,\n          distance: distance,\n          rating: 3.8 + Math.random() * 1.4, // 3.8-5.2 rating\n          reviews: Math.floor(Math.random() * 200) + 50,\n          phone: this.getPhoneNumber(index),\n          isOpen: openStatus.hasRealHours ? openStatus.isOpen : this.calculateOpenStatus(),\n          openingHours: realOpeningHours.length > 0 ? realOpeningHours : this.generateBusinessHours()\n        };\n      });\n      \n      // Sort by distance and return up to 100 shops\n      return shops\n        .sort((a, b) => a.distance - b.distance)\n        .slice(0, 100);\n        \n    } catch (error) {\n      console.error('Error searching real fertilizer shops:', error);\n      return [];\n    }\n  }\n\n  // Generate location-based dummy shops when real data isn't available\n  private generateLocationBasedShops(lat: number, lon: number): FertilizerShop[] {\n    const baseShops = [\n      {\n        name: 'Kisan Agro Center',\n        address: 'Main Market Road, Agricultural Supply Store',\n        phone: '+919876543210',\n        distance: 1.2,\n        rating: 4.5,\n        reviews: 156\n      },\n      {\n        name: 'Green Valley Fertilizers', \n        address: 'Agricultural Market, Fertilizer Supplier',\n        phone: '+918765432109',\n        distance: 2.3,\n        rating: 4.3,\n        reviews: 203\n      },\n      {\n        name: 'FarmGrow Supplies',\n        address: 'Near Bus Stand, Agricultural Inputs',\n        phone: '+917654321098',\n        distance: 3.1,\n        rating: 4.1,\n        reviews: 89\n      },\n      {\n        name: 'Krishi Upkaran Bhandar',\n        address: 'Civil Lines, Farm Equipment & Fertilizers',\n        phone: '+916543210987',\n        distance: 4.2,\n        rating: 4.4,\n        reviews: 124\n      },\n      {\n        name: 'Modern Agro Store',\n        address: 'Railway Road, Fertilizer & Seed Store',\n        phone: '+915432109876',\n        distance: 4.8,\n        rating: 4.2,\n        reviews: 167\n      }\n    ];\n\n    return baseShops.map((shop, index) => {\n      // Create realistic coordinates near user location\n      const offsetLat = (Math.random() - 0.5) * 0.02; // ~1km radius\n      const offsetLon = (Math.random() - 0.5) * 0.02;\n      \n      return {\n        id: `shop_${index + 1}`,\n        name: shop.name,\n        address: shop.address,\n        latitude: lat + offsetLat,\n        longitude: lon + offsetLon,\n        distance: shop.distance,\n        rating: shop.rating,\n        reviews: shop.reviews,\n        phone: shop.phone,\n        isOpen: this.calculateOpenStatus(),\n        openingHours: this.generateBusinessHours()\n      };\n    });\n  }\n\n  // Format address from OpenStreetMap tags\n  private formatAddress(tags: any, lat: number, lon: number): string {\n    if (tags?.['addr:full']) return tags['addr:full'];\n    \n    const parts = [];\n    if (tags?.['addr:house_number']) parts.push(tags['addr:house_number']);\n    if (tags?.['addr:street']) parts.push(tags['addr:street']);\n    if (tags?.['addr:suburb']) parts.push(tags['addr:suburb']);\n    if (tags?.['addr:city']) parts.push(tags['addr:city']);\n    if (tags?.['addr:state']) parts.push(tags['addr:state']);\n    \n    if (parts.length > 0) {\n      return parts.join(', ');\n    }\n    \n    // Fallback to coordinates-based address\n    return `Agricultural Store, ${lat.toFixed(4)}°N ${lon.toFixed(4)}°E`;\n  }\n\n  // Calculate if shop is currently open\n  private calculateOpenStatus(): boolean {\n    const now = new Date();\n    const hour = now.getHours();\n    const day = now.getDay(); // 0 = Sunday, 6 = Saturday\n    \n    // Most agricultural shops are closed on Sundays\n    if (day === 0) return Math.random() > 0.8;\n    \n    // During business hours (7 AM - 8 PM), most shops are open\n    if (hour >= 7 && hour <= 20) {\n      return Math.random() > 0.2; // 80% chance of being open\n    }\n    \n    // Outside business hours, most shops are closed\n    return Math.random() > 0.9; // 10% chance of being open\n  }\n\n  // Parse real opening hours from OpenStreetMap data\n  private parseRealOpeningHours(openingHours?: string): string[] {\n    if (!openingHours) {\n      return [];\n    }\n    \n    try {\n      // Handle common OpenStreetMap opening_hours formats\n      if (openingHours.includes(';')) {\n        return openingHours.split(';').map(h => h.trim()).filter(h => h.length > 0);\n      }\n      \n      if (openingHours.includes(',')) {\n        return openingHours.split(',').map(h => h.trim()).filter(h => h.length > 0);\n      }\n      \n      // Single line format like \"Mo-Sa 07:00-20:00; Su 09:00-18:00\"\n      const formatted = this.formatOSMOpeningHours(openingHours);\n      return formatted.length > 0 ? formatted : [openingHours];\n      \n    } catch (error) {\n      console.warn('Error parsing opening hours:', openingHours, error);\n      return [openingHours]; // Return as-is if parsing fails\n    }\n  }\n  \n  // Format OSM opening hours to readable format\n  private formatOSMOpeningHours(hours: string): string[] {\n    if (!hours) return [];\n    \n    try {\n      // Convert common OSM formats to readable format\n      let formatted = hours\n        .replace(/Mo-Su/g, 'Daily')\n        .replace(/Mo-Sa/g, 'Mon-Sat')\n        .replace(/Mo-Fr/g, 'Mon-Fri')\n        .replace(/Sa-Su/g, 'Sat-Sun')\n        .replace(/Mo/g, 'Mon')\n        .replace(/Tu/g, 'Tue')\n        .replace(/We/g, 'Wed')\n        .replace(/Th/g, 'Thu')\n        .replace(/Fr/g, 'Fri')\n        .replace(/Sa/g, 'Sat')\n        .replace(/Su/g, 'Sun');\n      \n      // Convert 24-hour format to 12-hour format\n      formatted = formatted.replace(/(\\d{2}):(\\d{2})/g, (match, hour, minute) => {\n        const h = parseInt(hour);\n        const ampm = h >= 12 ? 'PM' : 'AM';\n        const displayHour = h === 0 ? 12 : h > 12 ? h - 12 : h;\n        return `${displayHour}:${minute} ${ampm}`;\n      });\n      \n      // Split by semicolon and clean up\n      const parts = formatted.split(';').map(part => part.trim()).filter(part => part.length > 0);\n      \n      return parts.length > 0 ? parts : [formatted];\n      \n    } catch (error) {\n      return [hours];\n    }\n  }\n  \n  // Calculate real open/close status from OSM opening hours\n  private calculateRealOpenStatus(openingHours?: string): { isOpen: boolean; hasRealHours: boolean } {\n    if (!openingHours) {\n      // Fallback to time-based estimation when no real hours available\n      return {\n        isOpen: this.calculateOpenStatus(),\n        hasRealHours: false\n      };\n    }\n    \n    try {\n      const now = new Date();\n      const currentDay = now.getDay(); // 0 = Sunday, 1 = Monday, etc.\n      const currentHour = now.getHours();\n      const currentMinute = now.getMinutes();\n      const currentTimeMinutes = currentHour * 60 + currentMinute;\n      \n      // Parse basic OSM opening hours patterns\n      const dayNames = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'];\n      const currentDayName = dayNames[currentDay];\n      \n      // Check if shop is generally open today\n      const todayPattern = new RegExp(`${currentDayName}[^;]*?([0-9]{2}:[0-9]{2})-([0-9]{2}:[0-9]{2})`);\n      const allDaysPattern = /(Mo-Su|Mo-Sa|daily)[^;]*?([0-9]{2}:[0-9]{2})-([0-9]{2}:[0-9]{2})/i;\n      \n      let match = openingHours.match(todayPattern);\n      if (!match && (currentDay >= 1 && currentDay <= 6)) { // Mon-Sat\n        match = openingHours.match(allDaysPattern);\n      }\n      \n      if (match) {\n        const openTime = match[match.length - 2]; // Second to last group\n        const closeTime = match[match.length - 1]; // Last group\n        \n        const [openHour, openMin] = openTime.split(':').map(Number);\n        const [closeHour, closeMin] = closeTime.split(':').map(Number);\n        \n        const openTimeMinutes = openHour * 60 + openMin;\n        const closeTimeMinutes = closeHour * 60 + closeMin;\n        \n        const isOpen = currentTimeMinutes >= openTimeMinutes && currentTimeMinutes <= closeTimeMinutes;\n        \n        return {\n          isOpen,\n          hasRealHours: true\n        };\n      }\n      \n      // If can't parse, use fallback but mark as no real hours\n      return {\n        isOpen: this.calculateOpenStatus(),\n        hasRealHours: false\n      };\n      \n    } catch (error) {\n      console.warn('Error calculating open status from:', openingHours, error);\n      return {\n        isOpen: this.calculateOpenStatus(),\n        hasRealHours: false\n      };\n    }\n  }\n  \n  // Generate realistic business hours for fallback only\n  private generateBusinessHours(): string[] {\n    const schedules = [\n      ['Mon-Sat: 7:00 AM - 8:00 PM', 'Sun: 9:00 AM - 6:00 PM'],\n      ['Mon-Sat: 6:30 AM - 7:30 PM', 'Sun: Closed'],\n      ['Mon-Fri: 8:00 AM - 7:00 PM', 'Sat: 8:00 AM - 8:00 PM', 'Sun: 10:00 AM - 5:00 PM'],\n      ['Daily: 7:00 AM - 8:30 PM'],\n      ['Mon-Sat: 7:30 AM - 8:00 PM', 'Sun: 9:00 AM - 7:00 PM']\n    ];\n    \n    return schedules[Math.floor(Math.random() * schedules.length)];\n  }\n\n  // Get shop details including phone number and hours\n  async getShopDetails(placeId: string): Promise<Partial<FertilizerShop>> {\n    try {\n      // Return empty object for consistent interface\n      return {};\n    } catch (error) {\n      console.error('Error fetching shop details:', error);\n      return {};\n    }\n  }\n\n  // Search for specific fertilizer types or agricultural products\n  async searchFertilizerProducts(lat: number, lon: number, productQuery: string): Promise<FertilizerShop[]> {\n    try {\n      // Use real data first, then fallback to dummy\n      const realShops = await this.searchRealFertilizerShops(lat, lon, 15000);\n      if (realShops.length > 0) {\n        return realShops.slice(0, 5);\n      }\n      return this.generateLocationBasedShops(lat, lon);\n    } catch (error) {\n      console.error('Error searching for fertilizer products:', error);\n      return this.generateLocationBasedShops(lat, lon);\n    }\n  }\n}\n\n// Export singleton instance\nexport const placesService = new PlacesService();\nexport default placesService;","size_bytes":15265},"src/lib/realDataService.ts":{"content":"// Real Database Service for KisanMitra App - Client-side wrapper\n// Note: This would typically communicate with a backend API\n// For now, we'll enhance the localStorage approach to simulate real database behavior\n\nexport interface User {\n  id: number;\n  name: string;\n  phone: string;\n  location: string;\n  state: string;\n  avatar?: string;\n  joinedDate: string;\n  createdAt: string;\n}\n\nexport interface Listing {\n  id: number;\n  userId: number;\n  crop: string;\n  quantity: string;\n  pricePerKg: number;\n  market: string;\n  transport: string;\n  views: number;\n  inquiries: number;\n  totalPrice: number;\n  status: 'active' | 'sold' | 'expired';\n  postedDate: string;\n  soldDate?: string;\n  soldPrice?: number;\n  buyer?: string;\n  createdAt: string;\n}\n\nexport interface Diagnosis {\n  id: number;\n  userId: number;\n  cropName: string;\n  diagnosis: string;\n  confidence: number;\n  treatment: string;\n  date: string;\n  createdAt: string;\n}\n\nexport interface AdvisoryRecord {\n  id: number;\n  userId: number;\n  title: string;\n  content: string;\n  category: string;\n  savedDate: string;\n  createdAt: string;\n}\n\nexport interface UserStats {\n  totalEarnings: number;\n  activeListings: number;\n  successfulSales: number;\n  totalViews: number;\n  avgRating: number;\n  diagnosisCount: number;\n  advisorySaved: number;\n  level: string;\n  joinedDate: string;\n}\n\nclass RealDataService {\n  private currentUserId: number | null = null;\n  private storagePrefix = 'kisanmitra_v2_';\n  \n  constructor() {\n    this.initializeUser();\n  }\n\n  private initializeUser() {\n    const savedUserId = localStorage.getItem('kisanmitra_user_id');\n    if (savedUserId) {\n      this.currentUserId = parseInt(savedUserId, 10);\n    }\n  }\n\n  private generateId(): number {\n    return Date.now() + Math.floor(Math.random() * 1000);\n  }\n\n  async getCurrentUser(): Promise<User | null> {\n    if (!this.currentUserId) return null;\n    \n    const users = JSON.parse(localStorage.getItem(`${this.storagePrefix}users`) || '[]');\n    return users.find((u: User) => u.id === this.currentUserId) || null;\n  }\n\n  async loginOrCreateUser(phone: string, name: string, location: string, state: string): Promise<User> {\n    const users = JSON.parse(localStorage.getItem(`${this.storagePrefix}users`) || '[]');\n    \n    // Try to find existing user\n    let user = users.find((u: User) => u.phone === phone);\n    \n    if (!user) {\n      // Create new user\n      user = {\n        id: this.generateId(),\n        name,\n        phone,\n        location,\n        state,\n        joinedDate: new Date().toISOString(),\n        createdAt: new Date().toISOString()\n      };\n      users.push(user);\n      localStorage.setItem(`${this.storagePrefix}users`, JSON.stringify(users));\n    }\n\n    this.currentUserId = user.id;\n    localStorage.setItem('kisanmitra_user_id', user.id.toString());\n    localStorage.setItem('kisanmitra_user', JSON.stringify(user));\n\n    return user;\n  }\n\n  async getUserListings(): Promise<Listing[]> {\n    if (!this.currentUserId) return [];\n    \n    const listings = JSON.parse(localStorage.getItem(`${this.storagePrefix}listings`) || '[]');\n    return listings.filter((l: Listing) => l.userId === this.currentUserId);\n  }\n\n  async createListing(listingData: any): Promise<Listing | null> {\n    if (!this.currentUserId) return null;\n\n    const listings = JSON.parse(localStorage.getItem(`${this.storagePrefix}listings`) || '[]');\n    \n    const listing: Listing = {\n      id: this.generateId(),\n      userId: this.currentUserId,\n      crop: listingData.crop,\n      quantity: listingData.quantity,\n      pricePerKg: listingData.pricePerKg,\n      market: listingData.market,\n      transport: listingData.transport,\n      totalPrice: listingData.totalPrice,\n      postedDate: listingData.postedDate,\n      status: 'active',\n      views: 0,\n      inquiries: 0,\n      createdAt: new Date().toISOString()\n    };\n\n    listings.push(listing);\n    localStorage.setItem(`${this.storagePrefix}listings`, JSON.stringify(listings));\n    \n    await this.trackUserActivity('listing_created', { listingId: listing.id, crop: listing.crop });\n    return listing;\n  }\n\n  async markListingAsSold(listingId: number, soldPrice: number, buyer: string): Promise<Listing | null> {\n    const listings = JSON.parse(localStorage.getItem(`${this.storagePrefix}listings`) || '[]');\n    const listing = listings.find((l: Listing) => l.id === listingId);\n    \n    if (listing) {\n      listing.status = 'sold';\n      listing.soldDate = new Date().toISOString();\n      listing.soldPrice = soldPrice;\n      listing.buyer = buyer;\n      \n      localStorage.setItem(`${this.storagePrefix}listings`, JSON.stringify(listings));\n      await this.trackUserActivity('listing_sold', { listingId, soldPrice, buyer });\n    }\n    \n    return listing;\n  }\n\n  async getUserDiagnoses(): Promise<Diagnosis[]> {\n    if (!this.currentUserId) return [];\n    \n    const diagnoses = JSON.parse(localStorage.getItem(`${this.storagePrefix}diagnoses`) || '[]');\n    return diagnoses.filter((d: Diagnosis) => d.userId === this.currentUserId);\n  }\n\n  async createDiagnosis(diagnosisData: any): Promise<Diagnosis | null> {\n    if (!this.currentUserId) return null;\n\n    const diagnoses = JSON.parse(localStorage.getItem(`${this.storagePrefix}diagnoses`) || '[]');\n    \n    const diagnosis: Diagnosis = {\n      id: this.generateId(),\n      userId: this.currentUserId,\n      cropName: diagnosisData.cropName,\n      diagnosis: diagnosisData.diagnosis,\n      confidence: diagnosisData.confidence,\n      treatment: diagnosisData.treatment,\n      date: new Date().toISOString(),\n      createdAt: new Date().toISOString()\n    };\n\n    diagnoses.push(diagnosis);\n    localStorage.setItem(`${this.storagePrefix}diagnoses`, JSON.stringify(diagnoses));\n    \n    await this.trackUserActivity('diagnosis_created', { diagnosisId: diagnosis.id, crop: diagnosis.cropName });\n    return diagnosis;\n  }\n\n  async getUserAdvisories(): Promise<AdvisoryRecord[]> {\n    if (!this.currentUserId) return [];\n    \n    const advisories = JSON.parse(localStorage.getItem(`${this.storagePrefix}advisories`) || '[]');\n    return advisories.filter((a: AdvisoryRecord) => a.userId === this.currentUserId);\n  }\n\n  async saveAdvisory(advisoryData: any): Promise<AdvisoryRecord | null> {\n    if (!this.currentUserId) return null;\n\n    const advisories = JSON.parse(localStorage.getItem(`${this.storagePrefix}advisories`) || '[]');\n    \n    const advisory: AdvisoryRecord = {\n      id: this.generateId(),\n      userId: this.currentUserId,\n      title: advisoryData.title,\n      content: advisoryData.content,\n      category: advisoryData.category,\n      savedDate: new Date().toISOString(),\n      createdAt: new Date().toISOString()\n    };\n\n    advisories.push(advisory);\n    localStorage.setItem(`${this.storagePrefix}advisories`, JSON.stringify(advisories));\n    \n    await this.trackUserActivity('advisory_saved', { advisoryId: advisory.id, title: advisory.title });\n    return advisory;\n  }\n\n  async trackUserActivity(action: string, data: any): Promise<void> {\n    if (!this.currentUserId) return;\n\n    const activities = JSON.parse(localStorage.getItem(`${this.storagePrefix}activities`) || '[]');\n    \n    const activity = {\n      id: this.generateId(),\n      userId: this.currentUserId,\n      action,\n      data,\n      timestamp: new Date().toISOString()\n    };\n\n    activities.push(activity);\n    \n    // Keep only last 100 activities\n    if (activities.length > 100) {\n      activities.splice(0, activities.length - 100);\n    }\n    \n    localStorage.setItem(`${this.storagePrefix}activities`, JSON.stringify(activities));\n  }\n\n  async calculateUserStats(): Promise<UserStats> {\n    if (!this.currentUserId) {\n      return {\n        totalEarnings: 0,\n        activeListings: 0,\n        successfulSales: 0,\n        totalViews: 0,\n        avgRating: 4.0,\n        diagnosisCount: 0,\n        advisorySaved: 0,\n        level: 'New Farmer',\n        joinedDate: new Date().toISOString()\n      };\n    }\n\n    const [listings, diagnoses, advisories, user] = await Promise.all([\n      this.getUserListings(),\n      this.getUserDiagnoses(),\n      this.getUserAdvisories(),\n      this.getCurrentUser()\n    ]);\n\n    const activeListings = listings.filter(l => l.status === 'active');\n    const soldListings = listings.filter(l => l.status === 'sold');\n    \n    const totalEarnings = soldListings.reduce((sum, listing) => sum + (listing.soldPrice || 0), 0);\n    const totalViews = listings.reduce((sum, listing) => sum + listing.views, 0);\n    const successfulSales = soldListings.length;\n\n    // Calculate level based on activity\n    let level = 'New Farmer';\n    if (successfulSales >= 50 && totalEarnings >= 100000) {\n      level = 'Expert Farmer';\n    } else if (successfulSales >= 20 && totalEarnings >= 50000) {\n      level = 'Advanced Farmer';\n    } else if (successfulSales >= 5 && totalEarnings >= 10000) {\n      level = 'Experienced Farmer';\n    } else if (successfulSales >= 1) {\n      level = 'Active Farmer';\n    }\n\n    // Calculate average rating\n    let avgRating = 4.0;\n    if (successfulSales > 10) avgRating = 4.8;\n    else if (successfulSales > 5) avgRating = 4.5;\n    else if (successfulSales > 0) avgRating = 4.2;\n\n    return {\n      totalEarnings,\n      activeListings: activeListings.length,\n      successfulSales,\n      totalViews,\n      avgRating,\n      diagnosisCount: diagnoses.length,\n      advisorySaved: advisories.length,\n      level,\n      joinedDate: user?.joinedDate || new Date().toISOString()\n    };\n  }\n\n  async addSampleData(): Promise<void> {\n    if (!this.currentUserId) throw new Error('User not logged in');\n\n    // Create sample listings\n    const sampleListings = [\n      {\n        crop: '🍅 Tomato',\n        quantity: '100 kg',\n        pricePerKg: 25,\n        market: 'Azadpur Mandi',\n        transport: 'Yes',\n        totalPrice: 2500,\n        postedDate: '2 days ago',\n      },\n      {\n        crop: '🌾 Wheat',\n        quantity: '50 kg',\n        pricePerKg: 22,\n        market: 'Ghazipur Mandi',\n        transport: 'No',\n        totalPrice: 1100,\n        postedDate: '1 day ago',\n      }\n    ];\n\n    for (const listingData of sampleListings) {\n      const listing = await this.createListing(listingData);\n      if (listing && listingData.crop.includes('Tomato')) {\n        // Mark tomato as sold for demo\n        await this.markListingAsSold(listing.id, 2500, 'Delhi Wholesaler');\n      }\n    }\n\n    // Create sample diagnosis\n    await this.createDiagnosis({\n      cropName: 'Tomato',\n      diagnosis: 'Early Blight',\n      confidence: 85,\n      treatment: 'Apply copper fungicide spray',\n    });\n\n    // Create sample advisory\n    await this.saveAdvisory({\n      title: 'Optimal Irrigation for Tomatoes',\n      content: 'Water tomatoes deeply but less frequently to encourage deep root growth.',\n      category: 'Irrigation',\n    });\n  }\n\n  logout(): void {\n    this.currentUserId = null;\n    localStorage.removeItem('kisanmitra_user_id');\n    localStorage.removeItem('kisanmitra_user');\n    localStorage.removeItem('kisanmitra_auth_token');\n    localStorage.removeItem('kisanmitra_notifications');\n  }\n}\n\nexport const realDataService = new RealDataService();\nexport default realDataService;","size_bytes":11198},"src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"src/lib/weather.ts":{"content":"// Weather service for fetching real weather data from OpenWeatherMap API\n\nexport interface WeatherData {\n  location: string;\n  temperature: number;\n  description: string;\n  humidity: number;\n  windSpeed: number;\n  icon: string;\n  feelsLike: number;\n  pressure: number;\n  visibility: number;\n  uvIndex: number;\n  sunrise: number;\n  sunset: number;\n}\n\nexport interface DailyForecast {\n  date: string;\n  dayName: string;\n  temperature: {\n    max: number;\n    min: number;\n  };\n  description: string;\n  icon: string;\n  humidity: number;\n  windSpeed: number;\n  precipitation: number;\n}\n\nexport interface WeatherAlert {\n  title: string;\n  description: string;\n  severity: 'minor' | 'moderate' | 'severe' | 'extreme';\n  type: string;\n}\n\nclass WeatherService {\n  private apiKey: string;\n  private baseUrl = 'https://api.openweathermap.org/data/2.5';\n\n  constructor() {\n    // Get API key from environment variables\n    this.apiKey = import.meta.env.VITE_OPENWEATHERMAP_API_KEY || process.env.OPENWEATHERMAP_API_KEY || '';\n    \n    if (!this.apiKey) {\n      console.warn('OpenWeatherMap API key not found. Weather functionality will not work properly.');\n    }\n  }\n\n  // Get API key - will be initialized in constructor\n  private getApiKey(): string {\n    if (!this.apiKey) {\n      throw new Error('OpenWeatherMap API key not configured');\n    }\n    return this.apiKey;\n  }\n\n  // Get current weather by coordinates\n  async getCurrentWeather(lat: number, lon: number): Promise<WeatherData> {\n    try {\n      const apiKey = this.getApiKey();\n      const response = await fetch(\n        `${this.baseUrl}/weather?lat=${lat}&lon=${lon}&appid=${apiKey}&units=metric`\n      );\n      \n      if (!response.ok) {\n        throw new Error(`Weather API error: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      \n      return {\n        location: `${data.name}, ${data.sys.country}`,\n        temperature: Math.round(data.main.temp),\n        description: data.weather[0].description,\n        humidity: data.main.humidity,\n        windSpeed: data.wind.speed,\n        icon: data.weather[0].icon,\n        feelsLike: Math.round(data.main.feels_like),\n        pressure: data.main.pressure,\n        visibility: data.visibility / 1000, // Convert to km\n        uvIndex: 0, // Will be fetched from UV API if needed\n        sunrise: data.sys.sunrise,\n        sunset: data.sys.sunset\n      };\n    } catch (error) {\n      console.error('Error fetching current weather:', error);\n      throw error;\n    }\n  }\n\n  // Get 7-day forecast\n  async getForecast(lat: number, lon: number): Promise<DailyForecast[]> {\n    try {\n      const apiKey = this.getApiKey();\n      const response = await fetch(\n        `${this.baseUrl}/forecast?lat=${lat}&lon=${lon}&appid=${apiKey}&units=metric`\n      );\n      \n      if (!response.ok) {\n        throw new Error(`Forecast API error: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      \n      // Group by day and take one forecast per day\n      const dailyForecasts: DailyForecast[] = [];\n      const processedDates = new Set();\n      \n      data.list.forEach((item: any) => {\n        const date = new Date(item.dt * 1000);\n        const dateString = date.toISOString().split('T')[0];\n        \n        if (!processedDates.has(dateString) && dailyForecasts.length < 7) {\n          const dayName = date.toLocaleDateString('en-US', { weekday: 'short' });\n          \n          dailyForecasts.push({\n            date: dateString,\n            dayName,\n            temperature: {\n              max: Math.round(item.main.temp_max),\n              min: Math.round(item.main.temp_min)\n            },\n            description: item.weather[0].description,\n            icon: item.weather[0].icon,\n            humidity: item.main.humidity,\n            windSpeed: item.wind.speed,\n            precipitation: item.rain ? item.rain['3h'] || 0 : 0\n          });\n          \n          processedDates.add(dateString);\n        }\n      });\n      \n      return dailyForecasts;\n    } catch (error) {\n      console.error('Error fetching forecast:', error);\n      throw error;\n    }\n  }\n\n  // Get weather by city name\n  async getWeatherByCity(city: string): Promise<WeatherData> {\n    try {\n      const apiKey = this.getApiKey();\n      const response = await fetch(\n        `${this.baseUrl}/weather?q=${encodeURIComponent(city)}&appid=${apiKey}&units=metric`\n      );\n      \n      if (!response.ok) {\n        throw new Error(`Weather API error: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      \n      return {\n        location: `${data.name}, ${data.sys.country}`,\n        temperature: Math.round(data.main.temp),\n        description: data.weather[0].description,\n        humidity: data.main.humidity,\n        windSpeed: data.wind.speed,\n        icon: data.weather[0].icon,\n        feelsLike: Math.round(data.main.feels_like),\n        pressure: data.main.pressure,\n        visibility: data.visibility / 1000,\n        uvIndex: 0,\n        sunrise: data.sys.sunrise,\n        sunset: data.sys.sunset\n      };\n    } catch (error) {\n      console.error('Error fetching weather by city:', error);\n      throw error;\n    }\n  }\n\n  // Get current location using browser's geolocation API\n  async getCurrentLocation(): Promise<{ lat: number; lon: number }> {\n    return new Promise((resolve, reject) => {\n      if (!navigator.geolocation) {\n        reject(new Error('Geolocation not supported'));\n        return;\n      }\n\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          resolve({\n            lat: position.coords.latitude,\n            lon: position.coords.longitude\n          });\n        },\n        (error) => {\n          reject(error);\n        },\n        {\n          enableHighAccuracy: true,\n          timeout: 10000,\n          maximumAge: 300000 // 5 minutes\n        }\n      );\n    });\n  }\n\n  // Get weather icon URL\n  getWeatherIconUrl(icon: string): string {\n    return `https://openweathermap.org/img/wn/${icon}@2x.png`;\n  }\n\n  // Get weather alerts (if available)\n  async getWeatherAlerts(lat: number, lon: number): Promise<WeatherAlert[]> {\n    try {\n      const apiKey = this.getApiKey();\n      // Using One Call API for alerts (requires different endpoint)\n      const response = await fetch(\n        `https://api.openweathermap.org/data/3.0/onecall?lat=${lat}&lon=${lon}&appid=${apiKey}&units=metric`\n      );\n      \n      if (!response.ok) {\n        return []; // No alerts or API issue\n      }\n      \n      const data = await response.json();\n      \n      if (!data.alerts) {\n        return [];\n      }\n      \n      return data.alerts.map((alert: any) => ({\n        title: alert.event,\n        description: alert.description,\n        severity: alert.severity || 'moderate',\n        type: alert.tags?.[0] || 'general'\n      }));\n    } catch (error) {\n      console.error('Error fetching weather alerts:', error);\n      return [];\n    }\n  }\n\n  // Generate farming advice based on weather\n  generateFarmingAdvice(weather: WeatherData): string {\n    const { temperature, humidity, description } = weather;\n    \n    if (description.includes('rain')) {\n      return 'Rain expected - avoid spraying chemicals and consider indoor farm work.';\n    }\n    \n    if (temperature > 35) {\n      return 'High temperature - increase irrigation and provide shade for crops.';\n    }\n    \n    if (temperature < 5) {\n      return 'Cold weather - protect sensitive crops and check livestock shelter.';\n    }\n    \n    if (humidity > 80) {\n      return 'High humidity - monitor crops for fungal diseases and improve ventilation.';\n    }\n    \n    if (humidity < 30) {\n      return 'Low humidity - increase watering frequency and consider mulching.';\n    }\n    \n    return 'Good weather conditions for farming activities. Plan your field work accordingly.';\n  }\n}\n\nexport const weatherService = new WeatherService();","size_bytes":7897},"src/pages/Advisory.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { \n  BookOpen,\n  Bookmark,\n  ChevronRight,\n  Calendar,\n  CheckCircle,\n  Clock,\n  Droplets,\n  Beaker,\n  Leaf,\n  Star,\n  TrendingUp,\n  Package,\n  ArrowLeft,\n  Cloud,\n  Sun,\n  CloudRain,\n  Thermometer\n} from 'lucide-react';\nimport { useNavigate } from 'react-router-dom';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\n\nconst Advisory = () => {\n  const navigate = useNavigate();\n  const [savedGuidance, setSavedGuidance] = useState<string[]>([]);\n  const [savedCultivationGuides, setSavedCultivationGuides] = useState<string[]>([]);\n  const [appliedGuidance, setAppliedGuidance] = useState<string[]>(() => {\n    const applied = localStorage.getItem('kisanmitra_applied_guidance');\n    return applied ? JSON.parse(applied) : [];\n  });\n\n  // Load saved guides\n  useEffect(() => {\n    const savedFertilizer = localStorage.getItem('kisanmitra_saved_fertilizer_guides');\n    setSavedGuidance(savedFertilizer ? JSON.parse(savedFertilizer) : []);\n    \n    const savedCultivation = localStorage.getItem('kisanmitra_saved_cultivation_guides');\n    setSavedCultivationGuides(savedCultivation ? JSON.parse(savedCultivation) : []);\n  }, []);\n\n  const cropData = {\n    'tomato': {\n      name: 'Tomato',\n      image: '🍅',\n      season: 'Kharif/Rabi',\n      fertilizers: [\n        { name: 'NPK (10:26:26)', quantity: '200 kg/acre', timing: 'At planting' },\n        { name: 'Urea (46% N)', quantity: '50 kg/acre', timing: '20 days after transplant' },\n        { name: 'Calcium Nitrate', quantity: '25 kg/acre', timing: 'Flowering stage' }\n      ]\n    },\n    'wheat': {\n      name: 'Wheat',\n      image: '🌾',\n      season: 'Rabi',\n      fertilizers: [\n        { name: 'DAP (18:46:0)', quantity: '150 kg/acre', timing: 'At sowing' },\n        { name: 'Urea (46% N)', quantity: '65 kg/acre', timing: '1st irrigation (21 days)' },\n        { name: 'Urea (46% N)', quantity: '65 kg/acre', timing: '2nd irrigation (45 days)' }\n      ]\n    },\n    'rice': {\n      name: 'Rice',\n      image: '🌾',\n      season: 'Kharif',\n      fertilizers: [\n        { name: 'NPK (12:32:16)', quantity: '125 kg/acre', timing: 'Before transplanting' },\n        { name: 'Urea (46% N)', quantity: '45 kg/acre', timing: '15 days after transplant' },\n        { name: 'Urea (46% N)', quantity: '45 kg/acre', timing: 'At panicle initiation' }\n      ]\n    },\n    'cotton': {\n      name: 'Cotton',\n      image: '☁️',\n      season: 'Kharif',\n      fertilizers: [\n        { name: 'NPK (17:17:17)', quantity: '100 kg/acre', timing: 'At sowing' },\n        { name: 'Urea (46% N)', quantity: '60 kg/acre', timing: '30-35 days after sowing' },\n        { name: 'MOP (60% K2O)', quantity: '35 kg/acre', timing: 'At flowering' }\n      ]\n    },\n    'maize': {\n      name: 'Maize',\n      image: '🌽',\n      season: 'Kharif/Rabi',\n      fertilizers: [\n        { name: 'NPK (12:32:16)', quantity: '125 kg/acre', timing: 'At sowing' },\n        { name: 'Urea (46% N)', quantity: '65 kg/acre', timing: '25-30 days after sowing' },\n        { name: 'Urea (46% N)', quantity: '65 kg/acre', timing: 'Pre-tasseling stage' }\n      ]\n    }\n  };\n\n  const toggleAppliedStatus = (cropId: string) => {\n    const updatedApplied = appliedGuidance.includes(cropId)\n      ? appliedGuidance.filter(id => id !== cropId)\n      : [...appliedGuidance, cropId];\n    \n    setAppliedGuidance(updatedApplied);\n    localStorage.setItem('kisanmitra_applied_guidance', JSON.stringify(updatedApplied));\n  };\n\n  const savedCrops = savedGuidance.map(id => ({\n    id,\n    ...cropData[id as keyof typeof cropData]\n  })).filter(crop => crop.name); // Filter out any invalid entries\n\n  const cultivationGuideData = {\n    tomato: { name: 'Tomato', image: '🍅', summary: 'Variety selection + seed treatment; drip irrigation best practices' },\n    wheat: { name: 'Wheat', image: '🌾', summary: 'Six-stage irrigation; fertilizer application timing' },\n    maize: { name: 'Maize', image: '🌽', summary: 'Land preparation + raised beds; trio fertilizer schedule' }\n  };\n\n  const savedCultivationCrops = savedCultivationGuides.map(id => ({\n    id,\n    ...cultivationGuideData[id as keyof typeof cultivationGuideData]\n  })).filter(crop => crop.name);\n\n  const removeCultivationGuide = (guideId: string) => {\n    const updated = savedCultivationGuides.filter(id => id !== guideId);\n    setSavedCultivationGuides(updated);\n    localStorage.setItem('kisanmitra_saved_cultivation_guides', JSON.stringify(updated));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-blue-50\">\n      {/* Header */}\n      <div className=\"bg-gradient-to-r from-green-600 to-emerald-600 px-4 py-4 shadow-lg\">\n        <div className=\"flex items-center justify-between\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => navigate('/home')}\n            className=\"text-white hover:bg-white/20 rounded-full p-3\"\n          >\n            <ArrowLeft className=\"w-5 h-5\" />\n          </Button>\n          \n          <h1 className=\"text-xl font-bold text-white flex items-center\">\n            <BookOpen className=\"w-6 h-6 mr-2\" />\n            Advisory\n          </h1>\n          \n          <div className=\"w-12\" />\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"px-6 py-8 space-y-8\">\n        {/* Weather Report Card */}\n        <Card \n          className=\"bg-white rounded-3xl shadow-lg border border-gray-100 overflow-hidden cursor-pointer hover:shadow-xl transition-shadow duration-200\"\n          onClick={() => navigate('/weather')}\n        >\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"p-3 bg-sky-100 rounded-xl\">\n                <Sun className=\"w-6 h-6 text-sky-600\" />\n              </div>\n              <div className=\"flex-1\">\n                <h3 className=\"font-bold text-gray-900 text-lg\">Weather Report</h3>\n                <p className=\"text-gray-500 text-sm\">7-day forecast and farming advice</p>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"text-xs bg-sky-100 text-sky-700 px-2 py-1 rounded-full font-medium flex items-center space-x-1\">\n                  <Thermometer className=\"w-3 h-3\" />\n                  <span>Live</span>\n                </div>\n                <ChevronRight className=\"w-5 h-5 text-gray-400\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Saved Cultivation Guides Card */}\n        <Card \n          className=\"bg-white rounded-3xl shadow-lg border border-gray-100 overflow-hidden cursor-pointer hover:shadow-xl transition-shadow duration-200\"\n          onClick={() => navigate('/my-saved-cultivation-guides')}\n        >\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"p-3 bg-emerald-100 rounded-xl\">\n                <BookOpen className=\"w-6 h-6 text-emerald-600\" />\n              </div>\n              <div className=\"flex-1\">\n                <h3 className=\"font-bold text-gray-900 text-lg\">Saved Cultivation Guides</h3>\n                <p className=\"text-gray-500 text-sm\">\n                  {savedCultivationCrops.length > 0 \n                    ? `${savedCultivationCrops.length} saved guide${savedCultivationCrops.length !== 1 ? 's' : ''} • View all saved guides`\n                    : 'Save cultivation guides to see them here'\n                  }\n                </p>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                {savedCultivationCrops.length > 0 && (\n                  <div className=\"text-xs bg-emerald-100 text-emerald-700 px-2 py-1 rounded-full font-medium\">\n                    {savedCultivationCrops.length}\n                  </div>\n                )}\n                <ChevronRight className=\"w-5 h-5 text-gray-400\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* My Fertilizer Guidance Card - Always clickable like Market Prices */}\n        <Card \n          className=\"bg-white rounded-3xl shadow-lg border border-gray-100 overflow-hidden cursor-pointer hover:shadow-xl transition-shadow duration-200\"\n          onClick={() => navigate('/my-fertilizer-guidance')}\n        >\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"p-3 bg-green-100 rounded-xl\">\n                <Beaker className=\"w-6 h-6 text-green-600\" />\n              </div>\n              <div className=\"flex-1\">\n                <h3 className=\"font-bold text-gray-900 text-lg\">My Fertilizer Guidance</h3>\n                <p className=\"text-gray-500 text-sm\">\n                  {savedCrops.length > 0 \n                    ? `${savedCrops.length} saved crop${savedCrops.length !== 1 ? 's' : ''} • ${appliedGuidance.length} applied`\n                    : 'Save fertilizer guidance to see them here'\n                  }\n                </p>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                {savedCrops.length > 0 && (\n                  <div className=\"text-xs bg-green-100 text-green-700 px-2 py-1 rounded-full font-medium\">\n                    {savedCrops.length}\n                  </div>\n                )}\n                <ChevronRight className=\"w-5 h-5 text-gray-400\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Market Prices Card */}\n        <Card \n          className=\"bg-white rounded-3xl shadow-lg border border-gray-100 overflow-hidden cursor-pointer hover:shadow-xl transition-shadow duration-200\"\n          onClick={() => navigate('/market-prices')}\n        >\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"p-3 bg-blue-100 rounded-xl\">\n                <TrendingUp className=\"w-6 h-6 text-blue-600\" />\n              </div>\n              <div className=\"flex-1\">\n                <h3 className=\"font-bold text-gray-900 text-lg\">Market Prices</h3>\n                <p className=\"text-gray-500 text-sm\">Today's mandi rates and trends</p>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"text-xs bg-green-100 text-green-700 px-2 py-1 rounded-full font-medium\">\n                  Live\n                </div>\n                <ChevronRight className=\"w-5 h-5 text-gray-400\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Sell Crops Card */}\n        <Card \n          className=\"bg-white rounded-3xl shadow-lg border border-gray-100 overflow-hidden cursor-pointer hover:shadow-xl transition-shadow duration-200\"\n          onClick={() => navigate('/sell')}\n        >\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"p-3 bg-green-100 rounded-xl\">\n                <Package className=\"w-6 h-6 text-green-600\" />\n              </div>\n              <div className=\"flex-1\">\n                <h3 className=\"font-bold text-gray-900 text-lg\">Sell Crops</h3>\n                <p className=\"text-gray-500 text-sm\">List your produce for sale</p>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"text-xs bg-orange-100 text-orange-700 px-2 py-1 rounded-full font-medium\">\n                  Sell Now\n                </div>\n                <ChevronRight className=\"w-5 h-5 text-gray-400\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n      </div>\n    </div>\n  );\n};\n\nexport default Advisory;","size_bytes":11833},"src/pages/AnalyzePlant.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { \n  ArrowLeft, \n  Brain, \n  CheckCircle,\n  Sparkles,\n  Target,\n  Zap,\n  Eye,\n  Scan\n} from 'lucide-react';\nimport { Progress } from '@/components/ui/progress';\n\nconst AnalyzePlant = () => {\n  const navigate = useNavigate();\n  const [analysisProgress, setAnalysisProgress] = useState(0);\n  const [currentStage, setCurrentStage] = useState(0);\n  const [plantImage, setPlantImage] = useState<string | null>(null);\n\n  const analysisStages = [\n    { name: 'Scanning Image', icon: Scan, progress: 20 },\n    { name: 'Detecting Plant Features', icon: Eye, progress: 40 },\n    { name: 'Identifying Patterns', icon: Target, progress: 60 },\n    { name: 'Analyzing Health Issues', icon: Brain, progress: 80 },\n    { name: 'Generating Report', icon: Zap, progress: 100 }\n  ];\n\n  useEffect(() => {\n    // Get the captured image\n    const image = localStorage.getItem('plant_image');\n    setPlantImage(image);\n\n    if (!image) {\n      navigate('/diagnose/capture');\n      return;\n    }\n\n    const analyzeImage = async () => {\n      try {\n        // Animate through stages while making API call\n        let progress = 0;\n        let stageIndex = 0;\n        \n        const interval = setInterval(() => {\n          progress += Math.random() * 2 + 0.5; // Slower progress for real API call\n          \n          if (progress >= analysisStages[stageIndex]?.progress) {\n            setCurrentStage(stageIndex + 1);\n            stageIndex++;\n          }\n          \n          setAnalysisProgress(Math.min(progress, 85)); // Stop at 85% until API responds\n        }, 150);\n\n        // Call the plant diagnosis API using Vite proxy\n        console.log('Calling API at: /api/diagnose');\n        const response = await fetch('/api/diagnose', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          mode: 'cors',\n          body: JSON.stringify({\n            base64_image: image\n          })\n        });\n\n        // Check if response is empty or malformed\n        let data;\n        const responseText = await response.text();\n        \n        try {\n          data = JSON.parse(responseText);\n        } catch (parseError) {\n          console.error('Failed to parse response:', responseText);\n          throw new Error('Invalid response from server');\n        }\n        \n        // Clear the interval and complete progress\n        clearInterval(interval);\n        setAnalysisProgress(100);\n        setCurrentStage(analysisStages.length);\n\n        if (data.success && data.result) {\n          // Extract disease information from API response\n          const disease = data.result.disease || 'Unknown Disease';\n          const confidence = data.result.confidence || 0;\n          \n          // Display disease name with health status\n          const isHealthy = data.result.is_healthy || disease === 'Healthy Plant';\n          const status = data.result.status || (isHealthy ? 'healthy' : 'not_healthy');\n          \n          // Better mapping based on disease name\n          let affectedArea = 'Plant tissue';\n          if (disease.toLowerCase().includes('leaf') || \n              disease.toLowerCase().includes('blight') ||\n              disease.toLowerCase().includes('spot')) {\n            affectedArea = 'Leaves and stems';\n          } else if (disease.toLowerCase().includes('fruit') ||\n                     disease.toLowerCase().includes('berry')) {\n            affectedArea = 'Fruits';\n          } else if (disease.toLowerCase().includes('root') ||\n                     disease.toLowerCase().includes('rot')) {\n            affectedArea = 'Roots and base';\n          } else if (isHealthy) {\n            affectedArea = 'No issues detected';\n          }\n          \n          const results = {\n            disease: disease, // Will show actual disease name\n            confidence: 100, // Always 100% as requested\n            affectedArea: affectedArea,\n            stage: isHealthy ? 'Plant is healthy' : 'Needs attention',\n            severity: isHealthy ? 'low' : 'medium',\n            status: status,\n            isHealthy: isHealthy,\n            detectedDate: new Date().toISOString(),\n            allPredictions: data.result.all_predictions || []\n          };\n          \n          localStorage.setItem('diagnosis_results', JSON.stringify(results));\n          \n          setTimeout(() => {\n            navigate('/diagnose/results');\n          }, 1000);\n        } else {\n          // Handle API error\n          clearInterval(interval);\n          console.error('Analysis failed:', data.error);\n          \n          // Store error result with more specific error handling\n          const results = {\n            disease: 'Analysis Failed',\n            confidence: 0,\n            affectedArea: 'Unable to determine',\n            stage: 'Unknown', \n            severity: 'low',\n            detectedDate: new Date().toISOString(),\n            error: data.error || 'Unable to connect to AI service'\n          };\n          localStorage.setItem('diagnosis_results', JSON.stringify(results));\n          navigate('/diagnose/results');\n        }\n      } catch (error) {\n        console.error('Network error:', error);\n        \n        // Handle network error - provide helpful error message\n        const results = {\n          disease: 'Connection Failed',\n          confidence: 0,\n          affectedArea: 'Unable to determine',\n          stage: 'Analysis incomplete',\n          severity: 'low',\n          detectedDate: new Date().toISOString(),\n          error: 'Network connection failed. Please check your internet connection and try again.'\n        };\n        localStorage.setItem('diagnosis_results', JSON.stringify(results));\n        \n        setAnalysisProgress(100);\n        setCurrentStage(analysisStages.length);\n        \n        setTimeout(() => {\n          navigate('/diagnose/results');\n        }, 1000);\n      }\n    };\n\n    analyzeImage();\n  }, [navigate]);\n\n  return (\n    <div className=\"mobile-container\">\n      {/* Header */}\n      <div className=\"mobile-header bg-agri-cream\">\n        <div className=\"flex items-center space-x-3\">\n          <button \n            onClick={() => navigate('/diagnose')}\n            className=\"p-2 hover:bg-agri-light rounded-full transition-colors\"\n          >\n            <ArrowLeft className=\"w-6 h-6 text-agri-accent\" />\n          </button>\n          <h1 className=\"text-xl font-bold text-agri-accent\">AI Analysis</h1>\n        </div>\n      </div>\n\n      <div className=\"mobile-content flex flex-col items-center justify-center min-h-[60vh] space-y-8 pt-4\">\n        {/* Image Preview with Analysis Effect */}\n        <div className=\"relative\">\n          <div className=\"w-48 h-36 bg-gray-100 rounded-2xl overflow-hidden shadow-medium\">\n            {plantImage ? (\n              <img \n                src={plantImage} \n                alt=\"Plant being analyzed\" \n                className=\"w-full h-full object-cover\"\n              />\n            ) : (\n              <div className=\"w-full h-full bg-gradient-to-br from-green-100 to-green-200 flex items-center justify-center\">\n                <Sparkles className=\"w-12 h-12 text-agri-primary\" />\n              </div>\n            )}\n          </div>\n          \n          {/* Scanning Animation Overlay */}\n          <div className=\"absolute inset-0 pointer-events-none\">\n            <div className=\"absolute inset-2 border-2 border-agri-primary/30 rounded-xl\" />\n            <div \n              className=\"absolute left-2 right-2 h-0.5 bg-gradient-to-r from-transparent via-agri-primary to-transparent animate-pulse\"\n              style={{ \n                top: `${20 + (analysisProgress * 0.6)}%`,\n                transition: 'top 0.3s ease-out'\n              }}\n            />\n          </div>\n          \n          {/* AI Processing Indicator */}\n          <div className=\"absolute -top-2 -right-2 w-8 h-8 bg-agri-primary rounded-full flex items-center justify-center shadow-glow\">\n            <Brain className=\"w-4 h-4 text-white animate-pulse\" />\n          </div>\n        </div>\n\n        {/* Analysis Progress */}\n        <div className=\"text-center w-full max-w-xs\">\n          <div className=\"relative mb-6\">\n            <div className=\"w-24 h-24 mx-auto mb-6 relative\">\n              <div className=\"w-24 h-24 border-4 border-agri-light rounded-full flex items-center justify-center\">\n                <div className=\"relative\">\n                  <Sparkles className=\"w-10 h-10 text-agri-primary animate-pulse\" />\n                  <div className=\"absolute inset-0 animate-spin\">\n                    <div className=\"w-10 h-10 border-2 border-transparent border-t-agri-primary rounded-full\" />\n                  </div>\n                </div>\n              </div>\n              <div className=\"absolute inset-0 border-4 border-agri-primary border-t-transparent rounded-full animate-spin\" \n                   style={{ animationDuration: '2s' }} />\n            </div>\n            \n            <h2 className=\"text-2xl font-bold text-agri-accent mb-2\">\n              AI Analyzing Your Plant...\n            </h2>\n            <p className=\"text-agri-gray mb-6\">\n              Our advanced AI is examining your plant for any health issues\n            </p>\n            \n            {/* Enhanced Progress Bar */}\n            <div className=\"space-y-4\">\n              <div className=\"relative\">\n                <Progress value={analysisProgress} className=\"w-full h-4\" />\n                <div className=\"absolute inset-0 bg-gradient-to-r from-green-400 via-blue-500 to-purple-600 opacity-20 rounded-full animate-pulse\" />\n              </div>\n              <div className=\"text-3xl font-bold text-green-600 animate-bounce\">\n                {Math.round(analysisProgress)}%\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Analysis Stages */}\n        <div className=\"w-full max-w-xs space-y-3\">\n          {analysisStages.map((stage, index) => {\n            const StageIcon = stage.icon;\n            const isCompleted = currentStage > index;\n            const isCurrent = currentStage === index;\n            \n            return (\n              <div key={index} className={`flex items-center space-x-3 p-3 rounded-xl transition-all duration-300 ${\n                isCompleted ? 'bg-agri-light' : \n                isCurrent ? 'bg-agri-primary/10 border border-agri-primary/20' : \n                'bg-gray-50'\n              }`}>\n                <div className={`w-8 h-8 rounded-full flex items-center justify-center transition-all duration-300 ${\n                  isCompleted ? 'bg-agri-success' : \n                  isCurrent ? 'bg-agri-primary animate-pulse' : \n                  'bg-gray-300'\n                }`}>\n                  {isCompleted ? (\n                    <CheckCircle className=\"w-5 h-5 text-white\" />\n                  ) : (\n                    <StageIcon className={`w-4 h-4 ${\n                      isCurrent ? 'text-white' : 'text-gray-500'\n                    }`} />\n                  )}\n                </div>\n                <span className={`text-sm font-medium transition-colors duration-300 ${\n                  isCompleted ? 'text-agri-success' : \n                  isCurrent ? 'text-agri-primary' : \n                  'text-gray-500'\n                }`}>\n                  {stage.name}\n                  {isCurrent && <span className=\"ml-2 animate-pulse\">...</span>}\n                  {isCompleted && <span className=\"ml-2\">✓</span>}\n                </span>\n              </div>\n            );\n          })}\n        </div>\n\n        {/* Processing Info */}\n        <div className=\"bg-blue-50 rounded-xl p-4 w-full max-w-xs border border-blue-200\">\n          <div className=\"text-center\">\n            <p className=\"text-sm text-blue-800\">\n              <strong>Processing Power:</strong> 15 TB agricultural database\n            </p>\n            <p className=\"text-xs text-blue-600 mt-1\">\n              Analyzing against 10,000+ plant disease patterns\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AnalyzePlant;","size_bytes":12141},"src/pages/CameraCapture.tsx":{"content":"import { useState, useRef, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { \n  Camera, \n  Upload, \n  ArrowLeft, \n  RefreshCw,\n  Check,\n  X,\n  Sparkles\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { toast } from '@/components/ui/use-toast';\n\nconst CameraCapture = () => {\n  const navigate = useNavigate();\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const [stream, setStream] = useState<MediaStream | null>(null);\n  const [capturedImage, setCapturedImage] = useState<string | null>(null);\n  const [isCamera, setIsCamera] = useState(true);\n\n  const startCamera = useCallback(async () => {\n    try {\n      const mediaStream = await navigator.mediaDevices.getUserMedia({\n        video: { facingMode: 'environment' }\n      });\n      setStream(mediaStream);\n      if (videoRef.current) {\n        videoRef.current.srcObject = mediaStream;\n      }\n    } catch (error) {\n      console.error('Error accessing camera:', error);\n      toast({\n        title: \"Camera Error\",\n        description: \"Unable to access camera. Please check permissions.\",\n        variant: \"destructive\"\n      });\n    }\n  }, []);\n\n  const stopCamera = useCallback(() => {\n    if (stream) {\n      stream.getTracks().forEach(track => track.stop());\n      setStream(null);\n    }\n  }, [stream]);\n\n  const capturePhoto = useCallback(() => {\n    if (videoRef.current && canvasRef.current) {\n      const canvas = canvasRef.current;\n      const video = videoRef.current;\n      const context = canvas.getContext('2d');\n      \n      if (context) {\n        canvas.width = video.videoWidth;\n        canvas.height = video.videoHeight;\n        context.drawImage(video, 0, 0);\n        \n        const imageDataUrl = canvas.toDataURL('image/jpeg', 0.8);\n        setCapturedImage(imageDataUrl);\n        stopCamera();\n      }\n    }\n  }, [stopCamera]);\n\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setCapturedImage(e.target?.result as string);\n        setIsCamera(false);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const proceedWithAnalysis = () => {\n    if (capturedImage) {\n      // Store image in localStorage for the diagnosis process\n      localStorage.setItem('plant_image', capturedImage);\n      navigate('/diagnose/analyze');\n    }\n  };\n\n  const retakePhoto = () => {\n    setCapturedImage(null);\n    if (isCamera) {\n      startCamera();\n    }\n  };\n\n  // Start camera when component mounts\n  useState(() => {\n    if (isCamera) {\n      startCamera();\n    }\n  });\n\n  return (\n    <div className=\"mobile-container\">\n      {/* Header */}\n      <div className=\"mobile-header bg-agri-cream\">\n        <div className=\"flex items-center space-x-3\">\n          <button \n            onClick={() => {\n              stopCamera();\n              navigate('/diagnose');\n            }}\n            className=\"p-2 hover:bg-agri-light rounded-full transition-colors\"\n          >\n            <ArrowLeft className=\"w-6 h-6 text-agri-accent\" />\n          </button>\n          <h1 className=\"text-xl font-bold text-agri-accent\">\n            {capturedImage ? 'Review Image' : 'Capture Plant Image'}\n          </h1>\n        </div>\n      </div>\n\n      <div className=\"mobile-content space-y-6 pt-4\">\n        {!capturedImage ? (\n          <>\n            {/* Camera View */}\n            <div className=\"relative bg-black rounded-2xl overflow-hidden aspect-[4/3]\">\n              {isCamera ? (\n                <video\n                  ref={videoRef}\n                  autoPlay\n                  playsInline\n                  className=\"w-full h-full object-cover\"\n                />\n              ) : (\n                <div className=\"w-full h-full flex items-center justify-center bg-agri-light\">\n                  <Upload className=\"w-16 h-16 text-agri-primary\" />\n                </div>\n              )}\n              \n              {/* Camera Overlay */}\n              <div className=\"absolute inset-0 pointer-events-none\">\n                <div className=\"absolute inset-6 border-2 border-white/50 rounded-2xl\" />\n                <div className=\"absolute top-4 left-4 bg-black/20 rounded-full px-3 py-1\">\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"w-2 h-2 bg-red-500 rounded-full animate-pulse\" />\n                    <span className=\"text-white text-sm\">Live</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Controls */}\n            <div className=\"space-y-4\">\n              {/* Capture Methods */}\n              <div className=\"flex space-x-4\">\n                <Button\n                  onClick={() => {\n                    setIsCamera(true);\n                    startCamera();\n                  }}\n                  variant={isCamera ? \"default\" : \"outline\"}\n                  className=\"flex-1\"\n                >\n                  <Camera className=\"w-4 h-4 mr-2\" />\n                  Camera\n                </Button>\n                <Button\n                  onClick={() => {\n                    setIsCamera(false);\n                    stopCamera();\n                    fileInputRef.current?.click();\n                  }}\n                  variant={!isCamera ? \"default\" : \"outline\"}\n                  className=\"flex-1\"\n                >\n                  <Upload className=\"w-4 h-4 mr-2\" />\n                  Gallery\n                </Button>\n              </div>\n\n              {/* Capture Button */}\n              {isCamera && stream && (\n                <div className=\"flex justify-center\">\n                  <button\n                    onClick={capturePhoto}\n                    className=\"w-20 h-20 bg-white border-4 border-agri-primary rounded-full flex items-center justify-center shadow-lg transform transition-transform active:scale-95\"\n                  >\n                    <div className=\"w-16 h-16 bg-agri-primary rounded-full flex items-center justify-center\">\n                      <Camera className=\"w-8 h-8 text-white\" />\n                    </div>\n                  </button>\n                </div>\n              )}\n            </div>\n\n            {/* Hidden file input */}\n            <input\n              ref={fileInputRef}\n              type=\"file\"\n              accept=\"image/*\"\n              onChange={handleFileUpload}\n              className=\"hidden\"\n            />\n          </>\n        ) : (\n          <>\n            {/* Captured Image Preview */}\n            <div className=\"space-y-4\">\n              <div className=\"relative rounded-2xl overflow-hidden\">\n                <img\n                  src={capturedImage}\n                  alt=\"Captured plant\"\n                  className=\"w-full aspect-[4/3] object-cover\"\n                />\n                <div className=\"absolute top-4 right-4 bg-agri-success rounded-full p-2\">\n                  <Check className=\"w-5 h-5 text-white\" />\n                </div>\n              </div>\n\n              {/* Image Quality Check */}\n              <div className=\"bg-agri-light rounded-xl p-4\">\n                <div className=\"flex items-center space-x-3 mb-3\">\n                  <Sparkles className=\"w-5 h-5 text-agri-primary\" />\n                  <span className=\"font-semibold text-agri-accent\">Image Quality Check</span>\n                </div>\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-agri-gray\">Clarity</span>\n                    <span className=\"text-sm font-medium text-agri-success\">Good ✓</span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-agri-gray\">Lighting</span>\n                    <span className=\"text-sm font-medium text-agri-success\">Good ✓</span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-agri-gray\">Plant Focus</span>\n                    <span className=\"text-sm font-medium text-agri-success\">Good ✓</span>\n                  </div>\n                </div>\n              </div>\n\n              {/* Action Buttons */}\n              <div className=\"flex space-x-4\">\n                <Button\n                  onClick={retakePhoto}\n                  variant=\"outline\"\n                  className=\"flex-1\"\n                >\n                  <RefreshCw className=\"w-4 h-4 mr-2\" />\n                  Retake\n                </Button>\n                <Button\n                  onClick={proceedWithAnalysis}\n                  className=\"flex-1 bg-agri-primary hover:bg-agri-secondary\"\n                >\n                  <Sparkles className=\"w-4 h-4 mr-2\" />\n                  Analyze\n                </Button>\n              </div>\n            </div>\n          </>\n        )}\n\n        {/* Tips */}\n        <div className=\"bg-yellow-50 rounded-xl p-4 border border-yellow-200\">\n          <h3 className=\"font-semibold text-yellow-800 mb-2\">📸 Best Photo Tips:</h3>\n          <ul className=\"space-y-1 text-sm text-yellow-700\">\n            <li>• Focus on affected leaves or areas</li>\n            <li>• Ensure good natural lighting</li>\n            <li>• Keep image clear and close-up</li>\n            <li>• Avoid shadows and reflections</li>\n          </ul>\n        </div>\n      </div>\n\n      <canvas ref={canvasRef} className=\"hidden\" />\n    </div>\n  );\n};\n\nexport default CameraCapture;","size_bytes":9725},"src/pages/Cart.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { \n  ArrowLeft, \n  Plus, \n  Minus, \n  Trash2,\n  Tag,\n  Truck,\n  ShoppingBag,\n  Shield\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { cartManager, CartItem } from '@/lib/cart';\n\nconst Cart = () => {\n  const navigate = useNavigate();\n  const [promoCode, setPromoCode] = useState('');\n  const [appliedPromo, setAppliedPromo] = useState('');\n  \n  const [cartItems, setCartItems] = useState<CartItem[]>([]);\n\n  useEffect(() => {\n    loadCart();\n    const unsubscribe = cartManager.onCartChange(() => {\n      loadCart();\n    });\n    return unsubscribe;\n  }, []);\n\n  const loadCart = () => {\n    setCartItems(cartManager.getCart());\n  };\n\n  const updateQuantity = (id: string, newQuantity: number) => {\n    cartManager.updateQuantity(id, newQuantity);\n  };\n\n  const removeItem = (id: string) => {\n    cartManager.deleteItem(id);\n  };\n\n  const applyPromoCode = () => {\n    if (promoCode === 'FARMER10') {\n      setAppliedPromo(promoCode);\n      setPromoCode('');\n    }\n  };\n\n  const subtotal = cartManager.getCartSubtotal();\n  const savings = cartManager.getCartSavings();\n  const discount = appliedPromo ? Math.round(subtotal * 0.1) : 0;\n  const deliveryFee = subtotal >= 500 ? 0 : 40;\n  const total = subtotal - discount + deliveryFee;\n\n  if (cartItems.length === 0) {\n    return (\n      <div className=\"mobile-container bg-background\">\n        <div className=\"mobile-header\">\n          <div className=\"flex items-center space-x-3\">\n            <button onClick={() => navigate('/shop')}>\n              <ArrowLeft className=\"w-6 h-6 text-gray-700\" />\n            </button>\n            <h1 className=\"text-xl font-bold text-text-secondary\">Cart</h1>\n          </div>\n        </div>\n\n        <div className=\"mobile-content flex flex-col items-center justify-center min-h-[60vh]\">\n          <ShoppingBag className=\"w-24 h-24 text-gray-300 mb-6\" />\n          <h2 className=\"text-xl font-bold text-gray-900 mb-2\">Your cart is empty</h2>\n          <p className=\"text-gray-500 mb-8 text-center\">Add some products to get started</p>\n          <Button \n            onClick={() => navigate('/shop')}\n            className=\"bg-green-600 hover:bg-green-700 text-white px-8 py-3\"\n          >\n            Continue Shopping\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"mobile-container bg-background\">\n      {/* Header */}\n      <div className=\"mobile-header\">\n        <div className=\"flex items-center space-x-3\">\n          <button onClick={() => navigate('/shop')}>\n            <ArrowLeft className=\"w-6 h-6 text-gray-700\" />\n          </button>\n          <h1 className=\"text-xl font-bold text-text-secondary\">Cart ({cartItems.length})</h1>\n        </div>\n      </div>\n\n      <div className=\"mobile-content space-y-6 pt-4\">\n        {/* Delivery Info */}\n        <div className=\"bg-green-50 border border-green-200 rounded-2xl p-4\">\n          <div className=\"flex items-center space-x-3\">\n            <Truck className=\"w-5 h-5 text-green-600\" />\n            <div>\n              <p className=\"font-semibold text-green-800\">\n                {deliveryFee === 0 ? 'Free Delivery!' : `₹${40 - (subtotal/500*40)} more for free delivery`}\n              </p>\n              <p className=\"text-sm text-green-600\">\n                {deliveryFee === 0 ? 'Your order qualifies for free delivery' : 'Add more items to get free delivery'}\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Cart Items */}\n        <div className=\"space-y-4\">\n          {cartItems.map((item) => (\n            <div key={item.id} className=\"bg-white rounded-2xl p-4 shadow-sm border border-gray-100\">\n              <div className=\"flex space-x-4\">\n                <div className=\"w-20 h-20 bg-gray-100 rounded-xl flex items-center justify-center\">\n                  <ShoppingBag className=\"w-8 h-8 text-green-600\" />\n                </div>\n                \n                <div className=\"flex-1\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-semibold text-gray-900 text-sm\">{item.name}</h3>\n                      <p className=\"text-xs text-gray-500 mt-1\">{item.brand} • {item.size}</p>\n                      \n                      <div className=\"flex items-center space-x-2 mt-2\">\n                        <span className=\"text-lg font-bold text-gray-900\">₹{item.price}</span>\n                        <span className=\"text-sm text-gray-400 line-through\">₹{item.originalPrice}</span>\n                        <Badge className=\"bg-green-100 text-green-800 text-xs\">\n                          Save ₹{item.originalPrice - item.price}\n                        </Badge>\n                      </div>\n                    </div>\n                    \n                    <button \n                      onClick={() => removeItem(item.id)}\n                      className=\"p-2 text-gray-400 hover:text-red-500\"\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </button>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between mt-4\">\n                    <div className=\"flex items-center space-x-3\">\n                      <button\n                        onClick={() => updateQuantity(item.id, item.quantity - 1)}\n                        className=\"w-8 h-8 bg-gray-100 rounded-lg flex items-center justify-center\"\n                      >\n                        <Minus className=\"w-4 h-4 text-gray-600\" />\n                      </button>\n                      <span className=\"font-semibold text-gray-900 min-w-[20px] text-center\">\n                        {item.quantity}\n                      </span>\n                      <button\n                        onClick={() => updateQuantity(item.id, item.quantity + 1)}\n                        className=\"w-8 h-8 bg-green-600 rounded-lg flex items-center justify-center\"\n                      >\n                        <Plus className=\"w-4 h-4 text-white\" />\n                      </button>\n                    </div>\n                    \n                    <div className=\"text-right\">\n                      <p className=\"font-bold text-gray-900\">₹{item.price * item.quantity}</p>\n                      {item.quantity > 1 && (\n                        <p className=\"text-xs text-gray-500\">₹{item.price} each</p>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {/* Promo Code */}\n        <div className=\"bg-white rounded-2xl p-4 shadow-sm border border-gray-100\">\n          <div className=\"flex items-center space-x-2 mb-3\">\n            <Tag className=\"w-5 h-5 text-green-600\" />\n            <h3 className=\"font-semibold text-gray-900\">Promo Code</h3>\n          </div>\n          \n          {appliedPromo ? (\n            <div className=\"flex items-center justify-between p-3 bg-green-50 rounded-xl\">\n              <div className=\"flex items-center space-x-2\">\n                <Badge className=\"bg-green-600 text-white\">{appliedPromo}</Badge>\n                <span className=\"text-sm text-green-700\">10% discount applied</span>\n              </div>\n              <button \n                onClick={() => setAppliedPromo('')}\n                className=\"text-sm text-green-600 hover:text-green-800\"\n              >\n                Remove\n              </button>\n            </div>\n          ) : (\n            <div className=\"flex space-x-2\">\n              <Input\n                placeholder=\"Enter promo code\"\n                value={promoCode}\n                onChange={(e) => setPromoCode(e.target.value)}\n                className=\"flex-1\"\n              />\n              <Button \n                onClick={applyPromoCode}\n                variant=\"outline\"\n                className=\"border-green-600 text-green-600\"\n              >\n                Apply\n              </Button>\n            </div>\n          )}\n        </div>\n\n        {/* Order Summary */}\n        <div className=\"bg-white rounded-2xl p-6 shadow-sm border border-gray-100\">\n          <h3 className=\"font-semibold text-gray-900 mb-4\">Order Summary</h3>\n          \n          <div className=\"space-y-3\">\n            <div className=\"flex justify-between\">\n              <span className=\"text-gray-600\">Subtotal ({cartItems.reduce((sum, item) => sum + item.quantity, 0)} items)</span>\n              <span className=\"font-medium\">₹{subtotal}</span>\n            </div>\n            \n            {savings > 0 && (\n              <div className=\"flex justify-between text-green-600\">\n                <span>You saved</span>\n                <span className=\"font-medium\">-₹{savings}</span>\n              </div>\n            )}\n            \n            {discount > 0 && (\n              <div className=\"flex justify-between text-green-600\">\n                <span>Promo discount</span>\n                <span className=\"font-medium\">-₹{discount}</span>\n              </div>\n            )}\n            \n            <div className=\"flex justify-between\">\n              <span className=\"text-gray-600\">Delivery fee</span>\n              <span className={`font-medium ${deliveryFee === 0 ? 'text-green-600' : ''}`}>\n                {deliveryFee === 0 ? 'FREE' : `₹${deliveryFee}`}\n              </span>\n            </div>\n            \n            <div className=\"border-t pt-3\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-lg font-bold text-gray-900\">Total</span>\n                <span className=\"text-xl font-bold text-green-600\">₹{total}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Security Badge */}\n        <div className=\"flex items-center justify-center space-x-2 text-gray-500\">\n          <Shield className=\"w-4 h-4\" />\n          <span className=\"text-sm\">100% Secure Checkout</span>\n        </div>\n      </div>\n\n      {/* Checkout Button */}\n      <div className=\"fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 p-4\">\n        <Button \n          onClick={() => {\n            // Pass cart data to checkout\n            navigate('/checkout', { \n              state: { \n                cartItems,\n                subtotal,\n                savings,\n                discount,\n                deliveryFee,\n                total,\n                appliedPromo\n              }\n            })\n          }}\n          className=\"w-full bg-green-600 hover:bg-green-700 text-white py-4 rounded-xl text-lg font-semibold\"\n        >\n          Proceed to Checkout • ₹{total}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default Cart;","size_bytes":10946},"src/pages/Checkout.tsx":{"content":"import { useState } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { \n  ArrowLeft, \n  MapPin, \n  Edit3,\n  CreditCard,\n  Smartphone,\n  Banknote,\n  CheckCircle,\n  Clock,\n  Shield,\n  Truck,\n  User,\n  Phone\n} from 'lucide-react';\nimport { cartManager } from '@/lib/cart';\n\nconst Checkout = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [selectedAddress, setSelectedAddress] = useState('home');\n  const [selectedPayment, setSelectedPayment] = useState('upi');\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  // Get cart data from location state or cart manager\n  const cartData = location.state || {};\n  const cartItems = cartData.cartItems || cartManager.getCart();\n  const subtotal = cartData.subtotal || cartManager.getCartSubtotal();\n  const discount = cartData.discount || 0;\n  const deliveryFee = cartData.deliveryFee || (subtotal >= 500 ? 0 : 40);\n  const total = cartData.total || (subtotal - discount + deliveryFee);\n\n  const addresses = [\n    {\n      id: 'home',\n      type: 'Home',\n      name: 'Ramu Ji',\n      address: 'Village Rampur, Dist. Hardoi, UP 241001',\n      phone: '+91 98765 43210'\n    },\n    {\n      id: 'farm',\n      type: 'Farm',\n      name: 'Ramu Ji',\n      address: 'Plot No. 45, Sector 12, Village Rampur, UP 241001',\n      phone: '+91 98765 43210'\n    }\n  ];\n\n  const paymentMethods = [\n    {\n      id: 'upi',\n      name: 'UPI Payment',\n      description: 'Pay using PhonePe, Google Pay, Paytm',\n      icon: Smartphone,\n      recommended: true,\n      discount: 5\n    },\n    {\n      id: 'card',\n      name: 'Credit/Debit Card',\n      description: 'Visa, Mastercard, RuPay',\n      icon: CreditCard,\n      recommended: false,\n      discount: 0\n    },\n    {\n      id: 'cod',\n      name: 'Cash on Delivery',\n      description: 'Pay when you receive',\n      icon: Banknote,\n      recommended: false,\n      discount: 0\n    }\n  ];\n\n  const orderSummary = {\n    items: cartItems.map(item => ({\n      name: item.name,\n      quantity: item.quantity,\n      price: item.price * item.quantity,\n      image: item.category\n    })),\n    subtotal,\n    discount,\n    delivery: deliveryFee,\n    total\n  };\n\n  const handlePlaceOrder = async () => {\n    setIsProcessing(true);\n    \n    try {\n      // Simulate payment processing\n      await new Promise(resolve => setTimeout(resolve, 3000));\n      \n      // Get selected address\n      const address = addresses.find(addr => addr.id === selectedAddress);\n      const addressString = `${address?.name}, ${address?.address}`;\n      \n      // Create order\n      const order = cartManager.createOrder({\n        address: addressString,\n        paymentMethod: selectedPayment,\n        discount\n      });\n      \n      // Navigate to order success page\n      navigate('/order-success', { \n        state: { \n          orderId: order.id,\n          order,\n          selectedAddress: address\n        } \n      });\n    } catch (error) {\n      alert('Failed to place order. Please try again.');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"sticky top-0 z-40 bg-white shadow-sm border-b border-gray-100\">\n        <div className=\"flex items-center justify-between px-4 py-4\">\n          <div className=\"flex items-center space-x-3\">\n            <button \n              onClick={() => navigate('/cart')}\n              className=\"p-2 -ml-2 hover:bg-gray-100 rounded-full transition-colors\"\n            >\n              <ArrowLeft className=\"w-6 h-6 text-gray-700\" />\n            </button>\n            <h1 className=\"text-xl font-bold text-gray-900\">Checkout</h1>\n          </div>\n          <div className=\"flex items-center space-x-2 bg-green-50 px-3 py-1 rounded-full\">\n            <Shield className=\"w-4 h-4 text-green-600\" />\n            <span className=\"text-sm font-medium text-green-800\">Secure</span>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"px-4 py-6 space-y-6 pb-32\">\n        {/* Order Summary - Compact */}\n        <div className=\"bg-white rounded-2xl p-6 shadow-sm border border-gray-100\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"font-bold text-gray-900 flex items-center space-x-2\">\n              <CheckCircle className=\"w-5 h-5 text-green-600\" />\n              <span>Order Summary</span>\n            </h3>\n            <span className=\"text-sm text-gray-500\">{orderSummary.items.length} items</span>\n          </div>\n          \n          <div className=\"space-y-3 mb-4\">\n            {orderSummary.items.map((item, index) => (\n              <div key={index} className=\"flex items-center space-x-3 py-2 border-b border-gray-50 last:border-0\">\n                <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                  <span className=\"text-lg font-bold text-green-600\">{item.quantity}</span>\n                </div>\n                <div className=\"flex-1\">\n                  <p className=\"font-medium text-gray-900 text-sm\">{item.name}</p>\n                  <p className=\"text-sm text-gray-500\">₹{item.price}</p>\n                </div>\n              </div>\n            ))}\n          </div>\n          \n          <div className=\"border-t border-gray-100 pt-4 space-y-2\">\n            <div className=\"flex justify-between text-sm\">\n              <span className=\"text-gray-600\">Subtotal</span>\n              <span className=\"font-medium\">₹{orderSummary.subtotal}</span>\n            </div>\n            <div className=\"flex justify-between text-sm text-green-600\">\n              <span>Discount</span>\n              <span className=\"font-medium\">-₹{orderSummary.discount}</span>\n            </div>\n            <div className=\"flex justify-between text-sm\">\n              <span className=\"text-gray-600\">Delivery</span>\n              <span className=\"font-medium text-green-600\">FREE</span>\n            </div>\n            <div className=\"flex justify-between items-center pt-2 border-t border-gray-100\">\n              <span className=\"text-lg font-bold text-gray-900\">Total</span>\n              <span className=\"text-2xl font-bold text-green-600\">₹{orderSummary.total}</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Delivery Address */}\n        <div className=\"bg-white rounded-2xl p-6 shadow-sm border border-gray-100\">\n          <div className=\"flex items-center justify-between mb-5\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-green-100 rounded-full flex items-center justify-center\">\n                <MapPin className=\"w-5 h-5 text-green-600\" />\n              </div>\n              <h3 className=\"font-bold text-gray-900\">Delivery Address</h3>\n            </div>\n            <button className=\"text-green-600 hover:text-green-700 p-2 hover:bg-green-50 rounded-lg transition-colors\">\n              <Edit3 className=\"w-4 h-4\" />\n            </button>\n          </div>\n\n          <div className=\"space-y-3\">\n            {addresses.map((address) => (\n              <div key={address.id} className={`border-2 rounded-xl p-4 cursor-pointer transition-all ${\n                selectedAddress === address.id \n                  ? 'border-green-500 bg-green-50' \n                  : 'border-gray-200 hover:border-gray-300'\n              }`} onClick={() => setSelectedAddress(address.id)}>\n                <div className=\"flex items-start space-x-3\">\n                  <div className={`w-5 h-5 rounded-full border-2 mt-1 ${\n                    selectedAddress === address.id \n                      ? 'border-green-500 bg-green-500' \n                      : 'border-gray-300'\n                  }`}>\n                    {selectedAddress === address.id && (\n                      <div className=\"w-full h-full rounded-full bg-white scale-50\"></div>\n                    )}\n                  </div>\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-2 mb-2\">\n                      <User className=\"w-4 h-4 text-gray-600\" />\n                      <span className=\"font-semibold text-gray-900\">{address.name}</span>\n                      <span className=\"text-xs bg-green-100 text-green-800 px-2 py-1 rounded-full font-medium\">\n                        {address.type}\n                      </span>\n                    </div>\n                    <p className=\"text-gray-600 text-sm mb-2\">{address.address}</p>\n                    <div className=\"flex items-center space-x-1\">\n                      <Phone className=\"w-3 h-3 text-gray-500\" />\n                      <span className=\"text-sm text-gray-500\">{address.phone}</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n\n          <button className=\"w-full mt-4 p-4 border-2 border-dashed border-green-300 rounded-xl text-green-600 font-semibold hover:border-green-400 hover:bg-green-50 transition-colors\">\n            + Add New Address\n          </button>\n        </div>\n\n        {/* Delivery Time */}\n        <div className=\"bg-gradient-to-r from-green-50 to-blue-50 rounded-2xl p-6 border border-green-100\">\n          <div className=\"flex items-center space-x-3 mb-4\">\n            <div className=\"w-10 h-10 bg-green-100 rounded-full flex items-center justify-center\">\n              <Truck className=\"w-5 h-5 text-green-600\" />\n            </div>\n            <h3 className=\"font-bold text-gray-900\">Delivery Information</h3>\n          </div>\n          \n          <div className=\"bg-white rounded-xl p-4 border border-green-200\">\n            <div className=\"flex items-center space-x-3\">\n              <CheckCircle className=\"w-6 h-6 text-green-600\" />\n              <div>\n                <p className=\"font-semibold text-green-800\">Expected Delivery</p>\n                <p className=\"text-green-600 text-sm\">Tomorrow by 6:00 PM</p>\n                <p className=\"text-xs text-gray-500 mt-1\">Free delivery on orders above ₹500</p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Payment Method */}\n        <div className=\"bg-white rounded-2xl p-6 shadow-sm border border-gray-100\">\n          <div className=\"flex items-center space-x-3 mb-5\">\n            <div className=\"w-10 h-10 bg-green-100 rounded-full flex items-center justify-center\">\n              <CreditCard className=\"w-5 h-5 text-green-600\" />\n            </div>\n            <h3 className=\"font-bold text-gray-900\">Payment Method</h3>\n          </div>\n\n          <div className=\"space-y-3\">\n            {paymentMethods.map((method) => (\n              <div \n                key={method.id} \n                className={`border-2 rounded-xl p-4 cursor-pointer transition-all ${\n                  selectedPayment === method.id \n                    ? 'border-green-500 bg-green-50' \n                    : 'border-gray-200 hover:border-gray-300'\n                }`}\n                onClick={() => setSelectedPayment(method.id)}\n              >\n                <div className=\"flex items-center space-x-4\">\n                  <div className={`w-5 h-5 rounded-full border-2 ${\n                    selectedPayment === method.id \n                      ? 'border-green-500 bg-green-500' \n                      : 'border-gray-300'\n                  }`}>\n                    {selectedPayment === method.id && (\n                      <div className=\"w-full h-full rounded-full bg-white scale-50\"></div>\n                    )}\n                  </div>\n                  <div className={`w-10 h-10 rounded-full flex items-center justify-center ${\n                    selectedPayment === method.id ? 'bg-green-100' : 'bg-gray-100'\n                  }`}>\n                    <method.icon className={`w-5 h-5 ${\n                      selectedPayment === method.id ? 'text-green-600' : 'text-gray-600'\n                    }`} />\n                  </div>\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-2\">\n                      <span className=\"font-semibold text-gray-900\">{method.name}</span>\n                      {method.recommended && (\n                        <span className=\"text-xs bg-orange-100 text-orange-800 px-2 py-1 rounded-full font-medium\">\n                          Recommended\n                        </span>\n                      )}\n                      {method.discount > 0 && (\n                        <span className=\"text-xs bg-green-100 text-green-800 px-2 py-1 rounded-full font-medium\">\n                          {method.discount}% Off\n                        </span>\n                      )}\n                    </div>\n                    <p className=\"text-sm text-gray-600 mt-1\">{method.description}</p>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Security Info */}\n        <div className=\"bg-gradient-to-r from-green-50 to-blue-50 rounded-2xl p-5 border border-green-100\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-green-100 rounded-full flex items-center justify-center\">\n              <Shield className=\"w-5 h-5 text-green-600\" />\n            </div>\n            <div>\n              <p className=\"font-semibold text-green-800\">100% Secure Payment</p>\n              <p className=\"text-sm text-green-600\">Your payment information is protected with 256-bit SSL encryption</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Place Order Button */}\n      <div className=\"fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 p-4 shadow-lg\">\n        <button \n          onClick={handlePlaceOrder}\n          disabled={isProcessing}\n          className=\"w-full bg-green-600 hover:bg-green-700 text-white py-4 rounded-2xl text-lg font-bold disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 shadow-lg\"\n        >\n          {isProcessing ? (\n            <div className=\"flex items-center justify-center space-x-2\">\n              <Clock className=\"w-5 h-5 animate-spin\" />\n              <span>Processing Payment...</span>\n            </div>\n          ) : (\n            <div className=\"flex items-center justify-between px-4\">\n              <span>Place Order</span>\n              <span className=\"bg-white bg-opacity-20 px-3 py-1 rounded-lg\">₹{orderSummary.total}</span>\n            </div>\n          )}\n        </button>\n        <p className=\"text-center text-xs text-gray-500 mt-2\">\n          By placing this order, you agree to our Terms & Conditions\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default Checkout;","size_bytes":14703},"src/pages/CropGuideDetail.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { \n  ArrowLeft, \n  Bookmark,\n  BookmarkCheck,\n  ChevronDown,\n  ChevronUp,\n  Sprout,\n  Droplets,\n  Sun,\n  Scissors,\n  Beaker,\n  Shield,\n  Heart,\n  Leaf,\n  CheckCircle\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from '@/components/ui/collapsible';\n\nconst CropGuideDetail = () => {\n  const navigate = useNavigate();\n  const { cropId } = useParams();\n  const [savedGuides, setSavedGuides] = useState<string[]>([]);\n  const [expandedSections, setExpandedSections] = useState<string[]>([]);\n\n  // Load saved guides from localStorage\n  useEffect(() => {\n    const saved = localStorage.getItem('kisanmitra_saved_cultivation_guides');\n    setSavedGuides(saved ? JSON.parse(saved) : []);\n  }, []);\n\n  const toggleSaveGuide = (guideId: string) => {\n    const updatedSaved = savedGuides.includes(guideId)\n      ? savedGuides.filter(id => id !== guideId)\n      : [...savedGuides, guideId];\n    \n    setSavedGuides(updatedSaved);\n    localStorage.setItem('kisanmitra_saved_cultivation_guides', JSON.stringify(updatedSaved));\n  };\n\n  const toggleSection = (sectionId: string) => {\n    setExpandedSections(prev => \n      prev.includes(sectionId) \n        ? prev.filter(id => id !== sectionId)\n        : [...prev, sectionId]\n    );\n  };\n\n  const cropData = {\n    tomato: {\n      name: 'Tomato',\n      image: '🍅',\n      description: 'Complete step-by-step guide for growing healthy tomatoes',\n      sections: [\n        {\n          id: 'variety-seed',\n          title: 'Variety & Seed Treatment',\n          icon: Sprout,\n          points: [\n            'Choose disease-resistant varieties like Indeterminate or Determinate types',\n            'Treat seeds with fungicide (Thiram 2g/kg) before sowing',\n            'Soak seeds in warm water for 6-8 hours for better germination'\n          ],\n          illustration: '🌱'\n        },\n        {\n          id: 'land-prep',\n          title: 'Land Preparation & Sowing',\n          icon: Sun,\n          points: [\n            'Prepare well-drained beds with 15-20cm height',\n            'Mix organic compost (5-10 tons/hectare) in soil',\n            'Maintain spacing of 60cm x 45cm between plants'\n          ],\n          illustration: '🚜'\n        },\n        {\n          id: 'fertilization',\n          title: 'Fertilization & Nutrient Management',\n          icon: Beaker,\n          points: [\n            'Apply NPK (19:19:19) at 400kg/hectare as basal dose',\n            'First top dressing with Urea (50kg/hectare) after 20 days',\n            'Apply Calcium Nitrate during flowering to prevent blossom end rot'\n          ],\n          illustration: '⚗️'\n        },\n        {\n          id: 'irrigation',\n          title: 'Irrigation Schedule',\n          icon: Droplets,\n          points: [\n            'Install drip irrigation system for water efficiency',\n            'Water daily for first 2 weeks, then alternate days',\n            'Maintain soil moisture at 70-80% field capacity'\n          ],\n          illustration: '💧'\n        },\n        {\n          id: 'support-control',\n          title: 'Support/Weed/Disease Control',\n          icon: Shield,\n          points: [\n            'Install bamboo stakes or trellis system for plant support',\n            'Manual weeding or use herbicides like Pendimethalin',\n            'Apply Copper Oxychloride for early blight prevention'\n          ],\n          illustration: '🛡️'\n        }\n      ]\n    },\n    wheat: {\n      name: 'Wheat',\n      image: '🌾',\n      description: 'Comprehensive guide for wheat cultivation and management',\n      sections: [\n        {\n          id: 'variety-seed',\n          title: 'Variety & Seed Treatment',\n          icon: Sprout,\n          points: [\n            'Select high-yielding varieties like HD-2967, PBW-343, or DBW-88',\n            'Treat seeds with fungicide (Vitavax 2.5g/kg) against seed-borne diseases',\n            'Use certified seeds with 90%+ germination rate'\n          ],\n          illustration: '🌱'\n        },\n        {\n          id: 'land-prep',\n          title: 'Land Preparation & Sowing',\n          icon: Sun,\n          points: [\n            'Deep plowing followed by 2-3 cross harrowing for fine tilth',\n            'Maintain seed rate of 100-125 kg/hectare for irrigated conditions',\n            'Sow at 2-3cm depth with row spacing of 20-22.5cm'\n          ],\n          illustration: '🚜'\n        },\n        {\n          id: 'fertilization',\n          title: 'Fertilization & Nutrient Management',\n          icon: Beaker,\n          points: [\n            'Apply DAP (150kg/hectare) and MOP (50kg/hectare) at sowing',\n            'First Urea application (65kg/hectare) at 21 days (Crown Root stage)',\n            'Second Urea application (65kg/hectare) at 45 days (Tillering stage)'\n          ],\n          illustration: '⚗️'\n        },\n        {\n          id: 'irrigation',\n          title: 'Six-Stage Irrigation Schedule',\n          icon: Droplets,\n          points: [\n            'Crown Root stage (20-25 days) - First irrigation',\n            'Tillering stage (40-45 days) - Second irrigation',\n            'Jointing stage (60-65 days) - Third irrigation',\n            'Flowering stage (80-85 days) - Fourth irrigation',\n            'Milk stage (100-105 days) - Fifth irrigation',\n            'Dough stage (115-120 days) - Sixth irrigation'\n          ],\n          illustration: '💧'\n        },\n        {\n          id: 'weed-control',\n          title: 'Weed & Disease Control',\n          icon: Shield,\n          points: [\n            'Use pre-emergence herbicide Pendimethalin @ 1kg/hectare',\n            'Post-emergence application of 2,4-D for broad-leaf weeds',\n            'Monitor for Yellow Rust and apply Propiconazole if needed'\n          ],\n          illustration: '🛡️'\n        }\n      ]\n    },\n    maize: {\n      name: 'Maize',\n      image: '🌽',\n      description: 'Step-by-step maize cultivation guide for optimal yield',\n      sections: [\n        {\n          id: 'land-prep',\n          title: 'Land Preparation & Raised Beds',\n          icon: Sun,\n          points: [\n            'Prepare field with deep plowing (20-25cm) followed by harrowing',\n            'Create raised beds of 3-4 meter width with proper drainage',\n            'Apply farmyard manure (10-15 tons/hectare) during land preparation'\n          ],\n          illustration: '🚜'\n        },\n        {\n          id: 'seed-treatment',\n          title: 'Seed Rate & Treatment',\n          icon: Beaker,\n          points: [\n            'Use 20-25 kg/hectare seed rate for optimal plant population',\n            'Treat seeds with fungicide (Thiram @ 2g/kg) and insecticide',\n            'Select high-yielding hybrids suitable for local climate conditions'\n          ],\n          illustration: '🌱'\n        },\n        {\n          id: 'spacing',\n          title: 'Spacing & Plant Management',\n          icon: Sprout,\n          points: [\n            'Maintain row-to-row spacing of 60cm and plant-to-plant 20cm',\n            'Sow 2-3 seeds per hill and thin to single healthy plant',\n            'Ensure plant population of 75,000-80,000 plants/hectare'\n          ],\n          illustration: '📏'\n        },\n        {\n          id: 'fertilizer',\n          title: 'Trio Fertilizer Schedule',\n          icon: Heart,\n          points: [\n            'Basal dose: NPK (120:60:40 kg/hectare) at sowing',\n            'First top dressing: Urea (65kg/hectare) at 25-30 days',\n            'Second top dressing: Urea (65kg/hectare) at knee-high stage (45-50 days)'\n          ],\n          illustration: '⚗️'\n        },\n        {\n          id: 'monitoring',\n          title: 'Growth Monitoring & Care',\n          icon: Leaf,\n          points: [\n            'Regular monitoring for stem borer and apply appropriate insecticides',\n            'Earthing up operation at 30-35 days for better root development',\n            'Maintain adequate soil moisture throughout vegetative growth'\n          ],\n          illustration: '👀'\n        }\n      ]\n    }\n  };\n\n  const currentCrop = cropData[cropId as keyof typeof cropData];\n\n  if (!currentCrop) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-emerald-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-bold text-gray-700 mb-4\">Guide Not Found</h2>\n          <Button onClick={() => navigate('/guides')} className=\"bg-green-600 hover:bg-green-700\">\n            Back to Guides\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const isSaved = savedGuides.includes(cropId!);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-emerald-50\">\n      {/* Header */}\n      <div className=\"bg-gradient-to-r from-green-600 to-emerald-600 px-4 py-4 shadow-lg sticky top-0 z-10\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <button onClick={() => navigate('/guides')} className=\"text-white hover:bg-white/20 rounded-full p-2\">\n              <ArrowLeft className=\"w-6 h-6\" />\n            </button>\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"text-3xl\">{currentCrop.image}</div>\n              <div>\n                <h1 className=\"text-xl font-bold text-white\">{currentCrop.name}</h1>\n                <p className=\"text-green-100 text-sm\">{currentCrop.description}</p>\n              </div>\n            </div>\n          </div>\n          <button\n            onClick={() => toggleSaveGuide(cropId!)}\n            className={`p-2 rounded-lg transition-colors ${\n              isSaved\n                ? 'bg-white/20 text-white'\n                : 'bg-white/10 text-white hover:bg-white/20'\n            }`}\n          >\n            {isSaved ? (\n              <BookmarkCheck className=\"w-6 h-6\" />\n            ) : (\n              <Bookmark className=\"w-6 h-6\" />\n            )}\n          </button>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"px-4 py-6 space-y-4\">\n        {currentCrop.sections.map((section, index) => (\n          <Card key={section.id} className=\"bg-white shadow-lg border border-green-100 overflow-hidden\">\n            <Collapsible\n              open={expandedSections.includes(section.id)}\n              onOpenChange={() => toggleSection(section.id)}\n            >\n              <CollapsibleTrigger asChild>\n                <CardHeader className=\"cursor-pointer hover:bg-green-50 transition-colors\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"p-3 bg-green-100 rounded-lg\">\n                        <section.icon className=\"w-6 h-6 text-green-600\" />\n                      </div>\n                      <div>\n                        <CardTitle className=\"text-lg font-bold text-gray-900\">{section.title}</CardTitle>\n                        <p className=\"text-sm text-gray-500\">Step {index + 1} of {currentCrop.sections.length}</p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"text-2xl\">{section.illustration}</div>\n                      {expandedSections.includes(section.id) ? (\n                        <ChevronUp className=\"w-5 h-5 text-gray-400\" />\n                      ) : (\n                        <ChevronDown className=\"w-5 h-5 text-gray-400\" />\n                      )}\n                    </div>\n                  </div>\n                </CardHeader>\n              </CollapsibleTrigger>\n              <CollapsibleContent>\n                <CardContent className=\"pt-0\">\n                  <div className=\"space-y-3\">\n                    {section.points.map((point, pointIndex) => (\n                      <div key={pointIndex} className=\"flex items-start space-x-3 p-3 bg-green-50 rounded-lg\">\n                        <CheckCircle className=\"w-5 h-5 text-green-600 mt-0.5 flex-shrink-0\" />\n                        <p className=\"text-gray-700 text-sm leading-relaxed\">{point}</p>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </CollapsibleContent>\n            </Collapsible>\n          </Card>\n        ))}\n\n        {/* Save Guide Button */}\n        <div className=\"sticky bottom-4 pt-4\">\n          <Button \n            onClick={() => toggleSaveGuide(cropId!)}\n            className={`w-full py-4 rounded-xl shadow-lg transition-all ${\n              isSaved\n                ? 'bg-green-100 text-green-700 border-2 border-green-600 hover:bg-green-50'\n                : 'bg-green-600 text-white hover:bg-green-700'\n            }`}\n          >\n            {isSaved ? (\n              <>\n                <BookmarkCheck className=\"w-5 h-5 mr-2\" />\n                Saved to My Guides\n              </>\n            ) : (\n              <>\n                <Bookmark className=\"w-5 h-5 mr-2\" />\n                Save This Guide\n              </>\n            )}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CropGuideDetail;","size_bytes":13419},"src/pages/Diagnose.tsx":{"content":"import { useState, useRef, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { \n  Camera, \n  Upload, \n  Mic,\n  ChevronDown,\n  ChevronUp,\n  Sun,\n  Eye,\n  Shield,\n  Sparkles,\n  Globe,\n  Check,\n  Leaf,\n  ArrowLeft,\n  Volume2\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\n\nconst PlantDiagnosis = () => {\n  const navigate = useNavigate();\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [currentLanguage, setCurrentLanguage] = useState('English');\n  const [isListening, setIsListening] = useState(false);\n  const fileInputRef = useRef(null);\n  const cameraInputRef = useRef(null);\n\n  const languages = ['English', 'हिंदी', 'தமிழ்', 'తెలుగు', 'বাংলা'];\n\n  const handleImageUpload = (event) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setSelectedImage(e.target?.result);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const toggleVoiceAssist = () => {\n    setIsListening(!isListening);\n    // Voice assistance logic would go here\n  };\n\n  const startDiagnosis = () => {\n    if (selectedImage) {\n      console.log('Starting diagnosis...');\n      // Store the selected image for analysis\n      localStorage.setItem('plant_image', selectedImage);\n      // Navigate to analysis page\n      navigate('/diagnose/analyze');\n    }\n  };\n\n  const tips = [\n    {\n      icon: <Sun className=\"w-5 h-5 text-yellow-500\" />,\n      title: \"Good Lighting\",\n      description: \"Take photos in natural daylight\"\n    },\n    {\n      icon: <Eye className=\"w-5 h-5 text-blue-500\" />,\n      title: \"Focus on Affected Area\",\n      description: \"Zoom in on diseased or damaged parts\"\n    },\n    {\n      icon: <Shield className=\"w-5 h-5 text-green-500\" />,\n      title: \"Avoid Shadows\",\n      description: \"Keep the plant well-lit and clear\"\n    },\n    {\n      icon: <Sparkles className=\"w-5 h-5 text-purple-500\" />,\n      title: \"Clear & Sharp\",\n      description: \"Ensure the image is not blurry\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-blue-50\">\n      {/* Header */}\n      <div className=\"bg-gradient-to-r from-green-600 to-emerald-600 px-4 py-4 shadow-lg\">\n        <div className=\"flex items-center justify-between\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => navigate('/home')}\n            className=\"text-white hover:bg-white/20 rounded-full p-3\"\n          >\n            <ArrowLeft className=\"w-5 h-5\" />\n          </Button>\n          \n          <div className=\"flex items-center space-x-3\">\n            <h1 className=\"text-xl font-bold text-white flex items-center\">\n              <Leaf className=\"w-6 h-6 mr-2\" />\n              Plant Diagnosis\n            </h1>\n            <button\n              onClick={toggleVoiceAssist}\n              className={`p-2 rounded-lg transition-all duration-200 ${\n                isListening \n                  ? 'bg-white/30 text-white animate-pulse' \n                  : 'bg-white/20 text-white hover:bg-white/30'\n              }`}\n            >\n              <Volume2 className=\"w-5 h-5\" />\n            </button>\n          </div>\n          \n          <div className=\"w-12\" />\n        </div>\n      </div>\n\n      <div className=\"px-4 py-6 space-y-6\">\n        {/* Main Action Card */}\n        <div className=\"bg-white rounded-3xl shadow-xl p-8 border border-gray-100\">\n          <div className=\"text-center mb-8\">\n            <div className=\"inline-flex items-center justify-center w-20 h-20 bg-gradient-to-br from-green-100 to-green-200 rounded-2xl mb-6\">\n              <Camera className=\"w-10 h-10 text-green-600\" />\n            </div>\n            <h2 className=\"text-2xl font-bold text-gray-900 mb-3\">\n              Capture Plant Image\n            </h2>\n            <p className=\"text-gray-600 text-base leading-relaxed\">\n              Take a clear photo or upload from your gallery\n            </p>\n          </div>\n\n          {selectedImage && (\n            <div className=\"mb-8\">\n              <div className=\"relative rounded-2xl overflow-hidden bg-gray-100 border-4 border-green-200\">\n                <img\n                  src={selectedImage}\n                  alt=\"Selected plant\"\n                  className=\"w-full h-64 object-cover\"\n                />\n                <div className=\"absolute top-4 right-4 bg-green-500 rounded-xl p-2\">\n                  <Check className=\"w-5 h-5 text-white\" />\n                </div>\n              </div>\n              <p className=\"text-center text-base text-green-600 mt-4 font-bold\">\n                ✓ Image ready for diagnosis\n              </p>\n            </div>\n          )}\n\n          <div className=\"grid grid-cols-1 gap-6\">\n            {/* Take Photo Button */}\n            <button\n              onClick={() => cameraInputRef.current?.click()}\n              className=\"flex items-center justify-center space-x-4 bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white p-6 rounded-2xl transition-all duration-300 shadow-lg hover:shadow-xl transform hover:scale-[1.02]\"\n            >\n              <Camera className=\"w-7 h-7\" />\n              <span className=\"font-bold text-xl\">Take a Photo</span>\n            </button>\n\n            {/* Upload from Gallery Button */}\n            <button\n              onClick={() => fileInputRef.current?.click()}\n              className=\"flex items-center justify-center space-x-4 bg-white border-3 border-green-500 text-green-600 hover:bg-green-50 p-6 rounded-2xl transition-all duration-300 shadow-md hover:shadow-lg transform hover:scale-[1.02]\"\n            >\n              <Upload className=\"w-7 h-7\" />\n              <span className=\"font-bold text-xl\">Upload from Gallery</span>\n            </button>\n          </div>\n\n          {/* Hidden file inputs */}\n          <input\n            ref={fileInputRef}\n            type=\"file\"\n            accept=\"image/*\"\n            onChange={handleImageUpload}\n            className=\"hidden\"\n          />\n          <input\n            ref={cameraInputRef}\n            type=\"file\"\n            accept=\"image/*\"\n            capture=\"environment\"\n            onChange={handleImageUpload}\n            className=\"hidden\"\n          />\n        </div>\n\n        {/* Photography Tips Card */}\n        <div className=\"bg-white rounded-3xl shadow-xl border border-gray-100 overflow-hidden\">\n          <button\n            onClick={() => setIsExpanded(!isExpanded)}\n            className=\"w-full px-8 py-6 flex items-center justify-between bg-gradient-to-r from-blue-50 to-purple-50 hover:from-blue-100 hover:to-purple-100 transition-colors duration-200\"\n          >\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"p-3 bg-white rounded-xl shadow-sm\">\n                <Sparkles className=\"w-6 h-6 text-blue-600\" />\n              </div>\n              <div className=\"text-left\">\n                <h3 className=\"font-bold text-gray-900 text-lg\">Photography Tips</h3>\n                <p className=\"text-base text-gray-600\">Get better diagnosis results</p>\n              </div>\n            </div>\n            {isExpanded ? (\n              <ChevronUp className=\"w-6 h-6 text-gray-500\" />\n            ) : (\n              <ChevronDown className=\"w-6 h-6 text-gray-500\" />\n            )}\n          </button>\n\n          {isExpanded && (\n            <div className=\"px-8 py-6 space-y-6 bg-gray-50\">\n              {tips.map((tip, index) => (\n                <div key={index} className=\"flex items-start space-x-4\">\n                  <div className=\"mt-1\">\n                    {tip.icon}\n                  </div>\n                  <div>\n                    <h4 className=\"font-bold text-gray-900 text-base\">\n                      {tip.title}\n                    </h4>\n                    <p className=\"text-gray-600 text-sm mt-2 leading-relaxed\">\n                      {tip.description}\n                    </p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n\n      </div>\n\n      {/* Fixed Bottom Button */}\n      <div className=\"fixed bottom-0 left-0 right-0 bg-white border-t-2 border-gray-200 p-6 shadow-2xl\">\n        <button\n          onClick={startDiagnosis}\n          disabled={!selectedImage}\n          className={`w-full py-5 rounded-2xl font-bold text-xl transition-all duration-300 ${\n            selectedImage\n              ? 'bg-gradient-to-r from-green-500 to-blue-500 hover:from-green-600 hover:to-blue-600 text-white shadow-xl hover:shadow-2xl transform hover:scale-[1.02]'\n              : 'bg-gray-300 text-gray-500 cursor-not-allowed'\n          }`}\n        >\n          {selectedImage ? (\n            <div className=\"flex items-center justify-center space-x-3\">\n              <Sparkles className=\"w-6 h-6\" />\n              <span>Start Diagnosis</span>\n            </div>\n          ) : (\n            'Select an Image First'\n          )}\n        </button>\n      </div>\n\n      {/* Voice Assistant Feedback */}\n      {isListening && (\n        <div className=\"fixed top-20 left-4 right-4 bg-blue-600 text-white p-4 rounded-xl shadow-lg z-50\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-3 h-3 bg-white rounded-full animate-pulse\"></div>\n            <span className=\"font-medium\">Listening... Speak your question</span>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default PlantDiagnosis;","size_bytes":9605},"src/pages/DiagnoseResults.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { \n  ArrowLeft, \n  CheckCircle,\n  AlertTriangle,\n  Clock,\n  Target,\n  TrendingUp,\n  Store,\n  MapPin,\n  Plus,\n  Leaf,\n  Calendar,\n  Award,\n  ShoppingCart,\n  Loader2\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Progress } from '@/components/ui/progress';\nimport { toast } from '@/components/ui/use-toast';\n\ninterface DiagnosisResult {\n  disease: string;\n  confidence: number;\n  affectedArea: string;\n  stage: string;\n  severity: 'low' | 'medium' | 'high';\n  detectedDate: string;\n  status?: string;\n  isHealthy?: boolean;\n}\n\ninterface Fertilizer {\n  name: string;\n  price: string;\n  availability: string;\n}\n\ninterface TreatmentStep {\n  step: number;\n  title: string;\n  description: string;\n}\n\nconst DiagnoseResults = () => {\n  const navigate = useNavigate();\n  const [results, setResults] = useState<DiagnosisResult | null>(null);\n  const [plantImage, setPlantImage] = useState<string | null>(null);\n  const [fertilizers, setFertilizers] = useState<Fertilizer[]>([]);\n  const [treatmentSteps, setTreatmentSteps] = useState<TreatmentStep[]>([]);\n  const [treatmentDuration, setTreatmentDuration] = useState<string>('14-21 days');\n  const [successRate, setSuccessRate] = useState<number>(87);\n  const [loadingFertilizers, setLoadingFertilizers] = useState(false);\n  const [loadingSteps, setLoadingSteps] = useState(false);\n  const [loadingDuration, setLoadingDuration] = useState(false);\n\n  useEffect(() => {\n    const savedResults = localStorage.getItem('diagnosis_results');\n    const savedImage = localStorage.getItem('plant_image');\n    \n    if (savedResults) {\n      const parsedResults = JSON.parse(savedResults);\n      setResults(parsedResults);\n      \n      // Load Gemini AI data for the diagnosed disease\n      if (parsedResults.disease && !parsedResults.isHealthy) {\n        loadFertilizerRecommendations(parsedResults.disease);\n        loadTreatmentSteps(parsedResults.disease);\n        loadTreatmentDuration(parsedResults.disease);\n      }\n    }\n    if (savedImage) {\n      setPlantImage(savedImage);\n    }\n  }, []);\n\n  const loadFertilizerRecommendations = async (diseaseName: string) => {\n    setLoadingFertilizers(true);\n    try {\n      const response = await fetch('/api/treatment/fertilizers', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ disease: diseaseName }),\n      });\n      \n      if (response.ok) {\n        const data = await response.json();\n        if (data.success && data.fertilizers) {\n          setFertilizers(data.fertilizers);\n        }\n      }\n    } catch (error) {\n      console.error('Error loading fertilizers:', error);\n      // Use fallback fertilizers\n      setFertilizers([\n        { name: 'Copper Fungicide Spray', price: '₹450', availability: 'In Stock' },\n        { name: 'Organic Disease Control', price: '₹320', availability: 'In Stock' },\n        { name: 'Plant Immunity Booster', price: '₹280', availability: 'Out of Stock' }\n      ]);\n    } finally {\n      setLoadingFertilizers(false);\n    }\n  };\n\n  const loadTreatmentSteps = async (diseaseName: string) => {\n    setLoadingSteps(true);\n    try {\n      const response = await fetch('/api/treatment/steps', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ disease: diseaseName }),\n      });\n      \n      if (response.ok) {\n        const data = await response.json();\n        if (data.success && data.steps) {\n          setTreatmentSteps(data.steps);\n        }\n      }\n    } catch (error) {\n      console.error('Error loading treatment steps:', error);\n      // Use fallback steps\n      setTreatmentSteps([\n        { step: 1, title: 'Remove Affected Parts', description: 'Carefully remove all affected leaves and stems. Dispose away from healthy plants.' },\n        { step: 2, title: 'Apply Treatment', description: 'Apply appropriate fungicide or treatment as recommended. Follow label instructions.' },\n        { step: 3, title: 'Improve Conditions', description: 'Improve air circulation and avoid overhead watering to prevent reinfection.' },\n        { step: 4, title: 'Monitor Progress', description: 'Check daily for new symptoms. Recovery should begin within 5-7 days.' },\n        { step: 5, title: 'Follow-up Care', description: 'Continue monitoring and apply follow-up treatments as needed.' }\n      ]);\n    } finally {\n      setLoadingSteps(false);\n    }\n  };\n\n  const loadTreatmentDuration = async (diseaseName: string) => {\n    setLoadingDuration(true);\n    try {\n      const response = await fetch('/api/treatment/duration', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ disease: diseaseName }),\n      });\n      \n      if (response.ok) {\n        const data = await response.json();\n        if (data.success) {\n          setTreatmentDuration(data.duration || '14-21 days');\n          setSuccessRate(data.success_rate || 87);\n        }\n      }\n    } catch (error) {\n      console.error('Error loading treatment duration:', error);\n      // Keep fallback values\n    } finally {\n      setLoadingDuration(false);\n    }\n  };\n\n  const addToActiveTreatments = () => {\n    if (results) {\n      const treatment = {\n        id: Date.now().toString(),\n        disease: results.disease,\n        startDate: new Date().toISOString(),\n        status: 'active',\n        progress: 0,\n        duration: treatmentDuration,\n        successRate: successRate,\n        nextAction: treatmentSteps.length > 0 ? treatmentSteps[0].title : 'Remove affected parts and apply treatment',\n        image: plantImage,\n        severity: results.severity,\n        confidence: results.confidence,\n        fertilizers: fertilizers,\n        steps: treatmentSteps.map((step, index) => ({\n          step: step.step,\n          title: step.title,\n          description: step.description,\n          completed: false,\n          dueDate: new Date(Date.now() + index * 24 * 60 * 60 * 1000).toISOString()\n        }))\n      };\n      \n      const existingTreatments = JSON.parse(localStorage.getItem('active_treatments') || '[]');\n      existingTreatments.push(treatment);\n      localStorage.setItem('active_treatments', JSON.stringify(existingTreatments));\n      \n      toast({\n        title: \"✅ Treatment Saved!\",\n        description: \"Added to your active treatments with AI-powered guidance and fertilizer recommendations.\"\n      });\n      \n      // No automatic navigation - user stays on results page\n    }\n  };\n\n  const handleFertilizerRecommendation = (fertilizerName: string) => {\n    // Store fertilizer search query and navigate to shop\n    localStorage.setItem('fertilizer_search', fertilizerName);\n    navigate('/shop?search=' + encodeURIComponent(fertilizerName));\n  };\n\n  const getStepColor = (stepNumber: number) => {\n    const colors = ['bg-green-500', 'bg-blue-500', 'bg-purple-500', 'bg-orange-500', 'bg-pink-500'];\n    return colors[(stepNumber - 1) % colors.length];\n  };\n\n  if (!results) {\n    return (\n      <div className=\"mobile-container\">\n        <div className=\"mobile-content flex items-center justify-center min-h-[50vh]\">\n          <div className=\"text-center\">\n            <AlertTriangle className=\"w-16 h-16 text-agri-warning mx-auto mb-4\" />\n            <h2 className=\"text-xl font-bold text-agri-accent mb-2\">No Results Found</h2>\n            <p className=\"text-agri-gray mb-4\">Please diagnose a plant first.</p>\n            <Button onClick={() => navigate('/diagnose')}>\n              Start Diagnosis\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case 'low': return 'text-green-600 bg-green-100';\n      case 'medium': return 'text-yellow-600 bg-yellow-100';\n      case 'high': return 'text-red-600 bg-red-100';\n      default: return 'text-gray-600 bg-gray-100';\n    }\n  };\n\n  return (\n    <div className=\"mobile-container\">\n      {/* Header */}\n      <div className=\"mobile-header bg-agri-cream\">\n        <div className=\"flex items-center space-x-3\">\n          <button \n            onClick={() => navigate('/diagnose')}\n            className=\"p-2 hover:bg-agri-light rounded-full transition-colors\"\n          >\n            <ArrowLeft className=\"w-6 h-6 text-agri-accent\" />\n          </button>\n          <h1 className=\"text-xl font-bold text-agri-accent\">Diagnosis Results</h1>\n        </div>\n      </div>\n\n      <div className=\"mobile-content space-y-6 pt-4\">\n        {/* Success Header */}\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 bg-agri-success/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <CheckCircle className=\"w-8 h-8 text-agri-success animate-bounce\" />\n          </div>\n          <h1 className=\"text-2xl font-bold text-agri-accent mb-2\">Diagnosis Complete</h1>\n          <p className=\"text-agri-gray\">\n            Analyzed on {new Date(results.detectedDate).toLocaleDateString()}\n          </p>\n        </div>\n\n        {/* Plant Image */}\n        {plantImage && (\n          <div className=\"relative rounded-3xl overflow-hidden shadow-2xl border border-gray-200\">\n            <img \n              src={plantImage} \n              alt=\"Diagnosed plant\" \n              className=\"w-full aspect-[4/3] object-cover\"\n            />\n            <div className=\"absolute inset-0 bg-gradient-to-t from-black/30 via-transparent to-transparent\" />\n            <div className=\"absolute top-4 right-4 bg-green-500 rounded-full p-3 shadow-lg\">\n              <Leaf className=\"w-6 h-6 text-white\" />\n            </div>\n            <div className=\"absolute bottom-4 left-4 text-white\">\n              <div className=\"text-sm font-medium opacity-90\">Analyzed Image</div>\n              <div className=\"text-xs opacity-70\">{new Date().toLocaleDateString()}</div>\n            </div>\n          </div>\n        )}\n\n        {/* Disease Detection */}\n        <div className={`plant-card border-l-4 ${results.isHealthy ? 'border-green-500' : 'border-red-500'}`}>\n          <div className=\"flex items-start justify-between mb-4\">\n            <div className=\"flex-1\">\n              <h2 className={`text-xl font-bold mb-2 ${results.isHealthy ? 'text-green-700' : 'text-red-700'}`}>\n                {results.disease}\n              </h2>\n              <div className=\"flex items-center space-x-3 mb-3\">\n                <div className=\"flex items-center space-x-2\">\n                  <Progress value={100} className=\"w-20 h-2\" />\n                  <span className={`text-sm font-medium ${results.isHealthy ? 'text-green-600' : 'text-red-600'}`}>\n                    100% Confidence\n                  </span>\n                </div>\n                <span className={`px-2 py-1 rounded-full text-xs font-medium ${\n                  results.isHealthy ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'\n                }`}>\n                  {results.isHealthy ? 'HEALTHY' : 'NEEDS ATTENTION'}\n                </span>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                <div>\n                  <span className=\"font-medium text-agri-accent\">Affected Area:</span>\n                  <p className=\"text-agri-gray\">{results.affectedArea}</p>\n                </div>\n                <div>\n                  <span className=\"font-medium text-agri-accent\">Stage:</span>\n                  <p className=\"text-agri-gray\">{results.stage}</p>\n                </div>\n              </div>\n            </div>\n            <AlertTriangle className={`w-8 h-8 ${results.isHealthy ? 'text-green-500' : 'text-red-500'}`} />\n          </div>\n        </div>\n\n        {/* Treatment Timeline */}\n        <div className=\"bg-blue-50 rounded-2xl p-6 border border-blue-200\">\n          <div className=\"flex items-center space-x-3 mb-4\">\n            {loadingDuration ? (\n              <Loader2 className=\"w-6 h-6 text-blue-600 animate-spin\" />\n            ) : (\n              <Clock className=\"w-6 h-6 text-blue-600\" />\n            )}\n            <h3 className=\"font-bold text-blue-900\">Treatment Timeline</h3>\n            {loadingDuration && <span className=\"text-xs text-blue-600\">Loading AI insights...</span>}\n          </div>\n          \n          <div className=\"space-y-3\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-blue-800\">Recovery Duration:</span>\n              <span className=\"font-semibold text-blue-900\">{treatmentDuration}</span>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-blue-800\">Success Rate:</span>\n              <span className=\"font-semibold text-agri-success\">{successRate}% farmers recovered</span>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-blue-800\">Best Treatment Time:</span>\n              <span className=\"font-semibold text-blue-900\">Early morning</span>\n            </div>\n          </div>\n          \n          <Progress value={successRate} className=\"w-full h-2 mt-4\" />\n        </div>\n\n        {/* Treatment Steps */}\n        <div className=\"bg-gradient-to-r from-green-50 to-blue-50 rounded-3xl p-6 border border-green-200\">\n          <div className=\"flex items-center space-x-3 mb-6\">\n            <div className=\"bg-green-500 rounded-full p-3\">\n              {loadingSteps ? (\n                <Loader2 className=\"w-6 h-6 text-white animate-spin\" />\n              ) : (\n                <Target className=\"w-6 h-6 text-white\" />\n              )}\n            </div>\n            <div>\n              <h3 className=\"font-bold text-gray-900 text-lg\">Treatment Steps</h3>\n              <p className=\"text-sm text-gray-600\">\n                {loadingSteps ? 'Loading AI-powered treatment plan...' : 'AI-generated steps for best results'}\n              </p>\n            </div>\n          </div>\n          \n          <div className=\"space-y-4\">\n            {loadingSteps ? (\n              <div className=\"flex items-center justify-center py-8\">\n                <Loader2 className=\"w-8 h-8 text-green-500 animate-spin\" />\n                <span className=\"ml-2 text-gray-600\">Generating personalized treatment steps...</span>\n              </div>\n            ) : (\n              treatmentSteps.map((step) => (\n                <div key={step.step} className=\"flex items-start space-x-4 p-4 bg-white rounded-2xl shadow-sm\">\n                  <div className={`${getStepColor(step.step)} text-white rounded-full p-2 text-sm font-bold flex-shrink-0`}>\n                    {step.step}\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold text-gray-900 mb-1\">{step.title}</h4>\n                    <p className=\"text-sm text-gray-600\">{step.description}</p>\n                  </div>\n                </div>\n              ))\n            )}\n          </div>\n        </div>\n        \n        {/* Add to Active Treatments */}\n        <div className=\"bg-gradient-to-r from-green-500 to-green-600 rounded-3xl p-6 text-white shadow-xl\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div>\n              <h3 className=\"font-bold text-white text-lg mb-2\">Save Treatment Plan</h3>\n              <p className=\"text-green-100 text-sm\">Track progress with daily reminders and monitoring</p>\n            </div>\n            <Calendar className=\"w-10 h-10 text-green-200\" />\n          </div>\n          \n          <div className=\"grid grid-cols-2 gap-4 mb-6 text-sm\">\n            <div className=\"bg-white/20 rounded-2xl p-3\">\n              <div className=\"font-semibold mb-1\">Duration</div>\n              <div className=\"text-green-100\">{treatmentDuration}</div>\n            </div>\n            <div className=\"bg-white/20 rounded-2xl p-3\">\n              <div className=\"font-semibold mb-1\">Success Rate</div>\n              <div className=\"text-green-100\">{successRate}% recovery</div>\n            </div>\n          </div>\n          \n          <Button \n            onClick={addToActiveTreatments}\n            className=\"w-full bg-white text-green-600 hover:bg-green-50 font-semibold py-3 rounded-2xl transition-all duration-300 transform hover:scale-105\"\n          >\n            <Plus className=\"w-5 h-5 mr-2\" />\n            Save to My Treatments\n          </Button>\n        </div>\n\n        {/* Fertilizer Recommendations */}\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center space-x-3\">\n            <h2 className=\"text-xl font-bold text-agri-accent\">Recommended Fertilizers</h2>\n            {loadingFertilizers && (\n              <Loader2 className=\"w-5 h-5 text-agri-accent animate-spin\" />\n            )}\n          </div>\n          {loadingFertilizers && (\n            <p className=\"text-sm text-gray-600\">Getting AI-powered fertilizer recommendations...</p>\n          )}\n          \n          {loadingFertilizers ? (\n            <div className=\"flex items-center justify-center py-8\">\n              <Loader2 className=\"w-8 h-8 text-green-500 animate-spin\" />\n              <span className=\"ml-2 text-gray-600\">Loading fertilizer recommendations...</span>\n            </div>\n          ) : (\n            fertilizers.map((fertilizer, index) => (\n              <div key={index} className=\"plant-card\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-semibold text-agri-accent\">{fertilizer.name}</h3>\n                    <p className=\"text-lg font-bold text-agri-primary\">{fertilizer.price}</p>\n                  </div>\n                  <div className=\"text-right\">\n                    <span className={`px-2 py-1 rounded-full text-xs font-medium ${\n                      fertilizer.availability === 'In Stock' ? 'bg-green-100 text-green-600' : 'bg-red-100 text-red-600'\n                    }`}>\n                      {fertilizer.availability}\n                    </span>\n                  </div>\n                </div>\n                \n                <Button \n                  onClick={() => handleFertilizerRecommendation(fertilizer.name)}\n                  disabled={fertilizer.availability !== 'In Stock'}\n                  className=\"w-full\"\n                  variant={fertilizer.availability === 'In Stock' ? \"default\" : \"outline\"}\n                >\n                  <ShoppingCart className=\"w-4 h-4 mr-2\" />\n                  {fertilizer.availability === 'In Stock' ? 'Order Now' : 'Check Alternatives'}\n                </Button>\n              </div>\n            ))\n          )}\n        </div>\n\n        {/* Alternative Options */}\n        <div className=\"space-y-4\">\n          <h2 className=\"text-xl font-bold text-agri-accent\">Alternative Options</h2>\n          \n          {/* Nearby Shops */}\n          <div className=\"plant-card bg-gradient-to-r from-purple-500 to-purple-600 text-white\">\n            <div className=\"flex items-start justify-between mb-4\">\n              <div>\n                <h3 className=\"text-lg font-bold mb-2\">Visit Nearby Fertilizer Shops</h3>\n                <p className=\"text-white/90 text-sm mb-4\">Get directions and contact details</p>\n                \n                <div className=\"space-y-1 text-sm\">\n                  <div className=\"flex items-center space-x-2\">\n                    <CheckCircle className=\"w-4 h-4\" />\n                    <span>3 shops within 5km</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <CheckCircle className=\"w-4 h-4\" />\n                    <span>GPS navigation available</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <CheckCircle className=\"w-4 h-4\" />\n                    <span>Expert advice included</span>\n                  </div>\n                </div>\n              </div>\n              <MapPin className=\"w-8 h-8 opacity-80\" />\n            </div>\n            \n            <Button \n              onClick={() => navigate('/nearby-shops')}\n              className=\"w-full bg-white text-purple-600 hover:bg-white/90 font-semibold\"\n            >\n              <MapPin className=\"w-4 h-4 mr-2\" />\n              Find Nearest Shops\n            </Button>\n          </div>\n\n        </div>\n\n        {/* Action Summary */}\n        <div className=\"bg-agri-cream rounded-xl p-4 border border-agri-primary/20\">\n          <h3 className=\"font-semibold text-agri-accent mb-2\">Next Steps Summary:</h3>\n          <ol className=\"space-y-1 text-sm text-agri-gray\">\n            <li>1. Add to active treatments for monitoring</li>\n            <li>2. Order recommended fertilizers</li>\n            <li>3. Apply treatment in early morning</li>\n            <li>4. Monitor progress daily</li>\n            <li>5. Expect recovery in {treatmentDuration}</li>\n          </ol>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DiagnoseResults;","size_bytes":21141},"src/pages/FertilizerGuide.tsx":{"content":"import { useState } from 'react';\nimport { \n  ArrowLeft,\n  Bookmark,\n  BookmarkCheck,\n  Leaf,\n  Clock,\n  Droplets,\n  Volume2,\n  ChevronDown,\n  ChevronUp,\n  Calendar,\n  Beaker,\n  Info\n} from 'lucide-react';\nimport { useNavigate } from 'react-router-dom';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n\nconst FertilizerGuide = () => {\n  const navigate = useNavigate();\n  const [savedCrops, setSavedCrops] = useState<string[]>(() => {\n    const saved = localStorage.getItem('kisanmitra_saved_fertilizer_guides');\n    return saved ? JSON.parse(saved) : [];\n  });\n  const [expandedCards, setExpandedCards] = useState<string[]>([]);\n\n  const cropData = [\n    {\n      id: 'tomato',\n      name: 'Tomato',\n      image: '🍅',\n      season: 'Kharif/Rabi',\n      fertilizers: [\n        {\n          name: 'NPK (10:26:26)',\n          quantity: '200 kg/acre',\n          timing: 'At planting',\n          method: 'Basal application',\n          notes: 'Mix with soil before transplanting'\n        },\n        {\n          name: 'Urea (46% N)',\n          quantity: '50 kg/acre',\n          timing: '20 days after transplant',\n          method: 'Side dressing',\n          notes: 'Apply around plant base, avoid stems'\n        },\n        {\n          name: 'Calcium Nitrate',\n          quantity: '25 kg/acre',\n          timing: 'Flowering stage',\n          method: 'Foliar spray',\n          notes: 'Prevents blossom end rot'\n        }\n      ],\n      steps: [\n        'Prepare field with proper drainage',\n        'Apply basal fertilizer 1 week before transplanting',\n        'Transplant healthy seedlings',\n        'Apply first top dressing after 20 days',\n        'Monitor plant growth and adjust as needed'\n      ]\n    },\n    {\n      id: 'wheat',\n      name: 'Wheat',\n      image: '🌾',\n      season: 'Rabi',\n      fertilizers: [\n        {\n          name: 'DAP (18:46:0)',\n          quantity: '150 kg/acre',\n          timing: 'At sowing',\n          method: 'Drill with seed',\n          notes: 'Place 2-3 cm below seed level'\n        },\n        {\n          name: 'Urea (46% N)',\n          quantity: '65 kg/acre',\n          timing: '1st irrigation (21 days)',\n          method: 'Broadcasting',\n          notes: 'Apply before irrigation'\n        },\n        {\n          name: 'Urea (46% N)',\n          quantity: '65 kg/acre',\n          timing: '2nd irrigation (45 days)',\n          method: 'Broadcasting',\n          notes: 'Apply during tillering stage'\n        }\n      ],\n      steps: [\n        'Test soil pH (ideal 6.0-7.5)',\n        'Apply basal dose with seed drilling',\n        'Ensure proper seed depth (4-5 cm)',\n        'First top dressing at crown root stage',\n        'Second top dressing at tillering',\n        'Monitor for nutrient deficiency signs'\n      ]\n    },\n    {\n      id: 'rice',\n      name: 'Rice',\n      image: '🌾',\n      season: 'Kharif',\n      fertilizers: [\n        {\n          name: 'NPK (12:32:16)',\n          quantity: '125 kg/acre',\n          timing: 'Before transplanting',\n          method: 'Broadcasting',\n          notes: 'Mix thoroughly with puddled soil'\n        },\n        {\n          name: 'Urea (46% N)',\n          quantity: '45 kg/acre',\n          timing: '15 days after transplant',\n          method: 'Broadcasting',\n          notes: 'Apply in standing water'\n        },\n        {\n          name: 'Urea (46% N)',\n          quantity: '45 kg/acre',\n          timing: 'At panicle initiation',\n          method: 'Broadcasting',\n          notes: 'Apply during tillering stage'\n        }\n      ],\n      steps: [\n        'Prepare puddled field with standing water',\n        'Apply basal fertilizer 2-3 days before transplanting',\n        'Transplant 21-day old seedlings',\n        'Maintain water level at 2-5 cm',\n        'Apply nitrogen in split doses',\n        'Drain field 10 days before harvest'\n      ]\n    },\n    {\n      id: 'cotton',\n      name: 'Cotton',\n      image: '☁️',\n      season: 'Kharif',\n      fertilizers: [\n        {\n          name: 'NPK (17:17:17)',\n          quantity: '100 kg/acre',\n          timing: 'At sowing',\n          method: 'Side placement',\n          notes: 'Place 3-4 cm away from seed'\n        },\n        {\n          name: 'Urea (46% N)',\n          quantity: '60 kg/acre',\n          timing: '30-35 days after sowing',\n          method: 'Side dressing',\n          notes: 'Apply during square formation'\n        },\n        {\n          name: 'MOP (60% K2O)',\n          quantity: '35 kg/acre',\n          timing: 'At flowering',\n          method: 'Broadcasting',\n          notes: 'Helps in boll development'\n        }\n      ],\n      steps: [\n        'Select well-drained black cotton soil',\n        'Apply pre-sowing fertilizers',\n        'Sow seeds at proper depth (2-3 cm)',\n        'First top dressing during square stage',\n        'Second application at flowering',\n        'Monitor for pink bollworm'\n      ]\n    },\n    {\n      id: 'maize',\n      name: 'Maize',\n      image: '🌽',\n      season: 'Kharif/Rabi',\n      fertilizers: [\n        {\n          name: 'NPK (12:32:16)',\n          quantity: '125 kg/acre',\n          timing: 'At sowing',\n          method: 'Band placement',\n          notes: 'Place 5 cm away and below seed'\n        },\n        {\n          name: 'Urea (46% N)',\n          quantity: '65 kg/acre',\n          timing: '25-30 days after sowing',\n          method: 'Side dressing',\n          notes: 'Apply at knee-high stage'\n        },\n        {\n          name: 'Urea (46% N)',\n          quantity: '65 kg/acre',\n          timing: 'Pre-tasseling stage',\n          method: 'Side dressing',\n          notes: 'Apply 50-55 days after sowing'\n        }\n      ],\n      steps: [\n        'Choose well-drained fertile soil',\n        'Apply basal dose at time of sowing',\n        'Maintain plant spacing of 60x20 cm',\n        'First top dressing at knee-high stage',\n        'Second top dressing before tasseling',\n        'Ensure adequate moisture throughout'\n      ]\n    }\n  ];\n\n  const toggleSaveCrop = (cropId: string) => {\n    const updatedSaved = savedCrops.includes(cropId)\n      ? savedCrops.filter(id => id !== cropId)\n      : [...savedCrops, cropId];\n    \n    setSavedCrops(updatedSaved);\n    localStorage.setItem('kisanmitra_saved_fertilizer_guides', JSON.stringify(updatedSaved));\n  };\n\n  const toggleExpandCard = (cropId: string) => {\n    setExpandedCards(prev => \n      prev.includes(cropId) \n        ? prev.filter(id => id !== cropId)\n        : [...prev, cropId]\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-blue-50\">\n      {/* Header */}\n      <div className=\"bg-white shadow-sm border-b border-green-100 sticky top-0 z-10\">\n        <div className=\"px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <button\n                onClick={() => navigate('/')}\n                className=\"p-2 hover:bg-gray-100 rounded-xl transition-colors\"\n              >\n                <ArrowLeft className=\"w-6 h-6 text-gray-600\" />\n              </button>\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"p-3 bg-green-100 rounded-xl\">\n                  <Beaker className=\"w-7 h-7 text-green-600\" />\n                </div>\n                <div>\n                  <h1 className=\"text-2xl font-bold text-gray-900\">Fertilizer Guidance</h1>\n                  <p className=\"text-sm text-gray-600\">Crop-specific fertilizer recommendations</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"px-6 py-8 space-y-8\">\n        {/* Info Card */}\n        <Card className=\"bg-gradient-to-r from-green-50 to-blue-50 border-2 border-green-200\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-start space-x-4\">\n              <div className=\"p-3 bg-white rounded-xl\">\n                <Info className=\"w-6 h-6 text-green-600\" />\n              </div>\n              <div>\n                <h3 className=\"font-bold text-gray-900 mb-2 text-lg\">\n                  Scientific Fertilizer Recommendations\n                </h3>\n                <p className=\"text-gray-700 text-base leading-relaxed\">\n                  These guidelines are based on soil science research. Always conduct soil testing \n                  for best results. Tap 📖 to save guidance for your crops.\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Crop Cards */}\n        <div className=\"space-y-6\">\n          {cropData.map((crop) => {\n            const isExpanded = expandedCards.includes(crop.id);\n            const isSaved = savedCrops.includes(crop.id);\n            \n            return (\n              <Card key={crop.id} className=\"bg-white rounded-3xl shadow-lg border border-gray-100 overflow-hidden\">\n                {/* Crop Header */}\n                <CardHeader className=\"bg-gradient-to-r from-green-50 to-green-100 border-b border-green-200\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"text-4xl\">{crop.image}</div>\n                      <div>\n                        <CardTitle className=\"text-2xl font-bold text-gray-900\">{crop.name}</CardTitle>\n                        <div className=\"flex items-center space-x-2 mt-1\">\n                          <Calendar className=\"w-4 h-4 text-green-600\" />\n                          <span className=\"text-green-700 font-medium\">{crop.season} Season</span>\n                        </div>\n                      </div>\n                    </div>\n                    <button\n                      onClick={() => toggleSaveCrop(crop.id)}\n                      className={`p-3 rounded-xl transition-all duration-200 ${\n                        isSaved \n                          ? 'bg-green-100 text-green-600' \n                          : 'bg-gray-100 text-gray-600 hover:bg-green-100 hover:text-green-600'\n                      }`}\n                    >\n                      {isSaved ? (\n                        <BookmarkCheck className=\"w-6 h-6\" />\n                      ) : (\n                        <Bookmark className=\"w-6 h-6\" />\n                      )}\n                    </button>\n                  </div>\n                </CardHeader>\n\n                {/* Fertilizer Table */}\n                <CardContent className=\"p-6\">\n                  <div className=\"space-y-4\">\n                    <h3 className=\"text-xl font-bold text-gray-900 mb-4 flex items-center space-x-2\">\n                      <Droplets className=\"w-5 h-5 text-blue-600\" />\n                      <span>Fertilizer Schedule</span>\n                    </h3>\n                    \n                    <div className=\"space-y-3\">\n                      {crop.fertilizers.map((fertilizer, index) => (\n                        <div key={index} className=\"bg-gray-50 rounded-2xl p-4 border border-gray-200\">\n                          <div className=\"flex items-start justify-between mb-3\">\n                            <div className=\"flex-1\">\n                              <h4 className=\"font-bold text-gray-900 text-lg\">{fertilizer.name}</h4>\n                              <p className=\"text-green-600 font-bold text-base\">{fertilizer.quantity}</p>\n                            </div>\n                            <div className=\"text-right\">\n                              <div className=\"flex items-center space-x-1 text-blue-600\">\n                                <Clock className=\"w-4 h-4\" />\n                                <span className=\"text-sm font-medium\">{fertilizer.timing}</span>\n                              </div>\n                            </div>\n                          </div>\n                          \n                          <div className=\"grid grid-cols-1 gap-2\">\n                            <div className=\"flex items-center space-x-2\">\n                              <span className=\"text-sm font-medium text-gray-600\">Method:</span>\n                              <span className=\"text-sm text-gray-800 font-medium\">{fertilizer.method}</span>\n                            </div>\n                            <div className=\"flex items-start space-x-2\">\n                              <span className=\"text-sm font-medium text-gray-600 mt-0.5\">Notes:</span>\n                              <span className=\"text-sm text-gray-700 leading-relaxed\">{fertilizer.notes}</span>\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n\n                  {/* Expandable Steps */}\n                  <div className=\"mt-6\">\n                    <button\n                      onClick={() => toggleExpandCard(crop.id)}\n                      className=\"w-full flex items-center justify-between p-4 bg-gradient-to-r from-blue-50 to-purple-50 rounded-2xl hover:from-blue-100 hover:to-purple-100 transition-colors\"\n                    >\n                      <div className=\"flex items-center space-x-3\">\n                        <Leaf className=\"w-5 h-5 text-green-600\" />\n                        <span className=\"font-bold text-gray-900\">Step-by-Step Instructions</span>\n                      </div>\n                      {isExpanded ? (\n                        <ChevronUp className=\"w-5 h-5 text-gray-600\" />\n                      ) : (\n                        <ChevronDown className=\"w-5 h-5 text-gray-600\" />\n                      )}\n                    </button>\n\n                    {isExpanded && (\n                      <div className=\"mt-4 space-y-3\">\n                        {crop.steps.map((step, index) => (\n                          <div key={index} className=\"flex items-start space-x-3 p-3 bg-white rounded-xl border border-gray-200\">\n                            <div className=\"flex-shrink-0 w-6 h-6 bg-green-100 rounded-full flex items-center justify-center\">\n                              <span className=\"text-xs font-bold text-green-600\">{index + 1}</span>\n                            </div>\n                            <p className=\"text-gray-700 text-sm leading-relaxed\">{step}</p>\n                          </div>\n                        ))}\n                        \n                        <div className=\"mt-4 p-4 bg-yellow-50 rounded-xl border border-yellow-200\">\n                          <div className=\"flex items-center space-x-2 mb-2\">\n                            <Volume2 className=\"w-5 h-5 text-yellow-600\" />\n                            <span className=\"font-bold text-yellow-800\">Voice Guidance</span>\n                          </div>\n                          <p className=\"text-yellow-700 text-sm\">\n                            Tap the speaker icon for audio instructions in your local language.\n                          </p>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n\n                  {/* Save Button */}\n                  <div className=\"mt-6\">\n                    <Button\n                      onClick={() => toggleSaveCrop(crop.id)}\n                      className={`w-full py-4 rounded-2xl font-bold text-lg transition-all duration-300 ${\n                        isSaved\n                          ? 'bg-green-100 text-green-700 border-2 border-green-300 hover:bg-green-200'\n                          : 'bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white shadow-lg hover:shadow-xl'\n                      }`}\n                    >\n                      <div className=\"flex items-center justify-center space-x-3\">\n                        {isSaved ? (\n                          <>\n                            <BookmarkCheck className=\"w-6 h-6\" />\n                            <span>Saved to My Guidance</span>\n                          </>\n                        ) : (\n                          <>\n                            <Bookmark className=\"w-6 h-6\" />\n                            <span>Save Guidance</span>\n                          </>\n                        )}\n                      </div>\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FertilizerGuide;","size_bytes":16508},"src/pages/Guides.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { \n  ArrowLeft, \n  Search, \n  BookOpen, \n  Bookmark,\n  ChevronRight,\n  Sprout,\n  Droplets,\n  Sun,\n  Scissors,\n  Beaker,\n  Shield,\n  Heart,\n  BookmarkCheck,\n  Wheat,\n  Corn\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\n\nconst Guides = () => {\n  const navigate = useNavigate();\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState('All');\n  const [savedGuides, setSavedGuides] = useState<string[]>([]);\n  \n  // Load saved guides from localStorage\n  useEffect(() => {\n    const saved = localStorage.getItem('kisanmitra_saved_cultivation_guides');\n    setSavedGuides(saved ? JSON.parse(saved) : []);\n  }, []);\n\n  const categories = [\n    { id: 'All', name: 'All', icon: BookOpen },\n    { id: 'Planting', name: 'Planting', icon: Sprout },\n    { id: 'Irrigation', name: 'Irrigation', icon: Droplets },\n    { id: 'Harvesting', name: 'Harvesting', icon: Scissors }\n  ];\n\n  const cropGuides = [\n    {\n      id: 'tomato',\n      name: 'Tomato',\n      image: '🍅',\n      keyStages: [\n        { icon: Sprout, name: 'Seed', description: 'Variety selection & seed treatment' },\n        { icon: Sun, name: 'Nursery', description: 'Spacing & nursery management' },\n        { icon: Droplets, name: 'Irrigation', description: 'Drip irrigation setup' },\n        { icon: Scissors, name: 'Harvest', description: 'Staking & maintenance' }\n      ],\n      summary: [\n        'Variety selection + seed treatment',\n        'Spacing & nursery management', \n        'Basal/top fertilization schedule',\n        'Drip irrigation system',\n        'Staking & maintenance techniques'\n      ],\n      categories: ['Planting', 'Irrigation']\n    },\n    {\n      id: 'wheat',\n      name: 'Wheat',\n      image: '🌾',\n      keyStages: [\n        { icon: Beaker, name: 'Treatment', description: 'Seed treatment process' },\n        { icon: Sprout, name: 'Sowing', description: 'Sowing method & seed rate' },\n        { icon: Droplets, name: 'Irrigation', description: 'Six-stage irrigation' },\n        { icon: Shield, name: 'Control', description: 'Weed & fertilizer control' }\n      ],\n      summary: [\n        'Seed treatment protocols',\n        'Sowing method & seed rate',\n        'Six-stage irrigation schedule',\n        'Fertilizer application timing',\n        'Weed control strategies'\n      ],\n      categories: ['Planting', 'Irrigation']\n    },\n    {\n      id: 'maize',\n      name: 'Maize',\n      image: '🌽', \n      keyStages: [\n        { icon: Sun, name: 'Land Prep', description: 'Land prep & raised beds' },\n        { icon: Beaker, name: 'Treatment', description: 'Seed rate & treatment' },\n        { icon: Sprout, name: 'Spacing', description: 'Proper plant spacing' },\n        { icon: Heart, name: 'Fertilizer', description: 'Trio fertilizer schedule' }\n      ],\n      summary: [\n        'Land preparation & raised beds',\n        'Seed rate & treatment methods',\n        'Optimal plant spacing',\n        'Trio fertilizer schedule',\n        'Growth monitoring techniques'\n      ],\n      categories: ['Planting']\n    }\n  ];\n\n  // Save/unsave cultivation guide\n  const toggleSaveGuide = (guideId: string) => {\n    const updatedSaved = savedGuides.includes(guideId)\n      ? savedGuides.filter(id => id !== guideId)\n      : [...savedGuides, guideId];\n    \n    setSavedGuides(updatedSaved);\n    localStorage.setItem('kisanmitra_saved_cultivation_guides', JSON.stringify(updatedSaved));\n  };\n\n  const filteredGuides = cropGuides.filter(guide => {\n    const matchesSearch = guide.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         guide.summary.some(item => item.toLowerCase().includes(searchQuery.toLowerCase()));\n    const matchesCategory = selectedCategory === 'All' || guide.categories.includes(selectedCategory);\n    return matchesSearch && matchesCategory;\n  });\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-emerald-50\">\n      {/* Header */}\n      <div className=\"bg-gradient-to-r from-green-600 to-emerald-600 px-4 py-4 shadow-lg\">\n        <div className=\"flex items-center space-x-3\">\n          <button onClick={() => navigate('/home')} className=\"text-white hover:bg-white/20 rounded-full p-2\">\n            <ArrowLeft className=\"w-6 h-6\" />\n          </button>\n          <h1 className=\"text-xl font-bold text-white\">Cultivation Guides</h1>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"px-4 py-6 space-y-6\">\n        {/* Search Bar */}\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n          <Input\n            placeholder=\"Search crops or guides...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10 py-3 text-base bg-white border-gray-200 rounded-xl shadow-sm\"\n          />\n        </div>\n\n        {/* Category Tabs */}\n        <div className=\"flex space-x-2 overflow-x-auto pb-2\">\n          {categories.map((category) => (\n            <button\n              key={category.id}\n              onClick={() => setSelectedCategory(category.id)}\n              className={`flex items-center space-x-2 px-4 py-2 rounded-xl whitespace-nowrap transition-all ${\n                selectedCategory === category.id\n                  ? 'bg-green-600 text-white shadow-md'\n                  : 'bg-white text-gray-600 border border-gray-200 hover:bg-gray-50'\n              }`}\n            >\n              <category.icon className=\"w-4 h-4\" />\n              <span className=\"text-sm font-medium\">{category.name}</span>\n            </button>\n          ))}\n        </div>\n\n        {/* Crop Cards */}\n        <div className=\"space-y-4\">\n          {filteredGuides.map((crop) => (\n            <div key={crop.id} className=\"bg-white rounded-2xl shadow-lg border border-green-100 overflow-hidden\">\n              {/* Crop Header */}\n              <div className=\"p-6 border-b border-green-50\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"text-4xl\">{crop.image}</div>\n                    <div>\n                      <h3 className=\"text-xl font-bold text-gray-900\">{crop.name}</h3>\n                      <p className=\"text-sm text-gray-500\">Complete cultivation guide</p>\n                    </div>\n                  </div>\n                  <button\n                    onClick={() => toggleSaveGuide(crop.id)}\n                    className={`p-2 rounded-lg transition-colors ${\n                      savedGuides.includes(crop.id)\n                        ? 'bg-green-100 text-green-600'\n                        : 'bg-gray-100 text-gray-500 hover:bg-green-50 hover:text-green-600'\n                    }`}\n                  >\n                    {savedGuides.includes(crop.id) ? (\n                      <BookmarkCheck className=\"w-5 h-5\" />\n                    ) : (\n                      <Bookmark className=\"w-5 h-5\" />\n                    )}\n                  </button>\n                </div>\n\n                {/* Key Stages Icons */}\n                <div className=\"flex items-center justify-between mb-4 bg-green-50 rounded-xl p-4\">\n                  {crop.keyStages.map((stage, index) => (\n                    <div key={index} className=\"flex flex-col items-center space-y-2 flex-1\">\n                      <div className=\"p-2 bg-white rounded-lg shadow-sm\">\n                        <stage.icon className=\"w-5 h-5 text-green-600\" />\n                      </div>\n                      <div className=\"text-center\">\n                        <p className=\"text-xs font-medium text-gray-700\">{stage.name}</p>\n                        <p className=\"text-xs text-gray-500\">{stage.description}</p>\n                      </div>\n                      {index < crop.keyStages.length - 1 && (\n                        <ChevronRight className=\"absolute right-0 w-4 h-4 text-gray-400\" />\n                      )}\n                    </div>\n                  ))}\n                </div>\n\n                {/* Summary Points */}\n                <div className=\"space-y-2 mb-6\">\n                  {crop.summary.map((point, index) => (\n                    <div key={index} className=\"flex items-start space-x-2\">\n                      <div className=\"w-1.5 h-1.5 bg-green-600 rounded-full mt-2 flex-shrink-0\"></div>\n                      <p className=\"text-sm text-gray-700\">{point}</p>\n                    </div>\n                  ))}\n                </div>\n\n                {/* Action Button */}\n                <Button \n                  onClick={() => navigate(`/guides/${crop.id}`)}\n                  className=\"w-full bg-green-600 hover:bg-green-700 text-white rounded-xl py-3 shadow-md transition-all\"\n                >\n                  Read Full Guide\n                  <ChevronRight className=\"w-4 h-4 ml-2\" />\n                </Button>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {/* No Results */}\n        {filteredGuides.length === 0 && (\n          <div className=\"text-center py-12\">\n            <BookOpen className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold text-gray-700 mb-2\">No guides found</h3>\n            <p className=\"text-gray-500 mb-6\">Try adjusting your search or browse different categories</p>\n            <Button \n              onClick={() => {\n                setSearchQuery('');\n                setSelectedCategory('All');\n              }}\n              variant=\"outline\"\n              className=\"border-green-600 text-green-600 hover:bg-green-50\"\n            >\n              Clear Filters\n            </Button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Guides;","size_bytes":10005},"src/pages/Home.tsx":{"content":"\nimport { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { \n  Bell, \n  Camera, \n  ShoppingCart, \n  MapPin, \n  Package, \n  Sprout, \n  Home as HomeIcon,\n  User,\n  Lightbulb,\n  AlertTriangle,\n  TrendingUp,\n  Store,\n  Leaf,\n  Cloud,\n  Sun,\n  CheckCircle,\n  ChevronDown,\n  Droplets,\n  Activity,\n  TestTube,\n  Beaker,\n  IndianRupee,\n  ArrowRight,\n  Volume2,\n  BookOpen,\n  BarChart3,\n  List,\n  ChevronRight,\n  CloudRain,\n  Thermometer,\n  MessageCircle\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport LanguageSwitcher from '@/components/LanguageSwitcher';\nimport NotificationPanel from '@/components/NotificationPanel';\nimport { weatherService, WeatherData } from '@/lib/weather';\nimport { marketData } from '@/lib/marketData';\n\nconst Home = () => {\n  const navigate = useNavigate();\n  const [showNotifications, setShowNotifications] = useState(false);\n  const [weather, setWeather] = useState<WeatherData | null>(null);\n  const [weatherLoading, setWeatherLoading] = useState(true);\n  \n  // Get user data\n  const userData = JSON.parse(localStorage.getItem('kisanmitra_user') || '{}');\n  const userName = userData.name || 'Farmer';\n  \n  // Get time-based greeting\n  const getGreeting = () => {\n    const hour = new Date().getHours();\n    if (hour < 12) return '🌱 Good Morning';\n    if (hour < 17) return '🌞 Good Afternoon';\n    return '🌙 Good Evening';\n  };\n\n  // Load weather data\n  useEffect(() => {\n    const loadWeather = async () => {\n      try {\n        setWeatherLoading(true);\n        \n        // Try to get current location first\n        try {\n          const location = await weatherService.getCurrentLocation();\n          const weatherData = await weatherService.getCurrentWeather(location.lat, location.lon);\n          setWeather(weatherData);\n        } catch (locationError) {\n          // If location access fails, use a default location\n          console.warn('Location access failed, using default location');\n          const defaultWeather = await weatherService.getWeatherByCity('Delhi, IN');\n          setWeather(defaultWeather);\n        }\n      } catch (error) {\n        console.error('Weather fetch error:', error);\n        // Keep weather as null, will show fallback UI\n      } finally {\n        setWeatherLoading(false);\n      }\n    };\n\n    loadWeather();\n  }, []);\n\n  // Calculate top 3 price hikes dynamically from real Chennai market data\n  const getTopPriceHikes = () => {\n    // Collect all crops with upward trends and parse their change percentages\n    const cropHikes: Array<{crop: string, price: string, trend: string, change: string, changeValue: string, changePercent: number}> = [];\n    \n    marketData.forEach((market: any) => {\n      market.crops.forEach((crop: any) => {\n        if (crop.trend === 'up') {\n          const changePercent = parseInt(crop.change.replace('%', '').replace('+', ''));\n          const priceMatch = crop.price.match(/₹([\\d.]+)/);\n          const currentPrice = priceMatch ? parseFloat(priceMatch[1]) : 0;\n          const prevPriceMatch = crop.previousPrice.match(/₹([\\d.]+)/);\n          const previousPrice = prevPriceMatch ? parseFloat(prevPriceMatch[1]) : currentPrice;\n          const changeValue = currentPrice - previousPrice;\n          \n          cropHikes.push({\n            crop: crop.name,\n            price: crop.price,\n            trend: crop.trend,\n            change: crop.change,\n            changeValue: `+₹${changeValue.toFixed(2)}`,\n            changePercent\n          });\n        }\n      });\n    });\n    \n    // Sort by change percentage (highest first) and take top 3 unique crops\n    const uniqueHikes = cropHikes.filter((crop, index, arr) => \n      arr.findIndex(c => c.crop === crop.crop) === index\n    );\n    \n    return uniqueHikes\n      .sort((a, b) => b.changePercent - a.changePercent)\n      .slice(0, 3);\n  };\n\n  const marketPrices = getTopPriceHikes();\n\n  const quickActions = [\n    {\n      id: 'listings',\n      title: 'My Listings',\n      subtitle: 'Manage crops',\n      icon: Package,\n      bgColor: 'bg-green-50',\n      iconColor: 'text-green-600',\n      badge: '3',\n      action: () => navigate('/sell')\n    },\n    {\n      id: 'sell',\n      title: 'Sell Produce',\n      subtitle: 'Post your harvest',\n      icon: TrendingUp,\n      bgColor: 'bg-agri-light',\n      iconColor: 'text-agri-primary',\n      badge: 'NEW',\n      action: () => navigate('/sell')\n    },\n    {\n      id: 'fertilizers',\n      title: 'Order Fertilizers',\n      subtitle: 'Shop nutrients',\n      icon: ShoppingCart,\n      bgColor: 'bg-green-50',\n      iconColor: 'text-green-600',\n      action: () => navigate('/shop')\n    },\n    {\n      id: 'shops',\n      title: 'Nearby Shops',\n      subtitle: 'Find agri stores',\n      icon: MapPin,\n      bgColor: 'bg-green-50',\n      iconColor: 'text-green-600',\n      action: () => navigate('/shops')\n    },\n    {\n      id: 'orders',\n      title: 'My Orders',\n      subtitle: 'Track orders',\n      icon: Package,\n      bgColor: 'bg-agri-light-blue',\n      iconColor: 'text-agri-info',\n      action: () => navigate('/orders')\n    }\n  ];\n\n  const farmActions = [\n    {\n      id: 'treatments',\n      title: 'Active Treatments',\n      subtitle: '2 ongoing',\n      icon: Activity,\n      bgColor: 'bg-red-50',\n      iconColor: 'text-red-600',\n      badge: 2,\n      action: () => navigate('/treatments')\n    },\n    {\n      id: 'guides',\n      title: 'Cultivation Guides',\n      subtitle: 'Growing tips',\n      icon: Sprout,\n      bgColor: 'bg-agri-light',\n      iconColor: 'text-agri-primary',\n      action: () => navigate('/guides')\n    }\n  ];\n\n  return (\n    <div className=\"mobile-container bg-gradient-to-br from-green-50 via-emerald-50 to-lime-50 min-h-screen\">\n      {/* Header */}\n      <div className=\"bg-green-50 px-4 py-3 shadow-sm\">\n        <div className=\"flex items-center justify-between\">\n          {/* Left side - Logo and Greeting */}\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-16 h-16 bg-white rounded-2xl shadow-md flex items-center justify-center p-1\">\n              <img \n                src=\"/assets/kisanmitra-logo-clean.png\" \n                alt=\"KisanMitra Logo\" \n                className=\"w-full h-full object-contain\"\n              />\n            </div>\n            <div>\n              <h2 className=\"text-lg font-bold text-green-900 leading-tight\">KisanMitra</h2>\n              <p className=\"text-sm font-medium text-green-700 leading-tight\">\n                Good Morning, Raviteja Ji!\n              </p>\n            </div>\n          </div>\n          \n          {/* Right side - Controls */}\n          <div className=\"flex items-center space-x-1\">\n            {/* Language Toggle */}\n            <div className=\"scale-90\">\n              <LanguageSwitcher />\n            </div>\n            \n            {/* Notification Bell */}\n            <button \n              onClick={() => setShowNotifications(true)}\n              className=\"relative p-2 hover:bg-green-100 rounded-full transition-colors flex items-center justify-center\"\n            >\n              <Bell className=\"w-5 h-5 text-green-700\" />\n              <div className=\"absolute -top-0.5 -right-0.5 w-4 h-4 bg-red-500 rounded-full flex items-center justify-center\">\n                <span className=\"text-xs font-bold text-white leading-none\">3</span>\n              </div>\n            </button>\n\n            {/* Profile Icon */}\n            <button \n              onClick={() => navigate('/profile')}\n              className=\"w-9 h-9 bg-green-600 rounded-full flex items-center justify-center text-white text-sm font-semibold shadow-sm hover:bg-green-700 transition-colors ml-1\"\n            >\n              R\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"px-6 space-y-8 pt-6 pb-24\">\n        {/* Weather Card - Compact & Improved */}\n        <Card className=\"weather-card border-0 shadow-lg rounded-2xl bg-gradient-to-r from-blue-100/80 to-sky-100/80 backdrop-blur-sm\">\n          <CardContent className=\"p-4\">\n            {/* Header with location */}\n            <div className=\"flex items-center justify-between mb-3\">\n              <div className=\"flex items-center space-x-2\">\n                <MapPin className=\"w-4 h-4 text-blue-600\" />\n                <span className=\"text-sm font-semibold text-blue-800\">\n                  {weatherLoading ? 'Loading...' : weather?.location || 'Location unavailable'}\n                </span>\n              </div>\n              <Button \n                size=\"sm\" \n                variant=\"outline\" \n                className=\"bg-white/70 border-blue-200 hover:bg-white text-blue-700 text-sm h-8 px-3 rounded-xl\"\n                onClick={() => navigate('/weather')}\n              >\n                More\n              </Button>\n            </div>\n\n            <div className=\"flex items-center justify-between mb-3\">\n              {/* Weather Info */}\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-12 h-12 bg-white/80 rounded-xl flex items-center justify-center shadow-sm\">\n                  {weather && !weatherLoading ? (\n                    <img \n                      src={weatherService.getWeatherIconUrl(weather.icon)} \n                      alt={weather.description}\n                      className=\"w-8 h-8\"\n                    />\n                  ) : (\n                    <Cloud className=\"w-6 h-6 text-blue-600\" />\n                  )}\n                </div>\n                <div>\n                  <div className=\"text-xl font-bold text-blue-900\">\n                    {weatherLoading ? '--°C' : weather ? `${weather.temperature}°C` : '--°C'}\n                  </div>\n                  <div className=\"text-sm text-blue-600 capitalize\">\n                    {weatherLoading ? 'Loading...' : weather?.description || 'No data'}\n                  </div>\n                </div>\n              </div>\n              \n              {/* Quick Stats */}\n              <div className=\"text-center\">\n                <div className=\"text-xs text-blue-600 mb-1\">Humidity</div>\n                <div className=\"text-sm font-semibold text-blue-800\">\n                  {weatherLoading ? '--%' : weather ? `${weather.humidity}%` : '--%'}\n                </div>\n              </div>\n            </div>\n\n          </CardContent>\n        </Card>\n\n\n        {/* AI Plant Diagnosis - Compact Green Style */}\n        <Card className=\"bg-gradient-to-r from-green-400 to-emerald-500 border-0 shadow-xl rounded-2xl transform hover:scale-[1.02] transition-all duration-200\">\n          <CardContent className=\"p-5\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex-1\">\n                <div className=\"bg-white/20 text-white text-sm font-medium px-3 py-1 rounded-full inline-block mb-3\">\n                  AI Powered\n                </div>\n                <h3 className=\"font-bold text-white text-xl mb-1\">Diagnose Plant Health</h3>\n                <p className=\"text-white/90 text-base\">Take a photo to check diseases</p>\n              </div>\n              <Button \n                onClick={() => navigate('/diagnose')}\n                className=\"bg-white text-green-500 hover:bg-white/90 font-bold rounded-xl px-6 py-3 flex items-center space-x-2 text-base active:scale-95 transition-transform ml-4\"\n              >\n                <Camera className=\"w-5 h-5\" />\n                <span>Start</span>\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Soil & Fertilizer Cards */}\n        <div className=\"space-y-4\">\n          <h2 className=\"text-xl font-bold text-text-secondary\">🧪 Soil & Fertilizer</h2>\n          <div className=\"space-y-3\">\n            <Card className=\"cursor-pointer active:scale-95 transition-transform rounded-2xl shadow-md border-0 bg-gradient-to-r from-green-100/90 to-emerald-100/90 hover:shadow-lg backdrop-blur-sm\" onClick={() => navigate('/soil-health')}>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-12 h-12 bg-gradient-to-br from-green-200 to-green-300 rounded-xl flex items-center justify-center shadow-md\">\n                    <TestTube className=\"w-6 h-6 text-green-800\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-bold text-green-900 text-base mb-1\">Soil Health</h3>\n                    <p className=\"text-green-800 text-sm\">Check nutrient levels</p>\n                  </div>\n                  <ChevronRight className=\"w-5 h-5 text-green-700\" />\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"cursor-pointer active:scale-95 transition-transform rounded-2xl shadow-md border-0 bg-gradient-to-r from-green-100/90 to-emerald-100/90 hover:shadow-lg backdrop-blur-sm\" onClick={() => navigate('/fertilizer-guide')}>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-12 h-12 bg-gradient-to-br from-green-200 to-green-300 rounded-xl flex items-center justify-center shadow-md\">\n                    <Beaker className=\"w-6 h-6 text-green-800\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-bold text-green-900 text-base mb-1\">Fertilizer Guide</h3>\n                    <p className=\"text-green-800 text-sm\">Get nutrient advice</p>\n                  </div>\n                  <ChevronRight className=\"w-5 h-5 text-green-700\" />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Marketplace Section */}\n        <div className=\"space-y-4\">\n          <h2 className=\"text-xl font-bold text-text-secondary\">🛒 Marketplace</h2>\n          \n          {/* Market Prices Preview */}\n          <Card className=\"rounded-3xl shadow-lg border-0 bg-gradient-to-br from-green-100/80 to-emerald-100/80 backdrop-blur-sm\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-5\">\n                <h3 className=\"font-bold text-text-secondary text-xl\">Today's Mandi Prices</h3>\n                <TrendingUp className=\"w-6 h-6 text-agri-success\" />\n              </div>\n              <div className=\"space-y-3 mb-6\">\n                {marketPrices.slice(0, 3).map((item, index) => (\n                  <div key={index} className=\"flex items-center justify-between p-4 bg-white rounded-2xl shadow-sm border border-green-100\">\n                    <div className=\"flex-1 min-w-0\">\n                      <span className=\"font-bold text-gray-900 text-base sm:text-lg truncate block\">{item.crop}</span>\n                      <div className=\"text-sm text-gray-600 mt-0.5 flex items-center\">\n                        {item.trend === 'up' ? '↗ Trending up' : '↘ Trending down'}\n                      </div>\n                    </div>\n                    <div className=\"text-right ml-4 flex-shrink-0\">\n                      <div className=\"font-bold text-gray-900 text-base sm:text-lg\">{item.price}</div>\n                      <div className={`text-sm font-semibold flex items-center space-x-1 justify-end ${\n                        item.trend === 'up' \n                          ? 'text-green-600' \n                          : 'text-red-600'\n                      }`}>\n                        {item.trend === 'up' ? (\n                          <TrendingUp className=\"w-3 h-3 sm:w-4 sm:h-4\" />\n                        ) : (\n                          <TrendingUp className=\"w-3 h-3 sm:w-4 sm:h-4 rotate-180\" />\n                        )}\n                        <span className=\"text-xs sm:text-sm\">{item.change}</span>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n              \n              {/* Marketplace Action Buttons */}\n              <div className=\"grid grid-cols-2 gap-4\">\n                <Button \n                  onClick={() => navigate('/market-prices')}\n                  className=\"bg-green-500 hover:bg-green-600 text-white flex items-center space-x-3 justify-center h-12 text-base font-semibold rounded-2xl active:scale-95 transition-transform\"\n                >\n                  <BarChart3 className=\"w-5 h-5\" />\n                  <span>See Prices</span>\n                </Button>\n                <Button \n                  onClick={() => navigate('/sell')}\n                  className=\"bg-agri-success hover:bg-agri-success/90 flex items-center space-x-3 justify-center h-12 text-base font-semibold rounded-2xl active:scale-95 transition-transform\"\n                >\n                  <TrendingUp className=\"w-5 h-5\" />\n                  <span>Sell Crops</span>\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n          \n          {/* Additional Marketplace Cards */}\n          <div className=\"space-y-3\">\n            <Card className=\"cursor-pointer active:scale-95 transition-transform rounded-2xl shadow-md border-0 bg-gradient-to-r from-green-100/90 to-emerald-100/90 hover:shadow-lg backdrop-blur-sm\" onClick={() => navigate('/shop')}>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-12 h-12 bg-gradient-to-br from-green-200 to-green-300 rounded-xl flex items-center justify-center shadow-md\">\n                    <ShoppingCart className=\"w-6 h-6 text-green-800\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-bold text-green-900 text-base mb-1\">Order Fertilizers</h3>\n                    <p className=\"text-green-800 text-sm\">Shop nutrients</p>\n                  </div>\n                  <ChevronRight className=\"w-5 h-5 text-green-700\" />\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"cursor-pointer active:scale-95 transition-transform rounded-2xl shadow-md border-0 bg-gradient-to-r from-green-100/90 to-emerald-100/90 hover:shadow-lg backdrop-blur-sm\" onClick={() => navigate('/shops')}>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-12 h-12 bg-gradient-to-br from-green-200 to-green-300 rounded-xl flex items-center justify-center shadow-md\">\n                    <MapPin className=\"w-6 h-6 text-green-800\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-bold text-green-900 text-base mb-1\">Nearby Shops</h3>\n                    <p className=\"text-green-800 text-sm\">Find agri stores</p>\n                  </div>\n                  <ChevronRight className=\"w-5 h-5 text-green-700\" />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* My Farm Section - 4 Cards */}\n        <div className=\"space-y-4\">\n          <h2 className=\"text-xl font-bold text-text-secondary\">🌱 My Farm</h2>\n          \n          <div className=\"space-y-3\">\n            <Card className=\"cursor-pointer active:scale-95 transition-transform rounded-2xl shadow-md border-0 bg-gradient-to-r from-green-100/90 to-emerald-100/90 hover:shadow-lg backdrop-blur-sm\" onClick={() => navigate('/treatments')}>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-12 h-12 bg-gradient-to-br from-green-200 to-green-300 rounded-xl flex items-center justify-center shadow-md relative\">\n                    <Activity className=\"w-6 h-6 text-green-800\" />\n                    <div className=\"absolute -top-1 -right-1 w-5 h-5 bg-red-600 text-white text-xs font-bold rounded-full flex items-center justify-center shadow-sm\">\n                      2\n                    </div>\n                  </div>\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-bold text-green-900 text-base mb-1\">Active Treatments</h3>\n                    <p className=\"text-green-800 text-sm\">2 ongoing sprays</p>\n                  </div>\n                  <ChevronRight className=\"w-5 h-5 text-green-700\" />\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"cursor-pointer active:scale-95 transition-transform rounded-2xl shadow-md border-0 bg-gradient-to-r from-green-100/90 to-emerald-100/90 hover:shadow-lg backdrop-blur-sm\" onClick={() => navigate('/guides')}>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-12 h-12 bg-gradient-to-br from-green-200 to-green-300 rounded-xl flex items-center justify-center shadow-md\">\n                    <Sprout className=\"w-6 h-6 text-green-800\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-bold text-green-900 text-base mb-1\">Cultivation Guides</h3>\n                    <p className=\"text-green-800 text-sm\">Growing tips</p>\n                  </div>\n                  <ChevronRight className=\"w-5 h-5 text-green-700\" />\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"cursor-pointer active:scale-95 transition-transform rounded-2xl shadow-md border-0 bg-gradient-to-r from-green-100/90 to-emerald-100/90 hover:shadow-lg backdrop-blur-sm\" onClick={() => navigate('/orders')}>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-12 h-12 bg-gradient-to-br from-green-200 to-green-300 rounded-xl flex items-center justify-center shadow-md\">\n                    <Package className=\"w-6 h-6 text-green-800\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-bold text-green-900 text-base mb-1\">My Orders</h3>\n                    <p className=\"text-green-800 text-sm\">Track purchases</p>\n                  </div>\n                  <ChevronRight className=\"w-5 h-5 text-green-700\" />\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"cursor-pointer active:scale-95 transition-transform rounded-2xl shadow-md border-0 bg-gradient-to-r from-green-100/90 to-emerald-100/90 hover:shadow-lg backdrop-blur-sm\" onClick={() => navigate('/sell')}>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-12 h-12 bg-gradient-to-br from-green-200 to-green-300 rounded-xl flex items-center justify-center shadow-md\">\n                    <Package className=\"w-6 h-6 text-green-800\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-bold text-green-900 text-base mb-1\">My Listings</h3>\n                    <p className=\"text-green-800 text-sm\">Manage crop listings</p>\n                  </div>\n                  <ChevronRight className=\"w-5 h-5 text-green-700\" />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      {/* Bottom Navigation - 5 Tabs */}\n      <div className=\"fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 shadow-lg z-50\">\n        <div className=\"flex items-center justify-between px-4 py-3\">\n          <button className=\"flex flex-col items-center space-y-1 px-2 py-2 min-w-0\">\n            <HomeIcon className=\"w-7 h-7 text-agri-primary\" />\n            <span className=\"text-sm font-semibold text-agri-primary\">Home</span>\n          </button>\n          \n          <button \n            onClick={() => navigate('/diagnose')}\n            className=\"flex flex-col items-center space-y-1 px-2 py-2 transition-all duration-200 hover:bg-agri-light rounded-2xl min-w-0 active:scale-95\"\n          >\n            <Camera className=\"w-7 h-7 text-agri-gray\" />\n            <span className=\"text-sm text-agri-gray\">Diagnose</span>\n          </button>\n          \n          <button \n            onClick={() => navigate('/advisory')}\n            className=\"flex flex-col items-center space-y-1 px-2 py-2 transition-all duration-200 hover:bg-agri-light rounded-2xl min-w-0 active:scale-95\"\n          >\n            <BookOpen className=\"w-7 h-7 text-agri-gray\" />\n            <span className=\"text-sm text-agri-gray\">Advisory</span>\n          </button>\n          \n          <button \n            onClick={() => navigate('/shop')}\n            className=\"flex flex-col items-center space-y-1 px-2 py-2 transition-all duration-200 hover:bg-agri-light rounded-2xl min-w-0 active:scale-95\"\n          >\n            <Store className=\"w-7 h-7 text-agri-gray\" />\n            <span className=\"text-sm text-agri-gray\">Shop</span>\n          </button>\n          \n          <button \n            onClick={() => navigate('/mitra')}\n            className=\"flex flex-col items-center space-y-1 px-2 py-2 transition-all duration-200 hover:bg-agri-light rounded-2xl min-w-0 active:scale-95\"\n          >\n            <MessageCircle className=\"w-7 h-7 text-agri-gray\" />\n            <span className=\"text-sm text-agri-gray\">Mitra</span>\n          </button>\n        </div>\n      </div>\n\n      {/* Notification Panel */}\n      <NotificationPanel \n        isOpen={showNotifications} \n        onClose={() => setShowNotifications(false)} \n      />\n    </div>\n  );\n};\n\nexport default Home;\n","size_bytes":25790},"src/pages/Index.tsx":{"content":"// Update this page (the content is just a fallback if you fail to update the page)\n\nconst Index = () => {\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background\">\n      <div className=\"text-center\">\n        <h1 className=\"text-4xl font-bold mb-4\">Welcome to Your Blank App</h1>\n        <p className=\"text-xl text-muted-foreground\">Start building your amazing project here!</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Index;\n","size_bytes":469},"src/pages/Landing.tsx":{"content":"import { useNavigate } from 'react-router-dom';\nimport { Button } from '@/components/ui/button';\nimport LanguageSwitcher from '@/components/LanguageSwitcher';\nimport farmerHero from '@/assets/farmer-hero.jpg';\n\nconst Landing = () => {\n  const navigate = useNavigate();\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-agri-light/30 via-background to-agri-primary/5 overflow-hidden\">\n      {/* Subtle Background Patterns */}\n      <div className=\"absolute inset-0 overflow-hidden\">\n        <div className=\"absolute top-0 right-0 w-72 h-72 bg-agri-primary/5 rounded-full blur-3xl\" />\n        <div className=\"absolute bottom-0 left-0 w-72 h-72 bg-agri-success/5 rounded-full blur-3xl\" />\n      </div>\n\n      <div className=\"relative z-10 min-h-screen flex flex-col max-w-sm mx-auto px-4\">\n        {/* Header */}\n        <header className=\"flex items-center justify-between py-6\">\n          {/* Logo and Tagline */}\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-16 h-16 bg-white rounded-2xl shadow-md flex items-center justify-center p-1\">\n              <img \n                src=\"/assets/kisanmitra-logo-clean.png\" \n                alt=\"KisanMitra Logo\" \n                className=\"w-full h-full object-contain\"\n              />\n            </div>\n            <div>\n              <h1 className=\"text-2xl font-bold text-green-900 leading-tight\">\n                KisanMitra\n              </h1>\n              <p className=\"text-sm text-green-700 font-medium leading-tight\">\n                Smart Farming Assistant\n              </p>\n            </div>\n          </div>\n\n          {/* Language Switcher */}\n          <LanguageSwitcher />\n        </header>\n\n        {/* Main Content */}\n        <main className=\"flex-1 flex flex-col items-center justify-center space-y-10\">\n          {/* Hero Image */}\n          <div className=\"relative mb-4\">\n            <div className=\"w-72 h-72 rounded-full overflow-hidden shadow-2xl border-4 border-white/90 bg-white p-2\">\n              <img \n                src={farmerHero} \n                alt=\"Happy farmer with mobile technology\" \n                className=\"w-full h-full object-cover rounded-full\"\n              />\n            </div>\n            {/* Enhanced Floating Elements */}\n            <div className=\"absolute -top-3 -right-3 w-10 h-10 bg-gradient-to-br from-green-400 to-emerald-500 rounded-full shadow-lg animate-bounce flex items-center justify-center\" style={{ animationDelay: '0.5s' }}>\n              <span className=\"text-white text-lg\">🌱</span>\n            </div>\n            <div className=\"absolute -bottom-3 -left-3 w-8 h-8 bg-gradient-to-br from-emerald-500 to-green-600 rounded-full shadow-lg animate-bounce flex items-center justify-center\" style={{ animationDelay: '1s' }}>\n              <span className=\"text-white text-sm\">📱</span>\n            </div>\n            <div className=\"absolute top-4 -left-4 w-6 h-6 bg-yellow-400 rounded-full shadow-md animate-pulse\" style={{ animationDelay: '1.5s' }} />\n          </div>\n\n          {/* Tagline */}\n          <div className=\"text-center space-y-4\">\n            <h2 className=\"text-3xl font-bold text-gray-800 leading-tight\">\n              Your Smart Farming Assistant\n            </h2>\n            <p className=\"text-gray-600 text-base max-w-sm mx-auto leading-relaxed px-2\">\n              Get instant crop advice, disease diagnosis, and weather updates to boost your farm productivity\n            </p>\n          </div>\n\n          {/* CTA Buttons */}\n          <div className=\"w-full space-y-6 pt-6\">\n            <div className=\"space-y-4\">\n              <Button\n                onClick={() => navigate('/signup')}\n                className=\"w-full h-16 bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 text-white font-bold text-xl shadow-xl hover:shadow-2xl transition-all duration-300 transform active:scale-95 rounded-2xl\"\n              >\n                Get Started\n              </Button>\n              <Button\n                onClick={() => navigate('/login')}\n                variant=\"outline\"\n                className=\"w-full h-14 font-semibold text-lg border-2 border-green-600 text-green-600 hover:bg-green-600 hover:text-white transition-all duration-300 transform active:scale-95 shadow-lg hover:shadow-xl rounded-2xl\"\n              >\n                Login\n              </Button>\n            </div>\n            \n          </div>\n        </main>\n\n      </div>\n    </div>\n  );\n};\n\nexport default Landing;","size_bytes":4528},"src/pages/Login.tsx":{"content":"import { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Phone, Sprout, User } from 'lucide-react';\nimport LanguageSwitcher from '@/components/LanguageSwitcher';\nimport { useToast } from '@/hooks/use-toast';\nimport CustomInput from '@/components/CustomInput';\nimport PINInput from '@/components/PINInput';\nimport AuthButton from '@/components/AuthButton';\n\nconst Login = () => {\n  const navigate = useNavigate();\n  const { toast } = useToast();\n  const [loading, setLoading] = useState(false);\n  const [formData, setFormData] = useState({\n    mobile: '',\n    pin: ''\n  });\n\n  const getMobileValidation = () => {\n    if (formData.mobile.length === 0) return undefined;\n    const isValid = formData.mobile.length === 10 && /^[6-9]\\d{9}$/.test(formData.mobile);\n    return {\n      isValid,\n      message: isValid ? \"Valid mobile number\" : \"Enter a valid 10-digit Indian mobile number\"\n    };\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.mobile || !formData.pin) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please enter mobile number and PIN\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (formData.mobile.length !== 10) {\n      toast({\n        title: \"Invalid Mobile Number\",\n        description: \"Please enter 10 digit mobile number\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (formData.pin.length !== 4) {\n      toast({\n        title: \"Invalid PIN\",\n        description: \"PIN must be 4 digits\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setLoading(true);\n    \n    // Check if user exists and authenticate\n    setTimeout(() => {\n      const existingUser = localStorage.getItem('kisanmitra_user');\n      const authToken = localStorage.getItem('kisanmitra_auth_token');\n      const expectedToken = btoa(`${formData.mobile}:${formData.pin}`);\n      \n      // Check if user exists or create new user\n      if (existingUser) {\n        const userData = JSON.parse(existingUser);\n        \n        // For existing users, check if credentials match OR if no auth token exists (fresh login)\n        if (!authToken || authToken === expectedToken) {\n          // Valid returning user or first login after logout\n          userData.isLoggedIn = true;\n          localStorage.setItem('kisanmitra_user', JSON.stringify(userData));\n          localStorage.setItem('kisanmitra_auth_token', expectedToken); // Save auth token\n          \n          const welcomeToast = toast({\n            title: `Welcome back, ${userData.name}! 🌾`,\n            description: \"Successfully logged in\",\n            duration: 10000, // Auto-dismiss after 10 seconds\n          });\n          \n          // Dismiss on any interaction\n          let isToastDismissed = false;\n          const handleInteraction = () => {\n            if (!isToastDismissed) {\n              isToastDismissed = true;\n              welcomeToast.dismiss();\n              cleanupListeners();\n            }\n          };\n          \n          const cleanupListeners = () => {\n            document.removeEventListener('click', handleInteraction);\n            document.removeEventListener('keydown', handleInteraction);\n            document.removeEventListener('touchstart', handleInteraction);\n          };\n          \n          document.addEventListener('click', handleInteraction);\n          document.addEventListener('keydown', handleInteraction);\n          document.addEventListener('touchstart', handleInteraction);\n          \n          // Cleanup listeners after 10 seconds (when toast auto-dismisses)\n          setTimeout(() => {\n            isToastDismissed = true;\n            cleanupListeners();\n          }, 10000);\n          navigate('/home');\n        } else {\n          // Wrong PIN for existing user\n          toast({\n            title: \"Login Failed\",\n            description: \"Invalid PIN. Please check your credentials.\",\n            variant: \"destructive\",\n          });\n        }\n      } else {\n        // New user - create account\n        const newUser = {\n          name: `Farmer ${formData.mobile.slice(-4)}`,\n          phone: formData.mobile,\n          location: 'India',\n          state: 'India',\n          isLoggedIn: true,\n          joinedDate: new Date().toISOString()\n        };\n        \n        localStorage.setItem('kisanmitra_user', JSON.stringify(newUser));\n        localStorage.setItem('kisanmitra_auth_token', expectedToken); // Save auth token\n        \n        const welcomeToast = toast({\n          title: `Welcome to KisanMitra! 🌾`,\n          description: \"Account created successfully\",\n          duration: 10000, // Auto-dismiss after 10 seconds\n        });\n        \n        // Dismiss on any interaction\n        let isToastDismissed = false;\n        const handleInteraction = () => {\n          if (!isToastDismissed) {\n            isToastDismissed = true;\n            welcomeToast.dismiss();\n            cleanupListeners();\n          }\n        };\n        \n        const cleanupListeners = () => {\n          document.removeEventListener('click', handleInteraction);\n          document.removeEventListener('keydown', handleInteraction);\n          document.removeEventListener('touchstart', handleInteraction);\n        };\n        \n        document.addEventListener('click', handleInteraction);\n        document.addEventListener('keydown', handleInteraction);\n        document.addEventListener('touchstart', handleInteraction);\n        \n        // Cleanup listeners after 10 seconds (when toast auto-dismisses)\n        setTimeout(() => {\n          isToastDismissed = true;\n          cleanupListeners();\n        }, 10000);\n        navigate('/home');\n      }\n      setLoading(false);\n    }, 1500);\n  };\n\n  return (\n    <div className=\"mobile-container min-h-screen bg-gradient-to-br from-agri-light to-white\">\n      {/* Subtle Background Pattern */}\n      <div className=\"absolute inset-0 opacity-5\">\n        <div className=\"absolute inset-0\" style={{\n          backgroundImage: `url(\"data:image/svg+xml,%3Csvg width='40' height='40' viewBox='0 0 40 40' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='%23059669' fill-opacity='0.1'%3E%3Cpath d='M20 20c0-5.5-4.5-10-10-10s-10 4.5-10 10 4.5 10 10 10 10-4.5 10-10zm10 0c0-5.5-4.5-10-10-10s-10 4.5-10 10 4.5 10 10 10 10-4.5 10-10z'/%3E%3C/g%3E%3C/svg%3E\")`,\n        }} />\n      </div>\n\n      <div className=\"relative z-10 min-h-screen flex flex-col\">\n        {/* Top Bar */}\n        <div className=\"flex items-center justify-between p-4 bg-white/80 backdrop-blur-sm\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-12 h-12 bg-white rounded-2xl shadow-md flex items-center justify-center p-1\">\n              <img \n                src=\"/assets/kisanmitra-logo-clean.png\" \n                alt=\"KisanMitra Logo\" \n                className=\"w-full h-full object-contain\"\n              />\n            </div>\n            <div>\n              <h1 className=\"text-lg font-bold text-green-900\">KisanMitra</h1>\n              <p className=\"text-xs text-green-700\">Smart Farming Assistant</p>\n            </div>\n          </div>\n          <LanguageSwitcher />\n        </div>\n\n        {/* Hero Section */}\n        <div className=\"text-center px-6 pt-12 pb-8\">\n          <div className=\"w-24 h-24 bg-gradient-to-br from-green-400 to-green-600 rounded-3xl mx-auto mb-6 flex items-center justify-center shadow-xl animate-pulse\">\n            <User className=\"w-12 h-12 text-white\" />\n          </div>\n          <h1 className=\"text-3xl font-bold bg-gradient-to-r from-green-600 to-green-500 bg-clip-text text-transparent mb-3\">\n            🌱 Welcome Back, Farmer\n          </h1>\n          <p className=\"text-lg text-gray-600 leading-relaxed\">\n            Continue your smart farming journey\n          </p>\n        </div>\n\n        {/* Form Container */}\n        <div className=\"flex-1 px-6\">\n          <div className=\"bg-white rounded-3xl p-8 shadow-2xl border border-green-100\">\n            <form onSubmit={handleSubmit} className=\"space-y-8\">\n              {/* Mobile Number */}\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-semibold text-gray-700\">Mobile Number</label>\n                <div className=\"relative\">\n                  <div className=\"absolute left-4 top-1/2 transform -translate-y-1/2 flex items-center space-x-2 z-10\">\n                    <Phone className=\"w-5 h-5 text-green-500\" />\n                    <span className=\"text-gray-500 font-medium\">🇮🇳 +91</span>\n                  </div>\n                  <input\n                    type=\"tel\"\n                    value={formData.mobile}\n                    onChange={(e) => setFormData(prev => ({ ...prev, mobile: e.target.value.replace(/\\D/g, '').slice(0, 10) }))}\n                    placeholder=\"10 digit number\"\n                    className=\"w-full h-16 pl-24 pr-4 text-lg font-medium bg-gray-50 border-2 border-gray-200 rounded-2xl focus:outline-none focus:border-green-500 focus:ring-4 focus:ring-green-100 transition-all duration-200\"\n                  />\n                </div>\n                {getMobileValidation() && (\n                  <p className={`text-sm ${getMobileValidation()?.isValid ? 'text-green-600' : 'text-red-500'}`}>\n                    {getMobileValidation()?.message}\n                  </p>\n                )}\n              </div>\n\n              {/* PIN Entry */}\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-semibold text-gray-700\">4-Digit PIN</label>\n                <PINInput\n                  value={formData.pin}\n                  onChange={(value) => setFormData(prev => ({ ...prev, pin: value }))}\n                  placeholder=\"Enter PIN\"\n                  className=\"space-y-3\"\n                />\n              </div>\n\n              {/* Login Button - Full Width Green Gradient */}\n              <div className=\"pt-6\">\n                <button\n                  type=\"submit\"\n                  disabled={loading || !formData.mobile || !formData.pin}\n                  className=\"w-full h-16 bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white text-xl font-bold rounded-2xl shadow-lg hover:shadow-xl transform hover:scale-[1.02] active:scale-[0.98] transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed\"\n                >\n                  {loading ? (\n                    <div className=\"flex items-center justify-center space-x-2\">\n                      <div className=\"w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n                      <span>Logging in...</span>\n                    </div>\n                  ) : (\n                    'Login to KisanMitra'\n                  )}\n                </button>\n              </div>\n\n              {/* Footer Links */}\n              <div className=\"text-center space-y-6 pt-8\">\n                <button \n                  type=\"button\"\n                  className=\"text-green-600 font-semibold hover:text-green-700 hover:underline transition-colors\"\n                  onClick={() => {\n                    toast({\n                      title: \"Forgot PIN?\",\n                      description: \"Contact support at 1800-KISAN for PIN reset assistance.\",\n                    });\n                  }}\n                >\n                  Forgot PIN?\n                </button>\n                \n                <div className=\"flex items-center justify-center space-x-2 text-gray-600\">\n                  <span>New to KisanMitra?</span>\n                  <button \n                    type=\"button\"\n                    onClick={() => navigate('/signup')}\n                    className=\"text-green-600 font-bold hover:text-green-700 hover:underline transition-colors\"\n                  >\n                    Create Account →\n                  </button>\n                </div>\n              </div>\n            </form>\n          </div>\n        </div>\n\n        {/* Bottom Spacing */}\n        <div className=\"h-6\" />\n      </div>\n    </div>\n  );\n};\n\nexport default Login;","size_bytes":12141},"src/pages/MarketDetails.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { \n  ArrowLeft,\n  MapPin,\n  TrendingUp, \n  TrendingDown, \n  Bell,\n  BellOff,\n  Clock,\n  RefreshCw\n} from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Switch } from '@/components/ui/switch';\nimport { marketData } from '@/lib/marketData';\nimport { useNotifications } from '@/hooks/useNotifications';\nimport { useGeolocation, calculateDistance, formatDistance } from '@/hooks/useGeolocation';\n\nconst MarketDetails = () => {\n  const navigate = useNavigate();\n  const { marketId } = useParams();\n  const [lastUpdated, setLastUpdated] = useState(new Date());\n  const { isNotificationEnabled, toggleNotification } = useNotifications();\n  const { location, error: locationError, loading: locationLoading } = useGeolocation();\n  \n  const marketIdString = marketId || '1';\n  const notificationsEnabled = isNotificationEnabled(marketIdString);\n\n  // Using shared market data with complete vegetable lists for all Chennai markets\n\n  const baseMarket = marketData.find(m => m.id === parseInt(marketId || '1'));\n  \n  // Calculate distance for this specific market\n  const market = baseMarket ? {\n    ...baseMarket,\n    distance: location \n      ? formatDistance(calculateDistance(location.latitude, location.longitude, baseMarket.latitude, baseMarket.longitude))\n      : locationError \n      ? 'Location unavailable'\n      : locationLoading \n      ? 'Calculating...'\n      : 'Enable location'\n  } : null;\n\n  const getTrendIcon = (trend: string) => {\n    switch (trend) {\n      case 'up':\n        return <TrendingUp className=\"w-4 h-4\" />;\n      case 'down':\n        return <TrendingDown className=\"w-4 h-4\" />;\n      default:\n        return <div className=\"w-4 h-4 rounded-full bg-gray-400\" />;\n    }\n  };\n\n  const getTrendColor = (trend: string) => {\n    switch (trend) {\n      case 'up':\n        return 'text-green-600';\n      case 'down':\n        return 'text-red-600';\n      default:\n        return 'text-gray-600';\n    }\n  };\n\n  const handleRefresh = () => {\n    setLastUpdated(new Date());\n  };\n\n  if (!market) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-blue-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h2 className=\"text-xl font-semibold text-gray-600\">Market not found</h2>\n          <Button onClick={() => navigate(-1)} className=\"mt-4\">Go Back</Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-blue-50\">\n      {/* Header */}\n      <div className=\"bg-white shadow-sm border-b border-green-100 sticky top-0 z-20\">\n        <div className=\"px-6 py-4\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => navigate(-1)}\n                className=\"p-2 hover:bg-gray-100 rounded-full\"\n              >\n                <ArrowLeft className=\"w-5 h-5 text-gray-600\" />\n              </Button>\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"p-3 bg-green-100 rounded-xl\">\n                  <MapPin className=\"w-6 h-6 text-green-600\" />\n                </div>\n                <div>\n                  <h1 className=\"text-2xl font-bold text-gray-900\">{market.name}</h1>\n                  <div className=\"flex items-center space-x-2 text-sm text-gray-600\">\n                    <span>{market.location}</span>\n                    <span>•</span>\n                    <span className=\"bg-blue-100 text-blue-700 px-2 py-1 rounded-full text-xs font-medium\">\n                      {market.distance}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"hidden sm:flex items-center space-x-3\">\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"text-sm text-gray-600\">Notifications</span>\n                <Switch\n                  checked={notificationsEnabled}\n                  onCheckedChange={() => toggleNotification(marketIdString)}\n                />\n                {notificationsEnabled ? (\n                  <Bell className=\"w-5 h-5 text-green-600\" />\n                ) : (\n                  <BellOff className=\"w-5 h-5 text-gray-400\" />\n                )}\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2 text-sm text-gray-600\">\n              <Clock className=\"w-4 h-4\" />\n              <span>Last updated: {lastUpdated.toLocaleTimeString()}</span>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={handleRefresh}\n                className=\"p-1 hover:bg-gray-100 rounded-full\"\n              >\n                <RefreshCw className=\"w-4 h-4 text-green-600\" />\n              </Button>\n            </div>\n            \n            {/* Mobile notification toggle */}\n            <div className=\"sm:hidden flex items-center space-x-2 bg-gray-50 px-3 py-2 rounded-xl\">\n              <span className=\"text-xs text-gray-600\">Alerts</span>\n              <Switch\n                checked={notificationsEnabled}\n                onCheckedChange={() => toggleNotification(marketIdString)}\n              />\n              {notificationsEnabled ? (\n                <Bell className=\"w-4 h-4 text-green-600\" />\n              ) : (\n                <BellOff className=\"w-4 h-4 text-gray-400\" />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"px-6 py-6\">\n        <Card className=\"bg-white rounded-3xl shadow-lg border border-gray-100\">\n          <CardHeader className=\"bg-gradient-to-r from-green-50 to-blue-50 border-b border-gray-200 p-6\">\n            <CardTitle className=\"text-lg font-bold text-gray-900\">\n              All Vegetables & Prices ({market.crops.length} items)\n            </CardTitle>\n            <p className=\"text-gray-600 text-sm\">\n              Complete list of all available vegetables with current market prices\n            </p>\n          </CardHeader>\n          \n          <CardContent className=\"p-0\">\n            <div className=\"space-y-0\">\n              {market.crops.map((crop, index) => (\n                <div \n                  key={index} \n                  className=\"flex items-center justify-between p-5 border-b border-gray-100 last:border-b-0 hover:bg-gray-50 transition-colors\"\n                >\n                  <div className=\"flex-1\">\n                    <h4 className=\"font-semibold text-gray-900 text-base\">{crop.name}</h4>\n                    <p className=\"text-sm text-gray-500\">Previous: {crop.previousPrice}</p>\n                  </div>\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"text-right\">\n                      <div className=\"font-bold text-lg text-gray-900\">{crop.price}</div>\n                      <div className={`text-sm font-medium flex items-center space-x-1 ${getTrendColor(crop.trend)}`}>\n                        {getTrendIcon(crop.trend)}\n                        <span>{crop.change}</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default MarketDetails;","size_bytes":7727},"src/pages/MarketPrices.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { \n  Search, \n  Filter, \n  TrendingUp, \n  TrendingDown, \n  Bell, \n  ArrowLeft,\n  MapPin,\n  Clock,\n  RefreshCw,\n  Plus\n} from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { marketData, getTopHighestPricedCrops } from '@/lib/marketData';\nimport { useNotifications } from '@/hooks/useNotifications';\nimport { useGeolocation, calculateDistance, formatDistance } from '@/hooks/useGeolocation';\n\nconst MarketPrices = () => {\n  const navigate = useNavigate();\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedFilter, setSelectedFilter] = useState('all');\n  const [lastUpdated, setLastUpdated] = useState(new Date());\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const { isNotificationEnabled } = useNotifications();\n  const { location, error: locationError, loading: locationLoading } = useGeolocation();\n\n  // Using shared market data with complete vegetable lists\n  \n  // Calculate distances for all markets based on user location\n  const marketsWithDistance = marketData.map(market => ({\n    ...market,\n    distance: location \n      ? formatDistance(calculateDistance(location.latitude, location.longitude, market.latitude, market.longitude))\n      : locationError \n      ? 'Location unavailable'\n      : locationLoading \n      ? 'Calculating...'\n      : 'Enable location'\n  }));\n\n  const filteredMarkets = marketsWithDistance.filter(market => \n    market.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    market.crops.some(crop => crop.name.toLowerCase().includes(searchQuery.toLowerCase()))\n  );\n\n  const handleRefresh = async () => {\n    setIsRefreshing(true);\n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 1500));\n    setLastUpdated(new Date());\n    setIsRefreshing(false);\n  };\n\n  const getTrendIcon = (trend: string) => {\n    switch (trend) {\n      case 'up':\n        return <TrendingUp className=\"w-4 h-4 text-green-600\" />;\n      case 'down':\n        return <TrendingDown className=\"w-4 h-4 text-red-600\" />;\n      default:\n        return <div className=\"w-4 h-4 rounded-full bg-gray-400\" />;\n    }\n  };\n\n  const getTrendColor = (trend: string) => {\n    switch (trend) {\n      case 'up':\n        return 'text-green-600';\n      case 'down':\n        return 'text-red-600';\n      default:\n        return 'text-gray-600';\n    }\n  };\n\n  // Using shared helper functions from marketData\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-blue-50\">\n      {/* Header */}\n      <div className=\"bg-white shadow-sm border-b border-green-100 sticky top-0 z-20\">\n        <div className=\"px-6 py-4\">\n          <div className=\"flex items-center space-x-4 mb-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => navigate(-1)}\n              className=\"p-2 hover:bg-gray-100 rounded-full\"\n            >\n              <ArrowLeft className=\"w-5 h-5 text-gray-600\" />\n            </Button>\n            <div className=\"flex-1\">\n              <h1 className=\"text-2xl font-bold text-gray-900\">Market Prices</h1>\n              <div className=\"flex items-center space-x-2 text-sm text-gray-600\">\n                <Clock className=\"w-4 h-4\" />\n                <span>Last updated: {lastUpdated.toLocaleTimeString()}</span>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={handleRefresh}\n                  disabled={isRefreshing}\n                  className=\"p-1 hover:bg-gray-100 rounded-full\"\n                >\n                  <RefreshCw className={`w-4 h-4 text-green-600 ${isRefreshing ? 'animate-spin' : ''}`} />\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          {/* Search and Filter */}\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"flex-1 relative\">\n              <Search className=\"w-5 h-5 text-gray-400 absolute left-3 top-1/2 transform -translate-y-1/2\" />\n              <Input\n                placeholder=\"Search crops or markets...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10 pr-4 py-3 rounded-xl border-2 border-gray-200 focus:border-green-500 bg-white\"\n              />\n            </div>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"px-4 py-3 rounded-xl border-2 border-gray-200 hover:border-green-500\"\n            >\n              <Filter className=\"w-4 h-4 text-gray-600\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"px-6 py-6 space-y-6\">\n        {/* Market Cards */}\n        {filteredMarkets.map((market) => (\n          <Card key={market.id} className=\"bg-white rounded-3xl shadow-lg border border-gray-100 overflow-hidden\">\n            {/* Market Header */}\n            <CardHeader className=\"bg-gradient-to-r from-green-50 to-blue-50 border-b border-gray-200 p-5\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"p-3 bg-white rounded-xl shadow-sm\">\n                    <MapPin className=\"w-6 h-6 text-green-600\" />\n                  </div>\n                  <div>\n                    <CardTitle className=\"text-lg font-bold text-gray-900\">{market.name}</CardTitle>\n                    <div className=\"flex items-center space-x-2 text-sm text-gray-600\">\n                      <span>{market.location}</span>\n                      <span>•</span>\n                      <span className=\"bg-blue-100 text-blue-700 px-2 py-1 rounded-full text-xs font-medium\">\n                        {market.distance}\n                      </span>\n                      <span>•</span>\n                      <Bell className={`w-4 h-4 ${isNotificationEnabled(market.id.toString()) ? 'text-green-600' : 'text-gray-400'}`} />\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardHeader>\n\n            {/* Crops List - Top 5 */}\n            <CardContent className=\"p-0\">\n              <div className=\"space-y-0\">\n                {getTopHighestPricedCrops(market.crops).map((crop, index) => (\n                  <div key={index} className=\"flex items-center justify-between p-5 border-b border-gray-100 last:border-b-0 hover:bg-gray-50 transition-colors\">\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-semibold text-gray-900 text-base\">{crop.name}</h4>\n                      <p className=\"text-sm text-gray-500\">Previous: {crop.previousPrice}</p>\n                    </div>\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"text-right\">\n                        <div className=\"font-bold text-lg text-gray-900\">{crop.price}</div>\n                        <div className={`text-sm font-medium flex items-center space-x-1 ${getTrendColor(crop.trend)}`}>\n                          {getTrendIcon(crop.trend)}\n                          <span>{crop.change}</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n                {/* More Info Button */}\n                <div className=\"p-4 border-t border-gray-200 bg-gray-50\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"w-full\"\n                    onClick={() => navigate(`/market-details/${market.id}`)}\n                  >\n                    More Info\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n\n        {/* No Results */}\n        {filteredMarkets.length === 0 && (\n          <div className=\"text-center py-12\">\n            <div className=\"p-4 bg-gray-100 rounded-full inline-block mb-4\">\n              <Search className=\"w-8 h-8 text-gray-400\" />\n            </div>\n            <h3 className=\"text-lg font-medium text-gray-600 mb-2\">No markets found</h3>\n            <p className=\"text-gray-500\">Try adjusting your search terms</p>\n          </div>\n        )}\n      </div>\n\n\n      {/* Pull to refresh hint (for mobile) */}\n      <div className=\"pb-20\"> {/* Extra padding for mobile navigation */}\n        <div className=\"text-center py-4 text-gray-500 text-sm\">\n          Pull down to refresh prices\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MarketPrices;","size_bytes":8796},"src/pages/Mitra.tsx":{"content":"import { useState, useEffect, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { ArrowLeft, Send } from 'lucide-react';\n\ninterface Message {\n  id: number;\n  text: string;\n  isUser: boolean;\n}\n\nconst Mitra = () => {\n  const navigate = useNavigate();\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [inputMessage, setInputMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const [messageIdCounter, setMessageIdCounter] = useState(1);\n\n  // Get API key from environment\n  const API_KEY = import.meta.env.VITE_GEMINI_API_KEY || \"AIzaSyCzOBeYUKB6MsPt3bKkUZ0vS8_4LDYmf4Y\";\n\n  // Scroll to bottom when messages change\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  // Initial welcome message\n  useEffect(() => {\n    const welcomeMessage: Message = {\n      id: 0,\n      text: \"Hello! I'm Kisan Mitra, your digital assistant for farming. How can I help you today?\",\n      isUser: false\n    };\n    setMessages([welcomeMessage]);\n  }, []);\n\n  const sendMessage = async () => {\n    if (!inputMessage.trim()) return;\n\n    // Add user message\n    const userMessage: Message = {\n      id: messageIdCounter,\n      text: inputMessage,\n      isUser: true\n    };\n    \n    setMessages(prev => [...prev, userMessage]);\n    setMessageIdCounter(prev => prev + 1);\n    const currentMessage = inputMessage;\n    setInputMessage('');\n    setIsLoading(true);\n\n    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${API_KEY}`;\n    const systemPrompt = \"You are Hariyali Mitra, an expert AI farming assistant for Indian farmers using the KisanMitra agricultural support app. You help farmers with: crop cultivation, plant disease, soil health, weather, pest control, market prices, and agricultural best practices for Indian conditions. Speak in simple, everyday language and be supportive. Provide actionable, practical advice relevant to Indian farming.\";\n\n    try {\n      const response = await fetch(apiUrl, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          contents: [{\n            role: \"user\",\n            parts: [{ text: currentMessage }]\n          }],\n          tools: [{ \"google_search\": {} }],\n          systemInstruction: {\n            parts: [{ text: systemPrompt }]\n          },\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n\n      const result = await response.json();\n      const botResponse = result.candidates[0].content.parts[0].text;\n      \n      // Add bot response\n      const botMessage: Message = {\n        id: messageIdCounter + 1,\n        text: botResponse,\n        isUser: false\n      };\n      \n      setMessages(prev => [...prev, botMessage]);\n      setMessageIdCounter(prev => prev + 2);\n      \n    } catch (error) {\n      console.error('Error sending message:', error);\n      \n      // Add error message\n      const errorMessage: Message = {\n        id: messageIdCounter + 1,\n        text: \"I am having trouble connecting to the network. Please check your internet connection.\",\n        isUser: false\n      };\n      \n      setMessages(prev => [...prev, errorMessage]);\n      setMessageIdCounter(prev => prev + 2);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      sendMessage();\n    }\n  };\n\n  return (\n    <div className=\"bg-gray-100 min-h-screen flex items-center justify-center p-4\">\n      <div className=\"bg-white rounded-2xl shadow-xl w-full max-w-md h-[80vh] flex flex-col overflow-hidden\">\n        \n        {/* Chat Header */}\n        <div className=\"bg-green-600 text-white p-4 flex items-center justify-between rounded-t-2xl shadow-md\">\n          <button\n            onClick={() => navigate(-1)}\n            className=\"text-white hover:bg-white/20 rounded-full p-2 transition-colors\"\n          >\n            <ArrowLeft className=\"w-5 h-5\" />\n          </button>\n          <h1 className=\"text-xl font-bold\">Kisan Mitra</h1>\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\" className=\"w-6 h-6\">\n            <path fillRule=\"evenodd\" d=\"M12 2.25c-5.385 0-9.75 4.365-9.75 9.75s4.365 9.75 9.75 9.75 9.75-4.365 9.75-9.75S17.385 2.25 12 2.25Zm-3.25 9a.75.75 0 0 0 0 1.5h6.5a.75.75 0 0 0 0-1.5h-6.5Z\" clipRule=\"evenodd\" />\n          </svg>\n        </div>\n\n        {/* Chat Messages Container */}\n        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n          {messages.map((message) => (\n            <div key={message.id} className={`flex ${message.isUser ? 'justify-end' : 'justify-start'}`}>\n              <div className={`${\n                message.isUser \n                  ? 'bg-green-500 text-white' \n                  : 'bg-gray-200 text-gray-800'\n              } p-3 rounded-xl max-w-[80%] shadow-sm`}>\n                {message.text}\n              </div>\n            </div>\n          ))}\n          \n          {isLoading && (\n            <div className=\"flex justify-start\">\n              <div className=\"bg-gray-200 text-gray-800 p-3 rounded-xl shadow-sm animate-pulse\">\n                Typing...\n              </div>\n            </div>\n          )}\n          <div ref={messagesEndRef} />\n        </div>\n\n        {/* Chat Input and Send Button */}\n        <div className=\"p-4 border-t border-gray-200 flex items-center space-x-2\">\n          <input \n            type=\"text\" \n            placeholder=\"Type your message here...\" \n            value={inputMessage}\n            onChange={(e) => setInputMessage(e.target.value)}\n            onKeyUp={handleKeyPress}\n            disabled={isLoading}\n            className=\"flex-1 p-3 rounded-full border border-gray-300 focus:outline-none focus:ring-2 focus:ring-green-500 transition-all duration-200\"\n          />\n          <button \n            onClick={sendMessage}\n            disabled={isLoading || !inputMessage.trim()}\n            className=\"bg-green-600 text-white p-3 rounded-full shadow-lg hover:bg-green-700 transition-colors duration-200 disabled:opacity-50\"\n          >\n            <Send className=\"w-6 h-6 rotate-90\" />\n          </button>\n        </div>\n\n      </div>\n    </div>\n  );\n};\n\nexport default Mitra;","size_bytes":6540},"src/pages/MyFertilizerGuidance.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { \n  ArrowLeft,\n  CheckCircle,\n  Clock,\n  Droplets,\n  Leaf,\n  Calendar,\n  Beaker,\n  ChevronDown,\n  ChevronUp\n} from 'lucide-react';\nimport { useNavigate } from 'react-router-dom';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n\nconst MyFertilizerGuidance = () => {\n  const navigate = useNavigate();\n  const [savedGuidance, setSavedGuidance] = useState<string[]>([]);\n  const [appliedGuidance, setAppliedGuidance] = useState<string[]>(() => {\n    const applied = localStorage.getItem('kisanmitra_applied_guidance');\n    return applied ? JSON.parse(applied) : [];\n  });\n  const [expandedCards, setExpandedCards] = useState<string[]>([]);\n\n  // Load saved fertilizer guidance\n  useEffect(() => {\n    const saved = localStorage.getItem('kisanmitra_saved_fertilizer_guides');\n    setSavedGuidance(saved ? JSON.parse(saved) : []);\n  }, []);\n\n  const cropData = {\n    'tomato': {\n      name: 'Tomato',\n      image: '🍅',\n      season: 'Kharif/Rabi',\n      fertilizers: [\n        { name: 'NPK (10:26:26)', quantity: '200 kg/acre', timing: 'At planting', method: 'Basal application', notes: 'Mix with soil before transplanting' },\n        { name: 'Urea (46% N)', quantity: '50 kg/acre', timing: '20 days after transplant', method: 'Side dressing', notes: 'Apply around plant base, avoid stems' },\n        { name: 'Calcium Nitrate', quantity: '25 kg/acre', timing: 'Flowering stage', method: 'Foliar spray', notes: 'Prevents blossom end rot' }\n      ],\n      steps: [\n        'Prepare field with proper drainage',\n        'Apply basal fertilizer 1 week before transplanting',\n        'Transplant healthy seedlings',\n        'Apply first top dressing after 20 days',\n        'Monitor plant growth and adjust as needed'\n      ]\n    },\n    'wheat': {\n      name: 'Wheat',\n      image: '🌾',\n      season: 'Rabi',\n      fertilizers: [\n        { name: 'DAP (18:46:0)', quantity: '150 kg/acre', timing: 'At sowing', method: 'Drill with seed', notes: 'Place 2-3 cm below seed level' },\n        { name: 'Urea (46% N)', quantity: '65 kg/acre', timing: '1st irrigation (21 days)', method: 'Broadcasting', notes: 'Apply before irrigation' },\n        { name: 'Urea (46% N)', quantity: '65 kg/acre', timing: '2nd irrigation (45 days)', method: 'Broadcasting', notes: 'Apply during tillering stage' }\n      ],\n      steps: [\n        'Test soil pH (ideal 6.0-7.5)',\n        'Apply basal dose with seed drilling',\n        'Ensure proper seed depth (4-5 cm)',\n        'First top dressing at crown root stage',\n        'Second top dressing at tillering',\n        'Monitor for nutrient deficiency signs'\n      ]\n    },\n    'rice': {\n      name: 'Rice',\n      image: '🌾',\n      season: 'Kharif',\n      fertilizers: [\n        { name: 'NPK (12:32:16)', quantity: '125 kg/acre', timing: 'Before transplanting', method: 'Broadcasting', notes: 'Mix thoroughly with puddled soil' },\n        { name: 'Urea (46% N)', quantity: '45 kg/acre', timing: '15 days after transplant', method: 'Broadcasting', notes: 'Apply in standing water' },\n        { name: 'Urea (46% N)', quantity: '45 kg/acre', timing: 'At panicle initiation', method: 'Broadcasting', notes: 'Apply during tillering stage' }\n      ],\n      steps: [\n        'Prepare puddled field with standing water',\n        'Apply basal fertilizer 2-3 days before transplanting',\n        'Transplant 21-day old seedlings',\n        'Maintain water level at 2-5 cm',\n        'Apply nitrogen in split doses',\n        'Drain field 10 days before harvest'\n      ]\n    },\n    'cotton': {\n      name: 'Cotton',\n      image: '☁️',\n      season: 'Kharif',\n      fertilizers: [\n        { name: 'NPK (17:17:17)', quantity: '100 kg/acre', timing: 'At sowing', method: 'Side placement', notes: 'Place 3-4 cm away from seed' },\n        { name: 'Urea (46% N)', quantity: '60 kg/acre', timing: '30-35 days after sowing', method: 'Side dressing', notes: 'Apply during square formation' },\n        { name: 'MOP (60% K2O)', quantity: '35 kg/acre', timing: 'At flowering', method: 'Broadcasting', notes: 'Helps in boll development' }\n      ],\n      steps: [\n        'Select well-drained black cotton soil',\n        'Apply pre-sowing fertilizers',\n        'Sow seeds at proper depth (2-3 cm)',\n        'First top dressing during square stage',\n        'Second application at flowering',\n        'Monitor for pink bollworm'\n      ]\n    },\n    'maize': {\n      name: 'Maize',\n      image: '🌽',\n      season: 'Kharif/Rabi',\n      fertilizers: [\n        { name: 'NPK (12:32:16)', quantity: '125 kg/acre', timing: 'At sowing', method: 'Band placement', notes: 'Place 5 cm away and below seed' },\n        { name: 'Urea (46% N)', quantity: '65 kg/acre', timing: '25-30 days after sowing', method: 'Side dressing', notes: 'Apply at knee-high stage' },\n        { name: 'Urea (46% N)', quantity: '65 kg/acre', timing: 'Pre-tasseling stage', method: 'Side dressing', notes: 'Apply 50-55 days after sowing' }\n      ],\n      steps: [\n        'Choose well-drained fertile soil',\n        'Apply basal dose at time of sowing',\n        'Maintain plant spacing of 60x20 cm',\n        'First top dressing at knee-high stage',\n        'Second top dressing before tasseling',\n        'Ensure adequate moisture throughout'\n      ]\n    }\n  };\n\n  const toggleAppliedStatus = (cropId: string) => {\n    const updatedApplied = appliedGuidance.includes(cropId)\n      ? appliedGuidance.filter(id => id !== cropId)\n      : [...appliedGuidance, cropId];\n    \n    setAppliedGuidance(updatedApplied);\n    localStorage.setItem('kisanmitra_applied_guidance', JSON.stringify(updatedApplied));\n  };\n\n  const toggleExpandCard = (cropId: string) => {\n    setExpandedCards(prev => \n      prev.includes(cropId) \n        ? prev.filter(id => id !== cropId)\n        : [...prev, cropId]\n    );\n  };\n\n  const savedCrops = savedGuidance.map(id => ({\n    id,\n    ...cropData[id as keyof typeof cropData]\n  })).filter(crop => crop.name);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-blue-50\">\n      {/* Header */}\n      <div className=\"bg-white shadow-sm border-b border-green-100 sticky top-0 z-10\">\n        <div className=\"px-6 py-4\">\n          <div className=\"flex items-center space-x-4\">\n            <button\n              onClick={() => navigate('/advisory')}\n              className=\"p-2 hover:bg-gray-100 rounded-xl transition-colors\"\n            >\n              <ArrowLeft className=\"w-6 h-6 text-gray-600\" />\n            </button>\n            <div className=\"p-3 bg-green-100 rounded-xl\">\n              <Beaker className=\"w-7 h-7 text-green-600\" />\n            </div>\n            <div>\n              <h1 className=\"text-2xl font-bold text-gray-900\">My Fertilizer Guidance</h1>\n              <p className=\"text-sm text-gray-600\">Your saved crop fertilizer recommendations</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"px-6 py-8 space-y-8\">\n        {savedCrops.length > 0 ? (\n          <div className=\"space-y-6\">\n            {savedCrops.map((crop) => {\n              const isApplied = appliedGuidance.includes(crop.id);\n              const isExpanded = expandedCards.includes(crop.id);\n              \n              return (\n                <Card key={crop.id} className=\"bg-white rounded-3xl shadow-lg border border-gray-100 overflow-hidden\">\n                  {/* Crop Header */}\n                  <CardHeader className={`${\n                    isApplied \n                      ? 'bg-gradient-to-r from-green-50 to-green-100 border-b border-green-200' \n                      : 'bg-gradient-to-r from-gray-50 to-gray-100 border-b border-gray-200'\n                  }`}>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"text-4xl\">{crop.image}</div>\n                        <div>\n                          <CardTitle className=\"text-2xl font-bold text-gray-900\">{crop.name}</CardTitle>\n                          <div className=\"flex items-center space-x-2 mt-1\">\n                            <Calendar className=\"w-4 h-4 text-green-600\" />\n                            <span className=\"text-green-700 font-medium\">{crop.season} Season</span>\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center space-x-3\">\n                        {isApplied && (\n                          <div className=\"flex items-center space-x-1 text-green-600 bg-green-100 px-3 py-1 rounded-full\">\n                            <CheckCircle className=\"w-4 h-4\" />\n                            <span className=\"text-sm font-medium\">Applied</span>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </CardHeader>\n\n                  {/* Fertilizer Table */}\n                  <CardContent className=\"p-6\">\n                    <div className=\"space-y-4\">\n                      <h3 className=\"text-xl font-bold text-gray-900 mb-4 flex items-center space-x-2\">\n                        <Droplets className=\"w-5 h-5 text-blue-600\" />\n                        <span>Fertilizer Schedule</span>\n                      </h3>\n                      \n                      <div className=\"space-y-3\">\n                        {crop.fertilizers.map((fertilizer, index) => (\n                          <div key={index} className=\"bg-gray-50 rounded-2xl p-4 border border-gray-200\">\n                            <div className=\"flex items-start justify-between mb-3\">\n                              <div className=\"flex-1\">\n                                <h4 className=\"font-bold text-gray-900 text-lg\">{fertilizer.name}</h4>\n                                <p className=\"text-green-600 font-bold text-base\">{fertilizer.quantity}</p>\n                              </div>\n                              <div className=\"text-right\">\n                                <div className=\"flex items-center space-x-1 text-blue-600\">\n                                  <Clock className=\"w-4 h-4\" />\n                                  <span className=\"text-sm font-medium\">{fertilizer.timing}</span>\n                                </div>\n                              </div>\n                            </div>\n                            \n                            <div className=\"grid grid-cols-1 gap-2\">\n                              <div className=\"flex items-center space-x-2\">\n                                <span className=\"text-sm font-medium text-gray-600\">Method:</span>\n                                <span className=\"text-sm text-gray-800 font-medium\">{fertilizer.method}</span>\n                              </div>\n                              <div className=\"flex items-start space-x-2\">\n                                <span className=\"text-sm font-medium text-gray-600 mt-0.5\">Notes:</span>\n                                <span className=\"text-sm text-gray-700 leading-relaxed\">{fertilizer.notes}</span>\n                              </div>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n\n                    {/* Expandable Steps */}\n                    <div className=\"mt-6\">\n                      <button\n                        onClick={() => toggleExpandCard(crop.id)}\n                        className=\"w-full flex items-center justify-between p-4 bg-gradient-to-r from-blue-50 to-purple-50 rounded-2xl hover:from-blue-100 hover:to-purple-100 transition-colors\"\n                      >\n                        <div className=\"flex items-center space-x-3\">\n                          <Leaf className=\"w-5 h-5 text-green-600\" />\n                          <span className=\"font-bold text-gray-900\">Step-by-Step Instructions</span>\n                        </div>\n                        {isExpanded ? (\n                          <ChevronUp className=\"w-5 h-5 text-gray-600\" />\n                        ) : (\n                          <ChevronDown className=\"w-5 h-5 text-gray-600\" />\n                        )}\n                      </button>\n\n                      {isExpanded && (\n                        <div className=\"mt-4 space-y-3\">\n                          {crop.steps.map((step, index) => (\n                            <div key={index} className=\"flex items-start space-x-3 p-3 bg-white rounded-xl border border-gray-200\">\n                              <div className=\"flex-shrink-0 w-6 h-6 bg-green-100 rounded-full flex items-center justify-center\">\n                                <span className=\"text-xs font-bold text-green-600\">{index + 1}</span>\n                              </div>\n                              <p className=\"text-gray-700 text-sm leading-relaxed\">{step}</p>\n                            </div>\n                          ))}\n                        </div>\n                      )}\n                    </div>\n\n                    {/* Apply Status Button */}\n                    <div className=\"mt-6\">\n                      <Button\n                        onClick={() => toggleAppliedStatus(crop.id)}\n                        className={`w-full py-4 rounded-2xl font-bold text-lg transition-all duration-300 ${\n                          isApplied\n                            ? 'bg-gray-100 text-gray-700 border-2 border-gray-300 hover:bg-gray-200'\n                            : 'bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white shadow-lg hover:shadow-xl'\n                        }`}\n                      >\n                        <div className=\"flex items-center justify-center space-x-3\">\n                          {isApplied ? (\n                            <>\n                              <Clock className=\"w-6 h-6\" />\n                              <span>Mark as Pending</span>\n                            </>\n                          ) : (\n                            <>\n                              <CheckCircle className=\"w-6 h-6\" />\n                              <span>Mark as Applied</span>\n                            </>\n                          )}\n                        </div>\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        ) : (\n          <Card className=\"bg-white rounded-3xl shadow-lg border border-gray-100 overflow-hidden\">\n            <CardContent className=\"p-8 text-center\">\n              <div className=\"p-4 bg-gray-100 rounded-xl w-20 h-20 mx-auto mb-4 flex items-center justify-center\">\n                <Beaker className=\"w-10 h-10 text-gray-400\" />\n              </div>\n              <h3 className=\"font-bold text-gray-900 text-xl mb-2\">No Saved Guidance</h3>\n              <p className=\"text-gray-500 text-base mb-6\">\n                Save fertilizer guidance from the Fertilizer Guide page to see them here\n              </p>\n              <Button \n                onClick={() => navigate('/fertilizer-guide')}\n                className=\"bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white py-3 px-6 rounded-2xl font-semibold\"\n              >\n                Browse Fertilizer Guide\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default MyFertilizerGuidance;","size_bytes":15577},"src/pages/MySavedCultivationGuides.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { \n  ArrowLeft, \n  BookOpen,\n  Bookmark,\n  ChevronRight,\n  Trash2\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n\nconst MySavedCultivationGuides = () => {\n  const navigate = useNavigate();\n  const [savedCultivationGuides, setSavedCultivationGuides] = useState<string[]>([]);\n\n  // Load saved guides\n  useEffect(() => {\n    const saved = localStorage.getItem('kisanmitra_saved_cultivation_guides');\n    setSavedCultivationGuides(saved ? JSON.parse(saved) : []);\n  }, []);\n\n  const cultivationGuideData = {\n    tomato: { \n      name: 'Tomato', \n      image: '🍅', \n      summary: 'Variety selection + seed treatment; drip irrigation best practices',\n      details: 'Complete step-by-step guide for growing healthy tomatoes'\n    },\n    wheat: { \n      name: 'Wheat', \n      image: '🌾', \n      summary: 'Six-stage irrigation; fertilizer application timing',\n      details: 'Comprehensive guide for wheat cultivation and management'\n    },\n    maize: { \n      name: 'Maize', \n      image: '🌽', \n      summary: 'Land preparation + raised beds; trio fertilizer schedule',\n      details: 'Step-by-step maize cultivation guide for optimal yield'\n    }\n  };\n\n  const savedCultivationCrops = savedCultivationGuides.map(id => ({\n    id,\n    ...cultivationGuideData[id as keyof typeof cultivationGuideData]\n  })).filter(crop => crop.name);\n\n  const removeCultivationGuide = (guideId: string) => {\n    const updated = savedCultivationGuides.filter(id => id !== guideId);\n    setSavedCultivationGuides(updated);\n    localStorage.setItem('kisanmitra_saved_cultivation_guides', JSON.stringify(updated));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-emerald-50\">\n      {/* Header */}\n      <div className=\"bg-gradient-to-r from-green-600 to-emerald-600 px-4 py-4 shadow-lg\">\n        <div className=\"flex items-center space-x-3\">\n          <button onClick={() => navigate('/advisory')} className=\"text-white hover:bg-white/20 rounded-full p-2\">\n            <ArrowLeft className=\"w-6 h-6\" />\n          </button>\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"p-2 bg-white/20 rounded-lg\">\n              <BookOpen className=\"w-6 h-6 text-white\" />\n            </div>\n            <div>\n              <h1 className=\"text-xl font-bold text-white\">Saved Cultivation Guides</h1>\n              <p className=\"text-green-100 text-sm\">Your bookmarked farming guides</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"px-4 py-6\">\n        {savedCultivationCrops.length > 0 ? (\n          <div className=\"space-y-4\">\n            {/* Summary Info */}\n            <Card className=\"bg-gradient-to-r from-green-50 to-emerald-50 border-2 border-green-200\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"p-3 bg-white rounded-xl shadow-sm\">\n                    <BookOpen className=\"w-6 h-6 text-green-600\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-bold text-gray-900 mb-2 text-lg\">\n                      {savedCultivationCrops.length} Saved Guide{savedCultivationCrops.length !== 1 ? 's' : ''}\n                    </h3>\n                    <p className=\"text-gray-700 text-base\">\n                      Your personalized collection of cultivation guides for quick access\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Saved Guides */}\n            <div className=\"space-y-4\">\n              {savedCultivationCrops.map((crop) => (\n                <Card \n                  key={crop.id} \n                  className=\"bg-white shadow-lg border border-green-100 hover:shadow-xl transition-shadow cursor-pointer overflow-hidden\"\n                  onClick={() => navigate(`/guides/${crop.id}`)}\n                >\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"text-4xl\">{crop.image}</div>\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-bold text-gray-900 text-lg mb-1\">{crop.name}</h4>\n                        <p className=\"text-gray-600 text-sm mb-2\">{crop.details}</p>\n                        <p className=\"text-gray-500 text-sm\">{crop.summary}</p>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <button\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            removeCultivationGuide(crop.id);\n                          }}\n                          className=\"p-2 text-gray-400 hover:text-red-500 hover:bg-red-50 rounded-lg transition-colors\"\n                        >\n                          <Trash2 className=\"w-5 h-5\" />\n                        </button>\n                        <ChevronRight className=\"w-5 h-5 text-gray-400\" />\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </div>\n        ) : (\n          <div className=\"text-center py-16\">\n            <div className=\"w-24 h-24 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-6\">\n              <BookOpen className=\"w-12 h-12 text-green-600\" />\n            </div>\n            <h3 className=\"text-xl font-bold text-gray-700 mb-3\">No Saved Guides</h3>\n            <p className=\"text-gray-500 mb-8 text-lg leading-relaxed max-w-md mx-auto\">\n              Save cultivation guides from the Guides section to quickly access them here\n            </p>\n            <Button \n              onClick={() => navigate('/guides')}\n              className=\"bg-green-600 hover:bg-green-700 text-white px-8 py-3 rounded-xl shadow-lg\"\n            >\n              Browse Cultivation Guides\n            </Button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default MySavedCultivationGuides;","size_bytes":6313},"src/pages/NearbyShops.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { \n  ArrowLeft, \n  MapPin, \n  Phone, \n  Clock, \n  Star,\n  Navigation,\n  Search,\n  Store,\n  RefreshCw,\n  Heart,\n  MoreVertical,\n  CheckCircle,\n  Route,\n  AlertCircle\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport useLocation from '@/hooks/useLocation';\nimport placesService, { type FertilizerShop } from '@/lib/places';\n\nconst NearbyShops = () => {\n  const navigate = useNavigate();\n  const [searchQuery, setSearchQuery] = useState('');\n  const [shops, setShops] = useState<FertilizerShop[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  \n  const { \n    loading: locationLoading, \n    data: locationData, \n    error: locationError, \n    getCurrentLocation \n  } = useLocation();\n\n  // Load nearby fertilizer shops when location is available\n  useEffect(() => {\n    if (locationData?.latitude && locationData?.longitude) {\n      loadNearbyShops(locationData.latitude, locationData.longitude);\n    }\n  }, [locationData]);\n\n  const loadNearbyShops = async (lat: number, lon: number) => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      const nearbyShops = await placesService.findNearbyFertilizerShops(lat, lon);\n      setShops(nearbyShops);\n    } catch (err) {\n      setError('Unable to find nearby fertilizer shops. Please try again.');\n      console.error('Error loading nearby shops:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const retryLocation = async () => {\n    try {\n      await getCurrentLocation();\n    } catch (err) {\n      setError('Unable to get your location. Please enable location services.');\n    }\n  };\n\n  // Filter shops based on search query\n  const filteredShops = shops.filter(shop => \n    shop.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    shop.address.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n\n  const handleCall = (phone?: string) => {\n    // Ensure phone number is properly formatted for calling\n    if (phone) {\n      // Clean the phone number and use tel: protocol\n      const cleanPhone = phone.replace(/[^+\\d]/g, ''); // Keep only + and digits\n      window.location.href = `tel:${cleanPhone}`;\n    } else {\n      // Show alert if no phone number available\n      alert('Phone number not available for this shop');\n    }\n  };\n\n  const handleGetDirections = (shopId: string) => {\n    const shop = shops.find(s => s.id === shopId);\n    if (shop && locationData) {\n      // Use universal Google Maps directions URL\n      const origin = `${locationData.latitude},${locationData.longitude}`;\n      const destination = `${shop.latitude},${shop.longitude}`;\n      const directionsUrl = `https://www.google.com/maps/dir/?api=1&origin=${origin}&destination=${destination}&travelmode=driving`;\n      \n      // Open in new window/app for navigation\n      window.open(directionsUrl, '_blank');\n    } else if (shop) {\n      // Fallback: show shop location on map\n      const mapUrl = `https://www.google.com/maps/search/?api=1&query=${shop.latitude},${shop.longitude}`;\n      window.open(mapUrl, '_blank');\n    } else {\n      alert('Unable to get directions to this location');\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-green-50\">\n      {/* Header */}\n      <div className=\"bg-gradient-to-r from-blue-600 to-green-600 px-6 py-6 shadow-lg\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <button \n              onClick={() => navigate('/home')}\n              className=\"w-10 h-10 bg-white/20 backdrop-blur-sm rounded-full flex items-center justify-center hover:bg-white/30 transition-all\"\n            >\n              <ArrowLeft className=\"w-5 h-5 text-white\" />\n            </button>\n            <div>\n              <h1 className=\"text-2xl font-bold text-white\">Fertilizer Shops</h1>\n              <p className=\"text-blue-100 text-sm\">Find fertilizer shops near you</p>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-3\">\n            <button \n              onClick={retryLocation}\n              disabled={locationLoading}\n              className=\"w-10 h-10 bg-white/20 backdrop-blur-sm rounded-full flex items-center justify-center hover:bg-white/30 transition-all disabled:opacity-50\"\n            >\n              <RefreshCw className={`w-5 h-5 text-white ${locationLoading ? 'animate-spin' : ''}`} />\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"px-6 py-6 space-y-6 pb-24\">\n        {/* Search Bar */}\n        <div className=\"relative\">\n          <Search className=\"absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n          <Input\n            placeholder=\"Search shops, products, speciality...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-12 pr-4 py-4 text-base bg-white border-0 rounded-2xl shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n          />\n        </div>\n\n        {/* Location Banner */}\n        {/* Location Status */}\n        <div className=\"bg-white rounded-3xl p-6 shadow-lg border border-gray-100\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"w-12 h-12 bg-gradient-to-br from-blue-100 to-green-100 rounded-2xl flex items-center justify-center\">\n                <MapPin className=\"w-6 h-6 text-blue-600\" />\n              </div>\n              <div>\n                <h3 className=\"font-bold text-gray-900 text-lg\">Current Location</h3>\n                {locationLoading ? (\n                  <p className=\"text-gray-600 text-sm\">Detecting your location...</p>\n                ) : locationError ? (\n                  <p className=\"text-red-600 text-sm\">Location unavailable</p>\n                ) : locationData ? (\n                  <p className=\"text-gray-600 text-sm\">{locationData.district}, {locationData.state}</p>\n                ) : (\n                  <p className=\"text-gray-600 text-sm\">Location not detected</p>\n                )}\n              </div>\n            </div>\n            {!locationData && (\n              <Button \n                onClick={retryLocation}\n                disabled={locationLoading}\n                variant=\"outline\" \n                size=\"sm\" \n                className=\"bg-blue-50 border-blue-200 text-blue-700 hover:bg-blue-100 rounded-xl\"\n              >\n                <Navigation className=\"w-4 h-4 mr-2\" />\n                {locationLoading ? 'Locating...' : 'Detect'}\n              </Button>\n            )}\n          </div>\n        </div>\n\n        {/* Error Message */}\n        {error && (\n          <div className=\"bg-red-50 border border-red-200 rounded-2xl p-4 flex items-center space-x-3\">\n            <AlertCircle className=\"w-5 h-5 text-red-600\" />\n            <p className=\"text-red-700 text-sm\">{error}</p>\n          </div>\n        )}\n\n        {/* Quick Stats */}\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div className=\"bg-gradient-to-br from-blue-100 to-blue-50 rounded-2xl p-5 text-center shadow-lg border border-blue-200\">\n            <div className=\"w-12 h-12 bg-white/80 rounded-xl flex items-center justify-center mx-auto mb-3\">\n              <Store className=\"w-6 h-6 text-blue-700\" />\n            </div>\n            <p className=\"text-2xl font-bold text-blue-900 mb-1\">{filteredShops.length}</p>\n            <p className=\"text-sm font-semibold text-blue-700\">Fertilizer Shops</p>\n          </div>\n          \n          <div className=\"bg-gradient-to-br from-green-100 to-green-50 rounded-2xl p-5 text-center shadow-lg border border-green-200\">\n            <div className=\"w-12 h-12 bg-white/80 rounded-xl flex items-center justify-center mx-auto mb-3\">\n              <MapPin className=\"w-6 h-6 text-green-700\" />\n            </div>\n            <p className=\"text-2xl font-bold text-green-900 mb-1\">\n              {filteredShops.length > 0 ? `${Math.min(...filteredShops.map(s => s.distance))} km` : '-'}\n            </p>\n            <p className=\"text-sm font-semibold text-green-700\">Nearest Shop</p>\n          </div>\n        </div>\n\n        {/* Shops List */}\n        {/* Shops List */}\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-lg font-bold text-text-secondary\">Fertilizer Shops Near You</h2>\n            <span className=\"text-sm text-agri-gray\">{filteredShops.length} shops</span>\n          </div>\n\n          {loading ? (\n            <div className=\"text-center py-12\">\n              <RefreshCw className=\"w-8 h-8 text-blue-600 mx-auto mb-4 animate-spin\" />\n              <h3 className=\"text-lg font-semibold text-gray-700 mb-2\">Finding Nearby Fertilizer Shops</h3>\n              <p className=\"text-gray-500\">Please wait while we locate shops near you...</p>\n            </div>\n          ) : filteredShops.length > 0 ? (\n            filteredShops.map((shop) => (\n              <div key={shop.id} className=\"bg-white rounded-3xl p-6 shadow-lg border border-gray-100 hover:shadow-xl transition-shadow\">\n                {/* Shop Header */}\n                <div className=\"flex items-start justify-between mb-4\">\n                  <div className=\"flex items-start space-x-3\">\n                    <div className=\"w-14 h-14 bg-gradient-to-br from-blue-100 to-green-100 rounded-2xl flex items-center justify-center shadow-sm\">\n                      <Store className=\"w-7 h-7 text-blue-600\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-2 mb-1\">\n                        <h3 className=\"font-semibold text-gray-900\">{shop.name}</h3>\n                        <CheckCircle className=\"w-4 h-4 text-green-500\" />\n                      </div>\n                      <p className=\"text-sm text-gray-600 mb-1\">Fertilizer & Agricultural Supplies</p>\n                      <div className=\"flex items-center space-x-2\">\n                        {shop.rating && (\n                          <>\n                            <div className=\"flex items-center space-x-1\">\n                              <Star className=\"w-3 h-3 fill-yellow-400 text-yellow-400\" />\n                              <span className=\"text-sm font-medium\">{shop.rating.toFixed(1)}</span>\n                            </div>\n                            {shop.reviews && (\n                              <>\n                                <span className=\"text-sm text-gray-500\">({shop.reviews})</span>\n                                <span className=\"text-sm text-gray-500\">•</span>\n                              </>\n                            )}\n                          </>\n                        )}\n                        <span className=\"text-sm font-medium text-blue-600\">{shop.distance.toFixed(1)} km</span>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-2\">\n                    <Badge className={shop.isOpen ? 'bg-green-500 text-white' : 'bg-red-500 text-white'}>\n                      {shop.isOpen ? 'Open' : 'Closed'}\n                    </Badge>\n                  </div>\n                </div>\n\n                {/* Address & Business Hours */}\n                <div className=\"bg-gradient-to-br from-gray-50 to-blue-50 rounded-2xl p-4 mb-4 border border-gray-100\">\n                  <div className=\"flex items-start space-x-3\">\n                    <MapPin className=\"w-5 h-5 text-blue-600 mt-0.5\" />\n                    <div className=\"flex-1\">\n                      <p className=\"font-medium text-gray-900 text-sm mb-2\">{shop.address}</p>\n                      \n                      {/* Business Hours */}\n                      <div className=\"bg-white rounded-lg p-3 border border-gray-200\">\n                        <div className=\"flex items-center space-x-2 mb-2\">\n                          <Clock className=\"w-4 h-4 text-green-600\" />\n                          <span className=\"font-semibold text-gray-800 text-sm\">Business Hours</span>\n                        </div>\n                        {shop.openingHours && shop.openingHours.length > 0 ? (\n                          <div className=\"space-y-1\">\n                            {shop.openingHours.map((hours, index) => (\n                              <p key={index} className=\"text-xs text-gray-700 leading-relaxed\">\n                                {hours}\n                              </p>\n                            ))}\n                          </div>\n                        ) : (\n                          <p className=\"text-xs text-gray-600\">Hours not available</p>\n                        )}\n                        \n                        {/* Current Status */}\n                        <div className=\"mt-2 pt-2 border-t border-gray-100\">\n                          <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${\n                            shop.isOpen \n                              ? 'bg-green-100 text-green-800' \n                              : 'bg-red-100 text-red-800'\n                          }`}>\n                            <div className={`w-2 h-2 rounded-full mr-1 ${\n                              shop.isOpen ? 'bg-green-400' : 'bg-red-400'\n                            }`} />\n                            {shop.isOpen ? 'Open Now' : 'Closed Now'}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Action Buttons */}\n                <div className=\"flex space-x-3\">\n                  <Button \n                    onClick={() => handleCall(shop.phone)}\n                    size=\"sm\" \n                    className=\"flex-1 bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700 text-white font-semibold rounded-xl shadow-md\"\n                  >\n                    <Phone className=\"w-4 h-4 mr-2\" />\n                    Call Now\n                  </Button>\n                  \n                  <Button \n                    onClick={() => handleGetDirections(shop.id)}\n                    variant=\"outline\" \n                    size=\"sm\" \n                    className=\"border-2 border-blue-300 text-blue-700 hover:bg-blue-50 font-semibold rounded-xl\"\n                  >\n                    <Route className=\"w-4 h-4 mr-2\" />\n                    Navigate\n                  </Button>\n                  \n                  <button className=\"p-3 border-2 border-gray-200 rounded-xl hover:bg-gray-50 transition-colors\">\n                    <Heart className=\"w-4 h-4 text-gray-500\" />\n                  </button>\n                </div>\n              </div>\n            ))\n          ) : !loading && (\n            <div className=\"text-center py-12\">\n              <Store className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold text-gray-700 mb-2\">No Real Fertilizer Shops Found</h3>\n              <p className=\"text-gray-500 mb-6\">\n                {!locationData ? \n                  'Please enable location access to find nearby shops' : \n                  'No actual fertilizer shops found in your area. This search only shows real businesses from map data.'}\n              </p>\n              \n              {/* Location Actions */}\n              <div className=\"space-y-3\">\n                {!locationData ? (\n                  <Button \n                    onClick={retryLocation}\n                    className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n                  >\n                    <Navigation className=\"w-4 h-4 mr-2\" />\n                    Enable Location\n                  </Button>\n                ) : (\n                  <div className=\"space-y-2\">\n                    <Button \n                      onClick={() => {\n                        if (locationData) {\n                          loadNearbyShops(locationData.latitude, locationData.longitude);\n                        }\n                      }}\n                      variant=\"outline\"\n                      className=\"border-blue-300 text-blue-700 hover:bg-blue-50\"\n                    >\n                      <RefreshCw className=\"w-4 h-4 mr-2\" />\n                      Search Again\n                    </Button>\n                    <p className=\"text-xs text-gray-400 max-w-xs mx-auto\">\n                      Showing only real businesses from verified map data. No mock or test data.\n                    </p>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Help Section */}\n        <div className=\"bg-white rounded-2xl p-6 shadow-soft\">\n          <h3 className=\"text-lg font-semibold text-text-secondary mb-4\">Need Help Finding Shops?</h3>\n          <div className=\"space-y-3\">\n            <button className=\"w-full flex items-center justify-between p-4 bg-agri-light rounded-xl hover:bg-agri-light-gray transition-colors\">\n              <div className=\"flex items-center space-x-3\">\n                <Phone className=\"w-5 h-5 text-agri-primary\" />\n                <span className=\"font-medium text-text-secondary\">Call Support</span>\n              </div>\n              <span className=\"text-sm text-agri-gray\">1800-123-4567</span>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NearbyShops;","size_bytes":17824},"src/pages/NotFound.tsx":{"content":"import { useLocation, useNavigate } from \"react-router-dom\";\nimport { useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft, Home } from \"lucide-react\";\n\nconst NotFound = () => {\n  const location = useLocation();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    console.error(\n      \"404 Error: User attempted to access non-existent route:\",\n      location.pathname\n    );\n  }, [location.pathname]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-red-50 to-orange-50\">\n      {/* Header */}\n      <div className=\"bg-gradient-to-r from-red-500 to-orange-500 px-4 py-4 shadow-lg\">\n        <div className=\"flex items-center justify-between\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => navigate('/')}\n            className=\"text-white hover:bg-white/20 rounded-full p-3\"\n          >\n            <ArrowLeft className=\"w-5 h-5\" />\n          </Button>\n          \n          <h1 className=\"text-xl font-bold text-white\">Page Not Found</h1>\n          \n          <div className=\"w-12\" />\n        </div>\n      </div>\n      \n      {/* Content */}\n      <div className=\"flex items-center justify-center min-h-[calc(100vh-80px)]\">\n        <div className=\"text-center p-8\">\n          <div className=\"text-8xl mb-6\">🌾</div>\n          <h1 className=\"text-6xl font-bold mb-4 text-gray-800\">404</h1>\n          <p className=\"text-xl text-gray-600 mb-8\">Oops! This page doesn't exist</p>\n          <div className=\"space-y-4\">\n            <Button \n              onClick={() => navigate('/')}\n              className=\"bg-green-600 hover:bg-green-700 text-white px-8 py-3 rounded-2xl flex items-center space-x-2 mx-auto\"\n            >\n              <Home className=\"w-5 h-5\" />\n              <span>Return to Home</span>\n            </Button>\n            <Button \n              onClick={() => navigate(-1)}\n              variant=\"outline\"\n              className=\"border-green-600 text-green-600 hover:bg-green-50 px-8 py-3 rounded-2xl flex items-center space-x-2 mx-auto\"\n            >\n              <ArrowLeft className=\"w-5 h-5\" />\n              <span>Go Back</span>\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NotFound;\n","size_bytes":2281},"src/pages/Onboarding.tsx":{"content":"import { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { ChevronLeft, ChevronRight, Sparkles, Star } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport onboarding1 from '@/assets/onboarding-1.png';\nimport onboarding2 from '@/assets/onboarding-2.png';\nimport onboarding3 from '@/assets/onboarding-3.png';\n\nconst onboardingData = [\n  {\n    id: 1,\n    image: onboarding1,\n    title: \"Welcome to Smart Farming Revolution\",\n    subtitle: \"Diagnose Plant Diseases with AI Magic\",\n    description: \"Simply capture a photo and get instant expert plant health analysis\",\n    color: \"from-green-400 to-emerald-600\",\n  },\n  {\n    id: 2,\n    image: onboarding2,\n    title: \"Your Digital Agricultural Marketplace\",\n    subtitle: \"Buy Smart, Sell Smarter\",\n    description: \"Access premium fertilizers, quality seeds, and connect with buyers\",\n    color: \"from-blue-400 to-indigo-600\",\n  },\n  {\n    id: 3,\n    image: onboarding3,\n    title: \"Personalized Farming Intelligence\",\n    subtitle: \"Weather Wisdom & Expert Guidance\",\n    description: \"Get hyper-local weather updates and AI-powered farming recommendations\",\n    color: \"from-purple-400 to-pink-600\",\n  },\n];\n\nconst Onboarding = () => {\n  const [currentStep, setCurrentStep] = useState(0);\n  const navigate = useNavigate();\n\n  const handleNext = () => {\n    if (currentStep < onboardingData.length - 1) {\n      setCurrentStep(currentStep + 1);\n    } else {\n      handleGetStarted();\n    }\n  };\n\n  const handlePrevious = () => {\n    if (currentStep > 0) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  const handleSkip = () => {\n    handleGetStarted();\n  };\n\n  const handleGetStarted = () => {\n    localStorage.setItem('kisanmitra_onboarding_seen', 'true');\n    navigate('/signup');\n  };\n\n  const currentData = onboardingData[currentStep];\n\n  return (\n    <div className=\"mobile-container\">\n      {/* Background with animated gradient */}\n      <div className={`absolute inset-0 bg-gradient-to-br ${currentData.color} transition-all duration-700`} />\n      \n      {/* Floating decorative elements */}\n      <div className=\"absolute inset-0 overflow-hidden\">\n        {[...Array(15)].map((_, i) => (\n          <div\n            key={i}\n            className=\"absolute\"\n            style={{\n              left: Math.random() * 100 + '%',\n              top: Math.random() * 100 + '%',\n              animationDelay: Math.random() * 4 + 's',\n            }}\n          >\n            {i % 3 === 0 ? (\n              <Sparkles className=\"w-4 h-4 text-white/30 animate-pulse\" />\n            ) : (\n              <Star className=\"w-3 h-3 text-white/20 animate-bounce\" />\n            )}\n          </div>\n        ))}\n      </div>\n\n      {/* Header */}\n      <div className=\"relative z-10 flex justify-between items-center p-6\">\n        <button\n          onClick={handlePrevious}\n          className={`p-2 rounded-full bg-white/20 backdrop-blur-sm transition-all ${\n            currentStep === 0 ? 'opacity-0 pointer-events-none' : 'opacity-100'\n          }`}\n        >\n          <ChevronLeft className=\"w-6 h-6 text-white\" />\n        </button>\n        \n        <button\n          onClick={handleSkip}\n          className=\"text-white/80 font-medium hover:text-white transition-colors\"\n        >\n          Skip\n        </button>\n      </div>\n\n      {/* Content */}\n      <div className=\"relative z-10 flex flex-col items-center justify-center min-h-[calc(100vh-200px)] px-6\">\n        {/* Image */}\n        <div className=\"mb-8 relative\">\n          <div className=\"w-80 h-60 relative animate-fade-in\">\n            <img\n              src={currentData.image}\n              alt={currentData.title}\n              className=\"w-full h-full object-contain drop-shadow-xl\"\n            />\n            \n            {/* Floating UI elements animation */}\n            <div className=\"absolute -top-4 -right-4 float-animation\">\n              <div className=\"w-8 h-8 bg-white/20 rounded-lg backdrop-blur-sm flex items-center justify-center\">\n                <Sparkles className=\"w-4 h-4 text-white\" />\n              </div>\n            </div>\n            \n            <div className=\"absolute -bottom-2 -left-4 float-animation\" style={{ animationDelay: '1s' }}>\n              <div className=\"w-6 h-6 bg-white/20 rounded-full backdrop-blur-sm\" />\n            </div>\n          </div>\n        </div>\n\n        {/* Text Content */}\n        <div className=\"text-center mb-12 animate-fade-in\">\n          <h1 className=\"text-3xl font-bold text-white mb-4 leading-tight\">\n            {currentData.title}\n          </h1>\n          \n          <div className=\"mb-4\">\n            <h2 className=\"text-xl font-semibold text-white/90 mb-2 bg-gradient-to-r from-white to-white/80 bg-clip-text text-transparent\">\n              {currentData.subtitle}\n            </h2>\n          </div>\n          \n          <p className=\"text-lg text-white/80 leading-relaxed max-w-xs\">\n            {currentData.description}\n          </p>\n        </div>\n\n        {/* Progress Indicators */}\n        <div className=\"flex space-x-3 mb-8\">\n          {onboardingData.map((_, index) => (\n            <div\n              key={index}\n              className={`h-2 rounded-full transition-all duration-500 ${\n                index === currentStep \n                  ? 'w-8 bg-white shadow-glow' \n                  : 'w-2 bg-white/40'\n              }`}\n            />\n          ))}\n        </div>\n      </div>\n\n      {/* Navigation */}\n      <div className=\"relative z-10 p-6\">\n        {currentStep === onboardingData.length - 1 ? (\n          <Button\n            onClick={handleGetStarted}\n            className=\"w-full btn-glass text-lg font-semibold py-4 bg-white/20 hover:bg-white/30 text-white border-0\"\n          >\n            <Sparkles className=\"w-5 h-5 mr-2\" />\n            Begin Your Journey\n          </Button>\n        ) : (\n          <Button\n            onClick={handleNext}\n            className=\"w-full btn-glass text-lg font-semibold py-4 bg-white/20 hover:bg-white/30 text-white border-0\"\n          >\n            Next\n            <ChevronRight className=\"w-5 h-5 ml-2\" />\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Onboarding;","size_bytes":6208},"src/pages/OrderSuccess.tsx":{"content":"import { useEffect } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { \n  CheckCircle,\n  Package,\n  Truck,\n  Clock,\n  MapPin,\n  Phone,\n  Download\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\n\nconst OrderSuccess = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const orderData = location.state;\n  const orderId = orderData?.orderId || 'ORD' + Date.now();\n  const order = orderData?.order;\n  const selectedAddress = orderData?.selectedAddress;\n\n  useEffect(() => {\n    // Auto redirect to orders page after 10 seconds\n    const timer = setTimeout(() => {\n      navigate('/orders');\n    }, 10000);\n\n    return () => clearTimeout(timer);\n  }, [navigate]);\n\n  return (\n    <div className=\"mobile-container bg-green-50\">\n      <div className=\"mobile-content flex flex-col items-center justify-center min-h-screen text-center space-y-6 p-6\">\n        {/* Success Animation */}\n        <div className=\"relative\">\n          <div className=\"w-24 h-24 bg-green-500 rounded-full flex items-center justify-center animate-pulse\">\n            <CheckCircle className=\"w-12 h-12 text-white\" />\n          </div>\n          <div className=\"absolute -inset-4 border-4 border-green-300 rounded-full animate-ping opacity-20\"></div>\n        </div>\n\n        {/* Success Message */}\n        <div className=\"space-y-3\">\n          <h1 className=\"text-2xl font-bold text-green-800\">Order Placed Successfully!</h1>\n          <p className=\"text-green-600\">Thank you for your order. We'll take care of your farming needs.</p>\n        </div>\n\n        {/* Order Details */}\n        <div className=\"bg-white rounded-2xl p-6 shadow-sm border border-green-200 w-full max-w-sm\">\n          <div className=\"space-y-4\">\n            <div className=\"text-center\">\n              <p className=\"text-sm text-gray-500\">Order ID</p>\n              <p className=\"font-mono text-lg font-semibold text-gray-900\">#{orderId}</p>\n              {order && (\n                <div className=\"mt-2\">\n                  <p className=\"text-sm text-gray-600\">Total: <span className=\"font-semibold text-green-600\">₹{order.total}</span></p>\n                  <p className=\"text-xs text-gray-500\">{order.items.length} items</p>\n                </div>\n              )}\n            </div>\n\n            <div className=\"grid grid-cols-3 gap-4 text-center\">\n              <div>\n                <div className=\"w-12 h-12 bg-green-100 rounded-xl flex items-center justify-center mx-auto mb-2\">\n                  <Package className=\"w-6 h-6 text-green-600\" />\n                </div>\n                <p className=\"text-xs text-gray-500\">Processing</p>\n                <p className=\"text-sm font-medium text-green-600\">In Progress</p>\n              </div>\n\n              <div>\n                <div className=\"w-12 h-12 bg-gray-100 rounded-xl flex items-center justify-center mx-auto mb-2\">\n                  <Truck className=\"w-6 h-6 text-gray-400\" />\n                </div>\n                <p className=\"text-xs text-gray-500\">Shipping</p>\n                <p className=\"text-sm font-medium text-gray-400\">Pending</p>\n              </div>\n\n              <div>\n                <div className=\"w-12 h-12 bg-gray-100 rounded-xl flex items-center justify-center mx-auto mb-2\">\n                  <CheckCircle className=\"w-6 h-6 text-gray-400\" />\n                </div>\n                <p className=\"text-xs text-gray-500\">Delivered</p>\n                <p className=\"text-sm font-medium text-gray-400\">Pending</p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Estimated Delivery */}\n        <div className=\"bg-white rounded-2xl p-4 shadow-sm border border-green-200 w-full max-w-sm\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-blue-100 rounded-xl flex items-center justify-center\">\n              <Clock className=\"w-5 h-5 text-blue-600\" />\n            </div>\n            <div>\n              <p className=\"font-medium text-gray-900\">Estimated Delivery</p>\n              <p className=\"text-sm text-blue-600\">Tomorrow by 6:00 PM</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Delivery Address */}\n        <div className=\"bg-white rounded-2xl p-4 shadow-sm border border-green-200 w-full max-w-sm\">\n          <div className=\"flex items-start space-x-3\">\n            <div className=\"w-10 h-10 bg-green-100 rounded-xl flex items-center justify-center\">\n              <MapPin className=\"w-5 h-5 text-green-600\" />\n            </div>\n            <div>\n              <p className=\"font-medium text-gray-900\">Delivery Address</p>\n              <p className=\"text-sm text-gray-600\">\n                {selectedAddress ? selectedAddress.address : order?.address || 'Village Rampur, Dist. Hardoi, UP 241001'}\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Action Buttons */}\n        <div className=\"space-y-3 w-full max-w-sm\">\n          <Button \n            onClick={() => navigate('/orders')}\n            className=\"w-full bg-green-600 hover:bg-green-700 text-white py-3 rounded-xl\"\n          >\n            <Package className=\"w-5 h-5 mr-2\" />\n            Track Your Order\n          </Button>\n\n          <Button \n            onClick={() => navigate('/shop')}\n            variant=\"outline\"\n            className=\"w-full border-green-600 text-green-600 hover:bg-green-50 py-3 rounded-xl\"\n          >\n            Continue Shopping\n          </Button>\n\n          <button \n            onClick={() => navigate('/orders')}\n            className=\"w-full flex items-center justify-center space-x-2 text-green-600 hover:text-green-700 py-2\"\n          >\n            <Download className=\"w-4 h-4\" />\n            <span className=\"text-sm\">Download Invoice</span>\n          </button>\n        </div>\n\n        {/* Support Info */}\n        <div className=\"bg-blue-50 border border-blue-200 rounded-2xl p-4 w-full max-w-sm\">\n          <div className=\"flex items-center space-x-3\">\n            <Phone className=\"w-5 h-5 text-blue-600\" />\n            <div>\n              <p className=\"font-medium text-blue-800\">Need Help?</p>\n              <p className=\"text-sm text-blue-600\">Call us at 1800-123-4567</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Auto Redirect Info */}\n        <p className=\"text-xs text-gray-500\">\n          Redirecting to orders page in 10 seconds...\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default OrderSuccess;","size_bytes":6494},"src/pages/Orders.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { \n  Package, \n  Truck, \n  CheckCircle, \n  Clock, \n  MapPin,\n  Phone,\n  Star,\n  RotateCcw,\n  ShoppingBag,\n  HelpCircle,\n  ChevronRight,\n  X,\n  ArrowLeft\n} from 'lucide-react';\nimport { cartManager, Order } from '@/lib/cart';\n\nconst FarmerOrdersPage = () => {\n  const navigate = useNavigate();\n  const [activeFilter, setActiveFilter] = useState('all');\n  const [orders, setOrders] = useState<Order[]>([]);\n\n  useEffect(() => {\n    loadOrders();\n  }, []);\n\n  const loadOrders = () => {\n    const allOrders = cartManager.getOrders();\n    setOrders(allOrders);\n  };\n\n  const handleReorder = (order: Order) => {\n    // Add all items from the order back to cart\n    order.items.forEach(item => {\n      cartManager.addToCart(item);\n    });\n    navigate('/cart');\n  };\n\n  const handleTrackOrder = (orderId: string) => {\n    // In a real app, this would navigate to a tracking page\n    alert(`Tracking order ${orderId}`);\n  };\n\n  const getItemIcon = (category: string) => {\n    const icons = {\n      fertilizers: '🌱',\n      seeds: '🍅',\n      pesticides: '🧪',\n      tools: '🔧'\n    };\n    return icons[category] || '🌱';\n  };\n\n  // Calculate summary stats\n  const totalOrders = orders.length;\n  const deliveredOrders = orders.filter(order => order.status === 'delivered').length;\n  const totalSpent = orders.reduce((sum, order) => sum + order.total, 0);\n\n  // Filter orders based on active filter\n  const filteredOrders = activeFilter === 'all' \n    ? orders \n    : orders.filter(order => order.status === activeFilter);\n\n  // Status configuration\n  const statusConfig = {\n    delivered: { color: 'bg-green-500', textColor: 'text-green-500', icon: CheckCircle, bgLight: 'bg-green-50' },\n    shipped: { color: 'bg-blue-500', textColor: 'text-blue-500', icon: Truck, bgLight: 'bg-blue-50' },\n    processing: { color: 'bg-orange-500', textColor: 'text-orange-500', icon: Clock, bgLight: 'bg-orange-50' },\n    cancelled: { color: 'bg-red-500', textColor: 'text-red-500', icon: X, bgLight: 'bg-red-50' }\n  };\n\n  const formatDate = (dateString) => {\n    return new Date(dateString).toLocaleDateString('en-IN', {\n      day: 'numeric',\n      month: 'short',\n      year: 'numeric'\n    });\n  };\n\n  const renderStatusBadge = (status) => {\n    const config = statusConfig[status];\n    const IconComponent = config.icon;\n    return (\n      <div className={`flex items-center gap-1 px-3 py-1 rounded-full ${config.color} text-white text-sm font-medium`}>\n        <IconComponent className=\"w-4 h-4\" />\n        {status.charAt(0).toUpperCase() + status.slice(1)}\n      </div>\n    );\n  };\n\n  const renderActionButtons = (order: Order) => {\n    const buttons = [];\n    \n    if (order.status === 'shipped' || order.status === 'processing') {\n      buttons.push(\n        <button \n          key=\"track\" \n          onClick={() => handleTrackOrder(order.id)}\n          className=\"flex items-center gap-2 px-4 py-2 bg-blue-500 text-white rounded-full text-sm font-medium hover:bg-blue-600 transition-colors\"\n        >\n          <Truck className=\"w-4 h-4\" />\n          Track Order\n        </button>\n      );\n    }\n    \n    if (order.status === 'delivered') {\n      buttons.push(\n        <button key=\"review\" className=\"flex items-center gap-2 px-4 py-2 bg-orange-500 text-white rounded-full text-sm font-medium hover:bg-orange-600 transition-colors\">\n          <Star className=\"w-4 h-4\" />\n          Rate & Review\n        </button>\n      );\n    }\n    \n    buttons.push(\n      <button \n        key=\"reorder\" \n        onClick={() => handleReorder(order)}\n        className=\"flex items-center gap-2 px-4 py-2 bg-green-500 text-white rounded-full text-sm font-medium hover:bg-green-600 transition-colors\"\n      >\n        <RotateCcw className=\"w-4 h-4\" />\n        Reorder\n      </button>\n    );\n\n    return (\n      <div className=\"flex gap-2 flex-wrap\">\n        {buttons}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white shadow-sm border-b\">\n        <div className=\"max-w-md mx-auto px-4 py-4\">\n          <div className=\"flex items-center space-x-3 mb-2\">\n            <button \n              onClick={() => navigate('/home')}\n              className=\"p-2 -ml-2 hover:bg-gray-100 rounded-full transition-colors\"\n            >\n              <ArrowLeft className=\"w-6 h-6 text-gray-700\" />\n            </button>\n            <h1 className=\"text-2xl font-bold text-gray-900\">My Orders</h1>\n          </div>\n          <p className=\"text-gray-600 text-sm\">Track your agricultural purchases</p>\n        </div>\n      </div>\n\n      <div className=\"max-w-md mx-auto px-4 py-6 space-y-6\">\n        {/* Summary Cards */}\n        <div className=\"grid grid-cols-3 gap-3\">\n          <div className=\"bg-white rounded-2xl p-4 shadow-sm border border-gray-100\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              <div className=\"w-8 h-8 bg-blue-50 rounded-lg flex items-center justify-center\">\n                <Package className=\"w-4 h-4 text-blue-500\" />\n              </div>\n            </div>\n            <div className=\"text-2xl font-bold text-gray-900\">{totalOrders}</div>\n            <div className=\"text-sm text-gray-600\">Total Orders</div>\n          </div>\n\n          <div className=\"bg-white rounded-2xl p-4 shadow-sm border border-gray-100\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              <div className=\"w-8 h-8 bg-green-50 rounded-lg flex items-center justify-center\">\n                <CheckCircle className=\"w-4 h-4 text-green-500\" />\n              </div>\n            </div>\n            <div className=\"text-2xl font-bold text-gray-900\">{deliveredOrders}</div>\n            <div className=\"text-sm text-gray-600\">Delivered</div>\n          </div>\n\n          <div className=\"bg-white rounded-2xl p-4 shadow-sm border border-gray-100\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              <div className=\"w-8 h-8 bg-yellow-50 rounded-lg flex items-center justify-center\">\n                <span className=\"text-lg\">💰</span>\n              </div>\n            </div>\n            <div className=\"text-2xl font-bold text-gray-900\">₹{totalSpent.toLocaleString()}</div>\n            <div className=\"text-sm text-gray-600\">Total Spent</div>\n          </div>\n        </div>\n\n        {/* Filter Pills */}\n        <div className=\"flex gap-2 overflow-x-auto pb-2\">\n          {['all', 'processing', 'shipped', 'delivered'].map((filter) => (\n            <button\n              key={filter}\n              onClick={() => setActiveFilter(filter)}\n              className={`px-6 py-2 rounded-full text-sm font-medium whitespace-nowrap transition-colors ${\n                activeFilter === filter\n                  ? 'bg-green-500 text-white'\n                  : 'bg-white text-gray-600 border border-gray-200 hover:bg-gray-50'\n              }`}\n            >\n              {filter.charAt(0).toUpperCase() + filter.slice(1)}\n            </button>\n          ))}\n        </div>\n\n        {/* Orders List */}\n        {filteredOrders.length > 0 ? (\n          <div className=\"space-y-4\">\n            {filteredOrders.map((order) => (\n              <div key={order.id} className=\"bg-white rounded-2xl p-5 shadow-sm border border-gray-100\">\n                {/* Order Header */}\n                <div className=\"flex justify-between items-start mb-4\">\n                  <div>\n                    <h3 className=\"font-semibold text-gray-900\">Order #{order.id}</h3>\n                    <p className=\"text-sm text-gray-600\">Placed on {formatDate(order.orderDate)}</p>\n                  </div>\n                  {renderStatusBadge(order.status)}\n                </div>\n\n                {/* Products */}\n                <div className=\"space-y-3 mb-4\">\n                  {order.items.slice(0, 2).map((product, index) => (\n                    <div key={index} className=\"flex justify-between items-center\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"w-10 h-10 bg-green-50 rounded-lg flex items-center justify-center\">\n                          <span className=\"text-lg\">{getItemIcon(product.category)}</span>\n                        </div>\n                        <div>\n                          <p className=\"text-sm font-medium text-gray-900\">{product.name}</p>\n                          <p className=\"text-xs text-gray-500\">{product.quantity} x ₹{product.price}</p>\n                        </div>\n                      </div>\n                      <p className=\"font-semibold text-gray-900\">₹{product.price * product.quantity}</p>\n                    </div>\n                  ))}\n                  {order.items.length > 2 && (\n                    <button className=\"text-sm text-green-500 font-medium\">\n                      + {order.items.length - 2} more items\n                    </button>\n                  )}\n                </div>\n\n                {/* Total Amount */}\n                <div className=\"flex justify-between items-center py-3 border-t border-gray-100\">\n                  <span className=\"font-semibold text-gray-900\">Total Amount</span>\n                  <span className=\"text-lg font-bold text-green-600\">₹{order.total}</span>\n                </div>\n\n                {/* Address & Delivery Info */}\n                <div className=\"bg-gray-50 rounded-xl p-3 mb-4\">\n                  <div className=\"flex items-start gap-2\">\n                    <MapPin className=\"w-4 h-4 text-gray-500 mt-0.5\" />\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm text-gray-900\">{order.address}</p>\n                      {order.status === 'delivered' && order.deliveryDate && (\n                        <p className=\"text-sm text-green-600 mt-1\">\n                          Delivered on {formatDate(order.deliveryDate)}\n                        </p>\n                      )}\n                      {order.status !== 'delivered' && order.estimatedDelivery && (\n                        <p className=\"text-sm text-blue-600 mt-1\">\n                          Expected by {formatDate(order.estimatedDelivery)}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n                </div>\n\n                {/* Action Buttons */}\n                {renderActionButtons(order)}\n              </div>\n            ))}\n          </div>\n        ) : (\n          /* Empty State */\n          <div className=\"text-center py-12 bg-white rounded-2xl shadow-sm border border-gray-100\">\n            <div className=\"w-20 h-20 bg-gray-50 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <ShoppingBag className=\"w-10 h-10 text-gray-400\" />\n            </div>\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No orders yet</h3>\n            <p className=\"text-gray-600 mb-6\">Start shopping for agricultural supplies today!</p>\n            <button \n              onClick={() => navigate('/shop')}\n              className=\"bg-green-500 text-white px-6 py-3 rounded-full font-medium hover:bg-green-600 transition-colors\"\n            >\n              Shop Now\n            </button>\n          </div>\n        )}\n\n        {/* Support Section */}\n        <div className=\"bg-white rounded-2xl p-5 shadow-sm border border-gray-100\">\n          <div className=\"flex items-center gap-2 mb-4\">\n            <HelpCircle className=\"w-5 h-5 text-gray-600\" />\n            <h3 className=\"text-lg font-semibold text-gray-900\">Need Help?</h3>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <button className=\"w-full flex items-center justify-between p-3 bg-gray-50 rounded-xl hover:bg-gray-100 transition-colors\">\n              <div className=\"flex items-center gap-3\">\n                <Phone className=\"w-5 h-5 text-green-500\" />\n                <span className=\"font-medium text-gray-900\">Contact Support</span>\n              </div>\n              <ChevronRight className=\"w-5 h-5 text-gray-400\" />\n            </button>\n            \n            <button className=\"w-full flex items-center justify-between p-3 bg-gray-50 rounded-xl hover:bg-gray-100 transition-colors\">\n              <div className=\"flex items-center gap-3\">\n                <RotateCcw className=\"w-5 h-5 text-green-500\" />\n                <span className=\"font-medium text-gray-900\">Return Policy</span>\n              </div>\n              <ChevronRight className=\"w-5 h-5 text-gray-400\" />\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FarmerOrdersPage;","size_bytes":12646},"src/pages/Profile.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { \n  ArrowLeft, \n  Edit3, \n  Phone, \n  MapPin, \n  Calendar,\n  TrendingUp,\n  Package,\n  Trophy,\n  Store,\n  ShoppingCart,\n  Cloud,\n  Activity,\n  Star,\n  Users,\n  Leaf,\n  BarChart3,\n  Settings,\n  Bell,\n  HelpCircle,\n  LogOut,\n  Crown,\n  ShoppingBag,\n  Wallet,\n  ChevronRight,\n  Share2,\n  BadgeCheck,\n  MessageCircle,\n  Shield,\n  Gift,\n  FileText,\n  DollarSign\n} from 'lucide-react';\nimport { dataService } from '../lib/dataService';\nimport { marketData } from '../lib/marketData';\n\nconst Profile = () => {\n  const navigate = useNavigate();\n  const [userData, setUserData] = useState(null);\n  const [stats, setStats] = useState(null);\n  const [achievements, setAchievements] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [notificationsEnabled, setNotificationsEnabled] = useState(true);\n\n  useEffect(() => {\n    const loadUserData = async () => {\n      setIsLoading(true);\n      try {\n        const user = dataService.getCurrentUser();\n        if (user) {\n          setUserData(user);\n          const userStats = dataService.calculateUserStats(user.id);\n          setStats(userStats);\n          \n          // Generate achievements based on real data\n          const generatedAchievements = [\n            { \n              id: 1, \n              title: 'First Sale', \n              icon: Trophy, \n              completed: userStats.successfulSales >= 1 \n            },\n            { \n              id: 2, \n              title: 'Top Seller', \n              icon: Crown, \n              completed: userStats.successfulSales >= 10 \n            },\n            { \n              id: 3, \n              title: 'Plant Expert', \n              icon: Leaf, \n              completed: userStats.diagnosisCount >= 5 \n            },\n            { \n              id: 4, \n              title: 'Super Star', \n              icon: Star, \n              completed: userStats.totalEarnings >= 50000 \n            }\n          ];\n          setAchievements(generatedAchievements);\n        }\n      } catch (error) {\n        console.error('Error loading user data:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadUserData();\n  }, []);\n\n  if (isLoading || !userData || !stats) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-2 border-green-500 border-t-transparent rounded-full animate-spin mx-auto mb-2\"></div>\n          <p className=\"text-gray-600\">Loading profile...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const StatCard = ({ title, value, icon: Icon, color = \"bg-blue-500\" }) => (\n    <div className=\"bg-white rounded-xl p-4 border border-gray-200\">\n      <div className=\"flex items-center space-x-3\">\n        <div className={`w-10 h-10 ${color} rounded-lg flex items-center justify-center`}>\n          <Icon className=\"w-5 h-5 text-white\" />\n        </div>\n        <div>\n          <div className=\"text-lg font-semibold text-gray-900\">{value}</div>\n          <div className=\"text-sm text-gray-600\">{title}</div>\n        </div>\n      </div>\n    </div>\n  );\n\n  const MenuItem = ({ icon: Icon, title, subtitle, onClick, rightElement = null }) => (\n    <button\n      onClick={onClick}\n      className=\"w-full flex items-center justify-between p-4 hover:bg-gray-50 rounded-xl transition-colors\"\n    >\n      <div className=\"flex items-center space-x-3\">\n        <div className=\"w-10 h-10 bg-gray-100 rounded-lg flex items-center justify-center\">\n          <Icon className=\"w-5 h-5 text-gray-600\" />\n        </div>\n        <div className=\"text-left\">\n          <div className=\"font-medium text-gray-900\">{title}</div>\n          {subtitle && <div className=\"text-sm text-gray-500\">{subtitle}</div>}\n        </div>\n      </div>\n      {rightElement || <ChevronRight className=\"w-5 h-5 text-gray-400\" />}\n    </button>\n  );\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white border-b border-gray-200\">\n        <div className=\"px-4 py-4 flex items-center justify-between\">\n          <button \n            onClick={() => navigate('/')}\n            className=\"w-10 h-10 bg-gray-100 rounded-lg flex items-center justify-center\"\n          >\n            <ArrowLeft className=\"w-5 h-5 text-gray-700\" />\n          </button>\n          <h1 className=\"text-lg font-semibold text-gray-900\">Profile</h1>\n          <button className=\"w-10 h-10 bg-gray-100 rounded-lg flex items-center justify-center\">\n            <Share2 className=\"w-5 h-5 text-gray-700\" />\n          </button>\n        </div>\n      </div>\n\n      <div className=\"p-4 space-y-6\">\n        {/* Profile Info */}\n        <div className=\"bg-white rounded-xl p-6 border border-gray-200\">\n          <div className=\"flex items-start space-x-4\">\n            <div className=\"relative\">\n              <div className=\"w-20 h-20 bg-blue-500 rounded-full flex items-center justify-center text-white text-2xl font-semibold\">\n                {userData.name.charAt(0)}\n              </div>\n              <div className=\"absolute -bottom-1 -right-1 w-6 h-6 bg-green-500 rounded-full flex items-center justify-center\">\n                <BadgeCheck className=\"w-4 h-4 text-white\" />\n              </div>\n            </div>\n            <div className=\"flex-1\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <h2 className=\"text-xl font-semibold text-gray-900\">{userData.name}</h2>\n                <button \n                  onClick={() => navigate('/profile/edit')}\n                  className=\"bg-blue-500 text-white px-4 py-2 rounded-lg text-sm font-medium flex items-center space-x-1\"\n                >\n                  <Edit3 className=\"w-4 h-4\" />\n                  <span>Edit</span>\n                </button>\n              </div>\n              <div className=\"space-y-1 text-sm text-gray-600\">\n                <div className=\"flex items-center space-x-2\">\n                  <MapPin className=\"w-4 h-4\" />\n                  <span>{userData.location}</span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Phone className=\"w-4 h-4\" />\n                  <span>{userData.phone}</span>\n                </div>\n              </div>\n              <div className=\"mt-3 flex items-center space-x-6 text-sm\">\n                <div>\n                  <span className=\"font-semibold text-gray-900\">{stats.successfulSales}</span>\n                  <span className=\"text-gray-500\"> sales</span>\n                </div>\n                <div>\n                  <span className=\"font-semibold text-gray-900\">{stats.level}</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Quick Stats */}\n        <div className=\"grid grid-cols-2 gap-4\">\n          <StatCard \n            title=\"Total Earnings\" \n            value={`₹${(stats.totalEarnings/1000).toFixed(0)}K`} \n            icon={Wallet}\n            color=\"bg-green-500\"\n          />\n          <button \n            onClick={() => navigate('/sell?tab=active')}\n            className=\"bg-white rounded-xl p-4 border border-gray-200 hover:bg-gray-50 transition-colors text-left\"\n          >\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-blue-500 rounded-lg flex items-center justify-center\">\n                <Package className=\"w-5 h-5 text-white\" />\n              </div>\n              <div>\n                <div className=\"text-lg font-semibold text-gray-900\">{stats.activeListings}</div>\n                <div className=\"text-sm text-gray-600\">Active Listings</div>\n              </div>\n            </div>\n          </button>\n          <button \n            onClick={() => navigate('/treatments')}\n            className=\"bg-white rounded-xl p-4 border border-gray-200 hover:bg-gray-50 transition-colors text-left\"\n          >\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-orange-500 rounded-lg flex items-center justify-center\">\n                <Activity className=\"w-5 h-5 text-white\" />\n              </div>\n              <div>\n                <div className=\"text-lg font-semibold text-gray-900\">{stats.activeTreatments}</div>\n                <div className=\"text-sm text-gray-600\">Active Treatments</div>\n              </div>\n            </div>\n          </button>\n          <StatCard \n            title=\"Markets\" \n            value={marketData.length} \n            icon={Store}\n            color=\"bg-purple-500\"\n          />\n        </div>\n\n        {/* Achievements */}\n        <div className=\"bg-white rounded-xl p-6 border border-gray-200\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">Achievements</h3>\n            <div className=\"text-sm text-gray-500\">\n              {achievements.filter(a => a.completed).length}/{achievements.length} unlocked\n            </div>\n          </div>\n          <div className=\"grid grid-cols-4 gap-4\">\n            {achievements.map((achievement) => (\n              <div key={achievement.id} className=\"text-center\">\n                <div className={`w-12 h-12 ${achievement.completed ? 'bg-yellow-100' : 'bg-gray-100'} rounded-lg flex items-center justify-center mx-auto mb-2`}>\n                  <achievement.icon className={`w-6 h-6 ${achievement.completed ? 'text-yellow-600' : 'text-gray-400'}`} />\n                </div>\n                <div className=\"text-xs font-medium text-gray-700\">{achievement.title}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Quick Actions */}\n        <div className=\"bg-white rounded-xl p-6 border border-gray-200\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Quick Actions</h3>\n          <div className=\"grid grid-cols-2 gap-4\">\n            {[\n              { title: 'Sell Crops', icon: ShoppingBag, color: 'bg-green-500', route: '/sell' },\n              { title: 'Market Prices', icon: BarChart3, color: 'bg-blue-500', route: '/market-prices' },\n              { title: 'Weather', icon: Cloud, color: 'bg-sky-500', route: '/weather' },\n              { title: 'Diagnose Plant', icon: Activity, color: 'bg-orange-500', route: '/diagnose' }\n            ].map((action, index) => (\n              <button\n                key={index}\n                onClick={() => navigate(action.route)}\n                className=\"p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors text-center\"\n              >\n                <div className={`w-10 h-10 ${action.color} rounded-lg flex items-center justify-center mx-auto mb-2`}>\n                  <action.icon className=\"w-5 h-5 text-white\" />\n                </div>\n                <div className=\"text-sm font-medium text-gray-700\">{action.title}</div>\n              </button>\n            ))}\n          </div>\n        </div>\n\n        {/* Menu Items */}\n        <div className=\"bg-white rounded-xl border border-gray-200 overflow-hidden\">\n          <MenuItem\n            icon={Leaf}\n            title=\"My Advisory\"\n            subtitle={`${stats.advisorySaved} tips saved`}\n            onClick={() => navigate('/advisory')}\n            rightElement={<ChevronRight className=\"w-5 h-5 text-gray-400\" />}\n          />\n          <MenuItem\n            icon={FileText}\n            title=\"Sales Report\"\n            subtitle={`₹${(stats.totalEarnings/1000).toFixed(0)}K earned`}\n            onClick={() => navigate('/sell?tab=sold')}\n            rightElement={<ChevronRight className=\"w-5 h-5 text-gray-400\" />}\n          />\n          <MenuItem\n            icon={Package}\n            title=\"Sold Listings\"\n            subtitle={`${stats.successfulSales} items sold`}\n            onClick={() => navigate('/sell?tab=sold')}\n            rightElement={<ChevronRight className=\"w-5 h-5 text-gray-400\" />}\n          />\n        </div>\n\n        {/* Settings */}\n        <div className=\"bg-white rounded-xl border border-gray-200 overflow-hidden\">\n          <div className=\"flex items-center justify-between p-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-gray-100 rounded-lg flex items-center justify-center\">\n                <Bell className=\"w-5 h-5 text-gray-600\" />\n              </div>\n              <div>\n                <div className=\"font-medium text-gray-900\">Notifications</div>\n                <div className=\"text-sm text-gray-500\">Push notifications</div>\n              </div>\n            </div>\n            <button\n              onClick={() => setNotificationsEnabled(!notificationsEnabled)}\n              className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${\n                notificationsEnabled ? 'bg-blue-500' : 'bg-gray-300'\n              }`}\n            >\n              <span\n                className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${\n                  notificationsEnabled ? 'translate-x-6' : 'translate-x-1'\n                }`}\n              />\n            </button>\n          </div>\n          <MenuItem\n            icon={HelpCircle}\n            title=\"Help & Support\"\n            subtitle=\"Get assistance\"\n            onClick={() => {}}\n            rightElement={<ChevronRight className=\"w-5 h-5 text-gray-400\" />}\n          />\n          <MenuItem\n            icon={Shield}\n            title=\"Privacy & Security\"\n            subtitle=\"Manage account security\"\n            onClick={() => {}}\n            rightElement={<ChevronRight className=\"w-5 h-5 text-gray-400\" />}\n          />\n          <MenuItem\n            icon={Settings}\n            title=\"App Settings\"\n            subtitle=\"Preferences\"\n            onClick={() => {}}\n            rightElement={<ChevronRight className=\"w-5 h-5 text-gray-400\" />}\n          />\n        </div>\n\n        {/* Logout */}\n        <button className=\"w-full bg-white border border-red-200 rounded-xl p-4 text-red-600 font-medium hover:bg-red-50 transition-colors\">\n          <div className=\"flex items-center justify-center space-x-2\">\n            <LogOut className=\"w-5 h-5\" />\n            <span>Logout</span>\n          </div>\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Profile;","size_bytes":14413},"src/pages/ProfileEdit.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { \n  ArrowLeft, \n  Save, \n  Camera,\n  User,\n  Phone, \n  MapPin, \n  Calendar,\n  Globe,\n  Mail,\n  Sprout\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { toast } from '@/components/ui/use-toast';\nimport CustomInput from '@/components/CustomInput';\nimport LocationPicker from '@/components/LocationPicker';\n\nconst ProfileEdit = () => {\n  const navigate = useNavigate();\n  const [userData, setUserData] = useState({\n    name: '',\n    phone: '',\n    email: '',\n    birthDate: '',\n    location: '',\n    state: '',\n    district: '',\n    pincode: '',\n    language: 'English',\n    farmSize: '',\n    experience: '',\n    crops: ''\n  });\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Load current user data\n  useEffect(() => {\n    const loadCurrentUser = () => {\n      try {\n        const currentUser = localStorage.getItem('kisanmitra_user');\n        if (currentUser) {\n          const user = JSON.parse(currentUser);\n          setUserData({\n            name: user.name || '',\n            phone: user.phone || user.mobile ? `+91 ${user.mobile}` : '',\n            email: user.email || '',\n            birthDate: user.birthDate || '',\n            location: user.location || user.district || '',\n            state: user.state || '',\n            district: user.district || user.location || '',\n            pincode: user.pincode || '',\n            language: user.language || 'English',\n            farmSize: user.farmSize || '',\n            experience: user.experience || '',\n            crops: user.crops || ''\n          });\n        }\n      } catch (error) {\n        console.error('Error loading user data:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadCurrentUser();\n  }, []);\n\n  const getNameValidation = () => {\n    if (userData.name.length === 0) return undefined;\n    const isValid = userData.name.trim().length >= 2;\n    return {\n      isValid,\n      message: isValid ? \"Valid name\" : \"Name must be at least 2 characters\"\n    };\n  };\n\n  const getPhoneValidation = () => {\n    if (userData.phone.length === 0) return undefined;\n    const phoneNumber = userData.phone.replace(/\\D/g, '');\n    const isValid = phoneNumber.length === 12 && phoneNumber.startsWith('91');\n    return {\n      isValid,\n      message: isValid ? \"Valid phone number\" : \"Enter a valid Indian mobile number\"\n    };\n  };\n\n  const handleSave = async () => {\n    try {\n      // Validate required fields\n      if (!userData.name.trim()) {\n        toast({\n          title: \"Validation Error\",\n          description: \"Name is required\",\n          variant: \"destructive\"\n        });\n        return;\n      }\n\n      // Get current user data and update it\n      const currentUser = JSON.parse(localStorage.getItem('kisanmitra_user') || '{}');\n      const phoneNumber = userData.phone.replace(/\\D/g, '').replace(/^91/, '');\n      \n      const updatedUser = {\n        ...currentUser,\n        name: userData.name.trim(),\n        phone: userData.phone,\n        mobile: phoneNumber,\n        email: userData.email,\n        birthDate: userData.birthDate,\n        location: userData.location || userData.district,\n        state: userData.state,\n        district: userData.district || userData.location,\n        pincode: userData.pincode,\n        language: userData.language,\n        farmSize: userData.farmSize,\n        experience: userData.experience,\n        crops: userData.crops,\n        updatedAt: new Date().toISOString()\n      };\n      \n      // Save to localStorage\n      localStorage.setItem('kisanmitra_user', JSON.stringify(updatedUser));\n      \n      // Also update auth token if phone changed\n      if (currentUser.pin) {\n        const authToken = btoa(`${phoneNumber}:${currentUser.pin}`);\n        localStorage.setItem('kisanmitra_auth_token', authToken);\n      }\n      \n      toast({\n        title: \"Profile Updated! ✅\",\n        description: \"Your profile has been successfully updated.\"\n      });\n      \n      navigate('/profile');\n      \n    } catch (error) {\n      console.error('Error saving profile:', error);\n      toast({\n        title: \"Save Failed\",\n        description: \"Failed to save profile. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    setUserData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  return (\n    <div className=\"mobile-container bg-background\">\n      {/* Header */}\n      <div className=\"mobile-header bg-white\">\n        <div className=\"flex items-center space-x-3\">\n          <button \n            onClick={() => navigate('/profile')}\n            className=\"w-10 h-10 bg-agri-light rounded-full flex items-center justify-center\"\n          >\n            <ArrowLeft className=\"w-5 h-5 text-agri-accent\" />\n          </button>\n          <h1 className=\"text-xl font-bold text-agri-accent\">Edit Profile</h1>\n        </div>\n        \n        <Button \n          onClick={handleSave}\n          className=\"bg-agri-primary hover:bg-agri-secondary text-white\"\n        >\n          <Save className=\"w-4 h-4 mr-2\" />\n          Save\n        </Button>\n      </div>\n\n      <div className=\"mobile-content space-y-6 pt-4\">\n        {/* Profile Photo */}\n        <div className=\"bg-white rounded-2xl p-6 shadow-soft\">\n          <div className=\"text-center\">\n            <div className=\"w-20 h-20 bg-agri-primary rounded-full flex items-center justify-center text-white text-2xl font-bold mx-auto mb-4\">\n              RJ\n            </div>\n            <Button variant=\"outline\" className=\"border-agri-primary text-agri-primary\">\n              <Camera className=\"w-4 h-4 mr-2\" />\n              Change Photo\n            </Button>\n          </div>\n        </div>\n\n        {/* Personal Information */}\n        <div className=\"bg-white rounded-2xl p-6 shadow-soft\">\n          <div className=\"flex items-center space-x-2 mb-6\">\n            <User className=\"w-5 h-5 text-agri-primary\" />\n            <h3 className=\"text-lg font-bold text-agri-accent\">Personal Information</h3>\n          </div>\n\n          <div className=\"space-y-4\">\n            <CustomInput\n              label=\"Full Name\"\n              icon={<User className=\"w-5 h-5\" />}\n              value={userData.name}\n              onChange={(value) => handleInputChange('name', value)}\n              placeholder=\"Enter your full name\"\n              type=\"text\"\n              validation={getNameValidation()}\n              required\n            />\n\n            <CustomInput\n              label=\"Mobile Number\"\n              icon={<Phone className=\"w-5 h-5\" />}\n              value={userData.phone.replace('+91 ', '')}\n              onChange={(value) => handleInputChange('phone', `+91 ${value}`)}\n              placeholder=\"Enter 10 digit mobile\"\n              type=\"tel\"\n              prefix=\"🇮🇳 +91\"\n              maxLength={10}\n              validation={getPhoneValidation()}\n              required\n            />\n\n            <div>\n              <Label htmlFor=\"email\" className=\"text-agri-accent font-medium\">Email Address (Optional)</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                value={userData.email}\n                onChange={(e) => handleInputChange('email', e.target.value)}\n                placeholder=\"your.email@example.com\"\n                className=\"mt-2 border-agri-primary/20 focus:border-agri-primary\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"birthDate\" className=\"text-agri-accent font-medium\">Date of Birth</Label>\n              <Input\n                id=\"birthDate\"\n                type=\"date\"\n                value={userData.birthDate}\n                onChange={(e) => handleInputChange('birthDate', e.target.value)}\n                className=\"mt-2 border-agri-primary/20 focus:border-agri-primary\"\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* Location Information */}\n        <div className=\"bg-white rounded-2xl p-6 shadow-soft\">\n          <div className=\"flex items-center space-x-2 mb-6\">\n            <MapPin className=\"w-5 h-5 text-agri-primary\" />\n            <h3 className=\"text-lg font-bold text-agri-accent\">Location Details</h3>\n          </div>\n\n          <LocationPicker\n            state={userData.state}\n            district={userData.district}\n            onStateChange={(value) => handleInputChange('state', value)}\n            onDistrictChange={(value) => handleInputChange('district', value)}\n          />\n\n          <div className=\"mt-4\">\n            <Label htmlFor=\"pincode\" className=\"text-agri-accent font-medium\">PIN Code (Optional)</Label>\n            <Input\n              id=\"pincode\"\n              value={userData.pincode}\n              onChange={(e) => handleInputChange('pincode', e.target.value.replace(/\\D/g, '').slice(0, 6))}\n              placeholder=\"Enter 6-digit PIN code\"\n              maxLength={6}\n              className=\"mt-2 border-agri-primary/20 focus:border-agri-primary\"\n            />\n          </div>\n        </div>\n\n        {/* Farm Information */}\n        <div className=\"bg-white rounded-2xl p-6 shadow-soft\">\n          <div className=\"flex items-center space-x-2 mb-6\">\n            <Sprout className=\"w-5 h-5 text-agri-primary\" />\n            <h3 className=\"text-lg font-bold text-agri-accent\">Farm Details</h3>\n          </div>\n\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"farmSize\" className=\"text-agri-accent font-medium\">Farm Size (Optional)</Label>\n              <Input\n                id=\"farmSize\"\n                value={userData.farmSize}\n                onChange={(e) => handleInputChange('farmSize', e.target.value)}\n                placeholder=\"e.g., 2.5 acres, 1 hectare\"\n                className=\"mt-2 border-agri-primary/20 focus:border-agri-primary\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"experience\" className=\"text-agri-accent font-medium\">Farming Experience (Optional)</Label>\n              <Input\n                id=\"experience\"\n                value={userData.experience}\n                onChange={(e) => handleInputChange('experience', e.target.value)}\n                placeholder=\"e.g., 5 years, New farmer\"\n                className=\"mt-2 border-agri-primary/20 focus:border-agri-primary\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"crops\" className=\"text-agri-accent font-medium\">Primary Crops (Optional)</Label>\n              <Input\n                id=\"crops\"\n                value={userData.crops}\n                onChange={(e) => handleInputChange('crops', e.target.value)}\n                placeholder=\"e.g., Rice, Wheat, Tomato\"\n                className=\"mt-2 border-agri-primary/20 focus:border-agri-primary\"\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* Preferences */}\n        <div className=\"bg-white rounded-2xl p-6 shadow-soft\">\n          <div className=\"flex items-center space-x-2 mb-6\">\n            <Globe className=\"w-5 h-5 text-agri-primary\" />\n            <h3 className=\"text-lg font-bold text-agri-accent\">Preferences</h3>\n          </div>\n\n          <div>\n            <Label htmlFor=\"language\" className=\"text-agri-accent font-medium\">Preferred Language</Label>\n            <Select value={userData.language} onValueChange={(value) => handleInputChange('language', value)}>\n              <SelectTrigger className=\"mt-2 border-agri-primary/20 focus:border-agri-primary\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"English\">🇮🇳 English</SelectItem>\n                <SelectItem value=\"Hindi\">🇮🇳 हिंदी (Hindi)</SelectItem>\n                <SelectItem value=\"Telugu\">🇮🇳 తెలుగు (Telugu)</SelectItem>\n                <SelectItem value=\"Tamil\">🇮🇳 தமிழ் (Tamil)</SelectItem>\n                <SelectItem value=\"Kannada\">🇮🇳 ಕನ್ನಡ (Kannada)</SelectItem>\n                <SelectItem value=\"Marathi\">🇮🇳 मराठी (Marathi)</SelectItem>\n                <SelectItem value=\"Gujarati\">🇮🇳 ગુજરાતી (Gujarati)</SelectItem>\n                <SelectItem value=\"Bengali\">🇮🇳 বাংলা (Bengali)</SelectItem>\n                <SelectItem value=\"Punjabi\">🇮🇳 ਪੰਜਾਬੀ (Punjabi)</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        {/* Save Button */}\n        <div className=\"pb-8\">\n          <Button \n            onClick={handleSave}\n            className=\"w-full bg-agri-primary hover:bg-agri-secondary text-white h-12 text-lg font-semibold\"\n          >\n            <Save className=\"w-5 h-5 mr-2\" />\n            Save Changes\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ProfileEdit;","size_bytes":13185},"src/pages/SellProduce.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { dataService, type Listing } from '@/lib/dataService';\nimport {\n  ArrowLeft,\n  Plus,\n  MapPin,\n  Clock,\n  Eye,\n  Truck,\n  CheckCircle,\n  X,\n  TrendingUp,\n  Check,\n  AlertCircle,\n  Timer\n} from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Switch } from '@/components/ui/switch';\nimport { marketData as realMarketData, Crop } from '@/lib/marketData';\n\nconst SellProduce = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [selectedTab, setSelectedTab] = useState('create');\n  const [showCreateListingDialog, setShowCreateListingDialog] = useState(false);\n  const [selectedCrop, setSelectedCrop] = useState('');\n  const [selectedMarket, setSelectedMarket] = useState('');\n  const [quantity, setQuantity] = useState('');\n  const [needTransport, setNeedTransport] = useState(false);\n  const [activeListings, setActiveListings] = useState<Listing[]>([]);\n  const [soldListings, setSoldListings] = useState<Listing[]>([]);\n  const [currentUser, setCurrentUser] = useState<any>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  \n  // Use real Chennai market data\n  const marketData = realMarketData;\n\n  // Get market-specific price for selected crop and market (convert from string ₹X/kg to number)\n  const getMarketPrice = () => {\n    if (!selectedMarket || !selectedCrop) return 0;\n    const market = marketData.find(m => m.name === selectedMarket);\n    const crop = market?.crops.find(c => c.name === selectedCrop);\n    if (!crop?.price) return 0;\n    // Extract number from price string (e.g., \"₹31/kg\" -> 31, \"₹31.5/kg\" -> 31.5)\n    const priceMatch = crop.price.match(/₹([\\d.]+)/);\n    return priceMatch ? parseFloat(priceMatch[1]) : 0;\n  };\n\n  // Auto-calculated price based on quantity and market-specific price\n  const calculateTotalPrice = () => {\n    if (!selectedCrop || !quantity || !selectedMarket) return 0;\n    const marketPrice = getMarketPrice();\n    return parseFloat(quantity) * marketPrice;\n  };\n\n  // Handle URL tab parameter\n  useEffect(() => {\n    const urlParams = new URLSearchParams(location.search);\n    const tabParam = urlParams.get('tab');\n    if (tabParam && ['create', 'active', 'sold'].includes(tabParam)) {\n      setSelectedTab(tabParam);\n    }\n  }, [location.search]);\n\n  // Load real user data and listings\n  useEffect(() => {\n    const loadUserData = async () => {\n      setIsLoading(true);\n      try {\n        const user = dataService.getCurrentUser();\n        if (user) {\n          setCurrentUser(user);\n          await loadUserListings(user.id);\n        }\n      } catch (error) {\n        console.error('Error loading user data:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadUserData();\n  }, []);\n\n  const loadUserListings = async (userId: string) => {\n    try {\n      const allListings = dataService.getUserListings(userId);\n      const active = allListings.filter(l => l.status === 'active');\n      const sold = allListings.filter(l => l.status === 'sold');\n      \n      setActiveListings(active);\n      setSoldListings(sold);\n    } catch (error) {\n      console.error('Error loading listings:', error);\n    }\n  };\n\n  // Helper function to get market approval status\n  const getMarketStatus = (listing: Listing) => {\n    // Simulate market approval logic based on listing age and other factors\n    const createdDate = new Date(listing.postedDate);\n    const now = new Date();\n    const hoursSinceCreated = (now.getTime() - createdDate.getTime()) / (1000 * 60 * 60);\n    \n    // For demo purposes, simulate realistic market approval timing\n    if (hoursSinceCreated < 2) {\n      return 'pending';\n    } else if (hoursSinceCreated < 24) {\n      // 80% chance of acceptance based on good price and demand\n      const pricePerKg = typeof listing.pricePerKg === 'string' ? parseFloat(listing.pricePerKg) : listing.pricePerKg;\n      const avgMarketPrice = getAverageMarketPrice(listing.crop);\n      const priceRatio = pricePerKg / avgMarketPrice;\n      \n      // Better prices (competitive with market) have higher acceptance rate\n      if (priceRatio <= 1.2 && priceRatio >= 0.8) {\n        return Math.random() > 0.2 ? 'accepted' : 'rejected';\n      } else if (priceRatio > 1.2) {\n        return Math.random() > 0.6 ? 'rejected' : 'accepted';\n      } else {\n        return 'accepted'; // Very low prices always get accepted\n      }\n    } else {\n      // Older listings have been reviewed\n      return Math.random() > 0.3 ? 'accepted' : 'rejected';\n    }\n  };\n\n  // Helper function to get average market price for a crop\n  const getAverageMarketPrice = (cropName: string) => {\n    let totalPrice = 0;\n    let count = 0;\n    \n    marketData.forEach(market => {\n      market.crops.forEach(crop => {\n        if (crop.name === cropName) {\n          const priceMatch = crop.price.match(/₹([\\d.]+)/);\n          if (priceMatch) {\n            totalPrice += parseFloat(priceMatch[1]);\n            count++;\n          }\n        }\n      });\n    });\n    \n    return count > 0 ? totalPrice / count : 50; // Default to ₹50/kg if not found\n  };\n\n  // Component to render market status badge\n  const MarketStatusBadge = ({ status }: { status: string }) => {\n    switch (status) {\n      case 'pending':\n        return (\n          <div className=\"inline-flex items-center space-x-1 bg-yellow-100 text-yellow-800 px-2 py-1 rounded-full text-xs font-medium\">\n            <Timer className=\"w-3 h-3\" />\n            <span>Under Review</span>\n          </div>\n        );\n      case 'accepted':\n        return (\n          <div className=\"inline-flex items-center space-x-1 bg-green-100 text-green-800 px-2 py-1 rounded-full text-xs font-medium\">\n            <Check className=\"w-3 h-3\" />\n            <span>Market Approved</span>\n          </div>\n        );\n      case 'rejected':\n        return (\n          <div className=\"inline-flex items-center space-x-1 bg-red-100 text-red-800 px-2 py-1 rounded-full text-xs font-medium\">\n            <AlertCircle className=\"w-3 h-3\" />\n            <span>Review Needed</span>\n          </div>\n        );\n      default:\n        return null;\n    }\n  };\n\n  // Helper function to get crop emoji - Updated for all Chennai vegetables\n  const getCropEmoji = (cropName) => {\n    const emojiMap = {\n      'Tomato': '🍅',\n      'Onion': '🧅', \n      'Onion Big': '🧅',\n      'Onion Small': '🧅',\n      'Onion Green': '🧅',\n      'Potato': '🥔',\n      'Carrot': '🥕',\n      'Cabbage': '🥬',\n      'Cauliflower': '🥬',\n      'Spinach': '🥬',\n      'Radish': '🤍',\n      'Brinjal': '🍆',\n      'Ladies Finger': '🫛',\n      'Bottle Gourd': '🥒',\n      'Bitter Gourd': '🥒',\n      'Ridge Gourd': '🥒',\n      'Snake Gourd': '🥒',\n      'Ivy Gourd': '🥒',\n      'Ash Gourd': '🥒',\n      'Cucumber': '🥒',\n      'Pumpkin': '🎃',\n      'Green Chilli': '🌶️',\n      'Capsicum': '🫑',\n      'French Beans': '🫘',\n      'Broad Beans': '🫘',\n      'Butter Beans': '🫘',\n      'Cluster Beans': '🫘',\n      'Green Peas': '🟢',\n      'Beetroot': '🟣',\n      'Sweet Potato': '🍠',\n      'Elephant Yam': '🍠',\n      'Colocasia': '🥔',\n      'Corn': '🌽',\n      'Baby Corn': '🌽',\n      'Drumsticks': '🌱',\n      'Coconut': '🥥',\n      'Lemon': '🍋',\n      'Ginger': '🧄',\n      'Garlic': '🧄',\n      'Mushroom': '🍄',\n      'Amla': '🍃',\n      'Raw Mango': '🥭',\n      'Raw Banana': '🍌',\n      'Banana Flower': '🌸',\n      'Shallot': '🧅',\n      'Curry Leaves': '🍃',\n      'Coriander Leaves': '🌿',\n      'Mint Leaves': '🌿',\n      'Fenugreek Leaves': '🌿',\n      'Dill Leaves': '🌿',\n      'Mustard Leaves': '🍃',\n      'Amaranth Leaves': '🍃',\n      'Sorrel Leaves': '🍃',\n      'Colocasia Leaves': '🍃',\n      'Okra': '🫛'\n    };\n    return emojiMap[cropName] || '🌱';\n  };\n\n  // Get highest price for each vegetable across all Chennai markets\n  const getHighestPricesAcrossMarkets = () => {\n    const cropPrices: { [key: string]: { price: number; emoji: string; name: string } } = {};\n    \n    // Extract all unique crops with their highest prices\n    marketData.forEach(market => {\n      market.crops.forEach(crop => {\n        const priceMatch = crop.price.match(/₹([\\d.]+)/);\n        const price = priceMatch ? parseFloat(priceMatch[1]) : 0;\n        \n        if (!cropPrices[crop.name] || price > cropPrices[crop.name].price) {\n          cropPrices[crop.name] = {\n            price,\n            emoji: getCropEmoji(crop.name),\n            name: crop.name\n          };\n        }\n      });\n    });\n    \n    // Sort by price (highest first) and show at least 20 crops\n    return Object.values(cropPrices)\n      .sort((a, b) => b.price - a.price)\n      .slice(0, 20) // Show top 20 highest priced vegetables\n      .map(crop => ({\n        crop: `${crop.emoji} ${crop.name}`,\n        avgPrice: crop.price,\n        emoji: crop.emoji,\n        name: crop.name\n      }));\n  };\n\n  const marketPrices = getHighestPricesAcrossMarkets();\n\n  const totalEarnings = soldListings.reduce((sum, listing) => sum + listing.soldPrice, 0);\n\n  const handleCreateListing = async () => {\n    if (!currentUser) {\n      alert('Please login first to create listings');\n      return;\n    }\n\n    if (!selectedMarket || !selectedCrop || !quantity) {\n      alert('Please fill all required fields');\n      return;\n    }\n\n    try {\n      const marketPrice = getMarketPrice();\n      const totalPrice = calculateTotalPrice();\n      const cropEmoji = getCropEmoji(selectedCrop);\n      \n      // Create new listing with real database structure\n      const newListing: Listing = {\n        id: `listing_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        userId: currentUser.id,\n        crop: `${cropEmoji} ${selectedCrop}`,\n        quantity: `${quantity} kg`,\n        pricePerKg: marketPrice,\n        market: selectedMarket,\n        transport: needTransport ? 'Yes' : 'No',\n        views: 0,\n        inquiries: 0,\n        totalPrice: totalPrice,\n        status: 'active',\n        postedDate: 'Just now',\n        createdAt: new Date().toISOString()\n      };\n\n      // Save to real database service\n      dataService.addListing(newListing);\n      \n      // Update local state\n      setActiveListings(prev => [...prev, newListing]);\n      \n      // Show success message\n      alert(`✅ Listing created successfully!\\n\\nCrop: ${selectedCrop}\\nQuantity: ${quantity} kg\\nMarket: ${selectedMarket}\\nTotal Value: ₹${totalPrice.toLocaleString()}`);\n      \n      // Switch to active listings tab to show the new listing\n      setSelectedTab('active');\n      setShowCreateListingDialog(false);\n      \n      // Reset form\n      setSelectedCrop('');\n      setSelectedMarket('');\n      setQuantity('');\n      setNeedTransport(false);\n    } catch (error) {\n      console.error('Error creating listing:', error);\n      alert('Failed to create listing. Please try again.');\n    }\n  };\n\n  const prefillFromMarketPrice = (crop: any) => {\n    setSelectedCrop(crop.name);\n    setShowCreateListingDialog(true);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-blue-50 pb-20\">\n      {/* Header - Mobile Optimized */}\n      <div className=\"bg-white shadow-sm border-b border-green-100 sticky top-0 z-10\">\n        <div className=\"px-4 py-3\">\n          <div className=\"flex items-center space-x-3\">\n            <button\n              onClick={() => navigate(-1)}\n              className=\"p-2 hover:bg-gray-100 rounded-xl transition-colors\"\n            >\n              <ArrowLeft className=\"w-5 h-5 text-gray-600\" />\n            </button>\n            <div>\n              <h1 className=\"text-xl font-bold text-gray-900\">Sell Crops</h1>\n              <p className=\"text-xs text-gray-600\">Create listings and track sales</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Top Section - Mobile Optimized Tabs and Earnings */}\n      <div className=\"px-4 py-4\">\n        <div className=\"flex items-center justify-between mb-4 min-h-[48px]\">\n          {/* Tabs - Mobile Sized */}\n          <div className=\"flex bg-white rounded-2xl p-1 shadow-sm border h-12\">\n            <button\n              onClick={() => setSelectedTab('create')}\n              className={`px-3 py-2 rounded-xl font-bold text-sm transition-all flex items-center justify-center ${\n                selectedTab === 'create'\n                  ? 'bg-green-500 text-white shadow-sm'\n                  : 'text-gray-600 hover:text-green-600'\n              }`}\n            >\n              Sell\n            </button>\n            <button\n              onClick={() => setSelectedTab('active')}\n              className={`px-3 py-2 rounded-xl font-bold text-sm transition-all flex items-center justify-center ${\n                selectedTab === 'active'\n                  ? 'bg-green-500 text-white shadow-sm'\n                  : 'text-gray-600 hover:text-green-600'\n              }`}\n            >\n              Active\n            </button>\n            <button\n              onClick={() => setSelectedTab('sold')}\n              className={`px-3 py-2 rounded-xl font-bold text-sm transition-all flex items-center justify-center ${\n                selectedTab === 'sold'\n                  ? 'bg-green-500 text-white shadow-sm'\n                  : 'text-gray-600 hover:text-green-600'\n              }`}\n            >\n              Sold\n            </button>\n          </div>\n\n          {/* Counts and Earnings Display */}\n          <div className=\"flex space-x-2\">\n            <div className=\"text-center bg-blue-50 px-2 py-1.5 rounded-xl border border-blue-200 min-w-[50px]\">\n              <p className=\"text-xs text-blue-600 font-medium leading-none\">Active</p>\n              <p className=\"text-base font-bold text-blue-700 mt-0.5\">{activeListings.length}</p>\n            </div>\n            <div className=\"text-center bg-orange-50 px-2 py-1.5 rounded-xl border border-orange-200 min-w-[50px]\">\n              <p className=\"text-xs text-orange-600 font-medium leading-none\">Sold</p>\n              <p className=\"text-base font-bold text-orange-700 mt-0.5\">{soldListings.length}</p>\n            </div>\n            <div className=\"text-center bg-green-50 px-2 py-1.5 rounded-xl border border-green-200 min-w-[60px]\">\n              <p className=\"text-xs text-green-600 font-medium leading-none\">Earned</p>\n              <p className=\"text-xs font-bold text-green-700 mt-0.5\">₹{totalEarnings.toLocaleString()}</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Listings Section - Mobile Optimized */}\n        <div className=\"space-y-3 mb-6\">\n          {selectedTab === 'create' && (\n            <>\n              <div className=\"mb-6\">\n                <h2 className=\"text-lg font-bold text-gray-900 mb-3\">🌾 Select Crop to Sell</h2>\n                <p className=\"text-sm text-gray-600 mb-4\">Choose from current Chennai market prices. Tap a crop to create your listing.</p>\n                <div className=\"grid grid-cols-2 gap-3\">\n                  {marketPrices.map((crop, index) => (\n                    <Card \n                      key={index}\n                      className=\"bg-white rounded-2xl shadow-sm border border-gray-100 cursor-pointer hover:shadow-md transition-all duration-200 active:scale-95\"\n                      onClick={() => prefillFromMarketPrice(crop)}\n                    >\n                      <CardContent className=\"p-4 text-center\">\n                        <div className=\"text-3xl mb-2\">{crop.emoji}</div>\n                        <h3 className=\"font-bold text-sm text-gray-900 truncate mb-1\">{crop.name}</h3>\n                        <p className=\"text-green-600 font-bold text-sm\">₹{crop.avgPrice}/kg</p>\n                        <p className=\"text-xs text-gray-500 mt-1\">Market Price</p>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </div>\n            </>\n          )}\n\n          {selectedTab === 'active' && (\n            <>\n              {activeListings.length === 0 ? (\n                <div className=\"text-center py-12\">\n                  <div className=\"text-6xl mb-4\">📦</div>\n                  <h3 className=\"text-lg font-bold text-gray-900 mb-2\">No Active Listings</h3>\n                  <p className=\"text-gray-600 mb-4\">You don't have any active listings yet.</p>\n                  <Button \n                    onClick={() => setSelectedTab('create')}\n                    className=\"bg-green-500 hover:bg-green-600 text-white px-6 py-2 rounded-xl\"\n                  >\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Create Your First Listing\n                  </Button>\n                </div>\n              ) : (\n                activeListings.map((listing) => (\n                <Card key={listing.id} className=\"bg-white rounded-2xl shadow-sm border border-gray-100\">\n                  <CardContent className=\"p-4\">\n                    {/* Mobile Layout: Vertical Stack */}\n                    <div className=\"flex items-start justify-between mb-3\">\n                      <div className=\"flex items-center space-x-3 flex-1\">\n                        <div className=\"text-3xl\">{listing.crop.split(' ')[0]}</div>\n                        <div className=\"flex-1\">\n                          <h3 className=\"font-bold text-lg text-gray-900 leading-tight\">{listing.crop}</h3>\n                          <p className=\"text-sm text-gray-500\">{listing.quantity} – ₹{listing.pricePerKg}/kg – Transport: {listing.transport}</p>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    {/* Market Status Badge */}\n                    <div className=\"mb-3\">\n                      <MarketStatusBadge status={getMarketStatus(listing)} />\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between bg-gray-50 rounded-xl p-3\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"flex items-center space-x-1 text-blue-600\">\n                          <Eye className=\"w-4 h-4\" />\n                          <span className=\"text-xs font-medium\">{listing.views}</span>\n                        </div>\n                        <div className=\"flex items-center space-x-1 text-orange-600\">\n                          <Clock className=\"w-4 h-4\" />\n                          <span className=\"text-xs font-medium\">{listing.inquiries}</span>\n                        </div>\n                      </div>\n                      <p className=\"text-xs text-gray-500\">{listing.postedDate}</p>\n                    </div>\n                  </CardContent>\n                </Card>\n                ))\n              )}\n            </>\n          )}\n\n          {selectedTab === 'sold' && (\n            <>\n              {soldListings.length === 0 ? (\n                <div className=\"text-center py-12\">\n                  <div className=\"text-6xl mb-4\">💰</div>\n                  <h3 className=\"text-lg font-bold text-gray-900 mb-2\">No Sales Yet</h3>\n                  <p className=\"text-gray-600 mb-4\">You haven't sold any items yet.</p>\n                  <Button \n                    onClick={() => setSelectedTab('create')}\n                    className=\"bg-green-500 hover:bg-green-600 text-white px-6 py-2 rounded-xl\"\n                  >\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Create Your First Listing\n                  </Button>\n                </div>\n              ) : (\n                soldListings.map((listing) => (\n                <Card key={listing.id} className=\"bg-white rounded-2xl shadow-sm border border-gray-100\">\n                  <CardContent className=\"p-4\">\n                    {/* Mobile Layout: Vertical Stack */}\n                    <div className=\"flex items-start justify-between mb-3\">\n                      <div className=\"flex items-center space-x-3 flex-1\">\n                        <div className=\"text-3xl\">{listing.crop.split(' ')[0]}</div>\n                        <div className=\"flex-1\">\n                          <h3 className=\"font-bold text-lg text-gray-900 leading-tight\">{listing.crop}</h3>\n                          <p className=\"text-sm text-gray-500\">{listing.quantity} – ₹{listing.pricePerKg}/kg – Transport: {listing.transport}</p>\n                          <p className=\"text-lg font-bold text-green-600 mt-1\">Earned: ₹{listing.soldPrice.toLocaleString()}</p>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center justify-between bg-green-50 rounded-xl p-3 border border-green-200\">\n                      <div className=\"flex items-center space-x-2 text-green-600\">\n                        <CheckCircle className=\"w-4 h-4\" />\n                        <span className=\"text-sm font-medium\">Sold to {listing.buyer}</span>\n                      </div>\n                      <p className=\"text-xs text-gray-500\">{new Date(listing.soldDate).toLocaleDateString()}</p>\n                    </div>\n                  </CardContent>\n                </Card>\n                ))\n              )}\n            </>\n          )}\n        </div>\n\n        {/* Floating Action Button - Only show in create tab */}\n        {selectedTab === 'create' && (\n          <div className=\"fixed bottom-24 right-6 z-20\">\n            <Button\n              onClick={() => setShowCreateListingDialog(true)}\n              className=\"w-16 h-16 rounded-full bg-green-500 hover:bg-green-600 text-white transition-all duration-300 flex items-center justify-center group hover:scale-110 floating-fab hover:!animate-none\"\n            >\n              <Plus className=\"w-7 h-7 text-white group-hover:rotate-90 transition-transform duration-300\" />\n            </Button>\n          </div>\n        )}\n\n      </div>\n\n\n      {/* Create New Listing Dialog - Mobile Optimized */}\n      <Dialog open={showCreateListingDialog} onOpenChange={setShowCreateListingDialog}>\n        <DialogContent className=\"max-w-sm mx-auto m-4 rounded-2xl\">\n          <DialogHeader className=\"text-center\">\n            <DialogTitle className=\"text-lg font-bold text-gray-900\">Create New Listing</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-3 py-2\">\n            {/* Crop Selection - First Step */}\n            <div>\n              <label className=\"block text-sm font-bold text-gray-700 mb-2\">Choose Crop</label>\n              <Select value={selectedCrop} onValueChange={(value) => { setSelectedCrop(value); setSelectedMarket(''); }}>\n                <SelectTrigger className=\"w-full h-12 text-base\">\n                  <SelectValue placeholder=\"Select crop to sell\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {Array.from(new Set(marketData.flatMap(market => market.crops.map(crop => crop.name)))).sort().map((cropName) => (\n                    <SelectItem key={cropName} value={cropName} className=\"text-base py-3\">\n                      <div className=\"flex items-center space-x-2\">\n                        <span>{getCropEmoji(cropName)}</span>\n                        <span>{cropName}</span>\n                      </div>\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Market Selection - Second Step */}\n            <div>\n              <label className=\"block text-sm font-bold text-gray-700 mb-2\">Choose Market</label>\n              <Select value={selectedMarket} onValueChange={setSelectedMarket} disabled={!selectedCrop}>\n                <SelectTrigger className=\"w-full h-12 text-base\">\n                  <SelectValue placeholder={selectedCrop ? \"Select market\" : \"Select crop first\"} />\n                </SelectTrigger>\n                <SelectContent>\n                  {selectedCrop && marketData\n                    .filter(market => market.crops.some(crop => crop.name === selectedCrop))\n                    .map((market) => {\n                      const crop = market.crops.find(c => c.name === selectedCrop);\n                      return (\n                        <SelectItem key={market.id} value={market.name} className=\"text-base py-3\">\n                          <div className=\"flex justify-between items-center w-full\">\n                            <div className=\"flex flex-col\">\n                              <span className=\"font-medium\">{market.name}</span>\n                              <span className=\"text-xs text-gray-500\">{market.location}</span>\n                            </div>\n                            <span className=\"text-green-600 font-bold\">{crop?.price}/kg</span>\n                          </div>\n                        </SelectItem>\n                      )\n                    })}\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Quantity */}\n            <div>\n              <label className=\"block text-sm font-bold text-gray-700 mb-2\">Quantity (kg)</label>\n              <Input\n                type=\"number\"\n                placeholder=\"Enter quantity\"\n                value={quantity}\n                onChange={(e) => setQuantity(e.target.value)}\n                className=\"w-full h-12 text-base\"\n              />\n            </div>\n\n            {/* Price Display (Auto-calculated) */}\n            <div>\n              <label className=\"block text-sm font-bold text-gray-700 mb-2\">Price Information</label>\n              <div className=\"bg-gray-50 rounded-xl p-4 border\">\n                {selectedMarket && selectedCrop && (\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-gray-600\">Market:</span>\n                      <span className=\"text-sm font-medium\">{selectedMarket}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-gray-600\">Market price:</span>\n                      <span className=\"text-sm font-medium\">₹{getMarketPrice()}/kg</span>\n                    </div>\n                    {quantity && (\n                      <>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-sm text-gray-600\">Quantity:</span>\n                          <span className=\"text-sm font-medium\">{quantity} kg</span>\n                        </div>\n                        <div className=\"flex justify-between border-t pt-2\">\n                          <span className=\"text-sm font-bold text-gray-900\">Total Price:</span>\n                          <span className=\"text-lg font-bold text-green-600\">₹{calculateTotalPrice().toLocaleString()}</span>\n                        </div>\n                      </>\n                    )}\n                  </div>\n                )}\n                {(!selectedMarket || !selectedCrop) && (\n                  <p className=\"text-sm text-gray-500 text-center\">\n                    {!selectedMarket ? \"Select a market and crop to see price calculation\" : \"Select a crop to see price calculation\"}\n                  </p>\n                )}\n              </div>\n            </div>\n\n            {/* Transport Toggle */}\n            <div className=\"bg-gray-50 rounded-xl p-3\">\n              <div className=\"flex items-center justify-between\">\n                <label className=\"text-sm font-bold text-gray-700\">Need Transport?</label>\n                <div className=\"flex items-center space-x-3\">\n                  <span className={`text-sm font-medium ${!needTransport ? 'text-gray-900' : 'text-gray-500'}`}>No</span>\n                  <Switch\n                    checked={needTransport}\n                    onCheckedChange={setNeedTransport}\n                  />\n                  <span className={`text-sm font-medium ${needTransport ? 'text-gray-900' : 'text-gray-500'}`}>Yes</span>\n                </div>\n              </div>\n            </div>\n\n            {/* Submit Button */}\n            <Button\n              onClick={handleCreateListing}\n              disabled={!selectedMarket || !selectedCrop || !quantity}\n              className=\"w-full py-4 bg-green-500 hover:bg-green-600 text-white font-bold text-lg rounded-2xl h-12 mt-4\"\n            >\n              Create Listing\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default SellProduce;","size_bytes":28983},"src/pages/Shop.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { \n  ArrowLeft, \n  Search, \n  Filter, \n  ShoppingCart, \n  Star, \n  Heart,\n  Plus,\n  Minus,\n  Package,\n  Truck,\n  Shield,\n  Zap,\n  Sparkles,\n  Sprout\n} from 'lucide-react';\nimport { cartManager } from '@/lib/cart';\n\nconst Shop = () => {\n  const navigate = useNavigate();\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState('all');\n  const [cartItems, setCartItems] = useState({});\n  const [wishlist, setWishlist] = useState({});\n  const [cartCount, setCartCount] = useState(0);\n  const [cartTotal, setCartTotal] = useState(0);\n\n  useEffect(() => {\n    updateCartDisplay();\n    const unsubscribe = cartManager.onCartChange(() => {\n      updateCartDisplay();\n    });\n    return unsubscribe;\n  }, []);\n\n  const updateCartDisplay = () => {\n    const cart = cartManager.getCart();\n    const itemCounts = {};\n    cart.forEach(item => {\n      itemCounts[item.id] = item.quantity;\n    });\n    setCartItems(itemCounts);\n    setCartCount(cartManager.getCartCount());\n    setCartTotal(cartManager.getCartTotal());\n  };\n\n  const categories = [\n    { id: 'all', name: 'All Products', icon: Package },\n    { id: 'fertilizers', name: 'Fertilizers', icon: Zap },\n    { id: 'seeds', name: 'Seeds', icon: Sprout },\n    { id: 'pesticides', name: 'Pesticides', icon: Shield },\n    { id: 'tools', name: 'Tools', icon: Package }\n  ];\n\n  const products = [\n    {\n      id: '1',\n      name: 'Organic NPK Fertilizer',\n      brand: 'FarmGrow',\n      price: 245,\n      originalPrice: 299,\n      rating: 4.5,\n      reviews: 1243,\n      category: 'fertilizers',\n      inStock: true,\n      bestseller: true,\n      organic: true,\n      size: '1kg',\n      features: ['Organic', 'Fast Acting', 'All Crops']\n    },\n    {\n      id: '2',\n      name: 'Tomato Hybrid Seeds',\n      brand: 'SeedMaster',\n      price: 120,\n      originalPrice: 150,\n      rating: 4.8,\n      reviews: 856,\n      category: 'seeds',\n      inStock: true,\n      bestseller: false,\n      organic: false,\n      size: '50g',\n      features: ['Hybrid', 'Disease Resistant', 'High Yield']\n    },\n    {\n      id: '3',\n      name: 'Copper Fungicide Spray',\n      brand: 'CropCare',\n      price: 180,\n      originalPrice: 210,\n      rating: 4.3,\n      reviews: 634,\n      category: 'pesticides',\n      inStock: true,\n      bestseller: false,\n      organic: false,\n      size: '500ml',\n      features: ['Fungicide', 'Long Lasting', 'Safe']\n    },\n    {\n      id: '4',\n      name: 'Premium Garden Spade',\n      brand: 'ToolMaster',\n      price: 350,\n      originalPrice: 420,\n      rating: 4.6,\n      reviews: 432,\n      category: 'tools',\n      inStock: false,\n      bestseller: false,\n      organic: false,\n      size: 'Standard',\n      features: ['Steel', 'Ergonomic', 'Durable']\n    },\n    {\n      id: '5',\n      name: 'Bio Compost Fertilizer',\n      brand: 'EcoGrow',\n      price: 180,\n      originalPrice: 220,\n      rating: 4.7,\n      reviews: 965,\n      category: 'fertilizers',\n      inStock: true,\n      bestseller: true,\n      organic: true,\n      size: '2kg',\n      features: ['Bio-Compost', 'Soil Health', 'Eco-Friendly']\n    }\n  ];\n\n  const filteredProducts = products.filter(product => {\n    const matchesSearch = product.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         product.brand.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesCategory = selectedCategory === 'all' || product.category === selectedCategory;\n    return matchesSearch && matchesCategory;\n  });\n\n  const addToCart = (productId) => {\n    const product = products.find(p => p.id === productId);\n    if (product) {\n      cartManager.addToCart(product);\n    }\n  };\n\n  const removeFromCart = (productId) => {\n    cartManager.removeFromCart(productId);\n  };\n\n  const toggleWishlist = (productId) => {\n    setWishlist(prev => ({\n      ...prev,\n      [productId]: !prev[productId]\n    }));\n  };\n\n  const getTotalItems = () => {\n    return cartCount;\n  };\n\n  const getDiscountPercentage = (original, current) => {\n    return Math.round(((original - current) / original) * 100);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"sticky top-0 z-40 bg-white shadow-sm border-b border-gray-100\">\n        <div className=\"flex items-center justify-between px-4 py-4\">\n          <div className=\"flex items-center space-x-3\">\n            <button \n              onClick={() => navigate('/home')}\n              className=\"p-2 -ml-2 hover:bg-gray-100 rounded-full transition-colors\"\n            >\n              <ArrowLeft className=\"w-6 h-6 text-gray-700\" />\n            </button>\n            <h1 className=\"text-xl font-bold text-gray-900\">Shop</h1>\n          </div>\n          \n          <div className=\"relative\">\n            <button \n              onClick={() => navigate('/cart')}\n              className=\"p-2 hover:bg-gray-100 rounded-full transition-colors\"\n            >\n              <ShoppingCart className=\"w-6 h-6 text-gray-700\" />\n              {getTotalItems() > 0 && (\n                <div className=\"absolute -top-1 -right-1 w-5 h-5 bg-red-500 rounded-full flex items-center justify-center\">\n                  <span className=\"text-xs font-bold text-white\">{getTotalItems()}</span>\n                </div>\n              )}\n            </button>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"px-4 py-6 space-y-6 pb-24\">\n        {/* Search Bar */}\n        <div className=\"relative\">\n          <div className=\"absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none\">\n            <Search className=\"h-5 w-5 text-gray-400\" />\n          </div>\n          <input\n            type=\"text\"\n            placeholder=\"Search fertilizers, seeds, tools...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"w-full pl-12 pr-12 py-4 text-base bg-white border border-gray-200 rounded-2xl focus:ring-2 focus:ring-green-500 focus:border-transparent shadow-sm outline-none\"\n          />\n          <div className=\"absolute inset-y-0 right-0 pr-4 flex items-center\">\n            <button className=\"p-1 hover:bg-gray-100 rounded-lg transition-colors\">\n              <Filter className=\"h-5 w-5 text-gray-400\" />\n            </button>\n          </div>\n        </div>\n\n        {/* Category Tabs */}\n        <div className=\"flex space-x-3 overflow-x-auto pb-2\" style={{scrollbarWidth: 'none', msOverflowStyle: 'none'}}>\n          {categories.map((category) => (\n            <button\n              key={category.id}\n              onClick={() => setSelectedCategory(category.id)}\n              className={`flex items-center space-x-2 px-5 py-3 rounded-full whitespace-nowrap font-medium transition-all duration-200 ${\n                selectedCategory === category.id\n                  ? 'bg-green-600 text-white shadow-lg'\n                  : 'bg-white text-gray-600 border border-gray-200 hover:border-green-300 hover:text-green-600'\n              }`}\n            >\n              <category.icon className=\"w-4 h-4\" />\n              <span className=\"text-sm\">{category.name}</span>\n            </button>\n          ))}\n        </div>\n\n\n        {/* Products Section */}\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-xl font-bold text-gray-900\">\n              {selectedCategory === 'all' ? 'All Products' : categories.find(c => c.id === selectedCategory)?.name}\n            </h2>\n            <span className=\"text-sm text-gray-500 bg-gray-100 px-3 py-1 rounded-full\">\n              {filteredProducts.length} products\n            </span>\n          </div>\n\n          {/* Product Grid */}\n          <div className=\"space-y-4\">\n            {filteredProducts.map((product) => (\n              <div \n                key={product.id} \n                className=\"bg-white rounded-2xl p-5 shadow-sm border border-gray-100 hover:shadow-md transition-shadow duration-200\"\n              >\n                <div className=\"flex space-x-4\">\n                  {/* Product Icon */}\n                  <div className=\"flex-shrink-0\">\n                    <div className=\"w-24 h-24 bg-gradient-to-br from-green-50 to-green-100 rounded-2xl flex items-center justify-center border border-green-200\">\n                      {product.category === 'fertilizers' ? (\n                        <Zap className=\"w-10 h-10 text-green-600\" />\n                      ) : product.category === 'seeds' ? (\n                        <Sprout className=\"w-10 h-10 text-green-600\" />\n                      ) : product.category === 'pesticides' ? (\n                        <Shield className=\"w-10 h-10 text-green-600\" />\n                      ) : (\n                        <Package className=\"w-10 h-10 text-green-600\" />\n                      )}\n                    </div>\n                  </div>\n\n                  {/* Product Info */}\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex justify-between items-start\">\n                      <div className=\"flex-1 min-w-0\">\n                        <h3 className=\"font-bold text-gray-900 text-base leading-tight mb-1\">\n                          {product.name}\n                        </h3>\n                        <p className=\"text-sm text-gray-500 mb-3\">\n                          {product.brand} • {product.size}\n                        </p>\n                        \n                        {/* Rating */}\n                        <div className=\"flex items-center space-x-2 mb-3\">\n                          <div className=\"flex items-center space-x-1\">\n                            <Star className=\"w-4 h-4 fill-yellow-400 text-yellow-400\" />\n                            <span className=\"text-sm font-semibold text-gray-700\">{product.rating}</span>\n                          </div>\n                          <span className=\"text-sm text-gray-400\">({product.reviews} reviews)</span>\n                        </div>\n\n                        {/* Feature Tags */}\n                        <div className=\"flex flex-wrap gap-2 mb-4\">\n                          {product.features.slice(0, 3).map((feature, index) => (\n                            <span \n                              key={index}\n                              className=\"text-xs px-2 py-1 border border-green-200 text-green-700 bg-green-50 font-medium rounded-full\"\n                            >\n                              {feature}\n                            </span>\n                          ))}\n                        </div>\n\n                        {/* Price */}\n                        <div className=\"flex items-center space-x-3 mb-4\">\n                          <span className=\"text-xl font-bold text-gray-900\">₹{product.price}</span>\n                          <span className=\"text-base text-gray-400 line-through\">₹{product.originalPrice}</span>\n                          <span className=\"bg-green-100 text-green-800 text-xs font-semibold px-2 py-1 rounded-full\">\n                            {getDiscountPercentage(product.originalPrice, product.price)}% OFF\n                          </span>\n                        </div>\n                      </div>\n\n                      {/* Wishlist Button */}\n                      <button\n                        onClick={() => toggleWishlist(product.id)}\n                        className=\"p-2 hover:bg-gray-50 rounded-full transition-colors\"\n                      >\n                        <Heart \n                          className={`w-5 h-5 ${\n                            wishlist[product.id] \n                              ? 'fill-red-500 text-red-500' \n                              : 'text-gray-400 hover:text-red-400'\n                          }`} \n                        />\n                      </button>\n                    </div>\n\n                    {/* Add to Cart Section */}\n                    <div className=\"flex items-center justify-end\">\n                      {product.inStock ? (\n                        <div className=\"flex items-center space-x-3\">\n                          {cartItems[product.id] > 0 ? (\n                            <div className=\"flex items-center space-x-3 bg-gray-50 rounded-full p-1\">\n                              <button\n                                onClick={() => removeFromCart(product.id)}\n                                className=\"w-8 h-8 bg-white rounded-full flex items-center justify-center shadow-sm hover:shadow-md transition-shadow\"\n                              >\n                                <Minus className=\"w-4 h-4 text-gray-600\" />\n                              </button>\n                              <span className=\"font-bold text-gray-900 min-w-[24px] text-center\">\n                                {cartItems[product.id]}\n                              </span>\n                              <button\n                                onClick={() => addToCart(product.id)}\n                                className=\"w-8 h-8 bg-green-600 rounded-full flex items-center justify-center shadow-sm hover:shadow-md transition-shadow\"\n                              >\n                                <Plus className=\"w-4 h-4 text-white\" />\n                              </button>\n                            </div>\n                          ) : (\n                            <button\n                              onClick={() => addToCart(product.id)}\n                              className=\"bg-green-600 hover:bg-green-700 text-white px-6 py-2 rounded-full font-semibold shadow-sm hover:shadow-md transition-all duration-200\"\n                            >\n                              Add to Cart\n                            </button>\n                          )}\n                        </div>\n                      ) : (\n                        <span className=\"text-red-600 border border-red-200 bg-red-50 px-3 py-1 rounded-full text-sm\">\n                          Out of Stock\n                        </span>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {/* Floating Cart Button */}\n      {getTotalItems() > 0 && (\n        <div className=\"fixed bottom-6 left-4 right-4 z-50\">\n          <button \n            onClick={() => navigate('/cart')}\n            className=\"w-full bg-green-600 hover:bg-green-700 text-white py-4 rounded-2xl shadow-2xl flex items-center justify-between text-lg font-bold px-6\"\n          >\n            <span className=\"flex items-center space-x-3\">\n              <ShoppingCart className=\"w-6 h-6\" />\n              <span>View Cart ({getTotalItems()} items)</span>\n            </span>\n            <span>₹{cartTotal}</span>\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Shop;","size_bytes":14933},"src/pages/Signup.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { User, Phone, Sprout } from \"lucide-react\";\nimport { toast } from \"@/hooks/use-toast\";\nimport { useNavigate } from \"react-router-dom\";\nimport LanguageSwitcher from '@/components/LanguageSwitcher';\nimport CustomInput from '@/components/CustomInput';\nimport LocationPicker from '@/components/LocationPicker';\nimport PINInput from '@/components/PINInput';\nimport AuthButton from '@/components/AuthButton';\n\n\nconst Signup = () => {\n  const [formData, setFormData] = useState({\n    name: \"\",\n    mobile: \"\",\n    state: \"\",\n    district: \"\",\n    pin: \"\",\n    confirmPin: \"\"\n  });\n  const [loading, setLoading] = useState(false);\n  const navigate = useNavigate();\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  // Validation functions\n  const getNameValidation = () => {\n    if (formData.name.length === 0) return undefined;\n    const isValid = formData.name.trim().length >= 2 && /^[A-Za-z\\s]+$/.test(formData.name);\n    return {\n      isValid,\n      message: isValid ? \"Valid name\" : \"Name must contain only letters and be at least 2 characters\"\n    };\n  };\n\n  const getMobileValidation = () => {\n    if (formData.mobile.length === 0) return undefined;\n    const isValid = formData.mobile.length === 10 && /^[6-9]\\d{9}$/.test(formData.mobile);\n    return {\n      isValid,\n      message: isValid ? \"Valid mobile number\" : \"Enter a valid 10-digit Indian mobile number\"\n    };\n  };\n\n  const isFormValid = () => {\n    return formData.name.trim() !== \"\" &&\n           formData.mobile.length === 10 &&\n           formData.state !== \"\" &&\n           formData.district.trim() !== \"\" &&\n           formData.pin.length === 4 &&\n           formData.confirmPin.length === 4 &&\n           formData.pin === formData.confirmPin;\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (formData.pin !== formData.confirmPin) {\n      toast({\n        title: \"PIN Mismatch\",\n        description: \"PIN and Confirm PIN must match\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    \n    if (!isFormValid()) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill all required fields\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setLoading(true);\n    \n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      // Store comprehensive user data\n      const userData = {\n        id: Date.now().toString(),\n        name: formData.name.trim(),\n        mobile: formData.mobile,\n        phone: `+91 ${formData.mobile}`,\n        state: formData.state,\n        district: formData.district,\n        location: formData.district,\n        pin: formData.pin,\n        joinedDate: new Date().toLocaleDateString('en-US', { month: 'long', year: 'numeric' }),\n        farmSize: '2.5 acres',\n        experience: '5 years',\n        avatar: null,\n        isLoggedIn: true,\n        createdAt: new Date().toISOString()\n      };\n      \n      localStorage.setItem('kisanmitra_user', JSON.stringify(userData));\n      localStorage.setItem('kisanmitra_auth_token', btoa(`${formData.mobile}:${formData.pin}`));\n      \n      const welcomeToast = toast({\n        title: \"Account Created! 🎉\",\n        description: `Welcome to KisanMitra, ${formData.name}!`,\n        duration: 10000, // Auto-dismiss after 10 seconds\n      });\n      \n      // Dismiss on any interaction\n      let isToastDismissed = false;\n      const handleInteraction = () => {\n        if (!isToastDismissed) {\n          isToastDismissed = true;\n          welcomeToast.dismiss();\n          cleanupListeners();\n        }\n      };\n      \n      const cleanupListeners = () => {\n        document.removeEventListener('click', handleInteraction);\n        document.removeEventListener('keydown', handleInteraction);\n        document.removeEventListener('touchstart', handleInteraction);\n      };\n      \n      document.addEventListener('click', handleInteraction);\n      document.addEventListener('keydown', handleInteraction);\n      document.addEventListener('touchstart', handleInteraction);\n      \n      // Cleanup listeners after 10 seconds (when toast auto-dismisses)\n      setTimeout(() => {\n        isToastDismissed = true;\n        cleanupListeners();\n      }, 10000);\n      \n      navigate(\"/home\");\n      \n    } catch (error) {\n      toast({\n        title: \"Registration failed\",\n        description: \"Please try again\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"mobile-container min-h-screen bg-gradient-to-br from-agri-light to-white overflow-y-auto\">\n      {/* Subtle Background Pattern */}\n      <div className=\"absolute inset-0 opacity-5\">\n        <div className=\"absolute inset-0\" style={{\n          backgroundImage: `url(\"data:image/svg+xml,%3Csvg width='40' height='40' viewBox='0 0 40 40' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='%23059669' fill-opacity='0.1'%3E%3Cpath d='M20 20c0-5.5-4.5-10-10-10s-10 4.5-10 10 4.5 10 10 10 10-4.5 10-10zm10 0c0-5.5-4.5-10-10-10s-10 4.5-10 10 4.5 10 10 10 10-4.5 10-10z'/%3E%3C/g%3E%3C/svg%3E\")`,\n        }} />\n      </div>\n\n      <div className=\"relative z-10 min-h-screen flex flex-col\">\n        {/* Top Bar */}\n        <div className=\"flex items-center justify-between p-4 bg-white/80 backdrop-blur-sm\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-12 h-12 bg-white rounded-2xl shadow-md flex items-center justify-center p-1\">\n              <img \n                src=\"/assets/kisanmitra-logo-clean.png\" \n                alt=\"KisanMitra Logo\" \n                className=\"w-full h-full object-contain\"\n              />\n            </div>\n            <div>\n              <h1 className=\"text-lg font-bold text-green-900\">KisanMitra</h1>\n              <p className=\"text-xs text-green-700\">Smart Farming Assistant</p>\n            </div>\n          </div>\n          <LanguageSwitcher />\n        </div>\n\n        {/* Header */}\n        <div className=\"text-center px-6 pt-8 pb-6\">\n          <div className=\"w-24 h-24 bg-gradient-to-br from-green-400 to-green-600 rounded-3xl mx-auto mb-6 flex items-center justify-center shadow-xl\">\n            <Sprout className=\"w-12 h-12 text-white\" />\n          </div>\n          <h1 className=\"text-3xl font-bold bg-gradient-to-r from-green-600 to-green-500 bg-clip-text text-transparent mb-3\">\n            🌱 Join 50,000+ Smart Farmers\n          </h1>\n          <p className=\"text-lg text-gray-600 leading-relaxed mb-2\">\n            Create your farming account\n          </p>\n          <p className=\"text-sm text-green-600 font-medium\">\n            Location helps us provide region-based crop advice\n          </p>\n        </div>\n\n          {/* Form */}\n          <div className=\"flex-1 px-6\">\n            <div className=\"bg-white rounded-3xl p-8 shadow-2xl border border-green-100\">\n              <form onSubmit={handleSubmit} className=\"space-y-6\">\n                {/* Name Field */}\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-semibold text-gray-700\">Full Name</label>\n                  <div className=\"relative\">\n                    <div className=\"absolute left-4 top-1/2 transform -translate-y-1/2\">\n                      <User className=\"w-5 h-5 text-green-500\" />\n                    </div>\n                    <input\n                      type=\"text\"\n                      value={formData.name}\n                      onChange={(e) => handleInputChange(\"name\", e.target.value)}\n                      placeholder=\"Enter your full name\"\n                      className=\"w-full h-14 pl-12 pr-4 text-lg font-medium bg-gray-50 border-2 border-gray-200 rounded-2xl focus:outline-none focus:border-green-500 focus:ring-4 focus:ring-green-100 transition-all duration-200\"\n                    />\n                  </div>\n                  {getNameValidation() && (\n                    <p className={`text-sm ${getNameValidation()?.isValid ? 'text-green-600' : 'text-red-500'}`}>\n                      {getNameValidation()?.message}\n                    </p>\n                  )}\n                </div>\n\n                {/* Mobile Field */}\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-semibold text-gray-700\">Mobile Number</label>\n                  <div className=\"relative\">\n                    <div className=\"absolute left-4 top-1/2 transform -translate-y-1/2 flex items-center space-x-2 z-10\">\n                      <Phone className=\"w-5 h-5 text-green-500\" />\n                      <span className=\"text-gray-500 font-medium\">🇮🇳 +91</span>\n                    </div>\n                    <input\n                      type=\"tel\"\n                      value={formData.mobile}\n                      onChange={(e) => handleInputChange(\"mobile\", e.target.value.replace(/\\D/g, '').slice(0, 10))}\n                      placeholder=\"10 digit number\"\n                      className=\"w-full h-14 pl-24 pr-4 text-lg font-medium bg-gray-50 border-2 border-gray-200 rounded-2xl focus:outline-none focus:border-green-500 focus:ring-4 focus:ring-green-100 transition-all duration-200\"\n                    />\n                  </div>\n                  {getMobileValidation() && (\n                    <p className={`text-sm ${getMobileValidation()?.isValid ? 'text-green-600' : 'text-red-500'}`}>\n                      {getMobileValidation()?.message}\n                    </p>\n                  )}\n                </div>\n\n                {/* Location Fields */}\n                <LocationPicker\n                  state={formData.state}\n                  district={formData.district}\n                  onStateChange={(value) => handleInputChange(\"state\", value)}\n                  onDistrictChange={(value) => handleInputChange(\"district\", value)}\n                />\n\n                {/* PIN Entry */}\n                <div className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <label className=\"text-sm font-semibold text-gray-700\">4-Digit PIN</label>\n                    <PINInput\n                      value={formData.pin}\n                      onChange={(value) => handleInputChange(\"pin\", value)}\n                      placeholder=\"Create PIN\"\n                      showStrengthIndicator={true}\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <label className=\"text-sm font-semibold text-gray-700\">Confirm PIN</label>\n                    <PINInput\n                      value={formData.confirmPin}\n                      onChange={(value) => handleInputChange(\"confirmPin\", value)}\n                      placeholder=\"Confirm PIN\"\n                    />\n                    {formData.confirmPin.length > 0 && (\n                      <p className={`text-sm ${formData.pin === formData.confirmPin ? 'text-green-600' : 'text-red-500'}`}>\n                        {formData.pin === formData.confirmPin ? \"✓ PINs match\" : \"✗ PINs don't match\"}\n                      </p>\n                    )}\n                  </div>\n                </div>\n\n                {/* Create Account Button - Full Width Green Gradient */}\n                <div className=\"pt-6\">\n                  <button\n                    type=\"submit\"\n                    disabled={loading || !isFormValid()}\n                    className=\"w-full h-16 bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white text-xl font-bold rounded-2xl shadow-lg hover:shadow-xl transform hover:scale-[1.02] active:scale-[0.98] transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    {loading ? (\n                      <div className=\"flex items-center justify-center space-x-2\">\n                        <div className=\"w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n                        <span>Creating Account...</span>\n                      </div>\n                    ) : (\n                      'Create My Account'\n                    )}\n                  </button>\n                </div>\n              </form>\n            </div>\n\n            {/* Login Link */}\n            <div className=\"text-center mt-6 mb-6\">\n              <div className=\"flex items-center justify-center space-x-2 text-gray-600\">\n                <span>Already have an account?</span>\n                <button\n                  type=\"button\"\n                  onClick={() => navigate('/login')}\n                  className=\"text-green-600 font-bold hover:text-green-700 hover:underline transition-colors\"\n                >\n                  Login →\n                </button>\n              </div>\n            </div>\n          </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Signup;","size_bytes":12989},"src/pages/SoilHealth.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { ArrowLeft, Plus, Eye, Bookmark, Droplets, Beaker, Leaf, Wheat, TreePine, TestTube2, AlertCircle, CheckCircle, Info, X, Save } from \"lucide-react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useState } from \"react\";\n\ninterface SoilTest {\n  id: string;\n  date: string;\n  pH: { value: number; status: 'acidic' | 'neutral' | 'alkaline' };\n  nitrogen: { value: string; status: 'low' | 'medium' | 'high' };\n  phosphorus: { value: string; status: 'low' | 'medium' | 'high' };\n  potassium: { value: string; status: 'low' | 'medium' | 'high' };\n  moisture: { value: string; status: 'low' | 'adequate' | 'high' };\n  recommendation: string;\n  detailedGuidance: {\n    fertilizer: string;\n    crops: string[];\n    irrigation: string;\n  };\n  expanded: boolean;\n}\n\nconst SoilHealth = () => {\n  const navigate = useNavigate();\n  const [showAddForm, setShowAddForm] = useState(false);\n  \n  // Sample soil test data - latest first\n  const [soilTests, setSoilTests] = useState<SoilTest[]>([\n    {\n      id: '1',\n      date: 'Sept 5, 2025',\n      pH: { value: 6.8, status: 'neutral' },\n      nitrogen: { value: 'Medium', status: 'medium' },\n      phosphorus: { value: 'Low', status: 'low' },\n      potassium: { value: 'High', status: 'high' },\n      moisture: { value: 'Adequate', status: 'adequate' },\n      recommendation: 'Apply Phosphorus fertilizer 40kg/acre',\n      detailedGuidance: {\n        fertilizer: 'Apply DAP fertilizer 40kg/acre before sowing. Add organic compost 2 tons/acre for better soil health.',\n        crops: ['🌾 Wheat', '🌾 Barley', '🌻 Mustard', '🥔 Potato'],\n        irrigation: 'Drip irrigation twice weekly. Maintain 70% soil moisture during flowering stage.'\n      },\n      expanded: false\n    },\n    {\n      id: '2',\n      date: 'Aug 28, 2025',\n      pH: { value: 5.8, status: 'acidic' },\n      nitrogen: { value: 'High', status: 'high' },\n      phosphorus: { value: 'Medium', status: 'medium' },\n      potassium: { value: 'Low', status: 'low' },\n      moisture: { value: 'Low', status: 'low' },\n      recommendation: 'Apply Lime 200kg/acre to balance pH',\n      detailedGuidance: {\n        fertilizer: 'Apply lime 200kg/acre. Add Potash fertilizer 30kg/acre. Use organic manure 1.5 tons/acre.',\n        crops: ['🌽 Maize', '🌾 Rice', '🥜 Groundnut', '🌿 Green gram'],\n        irrigation: 'Increase watering frequency. Use sprinkler irrigation daily during dry season.'\n      },\n      expanded: false\n    },\n    {\n      id: '3',\n      date: 'Aug 15, 2025',\n      pH: { value: 7.2, status: 'alkaline' },\n      nitrogen: { value: 'Low', status: 'low' },\n      phosphorus: { value: 'High', status: 'high' },\n      potassium: { value: 'Medium', status: 'medium' },\n      moisture: { value: 'High', status: 'high' },\n      recommendation: 'Apply Nitrogen fertilizer and reduce watering',\n      detailedGuidance: {\n        fertilizer: 'Apply Urea 50kg/acre in split doses. Add organic compost to improve soil structure.',\n        crops: ['🌾 Wheat', '🌻 Sunflower', '🌿 Soybean', '🥬 Cabbage'],\n        irrigation: 'Reduce watering frequency. Monitor soil moisture to prevent waterlogging.'\n      },\n      expanded: false\n    }\n  ]);\n\n  const [formData, setFormData] = useState({\n    soilTexture: '',\n    soilColor: '',\n    moisture: '',\n    cropHistory: '',\n    fertilizerHistory: '',\n    pH: '',\n    nitrogen: '',\n    phosphorus: '',\n    potassium: '',\n    moistureLevel: ''\n  });\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'low': return <AlertCircle className=\"w-4 h-4 text-red-500\" />;\n      case 'medium': case 'adequate': case 'neutral': return <CheckCircle className=\"w-4 h-4 text-green-500\" />;\n      case 'high': return <CheckCircle className=\"w-4 h-4 text-blue-500\" />;\n      case 'acidic': return <AlertCircle className=\"w-4 h-4 text-red-500\" />;\n      case 'alkaline': return <Info className=\"w-4 h-4 text-blue-500\" />;\n      default: return <CheckCircle className=\"w-4 h-4 text-green-500\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'low': case 'acidic': return 'text-red-600 bg-red-50 border-red-200';\n      case 'medium': case 'adequate': case 'neutral': return 'text-green-600 bg-green-50 border-green-200';\n      case 'high': case 'alkaline': return 'text-blue-600 bg-blue-50 border-blue-200';\n      default: return 'text-gray-600 bg-gray-50 border-gray-200';\n    }\n  };\n\n  const toggleExpanded = (testId: string) => {\n    setSoilTests(prev => prev.map(test => \n      test.id === testId ? { ...test, expanded: !test.expanded } : test\n    ));\n  };\n\n  const saveGuidance = (testId: string) => {\n    const test = soilTests.find(t => t.id === testId);\n    if (test) {\n      // Save to Advisory -> My Soil Guidance\n      const savedGuidance = {\n        id: testId,\n        date: test.date,\n        summary: test.recommendation,\n        detailed: test.detailedGuidance,\n        saved: new Date().toLocaleDateString()\n      };\n      \n      // In real app, this would save to localStorage or API\n      alert(`✅ Soil guidance saved successfully!\\n\\nSaved to: Advisory → My Soil Guidance\\nTest Date: ${test.date}\\nRecommendation: ${test.recommendation}`);\n    }\n  };\n\n  const handleAddTest = () => {\n    if (!formData.soilTexture || !formData.moisture) {\n      alert('Please fill in required fields: Soil Texture and Moisture');\n      return;\n    }\n\n    const newTest: SoilTest = {\n      id: Date.now().toString(),\n      date: new Date().toLocaleDateString('en-US', { \n        month: 'short', \n        day: 'numeric', \n        year: 'numeric' \n      }),\n      pH: { \n        value: parseFloat(formData.pH) || 6.5, \n        status: parseFloat(formData.pH) < 6.0 ? 'acidic' : parseFloat(formData.pH) > 7.0 ? 'alkaline' : 'neutral' \n      },\n      nitrogen: { \n        value: formData.nitrogen || 'Medium', \n        status: (formData.nitrogen?.toLowerCase() === 'low' ? 'low' : formData.nitrogen?.toLowerCase() === 'high' ? 'high' : 'medium') as 'low' | 'medium' | 'high'\n      },\n      phosphorus: { \n        value: formData.phosphorus || 'Medium', \n        status: (formData.phosphorus?.toLowerCase() === 'low' ? 'low' : formData.phosphorus?.toLowerCase() === 'high' ? 'high' : 'medium') as 'low' | 'medium' | 'high'\n      },\n      potassium: { \n        value: formData.potassium || 'Medium', \n        status: (formData.potassium?.toLowerCase() === 'low' ? 'low' : formData.potassium?.toLowerCase() === 'high' ? 'high' : 'medium') as 'low' | 'medium' | 'high'\n      },\n      moisture: { \n        value: formData.moisture, \n        status: (formData.moisture.toLowerCase() === 'low' ? 'low' : formData.moisture.toLowerCase() === 'high' ? 'high' : 'adequate') as 'low' | 'adequate' | 'high'\n      },\n      recommendation: 'Apply balanced fertilizer based on soil analysis',\n      detailedGuidance: {\n        fertilizer: 'Apply NPK fertilizer as per soil test results. Add organic matter to improve soil health.',\n        crops: ['🌾 Suitable crops based on soil condition'],\n        irrigation: 'Maintain optimal moisture levels based on crop requirements.'\n      },\n      expanded: false\n    };\n\n    setSoilTests(prev => [newTest, ...prev]);\n    setShowAddForm(false);\n    setFormData({\n      soilTexture: '', soilColor: '', moisture: '', cropHistory: '', \n      fertilizerHistory: '', pH: '', nitrogen: '', phosphorus: '', potassium: '', moistureLevel: ''\n    });\n    alert('✅ New soil test added successfully!');\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-amber-50 via-green-50 to-emerald-50 pb-24\">\n      {/* Header */}\n      <div className=\"bg-gradient-to-r from-green-600 to-emerald-600 px-4 py-4 shadow-lg\">\n        <div className=\"flex items-center justify-between\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => navigate('/home')}\n            className=\"text-white hover:bg-white/20 rounded-full p-3\"\n          >\n            <ArrowLeft className=\"w-5 h-5\" />\n          </Button>\n          \n          <h1 className=\"text-xl font-bold text-white flex items-center\">\n            <TestTube2 className=\"w-6 h-6 mr-2\" />\n            Soil Health Monitoring\n          </h1>\n          \n          <div className=\"w-12\" />\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"px-4 py-6 space-y-6\">\n        {/* Soil Test Cards */}\n        {soilTests.map((test) => (\n          <Card key={test.id} className=\"shadow-lg border-0 bg-white/90 backdrop-blur-sm hover:shadow-xl transition-all duration-300 rounded-3xl overflow-hidden\">\n            <CardContent className=\"p-0\">\n              {/* Card Header */}\n              <div className=\"bg-gradient-to-r from-green-500/10 to-emerald-500/10 p-5 border-b border-green-100\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className=\"text-sm font-semibold text-green-800 bg-green-100 px-3 py-1 rounded-full\">\n                    {test.date}\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"text-xs text-gray-600\">Test #{test.id}</div>\n                  </div>\n                </div>\n\n                {/* Key Parameters */}\n                <div className=\"grid grid-cols-2 gap-3 mb-4\">\n                  {/* pH */}\n                  <div className={`p-3 rounded-2xl border ${getStatusColor(test.pH.status)} flex items-center justify-between`}>\n                    <div className=\"flex items-center space-x-2\">\n                      {getStatusIcon(test.pH.status)}\n                      <span className=\"font-medium text-sm\">pH</span>\n                    </div>\n                    <div className=\"font-bold text-sm\">{test.pH.value}</div>\n                  </div>\n\n                  {/* Nitrogen */}\n                  <div className={`p-3 rounded-2xl border ${getStatusColor(test.nitrogen.status)} flex items-center justify-between`}>\n                    <div className=\"flex items-center space-x-2\">\n                      {getStatusIcon(test.nitrogen.status)}\n                      <span className=\"font-medium text-sm\">N</span>\n                    </div>\n                    <div className=\"font-bold text-sm\">{test.nitrogen.value}</div>\n                  </div>\n\n                  {/* Phosphorus */}\n                  <div className={`p-3 rounded-2xl border ${getStatusColor(test.phosphorus.status)} flex items-center justify-between`}>\n                    <div className=\"flex items-center space-x-2\">\n                      {getStatusIcon(test.phosphorus.status)}\n                      <span className=\"font-medium text-sm\">P</span>\n                    </div>\n                    <div className=\"font-bold text-sm\">{test.phosphorus.value}</div>\n                  </div>\n\n                  {/* Potassium */}\n                  <div className={`p-3 rounded-2xl border ${getStatusColor(test.potassium.status)} flex items-center justify-between`}>\n                    <div className=\"flex items-center space-x-2\">\n                      {getStatusIcon(test.potassium.status)}\n                      <span className=\"font-medium text-sm\">K</span>\n                    </div>\n                    <div className=\"font-bold text-sm\">{test.potassium.value}</div>\n                  </div>\n                </div>\n\n                {/* Moisture */}\n                <div className={`p-4 rounded-2xl border ${getStatusColor(test.moisture.status)} flex items-center justify-between mb-4`}>\n                  <div className=\"flex items-center space-x-2\">\n                    <Droplets className=\"w-5 h-5\" />\n                    <span className=\"font-medium\">Moisture</span>\n                  </div>\n                  <div className=\"font-bold\">{test.moisture.value}</div>\n                </div>\n\n                {/* Quick Recommendation */}\n                <div className=\"bg-blue-50 border border-blue-200 p-4 rounded-2xl\">\n                  <div className=\"flex items-start space-x-2\">\n                    <Leaf className=\"w-5 h-5 text-blue-600 mt-0.5\" />\n                    <div>\n                      <div className=\"font-medium text-blue-800 text-sm mb-1\">Quick Recommendation</div>\n                      <div className=\"text-blue-700 text-sm\">{test.recommendation}</div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Action Buttons */}\n              <div className=\"p-5 flex space-x-3\">\n                <Button \n                  onClick={() => toggleExpanded(test.id)}\n                  className=\"flex-1 bg-green-600 hover:bg-green-700 text-white rounded-2xl py-3 flex items-center justify-center space-x-2\"\n                >\n                  <Eye className=\"w-4 h-4\" />\n                  <span>View Details</span>\n                </Button>\n                \n                <Button \n                  onClick={() => saveGuidance(test.id)}\n                  variant=\"outline\"\n                  className=\"flex-1 border-green-600 text-green-600 hover:bg-green-50 rounded-2xl py-3 flex items-center justify-center space-x-2\"\n                >\n                  <Bookmark className=\"w-4 h-4\" />\n                  <span>Save Guidance</span>\n                </Button>\n              </div>\n\n              {/* Expanded Details */}\n              {test.expanded && (\n                <div className=\"border-t border-gray-100 p-5 bg-gray-50/50 space-y-4\">\n                  {/* Fertilizer Guidance */}\n                  <div className=\"bg-amber-50 border border-amber-200 p-4 rounded-2xl\">\n                    <div className=\"flex items-start space-x-2\">\n                      <Beaker className=\"w-5 h-5 text-amber-600 mt-0.5\" />\n                      <div>\n                        <div className=\"font-semibold text-amber-800 mb-2\">🌾 Fertilizer Guidance</div>\n                        <div className=\"text-amber-700 text-sm leading-relaxed\">{test.detailedGuidance.fertilizer}</div>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Crop Suggestions */}\n                  <div className=\"bg-green-50 border border-green-200 p-4 rounded-2xl\">\n                    <div className=\"flex items-start space-x-2\">\n                      <Wheat className=\"w-5 h-5 text-green-600 mt-0.5\" />\n                      <div className=\"flex-1\">\n                        <div className=\"font-semibold text-green-800 mb-2\">🌱 Recommended Crops</div>\n                        <div className=\"flex flex-wrap gap-2\">\n                          {test.detailedGuidance.crops.map((crop, index) => (\n                            <div key={index} className=\"bg-green-100 text-green-700 px-3 py-1 rounded-full text-sm font-medium\">\n                              {crop}\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Irrigation Tips */}\n                  <div className=\"bg-blue-50 border border-blue-200 p-4 rounded-2xl\">\n                    <div className=\"flex items-start space-x-2\">\n                      <Droplets className=\"w-5 h-5 text-blue-600 mt-0.5\" />\n                      <div>\n                        <div className=\"font-semibold text-blue-800 mb-2\">💧 Irrigation Tips</div>\n                        <div className=\"text-blue-700 text-sm leading-relaxed\">{test.detailedGuidance.irrigation}</div>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Save Button for Expanded View */}\n                  <div className=\"pt-2\">\n                    <Button \n                      onClick={() => saveGuidance(test.id)}\n                      className=\"w-full bg-green-600 hover:bg-green-700 text-white rounded-2xl py-3 flex items-center justify-center space-x-2\"\n                    >\n                      <Save className=\"w-4 h-4\" />\n                      <span>Save Complete Guidance to Advisory</span>\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Floating Add Button */}\n      <div className=\"fixed bottom-24 right-6 z-50\">\n        <Button\n          onClick={() => setShowAddForm(true)}\n          className=\"w-16 h-16 bg-green-600 hover:bg-green-700 text-white rounded-full shadow-2xl flex items-center justify-center hover:scale-110 transition-all duration-200\"\n        >\n          <Plus className=\"w-8 h-8\" />\n        </Button>\n      </div>\n\n      {/* Add New Soil Test Modal/Form */}\n      {showAddForm && (\n        <div className=\"fixed inset-0 bg-black/50 z-50 flex items-end\">\n          <div className=\"bg-white w-full max-h-[90vh] rounded-t-3xl overflow-hidden\">\n            {/* Form Header */}\n            <div className=\"bg-green-600 p-5 flex items-center justify-between\">\n              <h2 className=\"text-xl font-bold text-white\">Add New Soil Test</h2>\n              <Button \n                onClick={() => setShowAddForm(false)}\n                variant=\"ghost\" \n                size=\"sm\"\n                className=\"text-white hover:bg-white/20 rounded-full p-2\"\n              >\n                <X className=\"w-5 h-5\" />\n              </Button>\n            </div>\n\n            {/* Form Content */}\n            <div className=\"p-5 space-y-4 overflow-y-auto max-h-[calc(90vh-120px)]\">\n              {/* Required Fields */}\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Soil Texture *</label>\n                  <select \n                    value={formData.soilTexture}\n                    onChange={(e) => setFormData(prev => ({ ...prev, soilTexture: e.target.value }))}\n                    className=\"w-full p-3 border border-gray-300 rounded-2xl focus:ring-2 focus:ring-green-500 focus:border-green-500\"\n                  >\n                    <option value=\"\">Select soil texture</option>\n                    <option value=\"clay\">Clay</option>\n                    <option value=\"loam\">Loam</option>\n                    <option value=\"sandy\">Sandy</option>\n                    <option value=\"silt\">Silt</option>\n                  </select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Soil Color</label>\n                  <input \n                    type=\"text\"\n                    value={formData.soilColor}\n                    onChange={(e) => setFormData(prev => ({ ...prev, soilColor: e.target.value }))}\n                    placeholder=\"e.g., Dark brown, Red, Black\"\n                    className=\"w-full p-3 border border-gray-300 rounded-2xl focus:ring-2 focus:ring-green-500 focus:border-green-500\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Moisture Level *</label>\n                  <select \n                    value={formData.moisture}\n                    onChange={(e) => setFormData(prev => ({ ...prev, moisture: e.target.value }))}\n                    className=\"w-full p-3 border border-gray-300 rounded-2xl focus:ring-2 focus:ring-green-500 focus:border-green-500\"\n                  >\n                    <option value=\"\">Select moisture level</option>\n                    <option value=\"Low\">Low</option>\n                    <option value=\"Adequate\">Adequate</option>\n                    <option value=\"High\">High</option>\n                  </select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Crop History</label>\n                  <input \n                    type=\"text\"\n                    value={formData.cropHistory}\n                    onChange={(e) => setFormData(prev => ({ ...prev, cropHistory: e.target.value }))}\n                    placeholder=\"Previous crops grown\"\n                    className=\"w-full p-3 border border-gray-300 rounded-2xl focus:ring-2 focus:ring-green-500 focus:border-green-500\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Fertilizer History</label>\n                  <input \n                    type=\"text\"\n                    value={formData.fertilizerHistory}\n                    onChange={(e) => setFormData(prev => ({ ...prev, fertilizerHistory: e.target.value }))}\n                    placeholder=\"Recent fertilizers used\"\n                    className=\"w-full p-3 border border-gray-300 rounded-2xl focus:ring-2 focus:ring-green-500 focus:border-green-500\"\n                  />\n                </div>\n              </div>\n\n              {/* Optional IoT Sensor Data */}\n              <div className=\"border-t pt-4\">\n                <h3 className=\"text-lg font-semibold text-gray-800 mb-4\">Optional: IoT Sensor Data</h3>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">pH Level</label>\n                    <input \n                      type=\"number\"\n                      value={formData.pH}\n                      onChange={(e) => setFormData(prev => ({ ...prev, pH: e.target.value }))}\n                      placeholder=\"6.5\"\n                      step=\"0.1\"\n                      min=\"0\" max=\"14\"\n                      className=\"w-full p-3 border border-gray-300 rounded-2xl focus:ring-2 focus:ring-green-500 focus:border-green-500\"\n                    />\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">Nitrogen</label>\n                    <select \n                      value={formData.nitrogen}\n                      onChange={(e) => setFormData(prev => ({ ...prev, nitrogen: e.target.value }))}\n                      className=\"w-full p-3 border border-gray-300 rounded-2xl focus:ring-2 focus:ring-green-500 focus:border-green-500\"\n                    >\n                      <option value=\"\">Select level</option>\n                      <option value=\"Low\">Low</option>\n                      <option value=\"Medium\">Medium</option>\n                      <option value=\"High\">High</option>\n                    </select>\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">Phosphorus</label>\n                    <select \n                      value={formData.phosphorus}\n                      onChange={(e) => setFormData(prev => ({ ...prev, phosphorus: e.target.value }))}\n                      className=\"w-full p-3 border border-gray-300 rounded-2xl focus:ring-2 focus:ring-green-500 focus:border-green-500\"\n                    >\n                      <option value=\"\">Select level</option>\n                      <option value=\"Low\">Low</option>\n                      <option value=\"Medium\">Medium</option>\n                      <option value=\"High\">High</option>\n                    </select>\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">Potassium</label>\n                    <select \n                      value={formData.potassium}\n                      onChange={(e) => setFormData(prev => ({ ...prev, potassium: e.target.value }))}\n                      className=\"w-full p-3 border border-gray-300 rounded-2xl focus:ring-2 focus:ring-green-500 focus:border-green-500\"\n                    >\n                      <option value=\"\">Select level</option>\n                      <option value=\"Low\">Low</option>\n                      <option value=\"Medium\">Medium</option>\n                      <option value=\"High\">High</option>\n                    </select>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Form Actions */}\n            <div className=\"border-t bg-gray-50 p-5 flex space-x-3\">\n              <Button \n                onClick={() => setShowAddForm(false)}\n                variant=\"outline\"\n                className=\"flex-1 border-gray-300 text-gray-600 hover:bg-gray-100 rounded-2xl py-3\"\n              >\n                Cancel\n              </Button>\n              <Button \n                onClick={handleAddTest}\n                className=\"flex-1 bg-green-600 hover:bg-green-700 text-white rounded-2xl py-3\"\n              >\n                Save Test\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SoilHealth;","size_bytes":24955},"src/pages/Splash.tsx":{"content":"import { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Sprout, Sparkles } from 'lucide-react';\nimport splashBg from '@/assets/splash-bg.jpg';\nimport logo from '@/assets/logo.png';\n\nconst Splash = () => {\n  const navigate = useNavigate();\n  const [seedlingGrown, setSeedlingGrown] = useState(false);\n  const [textVisible, setTextVisible] = useState(false);\n  const [taglineVisible, setTaglineVisible] = useState(false);\n\n  useEffect(() => {\n    // Animate seedling growth\n    setTimeout(() => setSeedlingGrown(true), 500);\n    \n    // Show brand text\n    setTimeout(() => setTextVisible(true), 1000);\n    \n    // Show tagline with typewriter effect\n    setTimeout(() => setTaglineVisible(true), 1500);\n    \n    // Navigate to onboarding after animation\n    setTimeout(() => {\n      const hasSeenOnboarding = localStorage.getItem('kisanmitra_onboarding_seen');\n      if (hasSeenOnboarding) {\n        navigate('/login');\n      } else {\n        navigate('/onboarding');\n      }\n    }, 3500);\n  }, [navigate]);\n\n  return (\n    <div className=\"mobile-container relative overflow-hidden\">\n      {/* Background with animated gradient */}\n      <div \n        className=\"absolute inset-0 gradient-splash\"\n        style={{\n          backgroundImage: `linear-gradient(135deg, rgba(16, 185, 129, 0.9), rgba(4, 120, 87, 0.9)), url(${splashBg})`,\n          backgroundSize: 'cover',\n          backgroundPosition: 'center',\n        }}\n      />\n      \n      {/* Floating particles animation */}\n      <div className=\"absolute inset-0 overflow-hidden\">\n        {[...Array(20)].map((_, i) => (\n          <div\n            key={i}\n            className=\"absolute bg-white/20 rounded-full animate-pulse\"\n            style={{\n              width: Math.random() * 8 + 4 + 'px',\n              height: Math.random() * 8 + 4 + 'px',\n              left: Math.random() * 100 + '%',\n              top: Math.random() * 100 + '%',\n              animationDelay: Math.random() * 3 + 's',\n              animationDuration: (Math.random() * 3 + 2) + 's',\n            }}\n          />\n        ))}\n      </div>\n\n      {/* Content */}\n      <div className=\"relative z-10 flex flex-col items-center justify-center min-h-screen px-8 text-center\">\n        {/* Logo and Seedling Animation */}\n        <div className=\"mb-8 relative\">\n          <div className={`transition-all duration-1000 transform ${seedlingGrown ? 'scale-100 rotate-0' : 'scale-0 -rotate-180'}`}>\n            <div className=\"relative\">\n              <img src={logo} alt=\"KisanMitra\" className=\"w-24 h-24 mx-auto mb-4 drop-shadow-lg\" />\n              \n              {/* Sparkle effects around logo */}\n              <div className=\"absolute -top-2 -right-2\">\n                <Sparkles className=\"w-6 h-6 text-yellow-300 animate-pulse\" />\n              </div>\n              <div className=\"absolute -bottom-2 -left-2\">\n                <Sparkles className=\"w-4 h-4 text-yellow-200 animate-pulse\" style={{ animationDelay: '0.5s' }} />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Brand Name */}\n        <div className={`mb-4 transition-all duration-800 transform ${textVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-4'}`}>\n          <h1 className=\"text-5xl font-bold text-white mb-2 tracking-tight\">\n            KisanMitra\n          </h1>\n          <div className=\"w-24 h-1 bg-white/60 mx-auto rounded-full shadow-glow\" />\n        </div>\n\n        {/* Tagline with typewriter effect */}\n        <div className={`mb-12 transition-all duration-800 ${taglineVisible ? 'opacity-100' : 'opacity-0'}`}>\n          <p className=\"text-xl text-white/90 font-medium tracking-wide\">\n            <span className={`inline-block ${taglineVisible ? 'animate-typing' : ''}`}>\n              Your Smart Farming Companion\n            </span>\n          </p>\n        </div>\n\n        {/* Growing seedling animation at bottom */}\n        <div className=\"absolute bottom-20 left-1/2 transform -translate-x-1/2\">\n          <div className={`transition-all duration-2000 transform ${seedlingGrown ? 'scale-100 opacity-100' : 'scale-0 opacity-0'}`}>\n            <Sprout className=\"w-8 h-8 text-green-200 animate-bounce\" style={{ animationDelay: '2s' }} />\n          </div>\n        </div>\n\n        {/* Subtle loading indicator */}\n        <div className=\"absolute bottom-8 left-1/2 transform -translate-x-1/2\">\n          <div className=\"flex space-x-2\">\n            {[...Array(3)].map((_, i) => (\n              <div\n                key={i}\n                className=\"w-2 h-2 bg-white/60 rounded-full animate-pulse\"\n                style={{ animationDelay: i * 0.2 + 's' }}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Splash;","size_bytes":4784},"src/pages/Treatments.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { \n  Plus, \n  ChevronDown, \n  ChevronUp,\n  Calendar,\n  AlertCircle,\n  CheckCircle,\n  Camera,\n  Edit3,\n  Mic,\n  Globe,\n  TrendingUp,\n  Droplets,\n  Bug,\n  Leaf,\n  Clock,\n  ChevronRight,\n  Check,\n  X,\n  ArrowLeft,\n  Search,\n  Filter,\n  Badge,\n  Zap,\n  Target\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { toast } from '@/components/ui/use-toast';\n\ninterface TreatmentStep {\n  step: number;\n  title: string;\n  description: string;\n  completed: boolean;\n  dueDate: string;\n}\n\ninterface Treatment {\n  id: string;\n  disease: string;\n  startDate: string;\n  status: 'active' | 'completed';\n  progress?: number;\n  duration?: string;\n  successRate?: number;\n  nextAction?: string;\n  image?: string;\n  severity?: string;\n  confidence?: number;\n  fertilizers?: Array<{name: string; price: string; availability: string}>;\n  steps: TreatmentStep[];\n  completedDate?: string;\n}\n\nconst ActiveTreatments = () => {\n  const navigate = useNavigate();\n  const [expandedCards, setExpandedCards] = useState<string[]>([]);\n  const [selectedLanguage, setSelectedLanguage] = useState('en');\n  const [activeFilter, setActiveFilter] = useState('active'); // 'active', 'completed', or 'all'\n  const [treatments, setTreatments] = useState<Treatment[]>([]);\n  const [searchQuery, setSearchQuery] = useState('');\n  \n  const languages = {\n    en: { label: 'English', flag: '🇬🇧' },\n    hi: { label: 'हिन्दी', flag: '🇮🇳' },\n    ta: { label: 'தமிழ்', flag: '🇮🇳' }\n  };\n\n  useEffect(() => {\n    loadTreatments();\n  }, []);\n\n  const loadTreatments = () => {\n    const savedTreatments = localStorage.getItem('active_treatments');\n    if (savedTreatments) {\n      try {\n        const parsedTreatments = JSON.parse(savedTreatments);\n        setTreatments(parsedTreatments);\n      } catch (error) {\n        console.error('Error loading treatments:', error);\n        setTreatments([]);\n      }\n    } else {\n      setTreatments([]);\n    }\n  };\n\n  // Filter treatments based on active filter and search query\n  const filteredTreatments = treatments.filter(treatment => {\n    const matchesFilter = activeFilter === 'all' || treatment.status === activeFilter;\n    const matchesSearch = !searchQuery || \n      treatment.disease.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      (treatment.severity && treatment.severity.toLowerCase().includes(searchQuery.toLowerCase()));\n    return matchesFilter && matchesSearch;\n  });\n\n  const summaryData = {\n    active: treatments.filter(t => t.status === 'active').length,\n    completed: treatments.filter(t => t.status === 'completed').length,\n    successRate: treatments.length > 0 ? Math.round((treatments.filter(t => t.status === 'completed').length / treatments.length) * 100) : 0\n  };\n\n  const toggleExpand = (id: string) => {\n    setExpandedCards(prev => \n      prev.includes(id) \n        ? prev.filter(cardId => cardId !== id)\n        : [...prev, id]\n    );\n  };\n\n  const markStepComplete = (treatmentId: string, stepIndex: number) => {\n    const updatedTreatments = treatments.map(treatment => {\n      if (treatment.id === treatmentId) {\n        const updatedSteps = [...treatment.steps];\n        updatedSteps[stepIndex] = { ...updatedSteps[stepIndex], completed: true };\n        \n        // Calculate progress\n        const completedSteps = updatedSteps.filter(step => step.completed).length;\n        const progress = Math.round((completedSteps / updatedSteps.length) * 100);\n        \n        // If all steps completed, mark treatment as completed\n        const isAllCompleted = completedSteps === updatedSteps.length;\n        \n        return {\n          ...treatment,\n          steps: updatedSteps,\n          progress,\n          status: isAllCompleted ? ('completed' as const) : ('active' as const),\n          completedDate: isAllCompleted ? new Date().toISOString() : treatment.completedDate\n        };\n      }\n      return treatment;\n    });\n    \n    setTreatments(updatedTreatments);\n    localStorage.setItem('active_treatments', JSON.stringify(updatedTreatments));\n    \n    toast({\n      title: \"✅ Step Completed!\",\n      description: \"Treatment progress updated successfully.\"\n    });\n  };\n\n  const moveToCompleted = (treatmentId: string) => {\n    const updatedTreatments = treatments.map(treatment => {\n      if (treatment.id === treatmentId) {\n        return {\n          ...treatment,\n          status: 'completed' as const,\n          completedDate: new Date().toISOString(),\n          progress: 100\n        };\n      }\n      return treatment;\n    });\n    \n    setTreatments(updatedTreatments);\n    localStorage.setItem('active_treatments', JSON.stringify(updatedTreatments));\n    \n    toast({\n      title: \"🎉 Treatment Completed!\",\n      description: \"Treatment has been moved to completed treatments.\"\n    });\n  };\n\n  const getProgress = (treatment: Treatment) => {\n    if (treatment.status === 'completed') return 100;\n    if (!treatment.steps || treatment.steps.length === 0) return 0;\n    \n    const completedSteps = treatment.steps.filter(step => step.completed).length;\n    return Math.round((completedSteps / treatment.steps.length) * 100);\n  };\n\n  const getSeverityStyle = (severity) => {\n    switch(severity) {\n      case 'low':\n        return 'bg-green-100 text-green-700 border-green-300';\n      case 'moderate':\n        return 'bg-yellow-100 text-yellow-700 border-yellow-300';\n      case 'high':\n        return 'bg-red-100 text-red-700 border-red-300';\n      default:\n        return 'bg-gray-100 text-gray-700';\n    }\n  };\n\n  const getDaysFromStart = (startDate: string) => {\n    const start = new Date(startDate);\n    const now = new Date();\n    const diffTime = Math.abs(now.getTime() - start.getTime());\n    return Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white shadow-sm sticky top-0 z-10\">\n        <div className=\"px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <button \n                onClick={() => navigate(-1)}\n                className=\"p-2 hover:bg-gray-100 rounded-xl transition-colors\"\n              >\n                <ArrowLeft className=\"w-5 h-5 text-gray-600\" />\n              </button>\n              <h1 className=\"text-2xl font-bold text-gray-900\">Active Treatments</h1>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <button className=\"p-3 hover:bg-gray-100 rounded-full transition-colors\">\n                <Mic className=\"w-5 h-5 text-gray-600\" />\n              </button>\n              <button className=\"flex items-center space-x-2 px-4 py-2 bg-gray-100 rounded-full\">\n                <span className=\"text-lg\">{languages[selectedLanguage].flag}</span>\n                <span className=\"text-sm font-medium text-gray-700\">{languages[selectedLanguage].label}</span>\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Search and Filter */}\n      <div className=\"px-6 py-4\">\n        <div className=\"flex items-center space-x-3 mb-4\">\n          <div className=\"relative flex-1\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n            <Input\n              placeholder=\"Search by plant or disease...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10\"\n            />\n          </div>\n          <Button variant=\"outline\" className=\"flex items-center space-x-2\">\n            <Filter className=\"w-4 h-4\" />\n            <span>Filter</span>\n          </Button>\n        </div>\n      </div>\n\n      {/* Summary Strip with Filter Buttons */}\n      <div className=\"px-6 py-2\">\n        <div className=\"grid grid-cols-3 gap-4\">\n          <button \n            onClick={() => setActiveFilter('active')}\n            className={`rounded-2xl p-4 transition-all duration-200 ${\n              activeFilter === 'active' \n                ? 'bg-blue-100 border-2 border-blue-400 shadow-lg' \n                : 'bg-blue-50 border border-blue-200 hover:bg-blue-100'\n            }`}\n          >\n            <div className=\"text-center\">\n              <div className=\"w-12 h-12 bg-blue-500 rounded-xl flex items-center justify-center mx-auto mb-3\">\n                <Leaf className=\"w-6 h-6 text-white\" />\n              </div>\n              <p className=\"text-sm font-medium text-blue-600 mb-1\">Active</p>\n              <p className=\"text-2xl font-bold text-blue-700\">{summaryData.active}</p>\n            </div>\n          </button>\n          \n          <button \n            onClick={() => setActiveFilter('completed')}\n            className={`rounded-2xl p-4 transition-all duration-200 ${\n              activeFilter === 'completed' \n                ? 'bg-green-100 border-2 border-green-400 shadow-lg' \n                : 'bg-green-50 border border-green-200 hover:bg-green-100'\n            }`}\n          >\n            <div className=\"text-center\">\n              <div className=\"w-12 h-12 bg-green-500 rounded-xl flex items-center justify-center mx-auto mb-3\">\n                <CheckCircle className=\"w-6 h-6 text-white\" />\n              </div>\n              <p className=\"text-sm font-medium text-green-600 mb-1\">Completed</p>\n              <p className=\"text-2xl font-bold text-green-700\">{summaryData.completed}</p>\n            </div>\n          </button>\n          \n          <button \n            onClick={() => setActiveFilter('all')}\n            className={`rounded-2xl p-4 transition-all duration-200 ${\n              activeFilter === 'all' \n                ? 'bg-purple-100 border-2 border-purple-400 shadow-lg' \n                : 'bg-purple-50 border border-purple-200 hover:bg-purple-100'\n            }`}\n          >\n            <div className=\"text-center\">\n              <div className=\"w-12 h-12 bg-purple-500 rounded-xl flex items-center justify-center mx-auto mb-3\">\n                <TrendingUp className=\"w-6 h-6 text-white\" />\n              </div>\n              <p className=\"text-sm font-medium text-purple-600 mb-1\">All</p>\n              <p className=\"text-2xl font-bold text-purple-700\">{summaryData.active + summaryData.completed}</p>\n            </div>\n          </button>\n        </div>\n      </div>\n\n      {/* Treatment Cards */}\n      <div className=\"px-6 pb-24 space-y-6\">\n        {filteredTreatments.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <Leaf className=\"w-16 h-16 text-gray-300 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Treatments Found</h3>\n            <p className=\"text-gray-500 mb-4\">\n              {searchQuery ? 'No treatments match your search.' : 'You haven\\'t started any treatments yet.'}\n            </p>\n            {!searchQuery && (\n              <Button onClick={() => navigate('/diagnose')} className=\"flex items-center space-x-2\">\n                <Plus className=\"w-4 h-4\" />\n                <span>Start Diagnosis</span>\n              </Button>\n            )}\n          </div>\n        ) : (\n          filteredTreatments.map(treatment => {\n            const isExpanded = expandedCards.includes(treatment.id);\n            const progress = getProgress(treatment);\n            const isCompleted = treatment.status === 'completed';\n            const daysFromStart = getDaysFromStart(treatment.startDate);\n          \n          return (\n            <div key={treatment.id} className={`bg-white rounded-3xl shadow-md border overflow-hidden ${\n              isCompleted ? 'border-green-200 bg-green-50/30' : 'border-gray-100'\n            }`}>\n              {/* Main Card Content */}\n              <div className=\"p-6\">\n                {/* Header Row */}\n                <div className=\"flex justify-between items-start mb-4\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-3 mb-2\">\n                      <h3 className=\"text-xl font-bold text-gray-900\">{treatment.disease}</h3>\n                      {treatment.severity && (\n                        <span className={`px-3 py-1 text-xs font-bold rounded-full border ${getSeverityStyle(treatment.severity)} uppercase tracking-wide`}>\n                          {treatment.severity}\n                        </span>\n                      )}\n                    </div>\n                    <p className=\"text-base text-gray-600 font-medium\">Started {daysFromStart} days ago</p>\n                    {treatment.duration && (\n                      <p className=\"text-sm text-gray-500\">Expected duration: {treatment.duration}</p>\n                    )}\n                  </div>\n                  <button\n                    onClick={() => toggleExpand(treatment.id)}\n                    className=\"p-3 hover:bg-gray-100 rounded-full transition-colors\"\n                  >\n                    {isExpanded ? (\n                      <ChevronUp className=\"w-6 h-6 text-gray-500\" />\n                    ) : (\n                      <ChevronDown className=\"w-6 h-6 text-gray-500\" />\n                    )}\n                  </button>\n                </div>\n\n                {/* Progress Bar */}\n                <div className=\"mb-6\">\n                  <div className=\"flex justify-between items-center mb-3\">\n                    <span className=\"text-sm font-medium text-gray-600\">\n                      {treatment.steps ? `${treatment.steps.filter(s => s.completed).length} of ${treatment.steps.length} steps completed` : 'Treatment Progress'}\n                    </span>\n                    <div className=\"flex items-center space-x-2\">\n                      <span className=\"text-sm font-bold text-gray-800\">{progress}% Complete</span>\n                      {treatment.successRate && (\n                        <span className=\"text-xs bg-green-100 text-green-700 px-2 py-1 rounded-full\">\n                          {treatment.successRate}% success rate\n                        </span>\n                      )}\n                    </div>\n                  </div>\n                  <div className=\"w-full h-3 bg-gray-200 rounded-full overflow-hidden\">\n                    <div \n                      className=\"h-full bg-gradient-to-r from-green-400 to-green-500 rounded-full transition-all duration-500\"\n                      style={{ width: `${progress}%` }}\n                    />\n                  </div>\n                </div>\n\n                {/* Next Action or Completion Status */}\n                {isCompleted ? (\n                  <div className=\"p-5 rounded-2xl bg-green-50 border-2 border-green-200\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-10 h-10 rounded-xl flex items-center justify-center bg-green-100\">\n                          <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                        </div>\n                        <div className=\"flex-1\">\n                          <p className=\"text-sm font-bold text-gray-900 mb-1\">Treatment Completed</p>\n                          <p className=\"text-base font-medium text-green-800 mb-2\">\n                            Successfully completed on {treatment.completedDate ? new Date(treatment.completedDate).toLocaleDateString() : 'Recently'}\n                          </p>\n                          <p className=\"text-sm text-green-700 font-medium\">\n                            ✓ 100% Progress Complete\n                          </p>\n                        </div>\n                      </div>\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\"\n                        onClick={() => navigate('/diagnose')}\n                        className=\"text-green-600 border-green-300 hover:bg-green-50\"\n                      >\n                        <Camera className=\"w-4 h-4 mr-2\" />\n                        Re-analyze\n                      </Button>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {/* Treatment Steps */}\n                    {treatment.steps && treatment.steps.length > 0 && (\n                      <div className=\"bg-blue-50 rounded-2xl p-4 border border-blue-200\">\n                        <h4 className=\"font-semibold text-gray-900 mb-3 flex items-center\">\n                          <Target className=\"w-4 h-4 mr-2 text-blue-600\" />\n                          Treatment Steps\n                        </h4>\n                        <div className=\"space-y-2\">\n                          {treatment.steps.map((step, index) => (\n                            <div \n                              key={step.step} \n                              className={`flex items-center space-x-3 p-3 rounded-xl transition-colors ${\n                                step.completed ? 'bg-green-100' : 'bg-white hover:bg-blue-50'\n                              }`}\n                            >\n                              <button\n                                onClick={() => !step.completed && markStepComplete(treatment.id, index)}\n                                disabled={step.completed}\n                                className={`w-6 h-6 rounded-full border-2 flex items-center justify-center transition-colors ${\n                                  step.completed \n                                    ? 'bg-green-500 border-green-500' \n                                    : 'border-gray-300 hover:border-green-400'\n                                }`}\n                              >\n                                {step.completed && <Check className=\"w-4 h-4 text-white\" />}\n                              </button>\n                              <div className=\"flex-1\">\n                                <p className={`font-medium ${step.completed ? 'text-green-800 line-through' : 'text-gray-900'}`}>\n                                  {step.title}\n                                </p>\n                                <p className={`text-sm ${step.completed ? 'text-green-600' : 'text-gray-600'}`}>\n                                  {step.description}\n                                </p>\n                              </div>\n                              {step.completed && (\n                                <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                              )}\n                            </div>\n                          ))}\n                        </div>\n                        \n                        {progress === 100 && (\n                          <div className=\"mt-4 pt-4 border-t border-blue-200\">\n                            <Button \n                              onClick={() => moveToCompleted(treatment.id)}\n                              className=\"w-full bg-green-600 hover:bg-green-700\"\n                            >\n                              <CheckCircle className=\"w-4 h-4 mr-2\" />\n                              Mark Treatment as Completed\n                            </Button>\n                          </div>\n                        )}\n                      </div>\n                    )}\n                  </div>\n                )}\n\n                {/* Expanded Content */}\n                {isExpanded && (\n                  <div className=\"mt-4 space-y-4\">\n                    {/* Recommended Fertilizers */}\n                    {treatment.fertilizers && treatment.fertilizers.length > 0 && (\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-700 mb-2 flex items-center\">\n                          <Zap className=\"w-4 h-4 mr-2 text-orange-500\" />\n                          Recommended Fertilizers\n                        </p>\n                        <div className=\"space-y-2\">\n                          {treatment.fertilizers.map((fertilizer, index) => (\n                            <div key={index} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                              <div className=\"flex-1\">\n                                <p className=\"text-sm font-medium text-gray-900\">{fertilizer.name}</p>\n                                <p className=\"text-xs text-gray-600\">{fertilizer.price}</p>\n                              </div>\n                              <span className={`px-2 py-1 rounded-full text-xs font-medium ${\n                                fertilizer.availability === 'In Stock' ? 'bg-green-100 text-green-600' : 'bg-red-100 text-red-600'\n                              }`}>\n                                {fertilizer.availability}\n                              </span>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n\n                    {/* Treatment Image */}\n                    {treatment.image && (\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-700 mb-2\">Original Diagnosis Image</p>\n                        <img \n                          src={treatment.image} \n                          alt=\"Treatment plant\" \n                          className=\"w-full h-32 object-cover rounded-lg border\"\n                        />\n                      </div>\n                    )}\n\n                    {/* Action Buttons */}\n                    <div className=\"border-t pt-4\">\n                      <div className=\"flex space-x-2\">\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\" \n                          className=\"flex-1\"\n                          onClick={() => navigate('/diagnose')}\n                        >\n                          <Camera className=\"w-4 h-4 mr-2\" />\n                          Add Photo\n                        </Button>\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\" \n                          className=\"flex-1\"\n                        >\n                          <Edit3 className=\"w-4 h-4 mr-2\" />\n                          Add Note\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          );\n          })\n        )}\n      </div>\n\n    </div>\n  );\n};\n\nexport default ActiveTreatments;","size_bytes":22623},"src/pages/Weather.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { ArrowLeft, MapPin, Thermometer, Droplets, Wind, Eye, Sunrise, Sunset, AlertTriangle, RefreshCw } from 'lucide-react';\nimport { useNavigate } from 'react-router-dom';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { weatherService, WeatherData, DailyForecast } from '@/lib/weather';\n\nconst Weather = () => {\n  const navigate = useNavigate();\n  const [currentWeather, setCurrentWeather] = useState<WeatherData | null>(null);\n  const [forecast, setForecast] = useState<DailyForecast[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [location, setLocation] = useState({ lat: 0, lon: 0 });\n\n  const loadWeatherData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Try to get current location first\n      try {\n        const currentLocation = await weatherService.getCurrentLocation();\n        setLocation(currentLocation);\n        \n        // Fetch current weather and forecast\n        const [weather, forecastData] = await Promise.all([\n          weatherService.getCurrentWeather(currentLocation.lat, currentLocation.lon),\n          weatherService.getForecast(currentLocation.lat, currentLocation.lon)\n        ]);\n        \n        setCurrentWeather(weather);\n        setForecast(forecastData);\n      } catch (locationError) {\n        // If location access fails, use a default location (Delhi, India)\n        console.warn('Location access failed, using default location');\n        const defaultWeather = await weatherService.getWeatherByCity('Delhi, IN');\n        const defaultForecast = await weatherService.getForecast(28.6139, 77.2090); // Delhi coordinates\n        \n        setCurrentWeather(defaultWeather);\n        setForecast(defaultForecast);\n      }\n    } catch (err) {\n      setError('Unable to fetch weather data. Please try again.');\n      console.error('Weather fetch error:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadWeatherData();\n  }, []);\n\n  const formatTime = (timestamp: number) => {\n    return new Date(timestamp * 1000).toLocaleTimeString('en-US', {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const getWeatherAdvice = (weather: WeatherData) => {\n    return weatherService.generateFarmingAdvice(weather);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-green-100 p-4\">\n        <div className=\"max-w-md mx-auto\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => navigate(-1)}\n              className=\"text-green-700\"\n            >\n              <ArrowLeft className=\"h-5 w-5 mr-1\" />\n              Back\n            </Button>\n            <h1 className=\"text-xl font-bold text-green-800\">Weather Forecast</h1>\n            <div className=\"w-16\" />\n          </div>\n          \n          <div className=\"flex items-center justify-center py-20\">\n            <RefreshCw className=\"h-8 w-8 animate-spin text-green-600\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-green-100 p-4\">\n        <div className=\"max-w-md mx-auto\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => navigate(-1)}\n              className=\"text-green-700\"\n            >\n              <ArrowLeft className=\"h-5 w-5 mr-1\" />\n              Back\n            </Button>\n            <h1 className=\"text-xl font-bold text-green-800\">Weather Forecast</h1>\n            <div className=\"w-16\" />\n          </div>\n          \n          <Card className=\"mb-6\">\n            <CardContent className=\"p-6 text-center\">\n              <AlertTriangle className=\"h-12 w-12 text-red-500 mx-auto mb-4\" />\n              <p className=\"text-red-600 mb-4\">{error}</p>\n              <Button onClick={loadWeatherData} variant=\"outline\">\n                Try Again\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-green-100 p-4\">\n      <div className=\"max-w-md mx-auto\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => navigate(-1)}\n            className=\"text-green-700\"\n          >\n            <ArrowLeft className=\"h-5 w-5 mr-1\" />\n            Back\n          </Button>\n          <h1 className=\"text-xl font-bold text-green-800\">Weather Forecast</h1>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={loadWeatherData}\n            className=\"text-green-700\"\n          >\n            <RefreshCw className=\"h-5 w-5\" />\n          </Button>\n        </div>\n\n        {/* Current Weather */}\n        {currentWeather && (\n          <Card className=\"mb-6 bg-gradient-to-r from-blue-500 to-blue-600 text-white\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div>\n                  <div className=\"flex items-center mb-2\">\n                    <MapPin className=\"h-4 w-4 mr-1\" />\n                    <span className=\"text-sm\">{currentWeather.location}</span>\n                  </div>\n                  <div className=\"text-3xl font-bold mb-1\">\n                    {currentWeather.temperature}°C\n                  </div>\n                  <div className=\"text-sm opacity-90 capitalize\">\n                    {currentWeather.description}\n                  </div>\n                  <div className=\"text-sm opacity-90\">\n                    Feels like {currentWeather.feelsLike}°C\n                  </div>\n                </div>\n                <img\n                  src={weatherService.getWeatherIconUrl(currentWeather.icon)}\n                  alt={currentWeather.description}\n                  className=\"h-20 w-20\"\n                />\n              </div>\n\n              {/* Weather Details */}\n              <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                <div className=\"flex items-center\">\n                  <Droplets className=\"h-4 w-4 mr-2\" />\n                  <span>Humidity: {currentWeather.humidity}%</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <Wind className=\"h-4 w-4 mr-2\" />\n                  <span>Wind: {currentWeather.windSpeed} m/s</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <Thermometer className=\"h-4 w-4 mr-2\" />\n                  <span>Pressure: {currentWeather.pressure} hPa</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <Eye className=\"h-4 w-4 mr-2\" />\n                  <span>Visibility: {currentWeather.visibility} km</span>\n                </div>\n              </div>\n\n              {/* Sun Times */}\n              <div className=\"flex items-center justify-between mt-4 pt-4 border-t border-white/20\">\n                <div className=\"flex items-center\">\n                  <Sunrise className=\"h-4 w-4 mr-2\" />\n                  <span className=\"text-sm\">\n                    Sunrise: {formatTime(currentWeather.sunrise)}\n                  </span>\n                </div>\n                <div className=\"flex items-center\">\n                  <Sunset className=\"h-4 w-4 mr-2\" />\n                  <span className=\"text-sm\">\n                    Sunset: {formatTime(currentWeather.sunset)}\n                  </span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Farming Advice */}\n        {currentWeather && (\n          <Card className=\"mb-6 bg-green-50 border-green-200\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm text-green-800\">🌾 Farming Advice</CardTitle>\n            </CardHeader>\n            <CardContent className=\"pt-0\">\n              <p className=\"text-sm text-green-700\">\n                {getWeatherAdvice(currentWeather)}\n              </p>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* 7-Day Forecast */}\n        <div className=\"mb-6\">\n          <h2 className=\"text-xl font-bold text-green-800 mb-4 px-2\">7-Day Forecast</h2>\n          <div className=\"space-y-3 px-2\">\n            {forecast.map((day, index) => {\n              // Determine gradient based on weather condition\n              const getWeatherGradient = (icon: string, description: string) => {\n                const desc = description.toLowerCase();\n                const iconCode = icon;\n                \n                if (desc.includes('sun') || desc.includes('clear') || iconCode.includes('01')) {\n                  return 'from-yellow-400 via-orange-400 to-red-400';\n                } else if (desc.includes('rain') || desc.includes('drizzle') || iconCode.includes('09') || iconCode.includes('10')) {\n                  return 'from-blue-400 via-blue-500 to-indigo-600';\n                } else if (desc.includes('cloud') || iconCode.includes('02') || iconCode.includes('03') || iconCode.includes('04')) {\n                  return 'from-gray-400 via-gray-500 to-gray-600';\n                } else if (desc.includes('storm') || desc.includes('thunder') || iconCode.includes('11')) {\n                  return 'from-purple-500 via-indigo-600 to-gray-700';\n                } else if (desc.includes('snow') || iconCode.includes('13')) {\n                  return 'from-blue-100 via-blue-200 to-blue-300';\n                } else {\n                  return 'from-green-400 via-blue-500 to-purple-600';\n                }\n              };\n              \n              const getTextColor = (icon: string, description: string) => {\n                const desc = description.toLowerCase();\n                if (desc.includes('snow') || icon.includes('13')) {\n                  return 'text-gray-800';\n                }\n                return 'text-white';\n              };\n              \n              return (\n                <div\n                  key={day.date}\n                  className={`w-full bg-gradient-to-br ${getWeatherGradient(day.icon, day.description)} rounded-3xl p-4 shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-[1.02]`}\n                >\n                  <div className={`flex items-center justify-between ${getTextColor(day.icon, day.description)}`}>\n                    {/* Day */}\n                    <div className=\"font-bold text-lg opacity-90\">\n                      {index === 0 ? 'Today' : day.dayName.slice(0, 3)}\n                    </div>\n                    \n                    {/* Weather Icon */}\n                    <div className=\"flex justify-center\">\n                      <img\n                        src={weatherService.getWeatherIconUrl(day.icon)}\n                        alt={day.description}\n                        className=\"w-12 h-12 drop-shadow-lg\"\n                      />\n                    </div>\n                    \n                    {/* Temperature */}\n                    <div className=\"text-center\">\n                      <div className=\"text-lg font-bold\">\n                        {day.temperature.max}°\n                      </div>\n                      <div className=\"text-sm opacity-80\">\n                        {day.temperature.min}°\n                      </div>\n                    </div>\n                    \n                    {/* Humidity */}\n                    <div className=\"text-sm opacity-75 font-medium\">\n                      💧 {day.humidity}%\n                    </div>\n                    \n                    {/* Weather Description */}\n                    <div className=\"text-sm opacity-70 capitalize leading-tight\">\n                      {day.description.split(' ').slice(0, 2).join(' ')}\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n\n        {/* Additional Info */}\n        <div className=\"mt-6 text-center text-xs text-gray-500\">\n          Data provided by OpenWeatherMap\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Weather;","size_bytes":12531},"src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"src/components/ui/avatar.tsx":{"content":"import * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1405},"src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:size-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2701},"src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"src/components/ui/calendar.tsx":{"content":"import * as React from \"react\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { DayPicker } from \"react-day-picker\";\n\nimport { cn } from \"@/lib/utils\";\nimport { buttonVariants } from \"@/components/ui/button\";\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>;\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ ..._props }) => <ChevronLeft className=\"h-4 w-4\" />,\n        IconRight: ({ ..._props }) => <ChevronRight className=\"h-4 w-4\" />,\n      }}\n      {...props}\n    />\n  );\n}\nCalendar.displayName = \"Calendar\";\n\nexport { Calendar };\n","size_bytes":2620},"src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1877},"src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"src/components/ui/chart.tsx":{"content":"import * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([_, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10466},"src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"src/components/ui/collapsible.tsx":{"content":"import * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":315},"src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\ninterface CommandDialogProps extends DialogProps {}\n\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4879},"src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7246},"src/components/ui/dialog.tsx":{"content":"import * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3835},"src/components/ui/drawer.tsx":{"content":"import * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3007},"src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7295},"src/components/ui/form.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n  FormProvider,\n  useFormContext,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4085},"src/components/ui/hover-card.tsx":{"content":"import * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1184},"src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"src/components/ui/menubar.tsx":{"content":"import * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst MenubarMenu = MenubarPrimitive.Menu\n\nconst MenubarGroup = MenubarPrimitive.Group\n\nconst MenubarPortal = MenubarPrimitive.Portal\n\nconst MenubarSub = MenubarPrimitive.Sub\n\nconst MenubarRadioGroup = MenubarPrimitive.RadioGroup\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":7974},"src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5046},"src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1230},"src/components/ui/progress.tsx":{"content":"import * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":777},"src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"src/components/ui/resizable.tsx":{"content":"import { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1709},"src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"src/components/ui/select.tsx":{"content":"import * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5615},"src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"src/components/ui/sheet.tsx":{"content":"import * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n  VariantProps<typeof sheetVariants> { }\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet, SheetClose,\n  SheetContent, SheetDescription, SheetFooter, SheetHeader, SheetOverlay, SheetPortal, SheetTitle, SheetTrigger\n}\n\n","size_bytes":4250},"src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar:state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden md:block text-sidebar-foreground\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23367},"src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"src/components/ui/sonner.tsx":{"content":"import { useTheme } from \"next-themes\"\nimport { Toaster as Sonner, toast } from \"sonner\"\n\ntype ToasterProps = React.ComponentProps<typeof Sonner>\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\n          description: \"group-[.toast]:text-muted-foreground\",\n          actionButton:\n            \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\",\n          cancelButton:\n            \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\",\n        },\n      }}\n      {...props}\n    />\n  )\n}\n\nexport { Toaster, toast }\n","size_bytes":894},"src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":772},"src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"src/components/ui/toggle-group.tsx":{"content":"import * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1739},"src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3\",\n        sm: \"h-9 px-2.5\",\n        lg: \"h-11 px-5\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1435},"src/components/ui/tooltip.tsx":{"content":"import * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1145},"src/components/ui/use-toast.ts":{"content":"import { useToast, toast } from \"@/hooks/use-toast\";\n\nexport { useToast, toast };\n","size_bytes":82},"src/lib/marketData.ts":{"content":"// Complete Chennai Market Data with all vegetables sorted by price (highest to lowest)\n\nexport interface Crop {\n  name: string;\n  price: string;\n  change: string;\n  trend: 'up' | 'down' | 'stable';\n  previousPrice: string;\n}\n\nexport interface Market {\n  id: number;\n  name: string;\n  location: string;\n  distance: string;\n  latitude: number;\n  longitude: number;\n  crops: Crop[];\n}\n\n// Complete vegetables data sorted by price (highest to lowest)\nconst allChennaiVegetables: Crop[] = [\n  { name: 'Garlic', price: '₹127/kg', change: '+5%', trend: 'up', previousPrice: '₹121/kg' },\n  { name: 'Mushroom', price: '₹106/kg', change: '+7%', trend: 'up', previousPrice: '₹99/kg' },\n  { name: 'Ginger', price: '₹90/kg', change: '+6%', trend: 'up', previousPrice: '₹85/kg' },\n  { name: 'Amla', price: '₹86/kg', change: '+3%', trend: 'up', previousPrice: '₹83/kg' },\n  { name: 'Coconut', price: '₹84/kg', change: '+7%', trend: 'up', previousPrice: '₹78/kg' },\n  { name: 'French Beans', price: '₹74/kg', change: '+8%', trend: 'up', previousPrice: '₹69/kg' },\n  { name: 'Baby Corn', price: '₹68/kg', change: '+6%', trend: 'up', previousPrice: '₹64/kg' },\n  { name: 'Sweet Potato', price: '₹68/kg', change: '+6%', trend: 'up', previousPrice: '₹64/kg' },\n  { name: 'Lemon', price: '₹62/kg', change: '+2%', trend: 'up', previousPrice: '₹61/kg' },\n  { name: 'Drumsticks', price: '₹61/kg', change: '+5%', trend: 'up', previousPrice: '₹58/kg' },\n  { name: 'Butter Beans', price: '₹61/kg', change: '+5%', trend: 'up', previousPrice: '₹58/kg' },\n  { name: 'Onion Small', price: '₹59/kg', change: '+4%', trend: 'up', previousPrice: '₹57/kg' },\n  { name: 'Green Peas', price: '₹58/kg', change: '-5%', trend: 'down', previousPrice: '₹61/kg' },\n  { name: 'Capsicum', price: '₹56/kg', change: '+7%', trend: 'up', previousPrice: '₹52/kg' },\n  { name: 'Elephant Yam', price: '₹52/kg', change: '+6%', trend: 'up', previousPrice: '₹49/kg' },\n  { name: 'Broad Beans', price: '₹50/kg', change: '+6%', trend: 'up', previousPrice: '₹47/kg' },\n  { name: 'Green Chilli', price: '₹49/kg', change: '+5%', trend: 'up', previousPrice: '₹47/kg' },\n  { name: 'Cluster Beans', price: '₹49/kg', change: '+6%', trend: 'up', previousPrice: '₹46/kg' },\n  { name: 'Carrot', price: '₹48/kg', change: '-4%', trend: 'down', previousPrice: '₹50/kg' },\n  { name: 'Ladies Finger', price: '₹48/kg', change: '-3%', trend: 'down', previousPrice: '₹49/kg' },\n  { name: 'Onion Green', price: '₹46/kg', change: '+4%', trend: 'up', previousPrice: '₹44/kg' },\n  { name: 'Bitter Gourd', price: '₹46/kg', change: '+4%', trend: 'up', previousPrice: '₹44/kg' },\n  { name: 'Ridge Gourd', price: '₹46/kg', change: '+4%', trend: 'up', previousPrice: '₹44/kg' },\n  { name: 'Shallot', price: '₹45/kg', change: '+4%', trend: 'up', previousPrice: '₹43/kg' },\n  { name: 'Beetroot', price: '₹44/kg', change: '-2%', trend: 'down', previousPrice: '₹45/kg' },\n  { name: 'Ivy Gourd', price: '₹42/kg', change: '+5%', trend: 'up', previousPrice: '₹40/kg' },\n  { name: 'Snake Gourd', price: '₹41/kg', change: '+5%', trend: 'up', previousPrice: '₹39/kg' },\n  { name: 'Brinjal', price: '₹40/kg', change: '+9%', trend: 'up', previousPrice: '₹37/kg' },\n  { name: 'Bottle Gourd', price: '₹39/kg', change: '+6%', trend: 'up', previousPrice: '₹37/kg' },\n  { name: 'Raw Mango', price: '₹37/kg', change: '+6%', trend: 'up', previousPrice: '₹35/kg' },\n  { name: 'Cabbage', price: '₹37/kg', change: '+8%', trend: 'up', previousPrice: '₹34/kg' },\n  { name: 'Cauliflower', price: '₹37/kg', change: '+12%', trend: 'up', previousPrice: '₹33/kg' },\n  { name: 'Radish', price: '₹35/kg', change: '+7%', trend: 'up', previousPrice: '₹33/kg' },\n  { name: 'Potato', price: '₹34/kg', change: '+2%', trend: 'up', previousPrice: '₹33/kg' },\n  { name: 'Cucumber', price: '₹34/kg', change: '+3%', trend: 'up', previousPrice: '₹33/kg' },\n  { name: 'Corn', price: '₹34/kg', change: '+6%', trend: 'up', previousPrice: '₹32/kg' },\n  { name: 'Onion Big', price: '₹32/kg', change: '+3%', trend: 'up', previousPrice: '₹31/kg' },\n  { name: 'Colocasia', price: '₹32/kg', change: '+3%', trend: 'up', previousPrice: '₹31/kg' },\n  { name: 'Curry Leaves', price: '₹32/kg', change: '+3%', trend: 'up', previousPrice: '₹31/kg' },\n  { name: 'Tomato', price: '₹31/kg', change: '+6%', trend: 'up', previousPrice: '₹29/kg' },\n  { name: 'Pumpkin', price: '₹27/kg', change: '+4%', trend: 'up', previousPrice: '₹26/kg' },\n  { name: 'Banana Flower', price: '₹23/kg', change: '+5%', trend: 'up', previousPrice: '₹22/kg' },\n  { name: 'Ash Gourd', price: '₹22/kg', change: '+5%', trend: 'up', previousPrice: '₹21/kg' },\n  { name: 'Mustard Leaves', price: '₹22/kg', change: '+5%', trend: 'up', previousPrice: '₹21/kg' },\n  { name: 'Amaranth Leaves', price: '₹21/kg', change: '+5%', trend: 'up', previousPrice: '₹20/kg' },\n  { name: 'Sorrel Leaves', price: '₹17/kg', change: '+6%', trend: 'up', previousPrice: '₹16/kg' },\n  { name: 'Colocasia Leaves', price: '₹16/kg', change: '+7%', trend: 'up', previousPrice: '₹15/kg' },\n  { name: 'Spinach', price: '₹16/kg', change: '+7%', trend: 'up', previousPrice: '₹15/kg' },\n  { name: 'Raw Banana', price: '₹15/kg', change: '+7%', trend: 'up', previousPrice: '₹14/kg' },\n  { name: 'Fenugreek Leaves', price: '₹15/kg', change: '+7%', trend: 'up', previousPrice: '₹14/kg' },\n  { name: 'Coriander Leaves', price: '₹14/kg', change: '+8%', trend: 'up', previousPrice: '₹13/kg' },\n  { name: 'Dill Leaves', price: '₹14/kg', change: '+8%', trend: 'up', previousPrice: '₹13/kg' },\n  { name: 'Mint Leaves', price: '₹4/kg', change: '+14%', trend: 'up', previousPrice: '₹3.50/kg' }\n];\n\nexport const marketData: Market[] = [\n  {\n    id: 1,\n    name: 'Koyambedu Market',\n    location: 'Chennai',\n    distance: 'Calculating...',\n    latitude: 13.0827,\n    longitude: 80.1983, // Actual Koyambedu Wholesale Market coordinates\n    crops: [...allChennaiVegetables] // All vegetables available at Koyambedu\n  },\n  {\n    id: 2,\n    name: 'T. Nagar Market',\n    location: 'Chennai', \n    distance: 'Calculating...',\n    latitude: 13.0418,\n    longitude: 80.2341,\n    crops: [...allChennaiVegetables] // All vegetables available at T. Nagar\n  },\n  {\n    id: 3,\n    name: 'Flower Bazaar',\n    location: 'Chennai',\n    distance: 'Calculating...',\n    latitude: 13.0845, // Actual Flower Bazaar Road coordinates\n    longitude: 80.2785,\n    crops: [...allChennaiVegetables] // All vegetables available at Flower Bazaar\n  },\n  {\n    id: 4,\n    name: 'George Town Market',\n    location: 'Chennai',\n    distance: 'Calculating...',\n    latitude: 13.0878,\n    longitude: 80.2785,\n    crops: [...allChennaiVegetables] // All vegetables available at George Town\n  }\n];\n\n// Helper function to extract numeric price for sorting\nexport const getNumericPrice = (priceString: string): number => {\n  const numericValue = priceString.replace(/[₹,]/g, '').split('/')[0];\n  return parseFloat(numericValue) || 0;\n};\n\n// Function to get top N highest priced crops\nexport const getTopHighestPricedCrops = (crops: Crop[], count: number = 5): Crop[] => {\n  return [...crops]\n    .sort((a, b) => getNumericPrice(b.price) - getNumericPrice(a.price))\n    .slice(0, count);\n};","size_bytes":7347},"backend/mitra_chat_api.py":{"content":"from flask import Flask, request, jsonify\nfrom flask_cors import CORS\nfrom openai import OpenAI\nimport os\nfrom datetime import datetime\nfrom dotenv import load_dotenv\n\n# Load environment variables from .env file\nload_dotenv()\n\napp = Flask(__name__)\nCORS(app)\n\n# Set up OpenAI client\napi_key = os.getenv('OPENAI_API_KEY')  # Only use OpenAI API key\nclient = OpenAI(api_key=api_key) if api_key else None\n\n# System prompt for the farming assistant\nFARMING_SYSTEM_PROMPT = \"\"\"You are Hariyali Mitra, a knowledgeable and friendly AI farming assistant specifically designed to help farmers in India. Your role is to provide practical, accurate, and culturally relevant agricultural advice.\n\nKey guidelines:\n1. Always respond in a warm, respectful tone using simple language\n2. Provide practical, actionable advice for Indian farming conditions\n3. Consider local crops, climate, and farming practices\n4. Include seasonal considerations when relevant\n5. Mention organic/sustainable practices when appropriate\n6. If asked about medical issues with plants, provide treatment options\n7. Keep responses concise but comprehensive\n8. Use Hindi/local language terms when helpful, with English explanations\n9. Always prioritize farmer safety and sustainable practices\n\nYou can help with:\n- Crop cultivation advice\n- Pest and disease management\n- Soil health and fertilizers\n- Weather-related farming decisions\n- Market prices and selling strategies\n- Irrigation and water management\n- Organic farming methods\n- Seasonal planning\n- Equipment and tools guidance\n\nRemember: You are a helpful friend to the farmer, not just an information source.\"\"\"\n\n@app.route('/api/chat', methods=['POST'])\ndef chat():\n    try:\n        data = request.get_json()\n        user_message = data.get('message', '').strip()\n        \n        if not user_message:\n            return jsonify({'error': 'Message is required'}), 400\n        \n        if not client.api_key:\n            return jsonify({'error': 'OpenAI API key not configured'}), 500\n            \n        # Create chat completion with OpenAI\n        response = client.chat.completions.create(\n            model=\"gpt-3.5-turbo\",\n            messages=[\n                {\"role\": \"system\", \"content\": FARMING_SYSTEM_PROMPT},\n                {\"role\": \"user\", \"content\": user_message}\n            ],\n            max_tokens=500,\n            temperature=0.7\n        )\n        \n        bot_response = response.choices[0].message.content.strip()\n        \n        # Log the conversation for debugging (optional)\n        print(f\"[{datetime.now()}] User: {user_message}\")\n        print(f\"[{datetime.now()}] Bot: {bot_response}\")\n        \n        return jsonify({\n            'response': bot_response,\n            'timestamp': datetime.now().isoformat()\n        })\n        \n    except Exception as e:\n        error_str = str(e).lower()\n        if \"authentication\" in error_str:\n            return jsonify({'error': 'Invalid OpenAI API key'}), 401\n        elif \"rate_limit\" in error_str:\n            return jsonify({'error': 'API rate limit exceeded. Please try again later.'}), 429\n        elif \"openai\" in error_str:\n            return jsonify({'error': f'OpenAI API error: {str(e)}'}), 500\n        else:\n            print(f\"Error in chat endpoint: {str(e)}\")\n            return jsonify({'error': 'Internal server error'}), 500\n\n@app.route('/api/health', methods=['GET'])\ndef health_check():\n    return jsonify({\n        'status': 'healthy',\n        'service': 'Mitra Chat API',\n        'timestamp': datetime.now().isoformat(),\n        'openai_configured': bool(client.api_key)\n    })\n\nif __name__ == '__main__':\n    if not os.getenv('OPENAI_API_KEY'):\n        print(\"Warning: OPENAI_API_KEY not found in environment variables\")\n    \n    app.run(host='0.0.0.0', port=8001, debug=True)","size_bytes":3790},"backend/plant_diagnosis_api.py":{"content":"#!/usr/bin/env python3\n\nimport os\nimport requests\nfrom flask import Flask, request, jsonify, send_from_directory, send_file\nfrom flask_cors import CORS\nfrom PIL import Image\nimport base64\nimport io\nimport json\nfrom typing import Dict, List, Any\nimport google.generativeai as genai\nfrom datetime import datetime\nfrom dotenv import load_dotenv\n\n# Load environment variables from .env file\nload_dotenv()\n\n# Database imports\ntry:\n    from database import (\n        create_tables, test_connection, get_db_session,\n        create_user, get_user_by_phone, get_user_by_id,\n        create_diagnosis, get_user_diagnoses, create_user_activity,\n        User, Diagnosis\n    )\n    DATABASE_AVAILABLE = True\n    print(\"✅ Database modules imported successfully\")\nexcept ImportError as e:\n    DATABASE_AVAILABLE = False\n    print(f\"⚠️ Database not available: {e}\")\n\napp = Flask(__name__)\n\n# Configure CORS based on environment\nif os.environ.get('FLASK_ENV') == 'production':\n    # In production, restrict CORS to specific origins\n    cors_origins = os.environ.get('CORS_ORIGINS', 'https://*.replit.dev')\n    allowed_origins = cors_origins.split(',')\n    CORS(app, origins=allowed_origins, allow_headers=['Content-Type'], methods=['GET', 'POST', 'OPTIONS'])\nelse:\n    # In development, allow all origins\n    CORS(app, origins=['*'], allow_headers=['Content-Type'], methods=['GET', 'POST', 'OPTIONS'])\n\n# Hugging Face API configuration - Using your specific plant disease detection model\nHF_API_URL = \"https://api-inference.huggingface.co/models/linkanjarad/mobilenet_v2_1.0_224-plant-disease-identification\"\nHF_TOKEN = os.environ.get('HF_TOKEN')\n\n# Gemini AI client setup for chat functionality\ngemini_api_key = os.getenv('GEMINI_API_KEY')  # Only use Gemini API key\ntry:\n    if gemini_api_key:\n        genai.configure(api_key=gemini_api_key)\n        # Initialize the Gemini model\n        gemini_model = genai.GenerativeModel('gemini-pro')\n        print(\"Gemini AI client initialized successfully\")\n    else:\n        gemini_model = None\n        print(\"Warning: No Gemini API key provided\")\nexcept Exception as e:\n    print(f\"Warning: Could not initialize Gemini client: {e}\")\n    gemini_model = None\n\n# System prompt for the farming assistant\nFARMING_SYSTEM_PROMPT = \"\"\"You are Hariyali Mitra, a knowledgeable and friendly AI farming assistant specifically designed to help farmers in India. Your role is to provide practical, accurate, and culturally relevant agricultural advice.\n\nKey guidelines:\n1. Always respond in a warm, respectful tone using simple language\n2. Provide practical, actionable advice for Indian farming conditions\n3. Consider local crops, climate, and farming practices\n4. Include seasonal considerations when relevant\n5. Mention organic/sustainable practices when appropriate\n6. If asked about medical issues with plants, provide treatment options\n7. Keep responses concise but comprehensive\n8. Use Hindi/local language terms when helpful, with English explanations\n9. Always prioritize farmer safety and sustainable practices\n\nYou can help with:\n- Crop cultivation advice\n- Pest and disease management\n- Soil health and fertilizers\n- Weather-related farming decisions\n- Market prices and selling strategies\n- Irrigation and water management\n- Organic farming methods\n- Seasonal planning\n- Equipment and tools guidance\n\nRemember: You are a helpful friend to the farmer, not just an information source.\"\"\"\n\nif not HF_TOKEN:\n    print(\"Warning: HF_TOKEN not provided. API will use demo mode.\")\n\nheaders = {\"Authorization\": f\"Bearer {HF_TOKEN}\"}\n\n# Initialize database on startup\ndef initialize_database():\n    \"\"\"Initialize database tables and connection\"\"\"\n    if not DATABASE_AVAILABLE:\n        print(\"⚠️ Database not available - running without database functionality\")\n        return False\n        \n    try:\n        # Test connection first\n        if not test_connection():\n            print(\"❌ Database connection failed\")\n            return False\n            \n        # Create tables if they don't exist\n        if not create_tables():\n            print(\"❌ Failed to create database tables\")\n            return False\n            \n        print(\"✅ Database initialized successfully\")\n        return True\n        \n    except Exception as e:\n        print(f\"❌ Database initialization error: {e}\")\n        return False\n\n# Initialize database when the module loads\nDB_INITIALIZED = initialize_database()\n\ndef query_huggingface_api(image_bytes: bytes, max_retries: int = 2) -> Dict[str, Any]:\n    \"\"\"\n    Query the Hugging Face Inference API with proper format\n    \"\"\"\n    import time\n    \n    for attempt in range(max_retries + 1):\n        try:\n            # Send raw image bytes with correct content type\n            api_headers = {\n                \"Authorization\": f\"Bearer {HF_TOKEN}\",\n                \"Content-Type\": \"application/octet-stream\"  # Critical for image data!\n            }\n            \n            # Add wait-for-model header on retries\n            if attempt > 0:\n                api_headers[\"x-wait-for-model\"] = \"true\"\n            \n            response = requests.post(HF_API_URL, headers=api_headers, data=image_bytes, timeout=30)\n            response.raise_for_status()\n            return response.json()\n            \n        except requests.exceptions.RequestException as e:\n            # Log the response content for debugging\n            if hasattr(e, 'response') and e.response is not None:\n                try:\n                    error_detail = e.response.json()\n                    print(f\"HF API Error Details (attempt {attempt + 1}): {error_detail}\")\n                    \n                    # Check if it's a model loading issue\n                    if (e.response.status_code == 503 or \n                        \"'NoneType' object has no attribute\" in str(error_detail) or\n                        \"currently loading\" in str(error_detail).lower() or\n                        \"model\" in str(error_detail).lower()):\n                        \n                        if attempt < max_retries:\n                            wait_time = min((attempt + 1) * 5, 15)  # Shorter waits: 5s, 10s, 15s max\n                            print(f\"Model loading detected, waiting {wait_time}s before retry...\")\n                            time.sleep(wait_time)\n                            continue\n                    \n                    raise Exception(f\"Error calling Hugging Face API: {str(e)}. Details: {error_detail}\")\n                except Exception as parse_error:\n                    error_text = e.response.text\n                    print(f\"HF API Error Text (attempt {attempt + 1}): {error_text}\")\n                    \n                    # Check for cold start patterns in text response\n                    if (e.response.status_code == 503 or \n                        \"loading\" in error_text.lower() or\n                        \"nonetype\" in error_text.lower()):\n                        \n                        if attempt < max_retries:\n                            wait_time = (attempt + 1) * 10\n                            print(f\"Model loading detected, waiting {wait_time}s before retry...\")\n                            time.sleep(wait_time)\n                            continue\n                    \n                    raise Exception(f\"Error calling Hugging Face API: {str(e)}. Response: {error_text}\")\n            else:\n                if attempt < max_retries:\n                    print(f\"Network error (attempt {attempt + 1}), retrying...\")\n                    time.sleep(5)\n                    continue\n                raise Exception(f\"Error calling Hugging Face API: {str(e)}\")\n    \n    raise Exception(\"Max retries exceeded for Hugging Face API\")\n\ndef process_image_from_url(image_url: str) -> bytes:\n    \"\"\"\n    Download and process image from URL for MobileNetV2 224x224 model\n    \"\"\"\n    try:\n        response = requests.get(image_url, stream=True)\n        response.raise_for_status()\n        \n        # Open and process the image\n        image = Image.open(response.raw)\n        \n        # Convert to RGB if necessary\n        if image.mode != 'RGB':\n            image = image.convert('RGB')\n        \n        # CRITICAL: Resize to exactly 224x224 for MobileNetV2 model\n        image = image.resize((224, 224), Image.Resampling.LANCZOS)\n        \n        # Convert to bytes with high quality\n        img_byte_arr = io.BytesIO()\n        image.save(img_byte_arr, format='JPEG', quality=95)\n        return img_byte_arr.getvalue()\n        \n    except Exception as e:\n        raise Exception(f\"Error processing image from URL: {str(e)}\")\n\ndef process_base64_image(base64_data: str) -> bytes:\n    \"\"\"\n    Process base64 encoded image for MobileNetV2 224x224 model\n    \"\"\"\n    try:\n        # Remove data URL prefix if present\n        if ',' in base64_data:\n            base64_data = base64_data.split(',')[1]\n        \n        # Decode base64\n        image_data = base64.b64decode(base64_data)\n        \n        # Open and process the image\n        image = Image.open(io.BytesIO(image_data))\n        \n        # Convert to RGB if necessary\n        if image.mode != 'RGB':\n            image = image.convert('RGB')\n        \n        # CRITICAL: Resize to exactly 224x224 for MobileNetV2 model\n        # This model expects 224x224 input images\n        image = image.resize((224, 224), Image.Resampling.LANCZOS)\n        \n        # Convert to bytes with high quality\n        img_byte_arr = io.BytesIO()\n        image.save(img_byte_arr, format='JPEG', quality=95)\n        return img_byte_arr.getvalue()\n        \n    except Exception as e:\n        raise Exception(f\"Error processing base64 image: {str(e)}\")\n\ndef get_disease_with_highest_probability(predictions: Any) -> Dict[str, Any]:\n    \"\"\"\n    Extract the disease with highest probability from predictions\n    \"\"\"\n    # Handle different response formats from HuggingFace API\n    if isinstance(predictions, dict):\n        if 'error' in predictions:\n            return {\"error\": predictions['error']}\n        # If it's a single prediction dict, convert to list\n        predictions = [predictions]\n    \n    if not predictions or not isinstance(predictions, list):\n        return {\"error\": \"No valid predictions received\"}\n    \n    # Find the prediction with highest score\n    highest_prediction = max(predictions, key=lambda x: x.get('score', 0))\n    \n    # Get the AI prediction and convert to 100% confidence\n    highest_prediction = max(predictions, key=lambda x: x.get('score', 0))\n    disease_name = highest_prediction.get('label', 'Unknown Disease')\n    \n    # Clean up disease name - remove technical prefixes and make user-friendly\n    import re\n    clean_disease_name = re.sub(r'^LABEL_\\d+_?', '', disease_name, flags=re.IGNORECASE)\n    clean_disease_name = clean_disease_name.replace('_', ' ')\n    clean_disease_name = ' '.join(word.capitalize() for word in clean_disease_name.split())\n    \n    # Determine if healthy or not based on label\n    is_healthy = 'healthy' in disease_name.lower() or 'normal' in disease_name.lower()\n    \n    return {\n        \"disease\": clean_disease_name,\n        \"confidence\": 100,  # Always 100% as requested\n        \"status\": \"healthy\" if is_healthy else \"not_healthy\",\n        \"is_healthy\": is_healthy,\n        \"all_predictions\": [\n            {\"disease\": clean_disease_name, \"confidence\": 100}\n        ]\n    }\n\ndef get_demo_disease_result() -> Dict[str, Any]:\n    \"\"\"\n    Provide realistic disease detection results with 100% confidence\n    NOTE: This is a fallback when AI model is unavailable\n    \"\"\"\n    import random\n    \n    # Common plant diseases with realistic data\n    diseases = [\n        {\"name\": \"Tomato Late Blight\", \"healthy\": False},\n        {\"name\": \"Potato Early Blight\", \"healthy\": False},\n        {\"name\": \"Apple Scab\", \"healthy\": False},\n        {\"name\": \"Corn Northern Leaf Blight\", \"healthy\": False},\n        {\"name\": \"Grape Black Rot\", \"healthy\": False},\n        {\"name\": \"Bell Pepper Bacterial Spot\", \"healthy\": False},\n        {\"name\": \"Cucumber Mosaic Virus\", \"healthy\": False},\n        {\"name\": \"Rose Powdery Mildew\", \"healthy\": False},\n        {\"name\": \"Wheat Rust\", \"healthy\": False},\n        {\"name\": \"Healthy Plant\", \"healthy\": True}\n    ]\n    \n    # Select a random disease for demo\n    selected = random.choice(diseases)\n    \n    print(f\"WARNING: Using demo/fallback result: {selected['name']}\")\n    \n    return {\n        \"disease\": selected[\"name\"],\n        \"confidence\": 100,  # Always 100% as requested\n        \"status\": \"healthy\" if selected[\"healthy\"] else \"not_healthy\",\n        \"is_healthy\": selected[\"healthy\"],\n        \"all_predictions\": [\n            {\"disease\": selected[\"name\"], \"confidence\": 100}\n        ]\n    }\n\ndef save_diagnosis_to_db(user_id: int, crop_name: str, diagnosis: str, confidence: int, treatment: str):\n    \"\"\"Save diagnosis result to database\"\"\"\n    if not DB_INITIALIZED or not DATABASE_AVAILABLE:\n        print(\"Database not available - skipping diagnosis save\")\n        return None\n        \n    try:\n        db = get_db_session()\n        diagnosis_record = create_diagnosis(\n            db=db, \n            user_id=user_id,\n            crop_name=crop_name,\n            diagnosis=diagnosis,\n            confidence=confidence,\n            treatment=treatment,\n            date=datetime.utcnow()\n        )\n        \n        # Log the diagnosis activity\n        create_user_activity(\n            db=db,\n            user_id=user_id,\n            action=\"plant_diagnosis\",\n            data={\n                \"diagnosis_id\": diagnosis_record.id,\n                \"crop_name\": crop_name,\n                \"diagnosis\": diagnosis,\n                \"confidence\": confidence\n            }\n        )\n        \n        db.close()\n        print(f\"✅ Diagnosis saved to database with ID: {diagnosis_record.id}\")\n        return diagnosis_record\n        \n    except Exception as e:\n        print(f\"❌ Error saving diagnosis to database: {e}\")\n        return None\n\ndef get_treatment_recommendation(disease_name: str) -> str:\n    \"\"\"Generate treatment recommendation based on disease\"\"\"\n    # Basic treatment recommendations based on common diseases\n    treatments = {\n        \"late blight\": \"Apply copper-based fungicides. Remove affected leaves. Improve air circulation. Avoid overhead watering.\",\n        \"early blight\": \"Use fungicides containing chlorothalonil. Practice crop rotation. Remove plant debris after harvest.\",\n        \"powdery mildew\": \"Apply sulfur or neem oil. Increase air circulation. Avoid overhead watering. Remove affected parts.\",\n        \"bacterial spot\": \"Use copper-based bactericides. Avoid overhead irrigation. Practice crop rotation. Remove infected plants.\",\n        \"mosaic virus\": \"Remove infected plants immediately. Control aphid vectors. Use virus-resistant varieties.\",\n        \"rust\": \"Apply fungicides with propiconazole. Improve air circulation. Avoid overhead watering.\",\n        \"black rot\": \"Use copper-based fungicides. Practice crop rotation. Remove infected plant parts promptly.\",\n        \"scab\": \"Apply fungicides during wet weather. Improve air circulation. Remove fallen leaves.\",\n        \"healthy\": \"Plant appears healthy. Continue current care practices. Monitor regularly for any changes.\"\n    }\n    \n    # Find matching treatment\n    disease_lower = disease_name.lower()\n    for key, treatment in treatments.items():\n        if key in disease_lower:\n            return treatment\n    \n    # Default treatment advice\n    return \"Consult with a local agricultural expert for specific treatment recommendations. Monitor the plant closely and remove any affected parts.\"\n\n@app.route('/api/health', methods=['GET'])\ndef health_check():\n    \"\"\"Health check endpoint with live database connectivity probe\"\"\"\n    # Get live database status instead of using stale module-level flag\n    if DATABASE_AVAILABLE:\n        try:\n            db_connected = test_connection()\n            db_status = \"connected\" if db_connected else \"connection_failed\"\n        except Exception as e:\n            db_status = f\"error: {str(e)}\"\n    else:\n        db_status = \"not_available\"\n    \n    return jsonify({\n        \"status\": \"healthy\", \n        \"message\": \"Plant Diagnosis API is running\",\n        \"database\": db_status,\n        \"database_live_test\": True  # Indicates this is a live test, not cached\n    })\n\n@app.route('/health', methods=['GET'])\ndef health_check_root():\n    \"\"\"Health check endpoint at root for deployment health checks\"\"\"\n    return jsonify({\"status\": \"healthy\", \"message\": \"Plant Diagnosis API is running\"})\n\n@app.route('/api/diagnose', methods=['POST'])\ndef diagnose_plant():\n    \"\"\"\n    Main endpoint for plant disease diagnosis\n    Accepts either image_url or base64_image in the request\n    Optional: user_id and crop_name for database storage\n    \"\"\"\n    try:\n        data = request.get_json()\n        \n        if not data:\n            return jsonify({\"error\": \"No data provided\"}), 400\n        \n        # Extract optional parameters for database storage\n        user_id = data.get('user_id')\n        crop_name = data.get('crop_name', 'Unknown Crop')\n        \n        image_bytes = None\n        \n        # Process image from URL\n        if 'image_url' in data:\n            image_url = data['image_url']\n            if not image_url:\n                return jsonify({\"error\": \"image_url cannot be empty\"}), 400\n            image_bytes = process_image_from_url(image_url)\n        \n        # Process base64 image\n        elif 'base64_image' in data:\n            base64_data = data['base64_image']\n            if not base64_data:\n                return jsonify({\"error\": \"base64_image cannot be empty\"}), 400\n            print(f\"Processing base64 image, size: {len(base64_data)} chars\")\n            image_bytes = process_base64_image(base64_data)\n            print(f\"Processed image size: {len(image_bytes)} bytes\")\n        \n        else:\n            return jsonify({\"error\": \"Either image_url or base64_image must be provided\"}), 400\n        \n        # Query Hugging Face API\n        print(f\"Sending {len(image_bytes)} bytes to HF API\")\n        predictions = query_huggingface_api(image_bytes)\n        print(f\"Raw HF API response: {predictions}\")\n        \n        # Process results\n        result = get_disease_with_highest_probability(predictions)\n        print(f\"Final result: {result}\")\n        \n        # Generate treatment recommendation\n        treatment = get_treatment_recommendation(result.get('disease', ''))\n        result['treatment'] = treatment\n        \n        # Save to database if user_id is provided\n        diagnosis_record = None\n        if user_id and DB_INITIALIZED:\n            diagnosis_record = save_diagnosis_to_db(\n                user_id=user_id,\n                crop_name=crop_name,\n                diagnosis=result.get('disease', ''),\n                confidence=result.get('confidence', 0),\n                treatment=treatment\n            )\n            \n            if diagnosis_record:\n                result['diagnosis_id'] = diagnosis_record.id\n                result['saved_to_db'] = True\n            else:\n                result['saved_to_db'] = False\n        \n        return jsonify({\n            \"success\": True,\n            \"result\": result\n        })\n        \n    except Exception as e:\n        print(f\"Error in /diagnose endpoint: {str(e)}\")\n        # Provide demo result instead of error\n        demo_result = get_demo_disease_result()\n        demo_result['treatment'] = get_treatment_recommendation(demo_result.get('disease', ''))\n        return jsonify({\n            \"success\": True,\n            \"result\": demo_result,\n            \"note\": \"Demo mode - AI service temporarily unavailable\"\n        })\n\n@app.route('/api/diagnose/upload', methods=['POST'])\ndef diagnose_uploaded_file():\n    \"\"\"\n    Endpoint for direct file upload\n    Optional form data: user_id and crop_name for database storage\n    \"\"\"\n    try:\n        if 'file' not in request.files:\n            return jsonify({\"error\": \"No file uploaded\"}), 400\n        \n        file = request.files['file']\n        if file.filename == '':\n            return jsonify({\"error\": \"No file selected\"}), 400\n        \n        # Extract optional parameters for database storage\n        user_id = request.form.get('user_id')\n        crop_name = request.form.get('crop_name', 'Unknown Crop')\n        \n        # Convert user_id to int if provided\n        if user_id:\n            try:\n                user_id = int(user_id)\n            except ValueError:\n                return jsonify({\"error\": \"Invalid user_id format\"}), 400\n        \n        # Read and process the uploaded file\n        image = Image.open(file.stream)\n        \n        # Convert to RGB if necessary\n        if image.mode != 'RGB':\n            image = image.convert('RGB')\n        \n        # Resize image if too large\n        max_size = (1024, 1024)\n        if image.size[0] > max_size[0] or image.size[1] > max_size[1]:\n            image.thumbnail(max_size, Image.Resampling.LANCZOS)\n        \n        # Convert to bytes\n        img_byte_arr = io.BytesIO()\n        image.save(img_byte_arr, format='JPEG', quality=85)\n        image_bytes = img_byte_arr.getvalue()\n        \n        # Query Hugging Face API\n        predictions = query_huggingface_api(image_bytes)\n        \n        # Process results\n        result = get_disease_with_highest_probability(predictions)\n        \n        # Generate treatment recommendation\n        treatment = get_treatment_recommendation(result.get('disease', ''))\n        result['treatment'] = treatment\n        \n        # Save to database if user_id is provided\n        diagnosis_record = None\n        if user_id and DB_INITIALIZED:\n            diagnosis_record = save_diagnosis_to_db(\n                user_id=user_id,\n                crop_name=crop_name,\n                diagnosis=result.get('disease', ''),\n                confidence=result.get('confidence', 0),\n                treatment=treatment\n            )\n            \n            if diagnosis_record:\n                result['diagnosis_id'] = diagnosis_record.id\n                result['saved_to_db'] = True\n            else:\n                result['saved_to_db'] = False\n        \n        return jsonify({\n            \"success\": True,\n            \"result\": result\n        })\n        \n    except Exception as e:\n        print(f\"Error in /diagnose/upload endpoint: {str(e)}\")\n        # Provide demo result instead of error\n        demo_result = get_demo_disease_result()\n        demo_result['treatment'] = get_treatment_recommendation(demo_result.get('disease', ''))\n        return jsonify({\n            \"success\": True,\n            \"result\": demo_result,\n            \"note\": \"Demo mode - AI service temporarily unavailable\"\n        })\n\n# User Management API endpoints\n@app.route('/api/users', methods=['POST'])\ndef create_user_endpoint():\n    \"\"\"Create a new user\"\"\"\n    try:\n        if not DB_INITIALIZED or not DATABASE_AVAILABLE:\n            return jsonify({\"error\": \"Database not available\"}), 503\n            \n        data = request.get_json()\n        \n        if not data:\n            return jsonify({\"error\": \"No data provided\"}), 400\n        \n        # Validate required fields\n        required_fields = ['name', 'phone', 'location', 'state']\n        for field in required_fields:\n            if field not in data or not data[field].strip():\n                return jsonify({\"error\": f\"{field} is required\"}), 400\n        \n        db = get_db_session()\n        \n        # Check if user with this phone already exists\n        existing_user = get_user_by_phone(db, data['phone'])\n        if existing_user:\n            db.close()\n            return jsonify({\n                \"success\": True,\n                \"user\": existing_user.to_dict(),\n                \"message\": \"User already exists\"\n            })\n        \n        # Create new user\n        user = create_user(\n            db=db,\n            name=data['name'].strip(),\n            phone=data['phone'].strip(),\n            location=data['location'].strip(),\n            state=data['state'].strip(),\n            avatar=data.get('avatar')\n        )\n        \n        # Log user registration activity\n        create_user_activity(\n            db=db,\n            user_id=user.id,\n            action=\"user_registered\",\n            data={\n                \"registration_method\": \"api\",\n                \"location\": user.location,\n                \"state\": user.state\n            }\n        )\n        \n        db.close()\n        \n        return jsonify({\n            \"success\": True,\n            \"user\": user.to_dict(),\n            \"message\": \"User created successfully\"\n        })\n        \n    except Exception as e:\n        print(f\"Error creating user: {str(e)}\")\n        return jsonify({\"error\": \"Internal server error\"}), 500\n\n@app.route('/api/users/<int:user_id>', methods=['GET'])\ndef get_user_endpoint(user_id):\n    \"\"\"Get user information by ID\"\"\"\n    try:\n        if not DB_INITIALIZED or not DATABASE_AVAILABLE:\n            return jsonify({\"error\": \"Database not available\"}), 503\n            \n        db = get_db_session()\n        user = get_user_by_id(db, user_id)\n        \n        if not user:\n            db.close()\n            return jsonify({\"error\": \"User not found\"}), 404\n        \n        db.close()\n        return jsonify({\n            \"success\": True,\n            \"user\": user.to_dict()\n        })\n        \n    except Exception as e:\n        print(f\"Error getting user: {str(e)}\")\n        return jsonify({\"error\": \"Internal server error\"}), 500\n\n@app.route('/api/users/phone/<phone>', methods=['GET'])\ndef get_user_by_phone_endpoint(phone):\n    \"\"\"Get user information by phone number\"\"\"\n    try:\n        if not DB_INITIALIZED or not DATABASE_AVAILABLE:\n            return jsonify({\"error\": \"Database not available\"}), 503\n            \n        db = get_db_session()\n        user = get_user_by_phone(db, phone)\n        \n        if not user:\n            db.close()\n            return jsonify({\"error\": \"User not found\"}), 404\n        \n        db.close()\n        return jsonify({\n            \"success\": True,\n            \"user\": user.to_dict()\n        })\n        \n    except Exception as e:\n        print(f\"Error getting user by phone: {str(e)}\")\n        return jsonify({\"error\": \"Internal server error\"}), 500\n\n@app.route('/api/users/<int:user_id>/diagnoses', methods=['GET'])\ndef get_user_diagnoses_endpoint(user_id):\n    \"\"\"Get diagnosis history for a user\"\"\"\n    try:\n        if not DB_INITIALIZED or not DATABASE_AVAILABLE:\n            return jsonify({\"error\": \"Database not available\"}), 503\n            \n        # Get optional limit parameter\n        limit = request.args.get('limit', 50, type=int)\n        if limit > 100:  # Cap at 100 for performance\n            limit = 100\n            \n        db = get_db_session()\n        \n        # Check if user exists\n        user = get_user_by_id(db, user_id)\n        if not user:\n            db.close()\n            return jsonify({\"error\": \"User not found\"}), 404\n        \n        # Get user diagnoses\n        diagnoses = get_user_diagnoses(db, user_id, limit)\n        \n        diagnoses_data = [diagnosis.to_dict() for diagnosis in diagnoses]\n        \n        db.close()\n        \n        return jsonify({\n            \"success\": True,\n            \"user_id\": user_id,\n            \"diagnoses\": diagnoses_data,\n            \"count\": len(diagnoses_data)\n        })\n        \n    except Exception as e:\n        print(f\"Error getting user diagnoses: {str(e)}\")\n        return jsonify({\"error\": \"Internal server error\"}), 500\n\n# Chat API endpoint\n@app.route('/api/chat', methods=['POST'])\ndef chat():\n    try:\n        data = request.get_json()\n        user_message = data.get('message', '').strip()\n        \n        if not user_message:\n            return jsonify({'error': 'Message is required'}), 400\n        \n        if not gemini_model:\n            # Provide a helpful fallback response when Gemini is not configured\n            return jsonify({\n                'response': \"Hello! I'm Hariyali Mitra, your farming assistant. I can help you with crop cultivation, pest management, soil health, and other farming questions. However, I need proper API configuration to provide detailed responses. Please ask me about specific farming topics!\",\n                'timestamp': datetime.now().isoformat()\n            })\n            \n        # Create chat completion with Gemini\n        full_prompt = f\"{FARMING_SYSTEM_PROMPT}\\n\\nUser: {user_message}\\n\\nHariyali Mitra:\"\n        response = gemini_model.generate_content(full_prompt)\n        \n        bot_response = response.text.strip()\n        \n        # Log the conversation for debugging\n        print(f\"[{datetime.now()}] User: {user_message}\")\n        print(f\"[{datetime.now()}] Bot: {bot_response}\")\n        \n        return jsonify({\n            'response': bot_response,\n            'timestamp': datetime.now().isoformat()\n        })\n        \n    except Exception as e:\n        error_str = str(e).lower()\n        print(f\"Error in chat endpoint: {str(e)}\")\n        \n        # Provide helpful fallback response\n        return jsonify({\n            'response': \"I'm experiencing some technical difficulties right now. As your farming assistant, I'm here to help with questions about crops, soil, pests, irrigation, and sustainable farming practices. Could you please try asking your question again?\",\n            'timestamp': datetime.now().isoformat()\n        })\n\n# Gemini AI API endpoints for treatment management\n@app.route('/api/treatment/fertilizers', methods=['POST'])\ndef get_fertilizer_recommendations():\n    \"\"\"Get fertilizer recommendations using Gemini AI\"\"\"\n    try:\n        data = request.get_json()\n        if not data or 'disease' not in data:\n            return jsonify({\"error\": \"Disease name is required\"}), 400\n        \n        disease_name = data['disease']\n        \n        # Prepare Gemini API prompt for fertilizer recommendations\n        prompt = f\"\"\"\n        As an agricultural expert, provide fertilizer recommendations for treating {disease_name} in plants.\n        \n        Please provide exactly 3 fertilizer recommendations in this JSON format:\n        {{\n            \"fertilizers\": [\n                {{\n                    \"name\": \"Fertilizer name\",\n                    \"price\": \"₹XXX\",\n                    \"availability\": \"In Stock\" or \"Out of Stock\"\n                }}\n            ]\n        }}\n        \n        Focus on effective, commonly available fertilizers for treating {disease_name}.\n        \"\"\"\n        \n        try:\n            if gemini_model:\n                response = gemini_model.generate_content(prompt)\n                response_text = response.text.strip()\n                \n                # Try to extract JSON from response\n                start_idx = response_text.find('{')\n                end_idx = response_text.rfind('}') + 1\n                \n                if start_idx != -1 and end_idx > start_idx:\n                    import json\n                    fertilizer_data = json.loads(response_text[start_idx:end_idx])\n                    return jsonify({\n                        \"success\": True,\n                        \"fertilizers\": fertilizer_data.get(\"fertilizers\", [])\n                    })\n        except Exception as e:\n            print(f\"Gemini API error for fertilizers: {str(e)}\")\n        \n        # Fallback recommendations\n        fallback_fertilizers = [\n            {\"name\": \"Copper Fungicide Spray\", \"price\": \"₹450\", \"availability\": \"In Stock\"},\n            {\"name\": \"Organic Disease Control\", \"price\": \"₹320\", \"availability\": \"In Stock\"},\n            {\"name\": \"Plant Immunity Booster\", \"price\": \"₹280\", \"availability\": \"Out of Stock\"}\n        ]\n        \n        return jsonify({\n            \"success\": True,\n            \"fertilizers\": fallback_fertilizers,\n            \"note\": \"Using fallback recommendations\"\n        })\n        \n    except Exception as e:\n        print(f\"Error in fertilizer recommendations: {str(e)}\")\n        return jsonify({\"error\": \"Failed to get fertilizer recommendations\"}), 500\n\n@app.route('/api/treatment/steps', methods=['POST'])\ndef get_treatment_steps():\n    \"\"\"Get treatment steps using Gemini AI\"\"\"\n    try:\n        data = request.get_json()\n        if not data or 'disease' not in data:\n            return jsonify({\"error\": \"Disease name is required\"}), 400\n        \n        disease_name = data['disease']\n        \n        # Prepare Gemini API prompt for treatment steps\n        prompt = f\"\"\"\n        As an agricultural expert, provide treatment steps for {disease_name} in plants.\n        \n        Please provide exactly 5 treatment steps in this JSON format:\n        {{\n            \"steps\": [\n                {{\n                    \"step\": 1,\n                    \"title\": \"Step title\",\n                    \"description\": \"Detailed description of what to do\"\n                }}\n            ]\n        }}\n        \n        Focus on practical, actionable steps that farmers can easily follow to treat {disease_name}.\n        \"\"\"\n        \n        try:\n            if gemini_model:\n                response = gemini_model.generate_content(prompt)\n                response_text = response.text.strip()\n                \n                # Try to extract JSON from response\n                start_idx = response_text.find('{')\n                end_idx = response_text.rfind('}') + 1\n                \n                if start_idx != -1 and end_idx > start_idx:\n                    import json\n                    steps_data = json.loads(response_text[start_idx:end_idx])\n                    return jsonify({\n                        \"success\": True,\n                        \"steps\": steps_data.get(\"steps\", [])\n                    })\n        except Exception as e:\n            print(f\"Gemini API error for treatment steps: {str(e)}\")\n        \n        # Fallback treatment steps\n        fallback_steps = [\n            {\"step\": 1, \"title\": \"Remove Affected Parts\", \"description\": \"Carefully remove all affected leaves and stems. Dispose away from healthy plants.\"},\n            {\"step\": 2, \"title\": \"Apply Treatment\", \"description\": \"Apply appropriate fungicide or treatment as recommended. Follow label instructions.\"},\n            {\"step\": 3, \"title\": \"Improve Conditions\", \"description\": \"Improve air circulation and avoid overhead watering to prevent reinfection.\"},\n            {\"step\": 4, \"title\": \"Monitor Progress\", \"description\": \"Check daily for new symptoms. Recovery should begin within 5-7 days.\"},\n            {\"step\": 5, \"title\": \"Follow-up Care\", \"description\": \"Continue monitoring and apply follow-up treatments as needed.\"}\n        ]\n        \n        return jsonify({\n            \"success\": True,\n            \"steps\": fallback_steps,\n            \"note\": \"Using fallback treatment steps\"\n        })\n        \n    except Exception as e:\n        print(f\"Error in treatment steps: {str(e)}\")\n        return jsonify({\"error\": \"Failed to get treatment steps\"}), 500\n\n@app.route('/api/treatment/duration', methods=['POST'])\ndef get_treatment_duration():\n    \"\"\"Get treatment duration and success rate using Gemini AI\"\"\"\n    try:\n        data = request.get_json()\n        if not data or 'disease' not in data:\n            return jsonify({\"error\": \"Disease name is required\"}), 400\n        \n        disease_name = data['disease']\n        \n        # Prepare Gemini API prompt for duration and success rate\n        prompt = f\"\"\"\n        As an agricultural expert, provide treatment duration and success rate for {disease_name} in plants.\n        \n        Please provide the information in this JSON format:\n        {{\n            \"duration\": \"X-Y days\",\n            \"success_rate\": XX\n        }}\n        \n        Where duration is the expected recovery time range and success_rate is a percentage (number only).\n        Focus on realistic timeframes and success rates for treating {disease_name}.\n        \"\"\"\n        \n        try:\n            if gemini_model:\n                response = gemini_model.generate_content(prompt)\n                response_text = response.text.strip()\n                \n                # Try to extract JSON from response\n                start_idx = response_text.find('{')\n                end_idx = response_text.rfind('}') + 1\n                \n                if start_idx != -1 and end_idx > start_idx:\n                    import json\n                    duration_data = json.loads(response_text[start_idx:end_idx])\n                    return jsonify({\n                        \"success\": True,\n                        \"duration\": duration_data.get(\"duration\", \"14-21 days\"),\n                        \"success_rate\": duration_data.get(\"success_rate\", 85)\n                    })\n        except Exception as e:\n            print(f\"Gemini API error for duration: {str(e)}\")\n        \n        # Fallback data\n        return jsonify({\n            \"success\": True,\n            \"duration\": \"14-21 days\",\n            \"success_rate\": 87,\n            \"note\": \"Using fallback duration data\"\n        })\n        \n    except Exception as e:\n        print(f\"Error in treatment duration: {str(e)}\")\n        return jsonify({\"error\": \"Failed to get treatment duration\"}), 500\n\n@app.route('/api/treatments', methods=['GET', 'POST'])\ndef manage_treatments():\n    \"\"\"Manage active treatments - GET to list, POST to create\"\"\"\n    if request.method == 'GET':\n        # Get treatments from localStorage (frontend manages this)\n        # This endpoint could be enhanced to store in database\n        return jsonify({\n            \"success\": True,\n            \"message\": \"Treatments are managed on frontend via localStorage\"\n        })\n    \n    elif request.method == 'POST':\n        # Create new treatment\n        try:\n            data = request.get_json()\n            if not data:\n                return jsonify({\"error\": \"No treatment data provided\"}), 400\n            \n            # For now, return success as frontend handles storage\n            return jsonify({\n                \"success\": True,\n                \"message\": \"Treatment created successfully\",\n                \"treatment_id\": str(int(datetime.now().timestamp()))\n            })\n            \n        except Exception as e:\n            print(f\"Error creating treatment: {str(e)}\")\n            return jsonify({\"error\": \"Failed to create treatment\"}), 500\n\n# Static file serving for production\n# Get absolute path to dist directory\nimport os\ndist_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'dist'))\n\n@app.route('/')\ndef serve_index():\n    \"\"\"Serve the React app's index.html\"\"\"\n    try:\n        return send_file(os.path.join(dist_dir, 'index.html'))\n    except FileNotFoundError:\n        return jsonify({\"error\": \"Frontend not built. Run 'npm run build' first.\"}), 404\n\n@app.route('/<path:filename>')\ndef serve_static(filename):\n    \"\"\"Serve static files from the React build\"\"\"\n    try:\n        return send_from_directory(dist_dir, filename)\n    except FileNotFoundError:\n        # For SPA routing, serve index.html for unknown routes\n        try:\n            return send_file(os.path.join(dist_dir, 'index.html'))\n        except FileNotFoundError:\n            return jsonify({\"error\": \"Frontend not built. Run 'npm run build' first.\"}), 404\n\nif __name__ == '__main__':\n    if not gemini_api_key:\n        print(\"Warning: Gemini API key not found in environment variables - chat will use fallback responses\")\n    \n    # Run the Flask app\n    # In production on Replit, use port 5000 (single server for both API and static files)\n    # In development, use port 8000 to avoid conflict with Vite dev server on 5000\n    is_production = os.environ.get('FLASK_ENV') == 'production'\n    port = int(os.environ.get('PORT', 5000 if is_production else 8000))\n    debug_mode = not is_production\n    \n    if is_production:\n        print(\"🚀 Starting production server on port 5000 - serving both API and static files\")\n    else:\n        print(\"🔧 Starting development server on port 8000\")\n    \n    app.run(host='0.0.0.0', port=port, debug=debug_mode)","size_bytes":39961},"backend/database/__init__.py":{"content":"#!/usr/bin/env python3\n\nfrom .models import (\n    Base,\n    User,\n    Listing, \n    Diagnosis,\n    AdvisoryRecord,\n    UserActivity,\n    create_tables,\n    get_db,\n    get_db_session,\n    create_user,\n    get_user_by_phone,\n    get_user_by_id,\n    create_diagnosis,\n    get_user_diagnoses,\n    create_user_activity,\n    test_connection\n)\n\n__all__ = [\n    'Base',\n    'User',\n    'Listing',\n    'Diagnosis', \n    'AdvisoryRecord',\n    'UserActivity',\n    'create_tables',\n    'get_db',\n    'get_db_session',\n    'create_user',\n    'get_user_by_phone',\n    'get_user_by_id',\n    'create_diagnosis',\n    'get_user_diagnoses',\n    'create_user_activity',\n    'test_connection'\n]","size_bytes":674},"backend/database/init_db.py":{"content":"#!/usr/bin/env python3\n\nimport os\nimport sys\nfrom datetime import datetime\n\n# Add the parent directory to Python path so we can import models\nsys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\nfrom database.models import create_tables, test_connection, get_db_session, create_user, create_user_activity\n\ndef init_database():\n    \"\"\"Initialize the database with tables and sample data if needed\"\"\"\n    print(\"Initializing database...\")\n    \n    # Test database connection first\n    if not test_connection():\n        print(\"❌ Database connection failed. Please check your DATABASE_URL.\")\n        return False\n    \n    print(\"✅ Database connection successful\")\n    \n    # Create tables\n    if not create_tables():\n        print(\"❌ Failed to create database tables\")\n        return False\n    \n    print(\"✅ Database tables created successfully\")\n    \n    # Create a sample user for testing if none exists\n    try:\n        db = get_db_session()\n        \n        # Check if we have any users\n        from database.models import User\n        existing_users = db.query(User).count()\n        \n        if existing_users == 0:\n            print(\"Creating sample user for testing...\")\n            \n            sample_user = create_user(\n                db=db,\n                name=\"Test Farmer\",\n                phone=\"+919876543210\",\n                location=\"Test Village\",\n                state=\"Maharashtra\",\n                avatar=None\n            )\n            \n            # Log the user creation activity\n            create_user_activity(\n                db=db,\n                user_id=sample_user.id,\n                action=\"user_registered\",\n                data={\"registration_method\": \"system_init\", \"test_user\": True}\n            )\n            \n            print(f\"✅ Sample user created with ID: {sample_user.id}\")\n        else:\n            print(f\"✅ Database already has {existing_users} users\")\n            \n        db.close()\n        \n    except Exception as e:\n        print(f\"❌ Error creating sample data: {e}\")\n        return False\n    \n    print(\"🎉 Database initialization completed successfully!\")\n    return True\n\ndef reset_database():\n    \"\"\"Drop all tables and recreate them (WARNING: This will delete all data!)\"\"\"\n    print(\"⚠️  WARNING: This will delete all data in the database!\")\n    confirm = input(\"Are you sure you want to continue? (yes/no): \")\n    \n    if confirm.lower() != 'yes':\n        print(\"Operation cancelled.\")\n        return False\n    \n    try:\n        from database.models import Base, engine\n        \n        print(\"Dropping all tables...\")\n        Base.metadata.drop_all(bind=engine)\n        print(\"✅ All tables dropped\")\n        \n        print(\"Recreating tables...\")\n        Base.metadata.create_all(bind=engine)\n        print(\"✅ All tables recreated\")\n        \n        print(\"🎉 Database reset completed successfully!\")\n        return True\n        \n    except Exception as e:\n        print(f\"❌ Error resetting database: {e}\")\n        return False\n\nif __name__ == '__main__':\n    import argparse\n    \n    parser = argparse.ArgumentParser(description='Database management utility')\n    parser.add_argument('command', choices=['init', 'reset'], help='Command to run')\n    \n    args = parser.parse_args()\n    \n    if args.command == 'init':\n        success = init_database()\n        sys.exit(0 if success else 1)\n    elif args.command == 'reset':\n        success = reset_database()\n        sys.exit(0 if success else 1)","size_bytes":3508},"backend/database/models.py":{"content":"#!/usr/bin/env python3\n\nfrom sqlalchemy import create_engine, Column, Integer, String, Text, DateTime, Boolean, Numeric, ForeignKey, JSON, text\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker, relationship\nfrom sqlalchemy.dialects.postgresql import UUID\nfrom datetime import datetime\nimport uuid\nimport os\nfrom dotenv import load_dotenv\n\n# Load environment variables from .env file\nload_dotenv()\n\nBase = declarative_base()\n\nclass User(Base):\n    __tablename__ = 'users'\n    \n    id = Column(Integer, primary_key=True)\n    name = Column(String(255), nullable=False)\n    phone = Column(String(20), unique=True, nullable=False)\n    location = Column(String(255), nullable=False)\n    state = Column(String(100), nullable=False)\n    avatar = Column(Text)\n    joined_date = Column(DateTime, default=datetime.utcnow, nullable=False)\n    created_at = Column(DateTime, default=datetime.utcnow, nullable=False)\n    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow, nullable=False)\n    \n    # Relationships\n    listings = relationship(\"Listing\", back_populates=\"user\", cascade=\"all, delete-orphan\")\n    diagnoses = relationship(\"Diagnosis\", back_populates=\"user\", cascade=\"all, delete-orphan\")\n    advisory_records = relationship(\"AdvisoryRecord\", back_populates=\"user\", cascade=\"all, delete-orphan\")\n    activities = relationship(\"UserActivity\", back_populates=\"user\", cascade=\"all, delete-orphan\")\n    \n    def to_dict(self):\n        return {\n            'id': self.id,\n            'name': self.name,\n            'phone': self.phone,\n            'location': self.location,\n            'state': self.state,\n            'avatar': self.avatar,\n            'joined_date': self.joined_date.isoformat() if self.joined_date else None,\n            'created_at': self.created_at.isoformat() if self.created_at else None,\n            'updated_at': self.updated_at.isoformat() if self.updated_at else None\n        }\n\nclass Listing(Base):\n    __tablename__ = 'listings'\n    \n    id = Column(Integer, primary_key=True)\n    user_id = Column(Integer, ForeignKey('users.id'), nullable=False)\n    crop = Column(String(100), nullable=False)\n    quantity = Column(String(50), nullable=False)\n    price_per_kg = Column(Numeric(10, 2), nullable=False)\n    market = Column(String(255), nullable=False)\n    transport = Column(String(10), nullable=False)\n    views = Column(Integer, default=0, nullable=False)\n    inquiries = Column(Integer, default=0, nullable=False)\n    total_price = Column(Numeric(12, 2), nullable=False)\n    status = Column(String(20), default='active', nullable=False)  # active, sold, expired\n    posted_date = Column(String(50), nullable=False)\n    sold_date = Column(DateTime)\n    sold_price = Column(Numeric(12, 2))\n    buyer = Column(String(255))\n    created_at = Column(DateTime, default=datetime.utcnow, nullable=False)\n    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow, nullable=False)\n    \n    # Relationships\n    user = relationship(\"User\", back_populates=\"listings\")\n    \n    def to_dict(self):\n        return {\n            'id': self.id,\n            'user_id': self.user_id,\n            'crop': self.crop,\n            'quantity': self.quantity,\n            'price_per_kg': float(self.price_per_kg) if self.price_per_kg else None,\n            'market': self.market,\n            'transport': self.transport,\n            'views': self.views,\n            'inquiries': self.inquiries,\n            'total_price': float(self.total_price) if self.total_price else None,\n            'status': self.status,\n            'posted_date': self.posted_date,\n            'sold_date': self.sold_date.isoformat() if self.sold_date else None,\n            'sold_price': float(self.sold_price) if self.sold_price else None,\n            'buyer': self.buyer,\n            'created_at': self.created_at.isoformat() if self.created_at else None,\n            'updated_at': self.updated_at.isoformat() if self.updated_at else None\n        }\n\nclass Diagnosis(Base):\n    __tablename__ = 'diagnoses'\n    \n    id = Column(Integer, primary_key=True)\n    user_id = Column(Integer, ForeignKey('users.id'), nullable=False)\n    crop_name = Column(String(100), nullable=False)\n    diagnosis = Column(Text, nullable=False)\n    confidence = Column(Integer, nullable=False)\n    treatment = Column(Text, nullable=False)\n    date = Column(DateTime, nullable=False)\n    created_at = Column(DateTime, default=datetime.utcnow, nullable=False)\n    \n    # Relationships\n    user = relationship(\"User\", back_populates=\"diagnoses\")\n    \n    def to_dict(self):\n        return {\n            'id': self.id,\n            'user_id': self.user_id,\n            'crop_name': self.crop_name,\n            'diagnosis': self.diagnosis,\n            'confidence': self.confidence,\n            'treatment': self.treatment,\n            'date': self.date.isoformat() if self.date else None,\n            'created_at': self.created_at.isoformat() if self.created_at else None\n        }\n\nclass AdvisoryRecord(Base):\n    __tablename__ = 'advisory_records'\n    \n    id = Column(Integer, primary_key=True)\n    user_id = Column(Integer, ForeignKey('users.id'), nullable=False)\n    title = Column(String(255), nullable=False)\n    content = Column(Text, nullable=False)\n    category = Column(String(100), nullable=False)\n    saved_date = Column(DateTime, default=datetime.utcnow, nullable=False)\n    created_at = Column(DateTime, default=datetime.utcnow, nullable=False)\n    \n    # Relationships\n    user = relationship(\"User\", back_populates=\"advisory_records\")\n    \n    def to_dict(self):\n        return {\n            'id': self.id,\n            'user_id': self.user_id,\n            'title': self.title,\n            'content': self.content,\n            'category': self.category,\n            'saved_date': self.saved_date.isoformat() if self.saved_date else None,\n            'created_at': self.created_at.isoformat() if self.created_at else None\n        }\n\nclass UserActivity(Base):\n    __tablename__ = 'user_activities'\n    \n    id = Column(Integer, primary_key=True)\n    user_id = Column(Integer, ForeignKey('users.id'), nullable=False)\n    action = Column(String(100), nullable=False)\n    data = Column(JSON)\n    timestamp = Column(DateTime, default=datetime.utcnow, nullable=False)\n    \n    # Relationships\n    user = relationship(\"User\", back_populates=\"activities\")\n    \n    def to_dict(self):\n        return {\n            'id': self.id,\n            'user_id': self.user_id,\n            'action': self.action,\n            'data': self.data,\n            'timestamp': self.timestamp.isoformat() if self.timestamp else None\n        }\n\n# Database configuration and session management\nDATABASE_URL = os.environ.get('DATABASE_URL')\n\n# Global variables for database engine and session\nengine = None\nSessionLocal = None\nDB_AVAILABLE = False\n\ndef _ensure_ssl_in_database_url(database_url: str) -> str:\n    \"\"\"Ensure DATABASE_URL includes proper SSL configuration for Supabase\"\"\"\n    if not database_url:\n        return database_url\n    \n    # Add SSL mode for Supabase/PostgreSQL if not present\n    if 'sslmode=' not in database_url.lower():\n        connector = '&' if '?' in database_url else '?'\n        database_url += f'{connector}sslmode=require'\n    \n    return database_url\n\ndef _initialize_database():\n    \"\"\"Initialize database connection with proper error handling\"\"\"\n    global engine, SessionLocal, DB_AVAILABLE\n    \n    if not DATABASE_URL:\n        print(\"⚠️ DATABASE_URL not provided - running without database functionality\")\n        DB_AVAILABLE = False\n        return False\n    \n    try:\n        # Ensure SSL configuration for Supabase\n        ssl_database_url = _ensure_ssl_in_database_url(DATABASE_URL)\n        \n        # Create engine with SSL and connection pooling\n        engine = create_engine(\n            ssl_database_url,\n            pool_size=10,\n            max_overflow=20,\n            pool_recycle=3600,\n            pool_pre_ping=True,  # Enable connection health checks\n            echo=False  # Set to True for SQL debugging\n        )\n        \n        # Create session factory\n        SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n        \n        # Test the connection\n        test_db = SessionLocal()\n        test_db.execute(text(\"SELECT 1\"))\n        test_db.close()\n        \n        DB_AVAILABLE = True\n        print(\"✅ Database connection initialized successfully\")\n        return True\n        \n    except Exception as e:\n        print(f\"⚠️ Database initialization failed: {e}\")\n        print(\"⚠️ Running without database functionality\")\n        DB_AVAILABLE = False\n        engine = None\n        SessionLocal = None\n        return False\n\n# Initialize database on module import\n_initialize_database()\n\ndef create_tables():\n    \"\"\"Create all tables in the database\"\"\"\n    if not DB_AVAILABLE or not engine:\n        print(\"⚠️ Database not available - cannot create tables\")\n        return False\n        \n    try:\n        Base.metadata.create_all(bind=engine)\n        print(\"Database tables created successfully\")\n        return True\n    except Exception as e:\n        print(f\"Error creating database tables: {e}\")\n        return False\n\ndef get_db():\n    \"\"\"Get database session (for FastAPI dependency injection)\"\"\"\n    if not DB_AVAILABLE or not SessionLocal:\n        raise RuntimeError(\"Database not available\")\n        \n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\ndef get_db_session():\n    \"\"\"Get database session for direct use\"\"\"\n    if not DB_AVAILABLE or not SessionLocal:\n        return None\n    return SessionLocal()\n\ndef is_database_available() -> bool:\n    \"\"\"Check if database is available\"\"\"\n    return DB_AVAILABLE\n\n# Helper functions for database operations\ndef _validate_user_input(name: str, phone: str, location: str, state: str) -> list:\n    \"\"\"Validate user input parameters\"\"\"\n    errors = []\n    \n    # Validate name\n    if not name or not name.strip():\n        errors.append(\"Name is required\")\n    elif len(name.strip()) < 2:\n        errors.append(\"Name must be at least 2 characters long\")\n    elif len(name.strip()) > 255:\n        errors.append(\"Name must be less than 255 characters\")\n    \n    # Validate phone\n    if not phone or not phone.strip():\n        errors.append(\"Phone number is required\")\n    else:\n        phone_clean = phone.strip().replace(' ', '').replace('-', '').replace('(', '').replace(')', '')\n        if not phone_clean.startswith('+'):\n            if phone_clean.startswith('91') and len(phone_clean) == 12:\n                # Indian number without +\n                pass\n            elif len(phone_clean) == 10:\n                # 10 digit number\n                pass\n            else:\n                errors.append(\"Phone number must be a valid format (10 digits or +91xxxxxxxxxx)\")\n        elif len(phone_clean) < 10 or len(phone_clean) > 15:\n            errors.append(\"Phone number must be between 10-15 digits\")\n    \n    # Validate location\n    if not location or not location.strip():\n        errors.append(\"Location is required\")\n    elif len(location.strip()) > 255:\n        errors.append(\"Location must be less than 255 characters\")\n    \n    # Validate state\n    if not state or not state.strip():\n        errors.append(\"State is required\")\n    elif len(state.strip()) > 100:\n        errors.append(\"State must be less than 100 characters\")\n    \n    return errors\n\ndef create_user(db, name: str, phone: str, location: str, state: str, avatar: str = None) -> User:\n    \"\"\"Create a new user with proper validation and error handling\"\"\"\n    if not db:\n        raise RuntimeError(\"Database session not available\")\n    \n    # Validate input\n    validation_errors = _validate_user_input(name, phone, location, state)\n    if validation_errors:\n        raise ValueError(f\"Validation errors: {', '.join(validation_errors)}\")\n    \n    try:\n        user = User(\n            name=name.strip(),\n            phone=phone.strip(),\n            location=location.strip(),\n            state=state.strip(),\n            avatar=avatar\n        )\n        db.add(user)\n        db.commit()\n        db.refresh(user)\n        \n        # Create a detached copy of the user object that can be used outside the session\n        user_copy = User(\n            id=user.id,\n            name=user.name,\n            phone=user.phone,\n            location=user.location,\n            state=user.state,\n            avatar=user.avatar,\n            joined_date=user.joined_date,\n            created_at=user.created_at,\n            updated_at=user.updated_at\n        )\n        return user_copy\n        \n    except Exception as e:\n        try:\n            db.rollback()\n        except:\n            pass  # Rollback might fail if connection is lost\n        \n        # Handle specific database errors\n        if 'unique constraint' in str(e).lower() or 'duplicate key' in str(e).lower():\n            raise ValueError(f\"A user with phone number {phone} already exists\")\n        else:\n            raise RuntimeError(f\"Database error: {str(e)}\")\n\ndef get_user_by_phone(db, phone: str) -> User:\n    \"\"\"Get user by phone number with proper error handling\"\"\"\n    if not db:\n        return None\n    if not phone or not phone.strip():\n        return None\n        \n    try:\n        return db.query(User).filter(User.phone == phone.strip()).first()\n    except Exception as e:\n        print(f\"Error querying user by phone: {e}\")\n        return None\n\ndef get_user_by_id(db, user_id: int) -> User:\n    \"\"\"Get user by ID with proper error handling\"\"\"\n    if not db:\n        return None\n    if not user_id or user_id <= 0:\n        return None\n        \n    try:\n        return db.query(User).filter(User.id == user_id).first()\n    except Exception as e:\n        print(f\"Error querying user by ID: {e}\")\n        return None\n\ndef create_diagnosis(db, user_id: int, crop_name: str, diagnosis: str, \n                    confidence: int, treatment: str, date: datetime = None) -> Diagnosis:\n    \"\"\"Create a new diagnosis record with proper error handling\"\"\"\n    if not db:\n        raise RuntimeError(\"Database session not available\")\n    \n    # Validate input\n    if not user_id or user_id <= 0:\n        raise ValueError(\"Valid user_id is required\")\n    if not crop_name or not crop_name.strip():\n        raise ValueError(\"Crop name is required\")\n    if not diagnosis or not diagnosis.strip():\n        raise ValueError(\"Diagnosis is required\")\n    if confidence < 0 or confidence > 100:\n        raise ValueError(\"Confidence must be between 0 and 100\")\n    if not treatment or not treatment.strip():\n        raise ValueError(\"Treatment is required\")\n    \n    try:\n        if date is None:\n            date = datetime.utcnow()\n            \n        diagnosis_record = Diagnosis(\n            user_id=user_id,\n            crop_name=crop_name.strip(),\n            diagnosis=diagnosis.strip(),\n            confidence=confidence,\n            treatment=treatment.strip(),\n            date=date\n        )\n        db.add(diagnosis_record)\n        db.commit()\n        db.refresh(diagnosis_record)\n        \n        # Create a detached copy\n        diagnosis_copy = Diagnosis(\n            id=diagnosis_record.id,\n            user_id=diagnosis_record.user_id,\n            crop_name=diagnosis_record.crop_name,\n            diagnosis=diagnosis_record.diagnosis,\n            confidence=diagnosis_record.confidence,\n            treatment=diagnosis_record.treatment,\n            date=diagnosis_record.date,\n            created_at=diagnosis_record.created_at\n        )\n        return diagnosis_copy\n        \n    except Exception as e:\n        try:\n            db.rollback()\n        except:\n            pass  # Rollback might fail if connection is lost\n        raise RuntimeError(f\"Database error: {str(e)}\")\n\ndef get_user_diagnoses(db, user_id: int, limit: int = 50):\n    \"\"\"Get recent diagnoses for a user with proper error handling\"\"\"\n    if not db:\n        return []\n    if not user_id or user_id <= 0:\n        return []\n    if limit <= 0:\n        limit = 50\n        \n    try:\n        return db.query(Diagnosis).filter(Diagnosis.user_id == user_id)\\\n                 .order_by(Diagnosis.created_at.desc()).limit(limit).all()\n    except Exception as e:\n        print(f\"Error querying user diagnoses: {e}\")\n        return []\n\ndef create_user_activity(db, user_id: int, action: str, data: dict = None):\n    \"\"\"Log user activity with proper error handling\"\"\"\n    if not db:\n        raise RuntimeError(\"Database session not available\")\n    \n    # Validate input\n    if not user_id or user_id <= 0:\n        raise ValueError(\"Valid user_id is required\")\n    if not action or not action.strip():\n        raise ValueError(\"Action is required\")\n    \n    try:\n        activity = UserActivity(\n            user_id=user_id,\n            action=action.strip(),\n            data=data\n        )\n        db.add(activity)\n        db.commit()\n        db.refresh(activity)\n        return activity\n        \n    except Exception as e:\n        try:\n            db.rollback()\n        except:\n            pass  # Rollback might fail if connection is lost\n        raise RuntimeError(f\"Database error: {str(e)}\")\n\ndef test_connection():\n    \"\"\"Test live database connection\"\"\"\n    if not DB_AVAILABLE:\n        return False\n        \n    db = None\n    try:\n        db = get_db_session()\n        if not db:\n            return False\n            \n        # Simple query to test connection\n        result = db.execute(text(\"SELECT 1\")).fetchone()\n        return result is not None\n        \n    except Exception as e:\n        print(f\"Database connection test failed: {e}\")\n        return False\n    finally:\n        if db:\n            try:\n                db.close()\n            except:\n                pass  # Ignore close errors","size_bytes":17820},"src/hooks/useGeolocation.tsx":{"content":"import { useState, useCallback, useEffect } from 'react';\n\ninterface LocationData {\n  latitude: number;\n  longitude: number;\n  accuracy?: number;\n  timestamp?: number;\n}\n\ninterface UseGeolocationReturn {\n  location: LocationData | null;\n  error: string | null;\n  loading: boolean;\n  getLocation: () => void;\n}\n\nexport const useGeolocation = (): UseGeolocationReturn => {\n  const [location, setLocation] = useState<LocationData | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  const [loading, setLoading] = useState(true); // Start with loading to avoid flicker\n\n  const getLocation = useCallback(() => {\n    setLoading(true);\n    setError(null);\n\n    // Check if geolocation is supported\n    if (!navigator.geolocation) {\n      setError('Geolocation is not supported by this browser');\n      setLoading(false);\n      return;\n    }\n\n    // Get current position\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        const { latitude, longitude, accuracy } = position.coords;\n        setLocation({\n          latitude,\n          longitude,\n          accuracy,\n          timestamp: position.timestamp\n        });\n        setLoading(false);\n      },\n      (err) => {\n        let errorMessage = 'Unable to get location';\n        switch (err.code) {\n          case err.PERMISSION_DENIED:\n            errorMessage = 'Location access denied by user';\n            break;\n          case err.POSITION_UNAVAILABLE:\n            errorMessage = 'Location information unavailable';\n            break;\n          case err.TIMEOUT:\n            errorMessage = 'Location request timed out';\n            break;\n          default:\n            errorMessage = 'Unknown location error occurred';\n            break;\n        }\n        setError(errorMessage);\n        setLoading(false);\n      },\n      {\n        enableHighAccuracy: true,\n        timeout: 15000,\n        maximumAge: 300000 // 5 minutes\n      }\n    );\n  }, []);\n\n  // Automatically get location on mount\n  useEffect(() => {\n    getLocation();\n  }, [getLocation]);\n\n  return { location, error, loading, getLocation };\n};\n\n// Calculate distance between two points using Haversine formula\nexport const calculateDistance = (\n  lat1: number,\n  lon1: number,\n  lat2: number,\n  lon2: number\n): number => {\n  const R = 6371; // Earth's radius in kilometers\n  const dLat = (lat2 - lat1) * Math.PI / 180;\n  const dLon = (lon2 - lon1) * Math.PI / 180;\n  \n  const a = \n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\n    Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  \n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  const distance = R * c;\n  \n  return distance;\n};\n\n// Format distance for display\nexport const formatDistance = (distanceInKm: number): string => {\n  if (distanceInKm < 1) {\n    return `${Math.round(distanceInKm * 1000)} m`;\n  } else {\n    return `${distanceInKm.toFixed(1)} km`;\n  }\n};","size_bytes":2951},"src/hooks/useNotifications.tsx":{"content":"import { useState, useEffect, createContext, useContext, ReactNode } from 'react';\n\ninterface NotificationContextType {\n  notificationSettings: { [marketId: string]: boolean };\n  toggleNotification: (marketId: string) => void;\n  isNotificationEnabled: (marketId: string) => boolean;\n}\n\nconst NotificationContext = createContext<NotificationContextType | undefined>(undefined);\n\nexport const useNotifications = () => {\n  const context = useContext(NotificationContext);\n  if (!context) {\n    throw new Error('useNotifications must be used within a NotificationProvider');\n  }\n  return context;\n};\n\ninterface NotificationProviderProps {\n  children: ReactNode;\n}\n\nexport const NotificationProvider = ({ children }: NotificationProviderProps) => {\n  const [notificationSettings, setNotificationSettings] = useState<{ [marketId: string]: boolean }>({});\n\n  // Load notification settings from localStorage on mount\n  useEffect(() => {\n    const savedSettings = localStorage.getItem('market-notifications');\n    if (savedSettings) {\n      try {\n        setNotificationSettings(JSON.parse(savedSettings));\n      } catch (error) {\n        console.error('Failed to parse notification settings:', error);\n      }\n    }\n  }, []);\n\n  // Save notification settings to localStorage whenever they change\n  useEffect(() => {\n    localStorage.setItem('market-notifications', JSON.stringify(notificationSettings));\n  }, [notificationSettings]);\n\n  const toggleNotification = (marketId: string) => {\n    setNotificationSettings(prev => ({\n      ...prev,\n      [marketId]: !prev[marketId]\n    }));\n  };\n\n  const isNotificationEnabled = (marketId: string) => {\n    return notificationSettings[marketId] || false;\n  };\n\n  const value = {\n    notificationSettings,\n    toggleNotification,\n    isNotificationEnabled\n  };\n\n  return (\n    <NotificationContext.Provider value={value}>\n      {children}\n    </NotificationContext.Provider>\n  );\n};","size_bytes":1917},"src/pages/Notifications.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { ArrowLeft, Bell, Package, TrendingUp, AlertCircle, CheckCircle, Clock, MessageCircle, Trash2, CheckCheck, MoreVertical, Settings, Search } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { \n  DropdownMenu, \n  DropdownMenuContent, \n  DropdownMenuItem, \n  DropdownMenuTrigger \n} from '@/components/ui/dropdown-menu';\n\ninterface Notification {\n  id: number;\n  type: string;\n  title: string;\n  message: string;\n  time: string;\n  date: string;\n  icon: React.ElementType;\n  iconColor: string;\n  bgColor: string;\n  unread: boolean;\n  actionable?: boolean;\n  actions?: Array<{\n    label: string;\n    action: string;\n    variant?: 'default' | 'success' | 'danger';\n  }>;\n}\n\nconst Notifications = () => {\n  const navigate = useNavigate();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedFilter, setSelectedFilter] = useState('all');\n  \n  const [notifications, setNotifications] = useState<Notification[]>([\n    {\n      id: 1,\n      type: 'market_request',\n      title: 'Order Confirmed!',\n      message: 'FreshMart accepted your tomatoes order for ₹1,200. Expected delivery: Tomorrow',\n      time: '2m',\n      date: 'today',\n      icon: CheckCircle,\n      iconColor: 'text-green-600',\n      bgColor: 'bg-green-50',\n      unread: true,\n      actionable: true,\n      actions: [\n        { label: 'Track Order', action: 'track', variant: 'default' },\n        { label: 'Contact Buyer', action: 'contact', variant: 'success' }\n      ]\n    },\n    {\n      id: 2,\n      type: 'price_alert',\n      title: 'Price Alert 📈',\n      message: 'Wheat prices jumped ₹5/kg in Pune market. Current rate: ₹32/kg',\n      time: '15m',\n      date: 'today',\n      icon: TrendingUp,\n      iconColor: 'text-blue-600',\n      bgColor: 'bg-blue-50',\n      unread: true,\n      actionable: true,\n      actions: [\n        { label: 'View Market', action: 'market', variant: 'default' },\n        { label: 'Sell Now', action: 'sell', variant: 'success' }\n      ]\n    },\n    {\n      id: 3,\n      type: 'treatment_reminder',\n      title: 'Treatment Reminder ⏰',\n      message: 'Apply fungicide spray to wheat crop - Block A, Field 2',\n      time: '1h',\n      date: 'today',\n      icon: AlertCircle,\n      iconColor: 'text-orange-600',\n      bgColor: 'bg-orange-50',\n      unread: true,\n      actionable: true,\n      actions: [\n        { label: 'Mark Done', action: 'complete', variant: 'success' },\n        { label: 'Reschedule', action: 'reschedule', variant: 'default' }\n      ]\n    },\n    {\n      id: 4,\n      type: 'weather_alert',\n      title: 'Weather Alert ⛈️',\n      message: 'Heavy rain expected tomorrow 6-8 PM. Secure your harvest and equipment',\n      time: '2h',\n      date: 'today',\n      icon: AlertCircle,\n      iconColor: 'text-red-600',\n      bgColor: 'bg-red-50',\n      unread: false,\n      actionable: true,\n      actions: [\n        { label: 'View Weather', action: 'weather', variant: 'default' },\n        { label: 'Set Reminder', action: 'remind', variant: 'default' }\n      ]\n    },\n    {\n      id: 5,\n      type: 'order_delivered',\n      title: 'Delivery Completed ✅',\n      message: 'Your organic fertilizer order has been delivered successfully to Farm Gate #2',\n      time: '4h',\n      date: 'today',\n      icon: Package,\n      iconColor: 'text-green-600',\n      bgColor: 'bg-green-50',\n      unread: false,\n      actionable: true,\n      actions: [\n        { label: 'Rate Order', action: 'rate', variant: 'default' },\n        { label: 'Reorder', action: 'reorder', variant: 'success' }\n      ]\n    },\n    {\n      id: 6,\n      type: 'buyer_inquiry',\n      title: 'New Buyer Message 💬',\n      message: 'Rohit Farms is interested in your organic green chilies. They want to place bulk order.',\n      time: '6h',\n      date: 'today',\n      icon: MessageCircle,\n      iconColor: 'text-purple-600',\n      bgColor: 'bg-purple-50',\n      unread: false,\n      actionable: true,\n      actions: [\n        { label: 'Reply', action: 'reply', variant: 'default' },\n        { label: 'Call', action: 'call', variant: 'success' }\n      ]\n    },\n    {\n      id: 7,\n      type: 'system_update',\n      title: 'App Update Available 🚀',\n      message: 'Version 2.1.0 is ready with new crop disease detection features',\n      time: '1d',\n      date: 'yesterday',\n      icon: Bell,\n      iconColor: 'text-indigo-600',\n      bgColor: 'bg-indigo-50',\n      unread: false,\n      actionable: true,\n      actions: [\n        { label: 'Update Now', action: 'update', variant: 'success' },\n        { label: 'Later', action: 'later', variant: 'default' }\n      ]\n    },\n    {\n      id: 8,\n      type: 'community_post',\n      title: 'Community Activity 👥',\n      message: 'Dr. Kumar shared a new guide: \"Organic Pest Control Methods for Winter Crops\"',\n      time: '2d',\n      date: 'yesterday',\n      icon: MessageCircle,\n      iconColor: 'text-teal-600',\n      bgColor: 'bg-teal-50',\n      unread: false,\n      actionable: true,\n      actions: [\n        { label: 'Read Guide', action: 'read', variant: 'default' },\n        { label: 'Save', action: 'save', variant: 'default' }\n      ]\n    }\n  ]);\n\n  // Load from localStorage\n  useEffect(() => {\n    const saved = localStorage.getItem('kisanmitra_notifications');\n    if (saved) {\n      setNotifications(JSON.parse(saved));\n    }\n  }, []);\n\n  // Save to localStorage\n  useEffect(() => {\n    localStorage.setItem('kisanmitra_notifications', JSON.stringify(notifications));\n  }, [notifications]);\n\n  const filteredNotifications = notifications\n    .filter(n => selectedFilter === 'all' || \n      (selectedFilter === 'unread' && n.unread) ||\n      (selectedFilter === 'actionable' && n.actionable))\n    .filter(n => n.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      n.message.toLowerCase().includes(searchTerm.toLowerCase()));\n\n  const groupedNotifications = filteredNotifications.reduce((groups, notification) => {\n    const group = notification.date;\n    if (!groups[group]) {\n      groups[group] = [];\n    }\n    groups[group].push(notification);\n    return groups;\n  }, {} as Record<string, Notification[]>);\n\n  const handleMarkAsRead = (id: number) => {\n    setNotifications(prev => \n      prev.map(n => n.id === id ? { ...n, unread: false } : n)\n    );\n  };\n\n  const handleMarkAllRead = () => {\n    setNotifications(prev => prev.map(n => ({ ...n, unread: false })));\n  };\n\n  const handleClearAll = () => {\n    setNotifications([]);\n  };\n\n  const handleNotificationAction = (notificationId: number, action: string) => {\n    console.log(`Action \"${action}\" for notification ${notificationId}`);\n    // Handle different actions\n    switch (action) {\n      case 'track':\n        navigate('/orders');\n        break;\n      case 'market':\n        navigate('/market-prices');\n        break;\n      case 'weather':\n        navigate('/weather');\n        break;\n      case 'complete':\n        handleMarkAsRead(notificationId);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const unreadCount = notifications.filter(n => n.unread).length;\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white border-b border-gray-200 sticky top-0 z-40\">\n        <div className=\"flex items-center justify-between px-4 py-4\">\n          <div className=\"flex items-center space-x-3\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => navigate(-1)}\n              className=\"p-2 hover:bg-gray-100 rounded-full\"\n            >\n              <ArrowLeft className=\"w-5 h-5\" />\n            </Button>\n            <div>\n              <h1 className=\"text-xl font-bold text-gray-900\">Notifications</h1>\n              {unreadCount > 0 && (\n                <p className=\"text-sm text-gray-500\">{unreadCount} unread</p>\n              )}\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleMarkAllRead}\n              className=\"text-green-600 hover:text-green-700 hover:bg-green-50\"\n            >\n              <CheckCheck className=\"w-4 h-4 mr-1\" />\n              Mark All Read\n            </Button>\n            \n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" size=\"sm\" className=\"p-2\">\n                  <MoreVertical className=\"w-5 h-5\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\">\n                <DropdownMenuItem onClick={handleClearAll} className=\"text-red-600\">\n                  <Trash2 className=\"w-4 h-4 mr-2\" />\n                  Clear All\n                </DropdownMenuItem>\n                <DropdownMenuItem>\n                  <Settings className=\"w-4 h-4 mr-2\" />\n                  Notification Settings\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </div>\n\n        {/* Search and Filters */}\n        <div className=\"px-4 pb-4 space-y-3\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n            <Input\n              placeholder=\"Search notifications...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10 bg-gray-50 border-gray-200\"\n            />\n          </div>\n          \n          <div className=\"flex space-x-2\">\n            {['all', 'unread', 'actionable'].map((filter) => (\n              <Button\n                key={filter}\n                variant={selectedFilter === filter ? 'default' : 'outline'}\n                size=\"sm\"\n                onClick={() => setSelectedFilter(filter)}\n                className={selectedFilter === filter ? 'bg-green-600 hover:bg-green-700' : 'hover:bg-green-50 hover:text-green-700 hover:border-green-200'}\n              >\n                {filter === 'all' && 'All'}\n                {filter === 'unread' && `Unread ${unreadCount > 0 ? `(${unreadCount})` : ''}`}\n                {filter === 'actionable' && 'Action Required'}\n              </Button>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {/* Notifications List */}\n      <div className=\"pb-6\">\n        {Object.keys(groupedNotifications).length === 0 ? (\n          <div className=\"text-center py-12\">\n            <Bell className=\"w-16 h-16 text-gray-300 mx-auto mb-4\" />\n            <h2 className=\"text-xl font-semibold text-gray-600 mb-2\">No notifications found</h2>\n            <p className=\"text-gray-500\">Try adjusting your search or filters</p>\n          </div>\n        ) : (\n          Object.entries(groupedNotifications).map(([date, groupNotifications]) => (\n            <div key={date} className=\"mb-6\">\n              {/* Date Header */}\n              <div className=\"px-4 py-2\">\n                <h3 className=\"text-sm font-semibold text-gray-500 uppercase tracking-wide\">\n                  {date === 'today' ? 'Today' : date === 'yesterday' ? 'Yesterday' : date}\n                </h3>\n              </div>\n              \n              {/* Notifications in this group */}\n              <div className=\"bg-white\">\n                {groupNotifications.map((notification, index) => (\n                  <div\n                    key={notification.id}\n                    className={`px-4 py-4 ${index !== groupNotifications.length - 1 ? 'border-b border-gray-100' : ''} ${\n                      notification.unread ? 'bg-green-50/30' : 'bg-white'\n                    } hover:bg-gray-50 transition-colors cursor-pointer`}\n                    onClick={() => handleMarkAsRead(notification.id)}\n                  >\n                    <div className=\"flex items-start space-x-3\">\n                      <div className={`w-12 h-12 ${notification.bgColor} rounded-full flex items-center justify-center flex-shrink-0`}>\n                        {React.createElement(notification.icon, { className: `w-6 h-6 ${notification.iconColor}` })}\n                      </div>\n                      \n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"flex items-start justify-between mb-1\">\n                          <h4 className=\"font-semibold text-gray-900 text-base\">\n                            {notification.title}\n                          </h4>\n                          <div className=\"flex items-center space-x-2 flex-shrink-0 ml-2\">\n                            <span className=\"text-sm text-gray-500\">{notification.time}</span>\n                            {notification.unread && (\n                              <div className=\"w-3 h-3 bg-green-500 rounded-full\"></div>\n                            )}\n                          </div>\n                        </div>\n                        \n                        <p className=\"text-gray-700 text-sm leading-relaxed mb-3\">\n                          {notification.message}\n                        </p>\n                        \n                        {/* Action buttons */}\n                        {notification.actionable && notification.actions && (\n                          <div className=\"flex space-x-2 mt-3\">\n                            {notification.actions.map((action, actionIndex) => (\n                              <Button\n                                key={actionIndex}\n                                variant={action.variant === 'success' ? 'default' : 'outline'}\n                                size=\"sm\"\n                                onClick={(e) => {\n                                  e.stopPropagation();\n                                  handleNotificationAction(notification.id, action.action);\n                                }}\n                                className={\n                                  action.variant === 'success'\n                                    ? 'bg-green-600 hover:bg-green-700 text-white text-xs px-3 py-1.5'\n                                    : action.variant === 'danger'\n                                    ? 'border-red-200 text-red-600 hover:bg-red-50 text-xs px-3 py-1.5'\n                                    : 'border-gray-200 text-gray-700 hover:bg-gray-50 text-xs px-3 py-1.5'\n                                }\n                              >\n                                {action.label}\n                              </Button>\n                            ))}\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          ))\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Notifications;","size_bytes":14945},"src/i18n.ts":{"content":"import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\n\nimport en from './locales/en.json';\nimport hi from './locales/hi.json';\n\nconst resources = {\n  en: {\n    translation: en\n  },\n  hi: {\n    translation: hi\n  }\n};\n\ni18n\n  // Detect user language\n  .use(LanguageDetector)\n  // Pass the i18n instance to react-i18next\n  .use(initReactI18next)\n  // Initialize i18next\n  .init({\n    resources,\n    fallbackLng: 'en',\n    debug: false,\n\n    // Language detection options\n    detection: {\n      // Order of language detection methods\n      order: ['localStorage', 'navigator', 'htmlTag'],\n      // Keys to store language in localStorage\n      lookupLocalStorage: 'i18nextLng',\n      // Cache user language\n      caches: ['localStorage'],\n    },\n\n    interpolation: {\n      escapeValue: false, // React already does escaping\n    }\n  });\n\nexport default i18n;","size_bytes":942}},"version":1}