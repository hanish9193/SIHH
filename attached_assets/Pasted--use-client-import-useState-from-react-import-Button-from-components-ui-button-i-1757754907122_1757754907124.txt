"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Slider } from "@/components/ui/slider"

export default function SoilHealthPage() {
  const [pH, setPH] = useState([7])
  const [moisture, setMoisture] = useState("medium")
  const [organicMatter, setOrganicMatter] = useState("medium")

  // Calculate soil health score based on weighted parameters
  const calculateSoilHealth = () => {
    let score = 0

    // pH scoring (40% weight) - optimal range 6.0-7.5
    const pHValue = pH[0]
    if (pHValue >= 6.0 && pHValue <= 7.5) {
      score += 40
    } else if (pHValue >= 5.5 && pHValue <= 8.0) {
      score += 30
    } else if (pHValue >= 5.0 && pHValue <= 8.5) {
      score += 20
    } else {
      score += 10
    }

    // Moisture scoring (30% weight)
    switch (moisture) {
      case "high":
        score += 30
        break
      case "medium":
        score += 25
        break
      case "low":
        score += 15
        break
    }

    // Organic matter scoring (30% weight)
    switch (organicMatter) {
      case "high":
        score += 30
        break
      case "medium":
        score += 20
        break
      case "low":
        score += 10
        break
    }

    return Math.min(score, 100)
  }

  const getRecommendations = (score: number) => {
    if (score >= 80) {
      return {
        status: "Excellent",
        color: "text-green-600",
        bgColor: "bg-green-50",
        recommendations: [
          "Maintain current soil management practices",
          "Continue regular organic matter additions",
          "Monitor pH levels quarterly",
        ],
      }
    } else if (score >= 60) {
      return {
        status: "Good",
        color: "text-blue-600",
        bgColor: "bg-blue-50",
        recommendations: [
          "Add compost to increase organic matter",
          "Consider cover cropping",
          "Test soil nutrients annually",
        ],
      }
    } else if (score >= 40) {
      return {
        status: "Fair",
        color: "text-yellow-600",
        bgColor: "bg-yellow-50",
        recommendations: [
          "Improve drainage if moisture is too high",
          "Add lime if pH is too low, sulfur if too high",
          "Increase organic matter with compost or manure",
        ],
      }
    } else {
      return {
        status: "Poor",
        color: "text-red-600",
        bgColor: "bg-red-50",
        recommendations: [
          "Conduct comprehensive soil test",
          "Consider soil amendments based on test results",
          "Implement erosion control measures",
          "Consult with agricultural extension service",
        ],
      }
    }
  }

  const soilScore = calculateSoilHealth()
  const recommendations = getRecommendations(soilScore)

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 to-blue-50 p-3 sm:p-4">
      <div className="max-w-md mx-auto space-y-4 sm:max-w-2xl">
        {/* Header */}
        <Card className="border-green-200 bg-white/90 backdrop-blur-sm">
          <CardHeader className="text-center pb-4">
            <CardTitle className="text-2xl sm:text-3xl font-bold text-green-800">üå± Soil Health Tool</CardTitle>
            <CardDescription className="text-base text-green-600">
              Quick soil quality assessment for farmers
            </CardDescription>
          </CardHeader>
        </Card>

        {/* Instructions */}
        <Card className="border-blue-200 bg-white/90 backdrop-blur-sm">
          <CardHeader className="pb-3">
            <CardTitle className="text-lg text-blue-800 flex items-center gap-2">üìã Quick Measurement Guide</CardTitle>
          </CardHeader>
          <CardContent className="space-y-3">
            <div className="space-y-3">
              <div className="p-3 bg-green-50 rounded-lg border border-green-200">
                <h3 className="font-semibold text-green-800 mb-1 text-sm">üß™ pH Level</h3>
                <p className="text-xs text-green-700 leading-relaxed">
                  Use pH strips or meter. Mix soil with water (1:1), wait 30 min, then test.
                </p>
              </div>
              <div className="p-3 bg-blue-50 rounded-lg border border-blue-200">
                <h3 className="font-semibold text-blue-800 mb-1 text-sm">üíß Moisture</h3>
                <p className="text-xs text-blue-700 leading-relaxed">
                  Squeeze test: High = drips water, Medium = holds shape, Low = crumbles apart.
                </p>
              </div>
              <div className="p-3 bg-green-50 rounded-lg border border-green-200">
                <h3 className="font-semibold text-green-800 mb-1 text-sm">üçÉ Organic Matter</h3>
                <p className="text-xs text-green-700 leading-relaxed">
                  Visual check: High = dark rich soil, Medium = some organic bits, Low = light sandy soil.
                </p>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Input Controls */}
        <Card className="border-green-200 bg-white/90 backdrop-blur-sm">
          <CardHeader className="pb-3">
            <CardTitle className="text-lg text-green-800">Enter Measurements</CardTitle>
          </CardHeader>
          <CardContent className="space-y-5">
            {/* pH Slider */}
            <div className="space-y-3">
              <label className="text-base font-semibold text-green-800 block">
                pH Level: <span className="text-green-600">{pH[0].toFixed(1)}</span>
              </label>
              <div className="px-2">
                <Slider value={pH} onValueChange={setPH} max={14} min={0} step={0.1} className="w-full h-6" />
              </div>
              <div className="flex justify-between text-xs text-gray-600 px-1">
                <span>0 Acidic</span>
                <span>7 Neutral</span>
                <span>14 Alkaline</span>
              </div>
            </div>

            {/* Moisture Level */}
            <div className="space-y-3">
              <label className="text-base font-semibold text-blue-800 block">Moisture Level</label>
              <div className="grid grid-cols-3 gap-2">
                {["low", "medium", "high"].map((level) => (
                  <Button
                    key={level}
                    variant={moisture === level ? "default" : "outline"}
                    onClick={() => setMoisture(level)}
                    className={`h-12 text-sm font-medium ${
                      moisture === level
                        ? "bg-blue-600 hover:bg-blue-700 text-white"
                        : "border-blue-300 text-blue-700 hover:bg-blue-50"
                    }`}
                  >
                    {level.charAt(0).toUpperCase() + level.slice(1)}
                  </Button>
                ))}
              </div>
            </div>

            {/* Organic Matter */}
            <div className="space-y-3">
              <label className="text-base font-semibold text-green-800 block">Organic Matter</label>
              <div className="grid grid-cols-3 gap-2">
                {["low", "medium", "high"].map((level) => (
                  <Button
                    key={level}
                    variant={organicMatter === level ? "default" : "outline"}
                    onClick={() => setOrganicMatter(level)}
                    className={`h-12 text-sm font-medium ${
                      organicMatter === level
                        ? "bg-green-600 hover:bg-green-700 text-white"
                        : "border-green-300 text-green-700 hover:bg-green-50"
                    }`}
                  >
                    {level.charAt(0).toUpperCase() + level.slice(1)}
                  </Button>
                ))}
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Results */}
        <Card className={`border-2 ${recommendations.bgColor} backdrop-blur-sm`}>
          <CardHeader className="pb-3">
            <CardTitle className="text-xl text-center">
              <span className={recommendations.color}>Score: {soilScore}/100</span>
            </CardTitle>
            <CardDescription className="text-center">
              <span className={`font-semibold text-base ${recommendations.color}`}>
                {recommendations.status} Soil Health
              </span>
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="w-full bg-gray-200 rounded-full h-6 overflow-hidden">
              <div
                className={`h-full transition-all duration-500 ${
                  soilScore >= 80
                    ? "bg-green-500"
                    : soilScore >= 60
                      ? "bg-blue-500"
                      : soilScore >= 40
                        ? "bg-yellow-500"
                        : "bg-red-500"
                }`}
                style={{ width: `${soilScore}%` }}
              />
            </div>

            <div>
              <h3 className={`text-base font-semibold mb-3 ${recommendations.color}`}>üéØ Action Steps:</h3>
              <ul className="space-y-2">
                {recommendations.recommendations.slice(0, 3).map((rec, index) => (
                  <li key={index} className="flex items-start gap-2">
                    <span className="text-green-600 mt-0.5 text-sm">‚Ä¢</span>
                    <span className="text-gray-700 text-sm leading-relaxed">{rec}</span>
                  </li>
                ))}
              </ul>
            </div>
          </CardContent>
        </Card>

        {/* Footer */}
        <Card className="border-blue-200 bg-white/90 backdrop-blur-sm">
          <CardContent className="pt-4">
            <p className="text-center text-xs text-gray-600 leading-relaxed">
              üí° <strong>Tip:</strong> Test soil 2-3 times yearly for best crop results. Contact your local agricultural
              office for detailed analysis.
            </p>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}
